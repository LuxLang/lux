... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" equivalence (.only Equivalence)]
    ["[0]" monoid (.only Monoid)]]
   [control
    ["<>" projection]
    ["[0]" try]]
   [data
    ["[0]" binary
     ["[1]F" \\injection (.only Injection)]]]
   [math
    ["[0]" number (.only hex)
     ["[0]" i64]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]
    [type
     ["[0]" nominal]]]]]
 ["[0]" //
  [encoding
   ["[1][0]" unsigned]]])

(nominal.every .public (Modifier of)
  //unsigned.U2

  (the .public code
    (-> (Modifier Any)
        //unsigned.U2)
    (|>> nominal.representation))

  (the .public equivalence
    (for_any (_ of)
      (Equivalence (Modifier of)))
    (implementation
     (the (= expected actual)
       (of //unsigned.equivalence =
           (nominal.representation expected)
           (nominal.representation actual)))))

  (the !abstraction
    (template (_ value)
      [(|> value
           //unsigned.u2
           try.trusted
           nominal.abstraction)]))

  (the !representation
    (template (_ value)
      [(|> value
           nominal.representation
           //unsigned.value)]))

  (the .public (has? sub super)
    (for_any (_ of)
      (-> (Modifier of) (Modifier of)
          Bit))
    (let [sub (!representation sub)]
      (|> (!representation super)
          (i64.and sub)
          (of i64.equivalence = sub))))

  (the .public monoid
    (for_any (_ of)
      (Monoid (Modifier of)))
    (implementation
     (the identity
       (!abstraction
        (hex "0000")))
     
     (the (composite left right)
       (!abstraction
        (i64.or (!representation left)
                (!representation right))))))

  (the .public empty
    Modifier
    (of ..monoid identity))

  (the .public injection
    (for_any (_ of)
      (Injection (Modifier of)))
    (|>> nominal.representation
         //unsigned.injection/2))
  )

(the .public modifiers
  (syntax (_ [ofT <code>.any
              options (<>.many <code>.any)])
    (with_symbols [g!modifier g!code]
      (in (list (` (with_template [(, g!code) (, g!modifier)]
                     [(the (,' .public) (, g!modifier)
                        (..Modifier (, ofT))
                        (|> (number.hex (, g!code))
                            //unsigned.u2
                            try.trusted
                            as_expected))]
                     
                     (,* options))))))))
