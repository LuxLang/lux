... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" equivalence (.only Equivalence)]
    ["[0]" monoid (.only Monoid)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" binary
     ["[1]F" \\injection (.only Injection)]]]
   [math
    ["[0]" number (.only hex)
     ["[0]" i64]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" //
  [encoding
   ["[1][0]" unsigned]]])

(nominal.every .public (Modifier of)
  //unsigned.U2

  (the .public code
    (-> (Modifier Any)
        //unsigned.U2)
    (|>> nominal.representation))

  (the .public equivalence
    (for_any (_ of)
      (Equivalence (Modifier of)))
    (implementation
     (the (= expected actual)
       (by //unsigned.equivalence =
           (nominal.representation expected)
           (nominal.representation actual)))))

  (alias [=]
         ..equivalence)

  (the !abstraction
    (template.macro (_ value)
      [(|> value
           //unsigned.u2
           try.trusted
           nominal.abstraction)]))

  (the !representation
    (template.macro (_ value)
      [(|> value
           nominal.representation
           //unsigned.value)]))

  (the .public (has? sub super)
    (for_any (_ of)
      (-> (Modifier of) (Modifier of)
          Bit))
    (let [sub (!representation sub)]
      (|> (!representation super)
          (i64.and sub)
          (by i64.equivalence = sub))))

  (the .public monoid
    (for_any (_ of)
      (Monoid (Modifier of)))
    (implementation
     (the identity
       (!abstraction
        (hex "0000")))
     
     (the (composite left right)
       (!abstraction
        (i64.or (!representation left)
                (!representation right))))))

  (the .public empty
    Modifier
    (by ..monoid identity))

  (the .public as_binary
    (for_any (_ of)
      (Injection (Modifier of)))
    (|>> nominal.representation
         //unsigned.as_binary/2))
  )

(the .public modifiers
  (syntax.macro (_ [ofT <code>.any
                    options (<>.many <code>.any)])
    (with_names ['modifier 'code]
      (in (stack (` (template.with [(, 'code) (, 'modifier)]
                      [(the (,' .public) (, 'modifier)
                         (..Modifier (, ofT))
                         (|> (number.hex (, 'code))
                             //unsigned.u2
                             try.trusted
                             as_expected))]
                      
                      (,* options))))))))
