... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" equivalence (.only Equivalence)]
    ["[0]" monoid (.only Monoid)]]
   [control
    ["<>" parser]
    ["[0]" try]]
   [data
    ["[0]" binary
     ["[1]F" \\format (.only Format)]]]
   [math
    ["[0]" number (.only hex)
     ["[0]" i64]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro (.only with_symbols)
     [syntax (.only syntax)]]
    [type
     ["[0]" nominal (.except def)]]]]]
 ["[0]" //
  [encoding
   ["[1][0]" unsigned]]])

(nominal.def .public (Modifier of)
  //unsigned.U2

  (def .public code
    (-> (Modifier Any)
        //unsigned.U2)
    (|>> representation))

  (def .public equivalence
    (All (_ of)
      (Equivalence (Modifier of)))
    (implementation
     (def (= reference sample)
       (of //unsigned.equivalence =
           (representation reference)
           (representation sample)))))

  (def !abstraction
    (template (_ value)
      [(|> value
           //unsigned.u2
           try.trusted
           abstraction)]))

  (def !representation
    (template (_ value)
      [(|> value
           representation
           //unsigned.value)]))

  (def .public (has? sub super)
    (All (_ of)
      (-> (Modifier of) (Modifier of)
          Bit))
    (let [sub (!representation sub)]
      (|> (!representation super)
          (i64.and sub)
          (of i64.equivalence = sub))))

  (def .public monoid
    (All (_ of)
      (Monoid (Modifier of)))
    (implementation
     (def identity
       (!abstraction (hex "0000")))
     
     (def (composite left right)
       (!abstraction (i64.or (!representation left)
                             (!representation right))))))

  (def .public empty
    Modifier
    (of ..monoid identity))

  (def .public format
    (All (_ of)
      (Format (Modifier of)))
    (|>> representation //unsigned.format/2))
  )

(def .public modifiers
  (syntax (_ [ofT <code>.any
              options (<>.many <code>.any)])
    (with_symbols [g!modifier g!code]
      (in (list (` (with_template [(, g!code) (, g!modifier)]
                     [(def (,' .public) (, g!modifier)
                        (..Modifier (, ofT))
                        (|> (number.hex (, g!code))
                            //unsigned.u2
                            try.trusted
                            as_expected))]
                     
                     (,* options))))))))
