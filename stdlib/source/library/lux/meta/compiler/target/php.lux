... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Location Code Global Label
                static int if cond or and not comment for try global its when)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" enum]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]
     ["d" dec]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]
     ["[0]" expansion]]
    [type
     ["[0]" nominal]]]]])

(the input_separator ", ")
(the statement_suffix ";")

... Added the carriage return for better Windows compatibility.
(the \n+
  Text
  (%.message text.carriage_return text.new_line))

(the nested
  (-> Text
      Text)
  (.let [nested_new_line (%.message text.new_line text.tab)]
    (|>> (%.message \n+)
         (text.replaced text.new_line nested_new_line))))

(the block
  (-> Text
      Text)
  (|>> ..nested (text.enclosed ["{" (%.message \n+ "}")])))

(the group
  (-> Text
      Text)
  (text.enclosed ["(" ")"]))

(nominal.every .public (Code brand)
  Text

  (the .public equivalence
    (for_any (_ brand)
      (Equivalence (Code brand)))
    (implementation
     (the (= expected actual)
       (of text.equivalence = (nominal.representation expected) (nominal.representation actual)))))

  (the .public hash
    (for_any (_ brand)
      (Hash (Code brand)))
    (implementation
     (the equivalence ..equivalence)
     (the hash (|>> nominal.representation (of text.hash hash)))))

  (the .public manual
    (-> Text
        Code)
    (|>> nominal.abstraction))

  (the .public code
    (-> (Code Any)
        Text)
    (|>> nominal.representation))

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.symbol [<type> "'"])]
       (these (nominal.every (<brand> brand) Any)
              (`` (every .public <type> (|> Any <brand> (,, (template.spliced <super>+)))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.symbol [<type> "'"])]
       (these (nominal.every .public <brand> Any)
              (`` (every .public <type> (|> <brand> (,, (template.spliced <super>+)))))))]

    [Literal [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [Constant [Location' Computation' Expression' Code]]
    [Global [Location' Computation' Expression' Code]]
    [Label [Code]]
    )

  (every .public Argument
    (Record
     [#reference? Bit
      #var Var]))

  (the .public ;
    (-> Expression
        Statement)
    (|>> nominal.representation
         (text.suffix ..statement_suffix)
         nominal.abstraction))

  (the .public var
    (-> Text
        Var)
    (|>> (%.message "$") nominal.abstraction))

  (template.with [<name> <type>]
    [(the .public <name>
       (-> Text
           <type>)
       (|>> nominal.abstraction))]

    [constant Constant]
    [label Label]
    )

  (the .public (set_label label)
    (-> Label
        Statement)
    (nominal.abstraction
     (%.message (nominal.representation label) ":")))

  (the .public (go_to label)
    (-> Label
        Statement)
    (nominal.abstraction
     (%.message "goto " (nominal.representation label) ..statement_suffix)))

  (the .public null
    Literal
    (nominal.abstraction
     "NULL"))

  (the .public bool
    (-> Bit
        Literal)
    (|>> (pipe.when
           #0 "false"
           #1 "true")
         nominal.abstraction))

  (the .public int
    (-> Int
        Literal)
    (.let [to_hex (of n.hex injection)]
      (|>> .natural
           to_hex
           (%.message "0x")
           nominal.abstraction)))

  (the .public float
    (-> Dec
        Literal)
    (|>> (pipe.cond [(d.= d.positive_infinity)]
                    [(pipe.new "+INF" [])]
                    
                    [(d.= d.negative_infinity)]
                    [(pipe.new "-INF" [])]
                    
                    [(d.= d.not_a_number)]
                    [(pipe.new "NAN" [])]
                    
                    ... else
                    [%.dec])
         nominal.abstraction))

  (the safe
    (-> Text
        Text)
    (`` (|>> (,, (template.with [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (%.message "\" text.double_quote)]
                   ["$" "\$"]
                   ))
             )))

  (the .public string
    (-> Text
        Literal)
    (|>> ..safe
         (text.enclosed [text.double_quote text.double_quote])
         nominal.abstraction))

  (the arguments
    (-> (List Expression)
        Text)
    (|>> (list#each ..code) (text.interposed ..input_separator) ..group))

  (the .public (apply args func)
    (-> (List Expression) Expression
        Computation)
    (|> (%.message (nominal.representation func) (..arguments args))
        nominal.abstraction))

  ... TODO: Remove when no longer using JPHP.
  (the .public (apply' args func)
    (-> (List Expression) Expression
        Computation)
    (apply (list.partial func args) (..constant "call_user_func")))

  (the parameters
    (-> (List Argument)
        Text)
    (|>> (list#each (function (_ [reference? var])
                      (.if reference?
                        (%.message "&" (nominal.representation var))
                        (nominal.representation var))))
         (text.interposed ..input_separator)
         ..group))

  (template.with [<name> <reference?>]
    [(the .public <name>
       (-> Var
           Argument)
       (|>> [<reference?>]))]

    [parameter #0]
    [reference #1]
    )

  (the .public (closure uses arguments body!)
    (-> (List Argument) (List Argument) Statement
        Literal)
    (let [uses (.when uses
                 {.#End}
                 ""

                 _
                 (%.message "use " (..parameters uses)))]
      (|> (%.message "function " (..parameters arguments)
                     " " uses " "
                     (..block (nominal.representation body!)))
          ..group
          nominal.abstraction)))

  (the arity_inputs
    (syntax.macro (_ [arity <code>.natural])
      (in (.when arity
            0 (.list)
            _ (|> (-- arity)
                  (enum.range n.enum 0)
                  (list#each (|>> %.natural code.local)))))))

  (the arity_types
    (syntax.macro (_ [arity <code>.natural])
      (in (list.repeated arity (` ..Expression)))))

  (template.with [<arity> <function>+]
    [(expansion.let [<apply> (template.symbol ["apply/" <arity>])
                     <inputs> (arity_inputs <arity>)
                     <types> (arity_types <arity>)
                     <definitions> (template.spliced <function>+)]
       (these (the .public (<apply> function [<inputs>])
                (-> Expression [<types>]
                    Computation)
                (..apply (.list <inputs>) function))

              (template.with [<function>]
                [(`` (the .public (,, (template.symbol [<function> "/" <arity>]))
                       (<apply> (..constant <function>))))]

                <definitions>)))]

    [0
     [["func_num_args"]
      ["func_get_args"]
      ["time"]
      ["phpversion"]]]

    [1
     [["isset"]
      ["var_dump"]
      ["is_null"]
      ["empty"]
      ["count"]
      ["array_pop"]
      ["array_reverse"]
      ["intval"]
      ["floatval"]
      ["strval"]
      ["ord"]
      ["chr"]
      ["print"]
      ["exit"]
      ["iconv_strlen"] ["strlen"]
      ["log"]
      ["ceil"]
      ["floor"]
      ["is_nan"]]]

    [2
     [["intdiv"]
      ["fmod"]
      ["number_format"]
      ["array_key_exists"]
      ["call_user_func_array"]
      ["array_slice"]
      ["array_push"]
      ["pack"]
      ["unpack"]
      ["iconv_strpos"] ["strpos"]
      ["pow"]
      ["max"]]]

    [3
     [["array_fill"]
      ["array_slice"]
      ["array_splice"]
      ["iconv"]
      ["iconv_strpos"] ["strpos"]
      ["iconv_substr"] ["substr"]]]
    )

  (the .public (key_value key value)
    (-> Expression Expression
        Expression)
    (nominal.abstraction
     (%.message (nominal.representation key) " => " (nominal.representation value))))

  (the .public (array/* values)
    (-> (List Expression)
        Literal)
    (|> values
        (list#each ..code)
        (text.interposed ..input_separator)
        ..group
        (%.message "array")
        nominal.abstraction))

  (the .public (array_merge/+ required optionals)
    (-> Expression (List Expression)
        Computation)
    (..apply (list.partial required optionals) (..constant "array_merge")))

  (the .public (array/** kvs)
    (-> (List [Expression Expression])
        Literal)
    (|> kvs
        (list#each (function (_ [key value])
                     (%.message (nominal.representation key) " => " (nominal.representation value))))
        (text.interposed ..input_separator)
        ..group
        (%.message "array")
        nominal.abstraction))

  (the .public (new constructor inputs)
    (-> Constant (List Expression)
        Computation)
    (|> (%.message "new " (nominal.representation constructor) (arguments inputs))
        nominal.abstraction))

  (the .public (its field object)
    (-> Text Expression
        Computation)
    (|> (%.message (nominal.representation object) "->" field)
        nominal.abstraction))

  (the .public (do method inputs object)
    (-> Text (List Expression) Expression
        Computation)
    (|> (%.message (nominal.representation (..its method object))
                   (..arguments inputs))
        nominal.abstraction))

  (the .public (item idx array)
    (-> Expression Expression
        Access)
    (|> (%.message (nominal.representation array) "[" (nominal.representation idx) "]")
        nominal.abstraction))

  (the .public (global name)
    (-> Text
        Global)
    (|> (..var "GLOBALS")
        (..item (..string name))
        nominal.transmutation))

  (the .public (? test then else)
    (-> Expression Expression Expression
        Computation)
    (|> (%.message (..group (nominal.representation test)) " ? "
                   (..group (nominal.representation then)) " : "
                   (..group (nominal.representation else)))
        ..group
        nominal.abstraction))

  (template.with [<name> <op>]
    [(the .public (<name> parameter subject)
       (-> Expression Expression
           Computation)
       (|> (%.message (nominal.representation subject) " " <op> " " (nominal.representation parameter))
           ..group
           nominal.abstraction))]

    [or      "||"]
    [and     "&&"]
    [==      "=="]
    [===     "==="]
    [<       "<"]
    [<=      "<="]
    [>       ">"]
    [>=      ">="]
    [+       "+"]
    [-       "-"]
    [*       "*"]
    [/       "/"]
    [%       "%"]
    [bit_or  "|"]
    [bit_and "&"]
    [bit_xor "^"]
    [bit_shl "<<"]
    [bit_shr ">>"]
    [concat  "."]
    )

  (template.with [<unary> <name>]
    [(the .public <name>
       (-> Computation
           Computation)
       (|>> nominal.representation
            (%.message <unary>)
            nominal.abstraction))]

    ["!" not]
    ["~" bit_not]
    ["-" opposite]
    )

  (the .public (set var value)
    (-> Location Expression
        Computation)
    (|> (%.message (nominal.representation var) " = " (nominal.representation value))
        ..group
        nominal.abstraction))

  (the .public (set! var value)
    (-> Location Expression
        Statement)
    (nominal.abstraction
     (%.message (nominal.representation var) " = " (nominal.representation value) ";")))

  (the .public (set? var)
    (-> Var
        Computation)
    (..apply/1 [var] (..constant "isset")))

  (template.with [<name> <modifier>]
    [(the .public <name>
       (-> Var
           Statement)
       (|>> nominal.representation
            (%.message <modifier> " ")
            (text.suffix ..statement_suffix)
            nominal.abstraction))]

    [define_global "global"]
    )

  (template.with [<name> <modifier> <location>]
    [(the .public (<name> location value)
       (-> <location> Expression
           Statement)
       (nominal.abstraction
        (%.message <modifier> " " (nominal.representation location)
                   " = " (nominal.representation value)
                   ..statement_suffix)))]

    [define_static   "static" Var]
    [define_constant "const"  Constant]
    )

  (the .public (if test then! else!)
    (-> Expression Statement Statement
        Statement)
    (nominal.abstraction
     (%.message "if" (..group (nominal.representation test)) " "
                (..block (nominal.representation then!))
                " else "
                (..block (nominal.representation else!)))))

  (the .public (when test then!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "if" (..group (nominal.representation test)) " "
                (..block (nominal.representation then!)))))

  (the .public (then pre! post!)
    (-> Statement Statement
        Statement)
    (nominal.abstraction
     (%.message (nominal.representation pre!)
                \n+
                (nominal.representation post!))))

  (the .public (while test body!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "while" (..group (nominal.representation test)) " "
                (..block (nominal.representation body!)))))

  (the .public (do_while test body!)
    (-> Expression Statement
        Statement)
    (nominal.abstraction
     (%.message "do " (..block (nominal.representation body!))
                " while" (..group (nominal.representation test))
                ..statement_suffix)))

  (the .public (for_each array value body!)
    (-> Expression Var Statement
        Statement)
    (nominal.abstraction
     (%.message "foreach(" (nominal.representation array)
                " as " (nominal.representation value)
                ") " (..block (nominal.representation body!)))))

  (every .public Except
    (Record
     [#class Constant
      #exception Var
      #handler Statement]))

  (the (catch except)
    (-> Except
        Text)
    (let [declaration (%.message (nominal.representation (.its #class except))
                                 " " (nominal.representation (.its #exception except)))]
      (%.message "catch" (..group declaration) " "
                 (..block (nominal.representation (.its #handler except))))))
  
  (the .public (try body! excepts)
    (-> Statement (List Except)
        Statement)
    (nominal.abstraction
     (%.message "try " (..block (nominal.representation body!))
                \n+
                (|> excepts
                    (list#each catch)
                    (text.interposed \n+)))))

  (template.with [<name> <keyword>]
    [(the .public <name>
       (-> Expression
           Statement)
       (|>> nominal.representation
            (%.message <keyword> " ")
            (text.suffix ..statement_suffix)
            nominal.abstraction))]

    [throw  "throw"]
    [return "return"]
    [echo   "echo"]
    )

  (the .public (define name value)
    (-> Constant Expression
        Expression)
    (..apply/2 (..constant "define")
               [(|> name nominal.representation ..string)
                value]))

  (the .public (define_function name arguments body!)
    (-> Constant (List Argument) Statement
        Statement)
    (nominal.abstraction
     (%.message "function " (nominal.representation name)
                (..parameters arguments)
                " "
                (..block (nominal.representation body!)))))

  (template.with [<name> <keyword>]
    [(the .public <name>
       Statement
       (|> <keyword>
           (text.suffix ..statement_suffix)
           nominal.abstraction))]

    [break "break"]
    [continue "continue"]
    )

  (the .public splat
    (-> Expression
        Expression)
    (|>> nominal.representation
         (%.message "...")
         nominal.abstraction))
  )

(the .public (cond clauses else!)
  (-> (List [Expression Statement]) Statement
      Statement)
  (list#mix (function (_ [test then!] next!)
              (..if test then! next!))
            else!
            (list.reversed clauses)))

(the .public command_line_arguments
  Var
  (..var "argv"))
