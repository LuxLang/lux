... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Location Code
                static int if function or and not comment local global symbol its when)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" enum]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]
     ["d" dec]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]]
    [type
     ["[0]" nominal]]]]])

(the input_separator ", ")
(the statement_suffix ";")

... Added the carriage return for better Windows compatibility.
(the \n+
  Text
  (%.message text.carriage_return text.new_line))

(the nested
  (-> Text Text)
  (.let [nested_new_line (%.message text.new_line text.tab)]
    (|>> (%.message \n+)
         (text.replaced text.new_line nested_new_line))))

(nominal.every .public (Code brand)
  Text

  (the .public equivalence
    (for_any (_ brand) (Equivalence (Code brand)))
    (implementation
     (the (= expected actual)
       (of text.equivalence = (nominal.representation expected) (nominal.representation actual)))))

  (the .public manual
    (-> Text Code)
    (|>> nominal.abstraction))

  (the .public code
    (-> (Code Any) Text)
    (|>> nominal.representation))

  (with_template [<type> <super>+]
    [(with_expansions [<brand> (template.symbol [<type> "'"])]
       (these (nominal.every (<brand> brand) Any)
              (`` (every .public <type> (|> Any <brand> (,, (template.spliced <super>+)))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [LVar [Var' Location' Computation' Expression' Code]]
    [Statement [Code]]
    )

  (with_template [<type> <super>+]
    [(with_expansions [<brand> (template.symbol [<type> "'"])]
       (these (nominal.every <brand> Any)
              (`` (every .public <type> (|> <brand> (,, (template.spliced <super>+)))))))]

    [Literal [Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [CVar [Var' Location' Computation' Expression' Code]]
    [GVar [Var' Location' Computation' Expression' Code]]
    [IVar [Var' Location' Computation' Expression' Code]]
    [SVar [Var' Location' Computation' Expression' Code]]
    [LVar* [LVar' Var' Location' Computation' Expression' Code]]
    [LVar** [LVar' Var' Location' Computation' Expression' Code]]
    )

  (with_template [<var> <prefix> <constructor>]
    [(the .public <constructor>
       (-> Text <var>)
       (|>> (%.message <prefix>)
            nominal.abstraction))]

    [LVar "l_" local]
    [CVar "C_" constant]
    [GVar "$"  global]
    [IVar "@"  instance]
    [SVar "@@" static]
    )

  (with_template [<var> <prefix> <modifier> <unpacker>]
    [(with_template [<name> <input> <output>]
       [(the .public <name>
          (-> <input> <output>)
          (|>> nominal.representation
               (%.message <prefix>)
               nominal.abstraction))]

       [<modifier> LVar <var>]
       [<unpacker> Expression Computation]
       )]

    [LVar*  "*"  variadic    splat]
    [LVar** "**" variadic_kv double_splat]
    )

  (with_template [<ruby_name> <lux_name>]
    [(the .public <lux_name>
       GVar
       (..global <ruby_name>))]

    ["!" latest_error_message]
    ["@" latest_error_location]
    ["_" last_string_read]
    ["." last_line_number_read]
    ["&" last_string_matched]
    ["~" last_regexp_match]
    ["=" case_insensitivity_flag]
    ["/" input_record_separator]
    ["\" output_record_separator]
    ["0" script_name]
    ["$" process_id]
    ["?" exit_status]

    ["stdout" stdout]
    ["stdin" stdin]
    )

  (with_template [<ruby_name> <lux_name>]
    [(the .public <lux_name>
       CVar
       (..manual <ruby_name>))]

    ["ARGV" command_line_arguments]
    )

  (the .public multi
    (-> (List Expression) Expression)
    (|>> (list#each ..code)
         (text.interposed ..input_separator)
         nominal.abstraction))

  (the .public nil
    Literal
    (nominal.abstraction
     "nil"))

  (the .public bool
    (-> Bit Literal)
    (|>> (pipe.when
           #0 "false"
           #1 "true")
         nominal.abstraction))

  (the safe
    (-> Text Text)
    (`` (|>> (,, (with_template [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (%.message "\" text.double_quote)]
                   ))
             )))

  (with_template [<injection> <name> <type> <prep>]
    [(the .public <name>
       (-> <type> Literal)
       (|>> <prep>
            <injection>
            nominal.abstraction))]

    [%.int  int    Int  (<|)]
    [%.text string Text ..safe]
    [(<|)   symbol Text (%.message ":")]
    )

  (the .public float
    (-> Dec Literal)
    (|>> (pipe.cond [(d.= d.positive_infinity)]
                    [(pipe.new "(+1.0/0.0)" [])]
                    
                    [(d.= d.negative_infinity)]
                    [(pipe.new "(-1.0/0.0)" [])]
                    
                    [(d.= d.not_a_number)]
                    [(pipe.new "(+0.0/-0.0)" [])]

                    ... else
                    [%.dec])
         nominal.abstraction))

  (the .public (array_range from to array)
    (-> Expression Expression Expression Computation)
    (|> (%.message (nominal.representation from) ".." (nominal.representation to))
        (text.enclosed ["[" "]"])
        (%.message (nominal.representation array))
        nominal.abstraction))

  (the .public array
    (-> (List Expression) Computation)
    (|>> (list#each (|>> nominal.representation (text.suffix ..input_separator)))
         text.together
         (text.enclosed ["[" "]"])
         nominal.abstraction))

  (the .public hash
    (-> (List [Expression Expression]) Computation)
    (|>> (list#each (.function (_ [k v])
                      (%.message (nominal.representation k) " => " (nominal.representation v) ..input_separator)))
         text.together
         (text.enclosed ["{" "}"])
         nominal.abstraction))

  (the (control_structure content)
    (-> Text Text)
    (%.message content
               \n+ "end" ..statement_suffix))

  (every .public Block
    (Record
     [#parameters (List Var)
      #body Statement]))

  (the (block it)
    (-> Block Text)
    (|> (%.message (|> (.its #parameters it)
                       (list#each (|>> nominal.representation))
                       (text.interposed ..input_separator)
                       (text.enclosed' "|"))
                   (..nested (nominal.representation (.its #body it))))
        (text.enclosed ["{" "}"])))

  (the .public (apply arguments block func)
    (-> (List Expression) (Maybe Block) Expression Computation)
    (let [arguments (|> arguments
                        (list#each (|>> nominal.representation))
                        (text.interposed ..input_separator)
                        (text.enclosed ["(" ")"]))
          block (.when block
                  {.#None}
                  ""
                  
                  {.#Some [inputs block]}
                  (|> block
                      nominal.representation
                      nested
                      control_structure
                      (%.message " do "
                                 (|> inputs
                                     (list#each (|>> nominal.representation))
                                     (text.interposed ..input_separator)
                                     (text.enclosed' "|")))))]
      (nominal.abstraction
       (%.message (nominal.representation func) arguments block))))

  (the .public (its field object)
    (-> Text Expression Access)
    (nominal.abstraction
     (%.message (nominal.representation object) "." field)))

  (the .public (item idx array)
    (-> Expression Expression Access)
    (|> (nominal.representation idx)
        (text.enclosed ["[" "]"])
        (%.message (nominal.representation array))
        nominal.abstraction))

  (the .public (? test then else)
    (-> Expression Expression Expression Computation)
    (|> (%.message (nominal.representation test) " ? "
                   (nominal.representation then) " : "
                   (nominal.representation else))
        (text.enclosed ["(" ")"])
        nominal.abstraction))

  (the .public statement
    (-> Expression Statement)
    (|>> nominal.representation
         (text.suffix ..statement_suffix)
         nominal.abstraction))

  (the .public (then pre! post!)
    (-> Statement Statement Statement)
    (nominal.abstraction
     (%.message (nominal.representation pre!)
                \n+
                (nominal.representation post!))))

  (the .public (set vars value)
    (-> (List Location) Expression Statement)
    (nominal.abstraction
     (%.message (|> vars
                    (list#each (|>> nominal.representation))
                    (text.interposed ..input_separator))
                " = " (nominal.representation value) ..statement_suffix)))

  (the .public (if test then! else!)
    (-> Expression Statement Statement Statement)
    (<| nominal.abstraction
        ..control_structure
        (%.message "if " (nominal.representation test)
                   (..nested (nominal.representation then!))
                   \n+ "else"
                   (..nested (nominal.representation else!)))))

  (with_template [<name> <control_structure>]
    [(the .public (<name> test then!)
       (-> Expression Statement Statement)
       (<| nominal.abstraction
           ..control_structure
           (%.message <control_structure> " " (nominal.representation test)
                      (..nested (nominal.representation then!)))))]

    [when "if"]
    [while "while"]
    )

  (the .public (for_in var array iteration!)
    (-> LVar Expression Statement Statement)
    (<| nominal.abstraction
        ..control_structure
        (%.message "for " (nominal.representation var)
                   " in " (nominal.representation array)
                   " do "
                   (..nested (nominal.representation iteration!)))))

  (every .public Rescue
    (Record
     [#classes (List Text)
      #exception LVar
      #rescue Statement]))

  (the .public (begin body! rescues)
    (-> Statement (List Rescue) Statement)
    (<| nominal.abstraction
        ..control_structure
        (%.message "begin" (..nested (nominal.representation body!))
                   (|> rescues
                       (list#each (.function (_ [classes exception rescue])
                                    (%.message \n+ "rescue " (text.interposed ..input_separator classes)
                                               " => " (nominal.representation exception)
                                               (..nested (nominal.representation rescue)))))
                       (text.interposed \n+)))))

  (the .public (catch expectation block)
    (-> Expression Block Expression)
    (<| nominal.abstraction
        (%.message "catch(" (nominal.representation expectation) ") "
                   (..block block))))

  (the .public (return value)
    (-> Expression Statement)
    (nominal.abstraction
     (%.message "return " (nominal.representation value) ..statement_suffix)))

  (the .public (raise message)
    (-> Expression Expression)
    (nominal.abstraction
     (%.message "raise " (nominal.representation message))))

  (with_template [<name> <keyword>]
    [(the .public <name>
       Statement
       (|> <keyword>
           (text.suffix ..statement_suffix)
           nominal.abstraction))]

    [next "next"]
    [redo "redo"]
    [break "break"]
    )

  (the .public initialize
    LVar
    (..manual "initialize"))

  (the .public (function name args body!)
    (-> LVar (List LVar) Statement Statement)
    (<| nominal.abstraction
        ..control_structure
        (%.message "def " (nominal.representation name)
                   (|> args
                       (list#each (|>> nominal.representation))
                       (text.interposed ..input_separator)
                       (text.enclosed ["(" ")"]))
                   (..nested (nominal.representation body!)))))

  (the .public (lambda name block)
    (-> (Maybe LVar) Block Literal)
    (let [proc (%.message "lambda " (..block block))]
      (|> (.when name
            {.#None}
            proc
            
            {.#Some name}
            (%.message (nominal.representation name) " = " proc))
          (text.enclosed ["(" ")"])
          nominal.abstraction)))

  (with_template [<op> <name>]
    [(the .public (<name> parameter subject)
       (-> Expression Expression Computation)
       (nominal.abstraction
        (%.message "(" (nominal.representation subject) " " <op> " " (nominal.representation parameter) ")")))]

    ["==" =]
    [ "<" <]
    ["<=" <=]
    [ ">" >]
    [">=" >=]

    [ "+" +]
    [ "-" -]
    [ "*" *]
    [ "/" /]
    [ "%" %]
    ["**" pow]

    ["||" or]
    ["&&" and]
    [ "|" bit_or]
    [ "&" bit_and]
    [ "^" bit_xor]

    ["<<" bit_shl]
    [">>" bit_shr]
    )

  (with_template [<unary> <name>]
    [(the .public (<name> subject)
       (-> Expression Computation)
       (nominal.abstraction
        (%.message "(" <unary> (nominal.representation subject) ")")))]

    ["!" not]
    ["~" bit_not]
    ["-" opposite]
    )

  (the .public (comment commentary on)
    (for_any (_ brand)
      (-> Text (Code brand)
          (Code brand)))
    (nominal.abstraction
     (%.message "# "  (..safe commentary) \n+
                (nominal.representation on))))

  (with_template [<name>]
    [(`` (the .public ((,, (template.symbol [<name> "/*"])) attributes)
           (-> (List Text) Statement)
           (..statement
            (..apply (list#each ..string attributes) {.#None} (..manual <name>)))))]

    ["attr_reader"]
    ["attr_writer"]
    ["attr_accessor"])
  )

(the .public (do method arguments block object)
  (-> Text (List Expression) (Maybe Block) Expression Computation)
  (|> object
      (..its method)
      (..apply arguments block)))

(the .public new
  (-> (List Expression) (Maybe Block) Expression Computation)
  (..do "new"))

(the .public (class definition)
  (-> Block Computation)
  (|> (..manual "Class")
      (..new (list) {.#Some definition})))

(the .public (module definition)
  (-> Block Computation)
  (|> (..manual "Module")
      (..new (list) {.#Some definition})))

(the .public (apply_lambda args lambda)
  (-> (List Expression) Expression Computation)
  (|> lambda
      (..do "call" args {.#None})))

(the arity_inputs
  (syntax (_ [arity <code>.nat])
    (in (.when arity
          0 (.list)
          _ (|> (-- arity)
                (enum.range n.enum 0)
                (list#each (|>> %.nat code.local)))))))

(the arity_types
  (syntax (_ [arity <code>.nat])
    (in (list.repeated arity (` ..Expression)))))

(with_template [<arity> <function>+]
  [(with_expansions [<apply> (template.symbol ["apply/" <arity>])
                     <inputs> (arity_inputs <arity>)
                     <types> (arity_types <arity>)
                     <definitions> (template.spliced <function>+)]
     (with_template [<function>]
       [(`` (the .public ((,, (template.symbol [<function> "/" <arity>])) <inputs>)
              (-> <types> Computation)
              (..apply (.list <inputs>) {.#None} (..manual <function>))))]

       <definitions>))]

  [0
   [["gets"]
    ["caller"]]]

  [1
   [["print"]
    ["include"]
    ["extend"]
    ["require"]
    ["defined?"]]]

  [2
   [["print"]
    ["alias_method"]]]
  )

(the .public (throw/1 error)
  (-> Expression Statement)
  (..statement (..apply (list error) {.#None} (..manual "throw"))))

(the .public (throw/2 tag value)
  (-> Expression Expression Statement)
  (..statement (..apply (list tag value) {.#None} (..manual "throw"))))

(the .public (class_variable_set var value object)
  (-> SVar Expression Expression Computation)
  (..do "class_variable_set" (list (..string (..code var)) value) {.#None} object))

(the .public (class_variable_get var object)
  (-> SVar Expression Computation)
  (..do "class_variable_get" (list (..string (..code var))) {.#None} object))
