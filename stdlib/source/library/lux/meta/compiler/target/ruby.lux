... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Code
                static if function or and not comment local global its when)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" enum]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]
     ["d" decimal]]]
   [macro
    ["[0]" syntax]
    ["[0]" template]
    ["[0]" expansion]]
   [type
    ["[0]" nominal]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

... https://en.wikipedia.org/wiki/Delimiter
(the input_delimiter ", ")
(the statement_suffix ";")

... Added the carriage return for better Windows compatibility.
(the \n
  Text
  (text text.carriage_return text.new_line))

(the nested
  (-> Text
      Text)
  (.let [nested_new_line (text text.new_line text.tab)]
    (|>> (text \n)
         (text.replaced text.new_line nested_new_line))))

(nominal.every .public (Code brand)
  Text

  (the .public equivalence
    (for_any (_ brand)
      (Equivalence (Code brand)))
    (implementation
     (the (= expected actual)
       (by text.equivalence =
           (nominal.representation expected)
           (nominal.representation actual)))))

  (the .public manual
    (-> Text
        Code)
    (|>> nominal.abstraction))

  (the .public code
    (-> (Code Any)
        Text)
    (|>> nominal.representation))

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.name [<type> "'"])]
       (these (nominal.every (<brand> brand) Any)
              (`` (every .public <type> (|> Any <brand> (,, (template.spliced <super>+)))))))]
    
    [Expression [Code]]
    [Computation [Expression' Code]]
    [Location [Computation' Expression' Code]]
    [Var [Location' Computation' Expression' Code]]
    [LVar [Var' Location' Computation' Expression' Code]]
    [Statement [Code]]
    )

  (template.with [<type> <super>+]
    [(expansion.let [<brand> (template.name [<type> "'"])]
       (these (nominal.every <brand> Any)
              (`` (every .public <type> (|> <brand> (,, (template.spliced <super>+)))))))]

    [Literal [Computation' Expression' Code]]
    [Access [Location' Computation' Expression' Code]]
    [CVar [Var' Location' Computation' Expression' Code]]
    [GVar [Var' Location' Computation' Expression' Code]]
    [IVar [Var' Location' Computation' Expression' Code]]
    [SVar [Var' Location' Computation' Expression' Code]]
    [LVar* [LVar' Var' Location' Computation' Expression' Code]]
    [LVar** [LVar' Var' Location' Computation' Expression' Code]]
    )

  (template.with [<var> <prefix> <constructor>]
    [(the .public <constructor>
       (-> Text
           <var>)
       (|>> (text <prefix>)
            nominal.abstraction))]

    [LVar "l_" local]
    [CVar "C_" constant]
    [GVar "$"  global]
    [IVar "@"  instance]
    [SVar "@@" static]
    )

  (template.with [<var> <prefix> <modifier> <unpacker>]
    [(template.with [<name> <input> <output>]
       [(the .public <name>
          (-> <input>
              <output>)
          (|>> nominal.representation
               (text <prefix>)
               nominal.abstraction))]

       [<modifier> LVar <var>]
       [<unpacker> Expression Computation]
       )]

    [LVar*  "*"  variadic    splat]
    [LVar** "**" variadic_kv double_splat]
    )

  (template.with [<ruby_name> <lux_name>]
    [(the .public <lux_name>
       GVar
       (..global <ruby_name>))]

    ["!" latest_error_message]
    ["@" latest_error_location]
    ["_" last_string_read]
    ["." last_line_number_read]
    ["&" last_string_matched]
    ["~" last_regexp_match]
    ["=" case_insensitivity_flag]
    ["/" input_record_delimiter]
    ["\" output_record_delimiter]
    ["0" script_name]
    ["$" process_id]
    ["?" exit_status]

    ["stdout" stdout]
    ["stdin" stdin]
    )

  (template.with [<ruby_name> <lux_name>]
    [(the .public <lux_name>
       CVar
       (..manual <ruby_name>))]

    ["ARGV" command_line_arguments]
    )

  (the .public multi
    (-> (List Expression)
        Expression)
    (|>> (list#each ..code)
         (text.interposed ..input_delimiter)
         nominal.abstraction))

  (the .public nil
    Literal
    (nominal.abstraction
     "nil"))

  (the .public bool
    (-> Bit
        Literal)
    (|>> (pipe.when
           #0 "false"
           #1 "true")
         nominal.abstraction))

  (the safe
    (-> Text
        Text)
    (`` (|>> (,, (template.with [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (text "\" text.double_quote)]
                   ))
             )))

  (template.with [<injection> <name> <type> <prep>]
    [(the .public <name>
       (-> <type>
           Literal)
       (|>> <prep>
            <injection>
            nominal.abstraction))]

    [%.integer int Integer (<|)]
    [%.text string Text ..safe]
    [(<|) symbol Text (text ":")]
    )

  (the .public float
    (-> Decimal
        Literal)
    (|>> (pipe.if [(d.= d.positive_infinity)]
           [(pipe.new "(+1.0/0.0)" [])]
           
           [(d.= d.negative_infinity)]
           [(pipe.new "(-1.0/0.0)" [])]
           
           [(d.= d.not_a_number)]
           [(pipe.new "(+0.0/-0.0)" [])]

           ... else
           [%.decimal])
         nominal.abstraction))

  (the $ nominal.representation)

  (the .public (array_range from to array)
    (-> Expression Expression Expression
        Computation)
    (|> (text ($ from) ".." ($ to))
        (text.enclosed ["[" "]"])
        (text ($ array))
        nominal.abstraction))

  (the .public array
    (-> (List Expression)
        Computation)
    (|>> (list#each (|>> $ (text.suffix ..input_delimiter)))
         text.together
         (text.enclosed ["[" "]"])
         nominal.abstraction))

  (the .public hash
    (-> (List [Expression Expression])
        Computation)
    (|>> (list#each (.function (_ [k v])
                      (text ($ k) " => " ($ v) ..input_delimiter)))
         text.together
         (text.enclosed ["{" "}"])
         nominal.abstraction))

  (the (control_structure content)
    (-> Text
        Text)
    (text content
          \n "end" ..statement_suffix))

  (every .public Block
    (Record
     [#parameters (List Var)
      #body Statement]))

  (the (block it)
    (-> Block
        Text)
    (|> (text (|> (.its #parameters it)
                  (list#each ..code)
                  (text.interposed ..input_delimiter)
                  (text.enclosed' "|"))
              (..nested ($ (.its #body it))))
        (text.enclosed ["{" "}"])))

  (the .public (apply arguments block func)
    (-> (List Expression) (Maybe Block) Expression
        Computation)
    (let [arguments (|> arguments
                        (list#each ..code)
                        (text.interposed ..input_delimiter)
                        (text.enclosed ["(" ")"]))
          block (.when block
                  {.#None}
                  ""
                  
                  {.#Some [inputs block]}
                  (|> block
                      nominal.representation
                      nested
                      control_structure
                      (text " do "
                            (|> inputs
                                (list#each ..code)
                                (text.interposed ..input_delimiter)
                                (text.enclosed' "|")))))]
      (nominal.abstraction
       (text ($ func) arguments block))))

  (the .public (its field object)
    (-> Text Expression
        Access)
    (nominal.abstraction
     (text ($ object) "." field)))

  (the .public (item idx array)
    (-> Expression Expression
        Access)
    (|> ($ idx)
        (text.enclosed ["[" "]"])
        (text ($ array))
        nominal.abstraction))

  (the .public (? test then else)
    (-> Expression Expression Expression
        Computation)
    (|> (text ($ test) " ? "
              ($ then) " : "
              ($ else))
        (text.enclosed ["(" ")"])
        nominal.abstraction))

  (the .public ;
    (-> Expression
        Statement)
    (|>> nominal.representation
         (text.suffix ..statement_suffix)
         nominal.abstraction))

  (the .public (then pre! post!)
    (-> Statement Statement
        Statement)
    (nominal.abstraction
     (text ($ pre!)
           \n
           ($ post!))))

  (the .public (set vars value)
    (-> (List Location) Expression
        Expression)
    (nominal.abstraction
     (text (|> vars
               (list#each ..code)
               (text.interposed ..input_delimiter))
           " = " ($ value))))

  (the .public (if test then! else!)
    (-> Expression Statement Statement
        Statement)
    (<| nominal.abstraction
        ..control_structure
        (text "if " ($ test)
              (..nested ($ then!))
              \n "else"
              (..nested ($ else!)))))

  (the .public (case input when* else)
    (-> Expression (List [Literal Statement]) Statement
        Statement)
    (<| nominal.abstraction
        ..control_structure
        (text "case " ($ input)
              (|> when*
                  (list#each (.function (_ [when then])
                               (text \n "when " ($ when)
                                     (..nested ($ then)))))
                  (text.interposed \n))
              \n "else"
              (..nested ($ else)))))

  (template.with [<name> <control_structure>]
    [(the .public (<name> test then!)
       (-> Expression Statement
           Statement)
       (<| nominal.abstraction
           ..control_structure
           (text <control_structure> " " ($ test)
                 (..nested ($ then!)))))]

    [when "if"]
    [while "while"]
    )

  (the .public (for_in var array iteration!)
    (-> LVar Expression Statement
        Statement)
    (<| nominal.abstraction
        ..control_structure
        (text "for " ($ var)
              " in " ($ array)
              " do "
              (..nested ($ iteration!)))))

  (every .public Rescue
    (Record
     [#classes (List Text)
      #exception LVar
      #rescue Statement]))

  (the .public (begin body! rescues)
    (-> Statement (List Rescue)
        Statement)
    (<| nominal.abstraction
        ..control_structure
        (text "begin" (..nested ($ body!))
              (|> rescues
                  (list#each (.function (_ [classes exception rescue])
                               (text \n "rescue " (text.interposed ..input_delimiter classes)
                                     " => " ($ exception)
                                     (..nested ($ rescue)))))
                  (text.interposed \n)))))

  (the .public (catch expectation block)
    (-> Expression Block
        Expression)
    (<| nominal.abstraction
        (text "catch(" ($ expectation) ") "
              (..block block))))

  (the .public (return value)
    (-> Expression
        Statement)
    (nominal.abstraction
     (text "return " ($ value) ..statement_suffix)))

  (the .public (raise message)
    (-> Expression
        Expression)
    (nominal.abstraction
     (text "raise " ($ message))))

  (template.with [<name> <keyword>]
    [(the .public <name>
       Statement
       (|> <keyword>
           (text.suffix ..statement_suffix)
           nominal.abstraction))]

    [next "next"]
    [redo "redo"]
    [break "break"]
    )

  (the .public initialize
    LVar
    (..manual "initialize"))

  (the .public (function name args body!)
    (-> LVar (List LVar) Statement
        Statement)
    (<| nominal.abstraction
        ..control_structure
        (text "def " ($ name)
              (|> args
                  (list#each ..code)
                  (text.interposed ..input_delimiter)
                  (text.enclosed ["(" ")"]))
              (..nested ($ body!)))))

  (the .public (lambda name block)
    (-> (Maybe LVar) Block
        Literal)
    (let [proc (text "lambda " (..block block))]
      (|> (.when name
            {.#None}
            proc
            
            {.#Some name}
            (text ($ name) " = " proc))
          (text.enclosed ["(" ")"])
          nominal.abstraction)))

  (template.with [<op> <name>]
    [(the .public (<name> parameter subject)
       (-> Expression Expression
           Computation)
       (nominal.abstraction
        (text "(" ($ subject) " " <op> " " ($ parameter) ")")))]

    ["==" =]
    [ "<" <]
    ["<=" <=]
    [ ">" >]
    [">=" >=]

    [ "+" +]
    [ "-" -]
    [ "*" *]
    [ "/" /]
    [ "%" %]
    ["**" pow]

    ["||" or]
    ["&&" and]
    
    [ "|" bit_or]
    [ "&" bit_and]
    [ "^" bit_xor]

    ["<<" bit_shl]
    [">>" bit_shr]
    )

  (template.with [<unary> <name>]
    [(the .public (<name> subject)
       (-> Expression
           Computation)
       (nominal.abstraction
        (text "(" <unary> ($ subject) ")")))]

    ["!" not]
    ["~" bit_not]
    ["-" opposite]
    )

  (the .public (comment commentary on)
    (for_any (_ brand)
      (-> Text (Code brand)
          (Code brand)))
    (nominal.abstraction
     (text "# "  (..safe commentary) \n
           ($ on))))

  (template.with [<name>]
    [(`` (the .public ((,, (template.name [<name> "/*"])) attributes)
           (-> (List Text)
               Statement)
           (..; (..apply (list#each ..string attributes) {.#None} (..manual <name>)))))]

    ["attr_reader"]
    ["attr_writer"]
    ["attr_accessor"])
  )

(the .public (do method arguments block object)
  (-> Text (List Expression) (Maybe Block) Expression
      Computation)
  (|> object
      (..its method)
      (..apply arguments block)))

(the .public new
  (-> (List Expression) (Maybe Block) Expression
      Computation)
  (..do "new"))

(the .public (class definition)
  (-> Block
      Computation)
  (|> (..manual "Class")
      (..new (list) {.#Some definition})))

(the .public (module definition)
  (-> Block
      Computation)
  (|> (..manual "Module")
      (..new (list) {.#Some definition})))

(the .public (apply_lambda args lambda)
  (-> (List Expression) Expression
      Computation)
  (|> lambda
      (..do "call" args {.#None})))

(the arity_inputs
  (syntax.macro (_ [arity <code>.natural])
    (in (.when arity
          0 (.list)
          _ (|> (-- arity)
                (enum.range n.enum 0)
                (list#each (|>> %.natural code.local)))))))

(the arity_types
  (syntax.macro (_ [arity <code>.natural])
    (in (list.repeated arity (` ..Expression)))))

(template.with [<arity> <function>+]
  [(expansion.let [<apply> (template.name ["apply/" <arity>])
                   <inputs> (arity_inputs <arity>)
                   <types> (arity_types <arity>)
                   <definitions> (template.spliced <function>+)]
     (template.with [<function>]
       [(`` (the .public ((,, (template.name [<function> "/" <arity>])) <inputs>)
              (-> <types>
                  Computation)
              (..apply (.list <inputs>) {.#None} (..manual <function>))))]

       <definitions>))]

  [0
   [["gets"]
    ["caller"]]]

  [1
   [["print"]
    ["include"]
    ["extend"]
    ["require"]
    ["defined?"]]]

  [2
   [["print"]
    ["alias_method"]]]
  )

(the .public (throw/1 error)
  (-> Expression
      Statement)
  (..; (..apply (list error) {.#None} (..manual "throw"))))

(the .public (throw/2 tag value)
  (-> Expression Expression
      Statement)
  (..; (..apply (list tag value) {.#None} (..manual "throw"))))

(the .public (class_variable_set var value object)
  (-> SVar Expression Expression
      Computation)
  (..do "class_variable_set" (list (..string (..code var)) value) {.#None} object))

(the .public (class_variable_get var object)
  (-> SVar Expression
      Computation)
  (..do "class_variable_get" (list (..string (..code var))) {.#None} object))
