... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [compiler
     [target
      ["_" js (.only Computation Var Expression Statement)]]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Phase! Translator Translator!)]
  ["[1][0]" when]
  ["///[1]" ////
   ["[0]" phase]
   ["[0]" synthesis (.only Scope)]
   ["[1][0]" translation]
   [///
    [reference
     [variable (.only Register)]]]]])

(the @scope
  (-> Nat Text)
  (|>> %.nat (format "scope")))

(the $iteration
  (-> Nat Var)
  (|>> %.nat (format "iteration") _.var))

(the (setup $iteration initial? offset bindings body)
  (-> Var Bit Register (List Expression) Statement Statement)
  (when bindings
    (list)
    body

    (list binding)
    (let [$binding (//when.register offset)]
      (all _.then
           (if initial?
             (_.define $binding binding)
             (_.statement (_.set $binding binding)))
           body
           ))

    _
    (|> bindings
        list.enumeration
        (list#each (function (_ [register _])
                     (let [variable (//when.register (n.+ offset register))]
                       (if initial?
                         (_.define variable (_.at (_.i32 (.int register)) $iteration))
                         (_.statement (_.set variable (_.at (_.i32 (.int register)) $iteration)))))))
        list.reversed
        (list#mix _.then body)
        (_.then (_.define $iteration (_.array bindings))))))

(the .public (scope! statement expression archive [start initsS+ bodyS])
  (Translator! (Scope synthesis.Term))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [@scope (of ! each ..@scope /////translation.next)
       initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////translation.with_anchor [start @scope]
               (statement expression archive bodyS))
       $iteration (of ! each ..$iteration /////translation.next)]
      (in (..setup $iteration
                   true start
                   initsO+
                   (_.with_label (_.label @scope)
                     (_.do_while (_.boolean true)
                                 body!)))))))

(the .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Translator (Scope synthesis.Term)))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [loop! (scope! statement expression archive [start initsS+ bodyS])]
      (in (_.apply (_.closure (list) loop!) (list))))))

(the .public (again! statement expression archive it)
  (Translator! (List synthesis.Term))
  (do [! phase.monad]
    [[offset @scope] /////translation.anchor
     it (monad.each ! (expression archive) it)
     $iteration (of ! each ..$iteration /////translation.next)]
    (in (..setup $iteration
                 false offset
                 it
                 (_.continue_at (_.label @scope))))))
