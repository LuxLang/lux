... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["dict" dictionary (.only Dictionary)]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    ["[0]" macro (.only with_symbols)
     [syntax (.only syntax)]
     ["[0]" template]]
    [target
     ["_" scheme (.only Expression Computation)]]]]]
 ["[0]" ///
  ["[1][0]" runtime (.only Operation Phase Handler Bundle)]
  ["[1]//" /// (.only)
   ["[1][0]" extension (.only)
    ["[0]" bundle]]
   ["[1]/" //
    ["[1][0]" synthesis (.only Synthesis)]]]])

(the bundle::lux
  Bundle
  (|> bundle.empty
      (bundle.install "is?" (binary (product.uncurried _.eq?/2)))
      (bundle.install "try" (unary ///runtime.lux//try))))

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]
  
  [i64::and _.bit_and/2]
  [i64::or  _.bit_or/2]
  [i64::xor _.bit_xor/2]
  )

(the (i64::left_shifted [subjectO paramO])
  Binary
  (_.arithmetic_shift/2 (_.remainder/2 (_.int +64) paramO)
                        subjectO))

(the (i64::arithmetic_right_shifted [subjectO paramO])
  Binary
  (_.arithmetic_shift/2 (|> paramO (_.remainder/2 (_.int +64)) (_.*/2 (_.int -1)))
                        subjectO))

(the (i64::logical_right_shifted [subjectO paramO])
  Binary
  (///runtime.i64//logical_right_shifted (_.remainder/2 (_.int +64) paramO) subjectO))

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (|> subjectO (<op> paramO)))]

  [i64::+ _.+/2]
  [i64::- _.-/2]
  [i64::* _.*/2]
  [i64::/ _.quotient/2]
  [i64::% _.remainder/2]
  )

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [f64::+ _.+/2]
  [f64::- _.-/2]
  [f64::* _.*/2]
  [f64::/ _.//2]
  [f64::% _.mod/2]
  [f64::= _.=/2]
  [f64::< _.</2]

  [text::= _.string=?/2]
  [text::< _.string<?/2]
  )

(template.with [<name> <cmp>]
  [(the (<name> [subjectO paramO])
     Binary
     (<cmp> paramO subjectO))]

  [i64::= _.=/2]
  [i64::< _.</2]
  )

(the i64::char (|>> _.integer->char/1 _.string/1))

(the bundle::i64
  Bundle
  (<| (bundle.prefix "i64")
      (|> bundle.empty
          (bundle.install "and" (binary i64::and))
          (bundle.install "or" (binary i64::or))
          (bundle.install "xor" (binary i64::xor))
          (bundle.install "left-shift" (binary i64::left_shifted))
          (bundle.install "logical-right-shift" (binary i64::logical_right_shifted))
          (bundle.install "arithmetic-right-shift" (binary i64::arithmetic_right_shifted))
          (bundle.install "+" (binary i64::+))
          (bundle.install "-" (binary i64::-))
          (bundle.install "*" (binary i64::*))
          (bundle.install "/" (binary i64::/))
          (bundle.install "%" (binary i64::%))
          (bundle.install "=" (binary i64::=))
          (bundle.install "<" (binary i64::<))
          (bundle.install "f64" (unary (|>> (_.//2 (_.float +1.0)))))
          (bundle.install "char" (unary i64::char)))))

(the bundle::f64
  Bundle
  (<| (bundle.prefix "f64")
      (|> bundle.empty
          (bundle.install "+" (binary f64::+))
          (bundle.install "-" (binary f64::-))
          (bundle.install "*" (binary f64::*))
          (bundle.install "/" (binary f64::/))
          (bundle.install "%" (binary f64::%))
          (bundle.install "=" (binary f64::=))
          (bundle.install "<" (binary f64::<))
          (bundle.install "i64" (unary _.exact/1))
          (bundle.install "encode" (unary _.number->string/1))
          (bundle.install "decode" (unary ///runtime.dec//decode)))))

(the (text::char [subjectO paramO])
  Binary
  (_.string/1 (_.string_ref/2 subjectO paramO)))

(the (text::clip [subjectO startO endO])
  Trinary
  (_.substring/3 subjectO startO endO))

(the bundle::text
  Bundle
  (<| (bundle.prefix "text")
      (|> bundle.empty
          (bundle.install "=" (binary text::=))
          (bundle.install "<" (binary text::<))
          (bundle.install "concat" (binary (product.uncurried _.string_append/2)))
          (bundle.install "size" (unary _.string_length/1))
          (bundle.install "char" (binary text::char))
          (bundle.install "clip" (trinary text::clip)))))

(the (io::log input)
  Unary
  (_.begin (list (_.display/1 input)
                 _.newline/0)))

(the (void code)
  (-> Expression Computation)
  (_.begin (list code (_.string //////synthesis.unit))))

(the bundle::io
  Bundle
  (<| (bundle.prefix "io")
      (|> bundle.empty
          (bundle.install "log" (unary (|>> io::log ..void)))
          (bundle.install "error" (unary _.raise/1))
          (bundle.install "exit" (unary _.exit/1))
          (bundle.install "current-time" (nullary (function (_ _) (///runtime.io//current_time (_.string //////synthesis.unit))))))))

(the .public bundle
  Bundle
  (<| (bundle.prefix "lux")
      (|> bundle::lux
          (dict.composite bundle::i64)
          (dict.composite bundle::f64)
          (dict.composite bundle::text)
          (dict.composite bundle::io)
          )))
