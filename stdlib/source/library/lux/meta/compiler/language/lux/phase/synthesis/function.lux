... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]
    ["[0]" enum]]
   [control
    ["[0]" pipe]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" //
  ["[1][0]" loop (.only Transform)]
  ["//[1]" ///
   ["/" synthesis (.only Path Abstraction Operation Phase)]
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" analysis (.only Environment)
    ["[1]/[0]" complex]]
   [///
    [arity (.only Arity)]
    ["[1][0]" reference (.only)
     [register (.only Register)]
     ["[1]/[0]" variable (.only Variable)]]]]])

(exception.the .public (cannot_find_foreign_variable_in_environment [foreign environment])
  (Exception [Register (Environment /.Term)])
  (exception.report
   (list ["Foreign" (%.nat foreign)]
         ["Environment" (exception.listing /.format environment)])))

(the .public self_reference
  (template (self_reference @)
    [(/.local @ 0)]))

(the .public (apply @ phase)
  (-> Location Phase
      Phase)
  (function (_ archive exprA)
    (let [[funcA argsA] (analysis.reification exprA)]
      (do [! phase.monad]
        [funcS (phase archive funcA)
         argsS (monad.each ! (phase archive) argsA)]
        (with_expansions [<apply> (these (/.apply @ [funcS argsS]))]
          (when funcS
            (/.abstraction @ functionS)
            (if (n.= (its /.#arity functionS)
                     (list.size argsS))
              (do !
                [locals /.locals]
                (in (|> functionS
                        (//loop.optimization true locals argsS)
                        (maybe#each (is (-> [Nat (List /.Term) /.Term]
                                            /.Term)
                                        (function (_ [start inits iteration])
                                          (when iteration
                                            (/.scope @ [start' inits' output])
                                            (if (and (n.= start start')
                                                     (list.empty? inits'))
                                              (/.scope @ [start inits output])
                                              (/.scope @ [start inits iteration]))

                                            _
                                            (/.scope @ [start inits iteration])))))
                        (maybe.else <apply>))))
              (in <apply>))

            (/.apply @ [funcS' argsS'])
            (in (/.apply @ [funcS' (list#composite argsS' argsS)]))

            _
            (in <apply>)))))))

(the (find_foreign environment register)
  (-> (Environment /.Term) Register
      (Operation /.Term))
  (when (list.item register environment)
    {try.#Success aliased}
    (phase#in aliased)

    {try.#Failure _}
    (phase.except ..cannot_find_foreign_variable_in_environment [register environment])))

(the (grow_path grow path)
  (-> (-> /.Term (Operation /.Term)) Path
      (Operation Path))
  (when path
    {/.#Bind register}
    (phase#in {/.#Bind (++ register)})

    (^.with_template [<tag>]
      [{<tag> left right}
       (do phase.monad
         [left' (grow_path grow left)
          right' (grow_path grow right)]
         (in {<tag> left' right'}))])
    ([/.#Alt] [/.#Seq])

    {/.#Bit_Fork test then else}
    (do [! phase.monad]
      [then (grow_path grow then)
       else (when else
              {.#Some else}
              (of ! each (|>> {.#Some}) (grow_path grow else))

              {.#None}
              (in {.#None}))]
      (in {/.#Bit_Fork test then else}))
    
    (^.with_template [<tag>]
      [{<tag> [[test then] elses]}
       (do [! phase.monad]
         [then (grow_path grow then)
          elses (monad.each ! (function (_ [else_test else_then])
                                (do !
                                  [else_then (grow_path grow else_then)]
                                  (in [else_test else_then])))
                            elses)]
         (in {<tag> [[test then] elses]}))])
    ([/.#I64_Fork]
     [/.#F64_Fork]
     [/.#Text_Fork])
    
    {/.#Then thenS}
    (|> thenS
        grow
        (phase#each (|>> {/.#Then})))

    _
    (phase#in path)))

(the (grow environment expression)
  (-> (Environment /.Term) /.Term
      (Operation /.Term))
  (when expression
    [@ {/.#Structure structure}]
    (when structure
      {analysis/complex.#Variant [lefts right? subS]}
      (|> subS
          (grow environment)
          (phase#each (|>> [lefts right?] (/.variant @))))
      
      {analysis/complex.#Tuple membersS+}
      (|> membersS+
          (monad.each phase.monad (grow environment))
          (phase#each (|>> (/.tuple @)))))

    (..self_reference @)
    (phase#in (/.apply @ [expression (list (/.local @ 1))]))
    
    [@ {/.#Reference reference}]
    (when reference
      {////reference.#Variable variable}
      (when variable
        {////reference/variable.#Local register}
        (phase#in (/.local @ (++ register)))
        
        {////reference/variable.#Foreign register}
        (..find_foreign environment register))
      
      {////reference.#Constant constant}
      (phase#in expression))
    
    [@ {/.#Control control}]
    (when control
      {/.#Branch branch}
      (when branch
        {/.#Exec [this that]}
        (do phase.monad
          [this (grow environment this)
           that (grow environment that)]
          (in (/.exec @ [this that])))
        
        {/.#Let [[register inputS] bodyS]}
        (do phase.monad
          [inputS' (grow environment inputS)
           bodyS' (grow environment bodyS)]
          (in (/.let @ [[(++ register) inputS'] bodyS'])))
        
        {/.#If [testS thenS elseS]}
        (do phase.monad
          [testS' (grow environment testS)
           thenS' (grow environment thenS)
           elseS' (grow environment elseS)]
          (in (/.if @ [testS' thenS' elseS'])))

        {/.#Its members inputS}
        (phase#each (|>> [members] (/.its @))
                    (grow environment inputS))
        
        {/.#When [inputS pathS]}
        (do phase.monad
          [inputS' (grow environment inputS)
           pathS' (grow_path (grow environment) pathS)]
          (in (/.when @ [inputS' pathS']))))
      
      {/.#Loop loop}
      (when loop
        {/.#Scope [start initsS+ iterationS]}
        (do [! phase.monad]
          [initsS+' (monad.each ! (grow environment) initsS+)
           iterationS' (grow environment iterationS)]
          (in (/.scope @ [(++ start) initsS+' iterationS'])))
        
        {/.#Again argumentsS+}
        (|> argumentsS+
            (monad.each phase.monad (grow environment))
            (phase#each (|>> (/.again @)))))
      
      {/.#Function function}
      (when function
        {/.#Abstraction [_env _arity _body]}
        (do [! phase.monad]
          [_env' (monad.each !
                             (|>> (pipe.when
                                    [@ {/.#Reference {////reference.#Variable {////reference/variable.#Foreign register}}}]
                                    (..find_foreign environment register)

                                    captured
                                    (grow environment captured)))
                             _env)]
          (in (/.abstraction @ [_env' _arity _body])))
        
        {/.#Apply funcS argsS+}
        (do [! phase.monad]
          [funcS (grow environment funcS)
           argsS+ (monad.each ! (grow environment) argsS+)]
          (in (/.apply @ (when funcS
                           (/.apply @ [(..self_reference @) pre_argsS+])
                           [(..self_reference @)
                            (list#composite pre_argsS+ argsS+)]

                           _
                           [funcS
                            argsS+]))))))
    
    [@ {/.#Extension name argumentsS+}]
    (|> argumentsS+
        (monad.each phase.monad (grow environment))
        (phase#each (|>> {/.#Extension name} [@])))

    [@ {/.#Simple _}]
    (phase#in expression)))

(the .public (abstraction @ phase environment archive bodyA)
  (-> Location Phase (Environment analysis.Term)
      Phase)
  (do [! phase.monad]
    [environment (monad.each ! (phase archive) environment)
     bodyS (/.with_currying? true
             (/.with_locals 2
               (phase archive bodyA)))
     abstraction (is (Operation Abstraction)
                     (when bodyS
                       (/.abstraction @ [env' down_arity' bodyS'])
                       (|> bodyS'
                           (grow env')
                           (of ! each (function (_ body)
                                        [/.#environment environment
                                         /.#arity (++ down_arity')
                                         /.#body body])))
                       
                       _
                       (in [/.#environment environment
                            /.#arity 1
                            /.#body bodyS])))
     currying? /.currying?]
    (in (<| (/.abstraction @)
            (if currying?
              abstraction
              (when (//loop.optimization false 1 (list) abstraction)
                {.#Some [startL initsL bodyL]}
                [/.#environment environment
                 /.#arity (its /.#arity abstraction)
                 /.#body (/.scope @ [startL initsL bodyL])]
                
                {.#None}
                abstraction))))))
