... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    [target
     ["_" common_lisp (.only Expression)]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Translator)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]"synthesis (.only Scope Synthesis)]
     ["[1][0]" translation]
     ["//[1]" ///
      ["[1][0]" phase]
      [meta
       [archive (.only Archive)]]
      [reference
       [variable (.only Register)]]]]]]])

(the .public (scope expression archive [start initsS+ bodyS])
  (Translator (Scope Synthesis))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (of ! each (|>> %.natural (%.message "loop_scope") _.tag) /////translation.next)
       @output (of ! each (|>> %.natural (%.message "loop_output") _.var) /////translation.next)
       initsG+ (monad.each ! (expression archive) initsS+)
       bodyG (/////translation.with_anchor [@scope start]
               (expression archive bodyS))]
      ... TODO: There is a bug in the way the variables are updated. Do a _.multiple_value_setq instead.
      (in (_.let (|> initsG+
                     list.enumeration
                     (list#each (function (_ [idx init])
                                  [(|> idx (n.+ start) //when.register)
                                   init]))
                     (list.partial [@output _.nil]))
            (list (_.tagbody (list @scope
                                   (_.setq @output bodyG)))
                  @output))))))

(the .public (again expression archive argsS+)
  (Translator (List Synthesis))
  (do [! ///////phase.monad]
    [[tag offset] /////translation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)
     .let [bindings (|> argsO+
                        list.enumeration
                        (list#each (|>> product.left (n.+ offset) //when.register))
                        _.args)]]
    (in (_.progn (list (_.multiple_value_setq bindings (_.values/* argsO+))
                       (_.go tag))))))
