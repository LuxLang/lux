... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    [compiler
     [target
      ["_" c++]]]]]]
 ["[0]" //
  ["[0]" runtime]
  ["[0]" reference]
  [////
   [analysis (.only Reification)]
   [synthesis (.only Abstraction)]
   ["[0]" phase]
   [///
    [meta
     ["[0]" cache
      [dependency
       ["[1]" artifact]]]]]]])

(def .public (reification expression archive [abstraction arguments])
  (runtime.Term Reification)
  (do [! phase.monad]
    [abstraction (expression archive abstraction)
     arguments (monad.each ! (expression archive) arguments)]
    (in (runtime.on arguments abstraction))))

(def .public (abstraction next archive [environment arity body])
  (runtime.Term Abstraction)
  (do [! phase.monad]
    [dependencies (cache.dependencies archive body)
     body (next archive body)
     .let [$self (reference.local 0)
           $arguments (reference.local (-- 0))]]
    (in (<| (runtime.function (_.int (.int arity)))
            (_.lambda (|> environment
                          list.enumeration
                          (list#each (function (_ [register variable])
                                       (_.alias (reference.foreign register)
                                                (reference.variable variable)))))
                      (list [runtime.value_type $self]
                            [(_.* runtime.value_type) $arguments])
                      {.#Some runtime.value_type}
                      (list#mix _.then
                                (_.return body)
                                (list#each (function (_ register')
                                             (_.variable (reference.local (++ register'))
                                                         runtime.value_type
                                                         (_.item (_.int (.int register'))
                                                                 $arguments)))
                                           (list.indices arity))))))))
