... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Tag Tuple Variant
                #Variant #Tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.only)
     ["%" \\injection (.only Injection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]]])

(every .public (Variant a)
  (Record
   [#lefts Nat
    #right? Bit
    #value a]))

(every .public (Tuple a)
  (List a))

(every .public (Complex a)
  (.Variant
   {#Variant (Variant a)}
   {#Tuple (Tuple a)}))

(every .public Tag
  Nat)

(the .public (tag right? lefts)
  (-> Bit Nat Tag)
  (if right?
    (++ lefts)
    lefts))

(the .public (lefts right? tag)
  (-> Bit Tag Nat)
  (if right?
    (-- tag)
    tag))

(the .public (choice multiplicity pick)
  (-> Nat Tag [Nat Bit])
  (let [right? (n.= (-- multiplicity) pick)]
    [(..lefts right? pick)
     right?]))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ a) (-> (Equivalence a) (Equivalence (Complex a))))
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{#Variant [expected_lefts expected_right? expected_value]}
        {#Variant [actual_lefts actual_right? actual_value]}]
       (and (n.= expected_lefts actual_lefts)
            (bit#= expected_right? actual_right?)
            (/#= expected_value actual_value))
       
       [{#Tuple expected} {#Tuple actual}]
       (of (list.equivalence /#=) = expected actual)

       _
       false))))

(the .public (hash super)
  (for_any (_ a) (-> (Hash a) (Hash (Complex a))))
  (implementation
   (the equivalence
     (..equivalence (of super equivalence)))
   
   (the (hash value)
     (when value
       {#Variant [lefts right? value]}
       (all n.* 2
            (of n.hash hash lefts)
            (of bit.hash hash right?)
            (of super hash value))
       
       {#Tuple members}
       (all n.* 3
            (of (list.hash super) hash members))
       ))))

(the .public (injection %it it)
  (for_any (_ a)
    (-> (Injection a)
        (Injection (Complex a))))
  (when it
    {#Variant [lefts right? it]}
    (%.message "{" (%.nat lefts) " " (%.bit right?) " " (%it it) "}")
    
    {#Tuple it}
    (|> it
        (list#each %it)
        (text.interposed " ")
        (text.enclosed ["[" "]"]))))
