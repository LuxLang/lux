... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["|" pipe]
    ["[0]" function]
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    [macro
     ["[0]" template]]
    [compiler
     [target
      ["_" lua (.only Expression Statement)]]
     [meta
      [archive (.only Archive)]]]]]]
 [/////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" lua
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Translator)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" when]
    ["[1][0]" loop]
    ["[1][0]" function]]]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only)
    ["?[1]" \\projection (.only Projection)]]]])

(the .public (custom [projection handler])
  (for_any (_ s)
    (-> [(Projection s)
         (-> Phase Archive s (Operation Expression))]
        Handler))
  (function (_ phase archive input)
    (when (?synthesis.value projection input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

(the !unary
  (template.macro (_ function)
    [(|>> list _.apply (|> (_.var function)))]))

(the .public (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        ... TODO: Get rid of this ASAP
        [@ {synthesis.#Extension [.prelude "when_char#|translation"] parameters}]
        (do phase.monad
          [body (expression archive synthesis)]
          (in (as Statement body)))
        
        (,, (template.with [<tag>]
              [(<tag> @ value)
               (phase#each _.return (expression archive synthesis))]

              [synthesis.bit]
              [synthesis.i64]
              [synthesis.f64]
              [synthesis.text]
              [synthesis.variant]
              [synthesis.tuple]
              [synthesis.its]
              [synthesis.apply]))

        (,, (template.with [<tag>]
              [[@ {<tag> value}]
               (phase#each _.return (expression archive synthesis))]

              [synthesis.#Reference]
              [synthesis.#Extension]))

        (synthesis.when @ it)
        (<| (,, (template.with [,synthesis ,translation]
                  [(when (,synthesis it)
                     {.#Some it}
                     (,translation statement expression archive it)

                     else)]

                  [synthesis.if //when.if!]
                  [synthesis.when_i64 //when.when_i64!]
                  [synthesis.when_f64 //when.when_f64!]
                  [synthesis.when_text //when.when_text!]
                  [synthesis.multi_let //when.multi_let!]
                  ))
            (//when.when! statement expression archive it))

        (synthesis.exec @ it)
        (//when.exec! statement expression archive it)

        (synthesis.let @ let)
        (//when.let! statement expression archive let)

        (synthesis.scope @ scope)
        (do phase.monad
          [[inits scope!] (//loop.scope! statement expression archive false scope)]
          (in scope!))

        (synthesis.again @ updates)
        (//loop.again! statement expression archive updates)

        (synthesis.abstraction @ abstraction)
        (phase#each _.return (//function.function statement expression archive abstraction))
        )))

... TODO: Get rid of this ASAP
(the lux//syntax_char_case!
  (..custom [(all <>.and
                  ?synthesis.any
                  ?synthesis.any
                  (<>.some (?synthesis.tuple (all <>.and
                                                  (?synthesis.tuple (<>.many ?synthesis.i64))
                                                  ?synthesis.any))))
             (function (_ phase archive [input else conditionals])
               (|> conditionals
                   (list#each (function (_ [chars branch])
                                {synthesis.#Seq (when chars
                                                  {.#End}
                                                  {synthesis.#Pop}
                                                  
                                                  {.#Item head tail}
                                                  {synthesis.#I64_Fork
                                                   [head {synthesis.#Pop}]
                                                   (list#each (function (_ char)
                                                                [char {synthesis.#Pop}])
                                                              tail)})
                                                {synthesis.#Then branch}}))
                   list.reversed
                   (list#mix (function (_ pre post)
                               {synthesis.#Alt pre post})
                             {synthesis.#Then else})
                   [input]
                   (//when.when! statement phase archive)
                   (by phase.monad each (|>> (as Expression)))))]))

(the with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" lux//syntax_char_case!)
       (dictionary.has "is?#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "try#|translation" (unary //runtime.lux//try))))

(the with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary (product.uncurried _.bit_and)))
       (dictionary.has "i64_or#|translation" (binary (product.uncurried _.bit_or)))
       (dictionary.has "i64_xor#|translation" (binary (product.uncurried _.bit_xor)))
       (dictionary.has "i64_left#|translation" (binary (product.uncurried //runtime.i64//left_shifted)))
       (dictionary.has "i64_right#|translation" (binary (product.uncurried //runtime.i64//right_shifted)))
       
       (dictionary.has "i64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "i64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "i64_-#|translation" (binary (product.uncurried _.-)))
       ))

(the with_integer_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "int_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "int_/#|translation" (binary (product.uncurried //runtime.i64//division)))
       (dictionary.has "int_%#|translation" (binary (product.uncurried //runtime.i64//remainder)))
       
       (dictionary.has "int_f64#|translation" (unary (_./ (_.float +1.0))))
       (dictionary.has "int_char#|translation" (unary (function (_ it) (_.apply (list it) (_.var "utf8.char")))))
       ))

(the with_decimal_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "f64_-#|translation" (binary (product.uncurried _.-)))
       (dictionary.has "f64_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "f64_/#|translation" (binary (product.uncurried _./)))
       (dictionary.has "f64_%#|translation" (binary (product.uncurried (function (_ parameter subject) (_.apply (list subject parameter) (_.var "math.fmod"))))))
       
       (dictionary.has "f64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "f64_<#|translation" (binary (product.uncurried _.<)))

       (dictionary.has "f64_int#|translation" (unary (!unary "math.floor")))))

(the (text//char [paramO subjectO])
  (Binary Expression)
  (//runtime.text//char (_.+ (_.int +1) paramO) subjectO))

(the (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip subjectO paramO extraO))

(the (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(the text//composite
  (Variadic Expression)
  (|>> (|.when (list)
         (_.string "")

         (list single)
         single

         (list left right)
         (|> left (_.concat right))

         parts
         (_.apply (list (_.array parts))
                  (_.var "table.concat")))))

(the with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "text_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "text_composite#|translation" (variadic ..text//composite))
       (dictionary.has "text_index#|translation" (trinary ..text//index))
       (dictionary.has "text_size#|translation" (unary //runtime.text//size))
       ... TODO: Use version below once the Lua compiler becomes self-hosted.
       ... (dictionary.has "size" (unary (for .lua (!unary "utf8.len")
       ...                                    (!unary "string.len"))))
       (dictionary.has "text_char#|translation" (binary ..text//char))
       (dictionary.has "text_clip#|translation" (trinary ..text//clip))
       ))

(the (io//log! messageO)
  (Unary Expression)
  (|> (_.apply (list messageO) (_.var "print"))
      (_.or //runtime.unit)))

(the with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary ..io//log!))
       (dictionary.has "error#|translation" (unary (!unary "error")))))

(the .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_i64_extensions
      with_integer_extensions
      with_decimal_extensions
      with_text_extensions
      with_io_extensions
      ))
