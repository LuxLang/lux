... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    [compiler
     [target
      ["_" js (.only Expression Computation Var Statement)]]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Translator)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    [analysis (.only Abstraction Reification)]
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" synthesis]
    ["[1][0]" translation]
    ["//[1]" ///
     [arity (.only Arity)]
     [reference
      [register (.only Register)]]
     [meta
      [archive
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]]]]])

(the .public (apply expression archive [functionS argsS+])
  (Translator (Reification synthesis.Term))
  (do [! phase.monad]
    [functionO (expression archive functionS)
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (_.apply functionO argsO+))))

(the capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(the (with_closure @self inits body!)
  (-> Var (List Expression) Statement [Statement Expression])
  (when inits
    {.#End}
    [(_.function_definition @self (list) body!)
     @self]

    _
    [(_.function_definition @self
                            (|> (list.enumeration inits)
                                (list#each (|>> product.left ..capture)))
                            (_.return (_.function @self (list) body!)))
     (_.apply @self inits)]))

(the @curried
  (_.var "curried"))

(the input
  (|>> ++ //when.register))

(the @@arguments
  (_.var "arguments"))

(the (@scope function_name)
  (-> unit.ID Text)
  (%.format (///reference.artifact function_name) "_scope"))

(the .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Translator (Abstraction synthesis.Term)))
  (do [! phase.monad]
    [dependencies (cache.dependencies archive bodyS)
     [function_name body!] (/////translation.with_new_context archive dependencies
                             (do !
                               [scope (of ! each ..@scope
                                          (/////translation.context archive))]
                               (/////translation.with_anchor [1 scope]
                                 (statement expression archive bodyS))))
     .let [arityO (|> arity .int _.i32)
           @num_args (_.var "num_args")
           @scope (..@scope function_name)
           @self (_.var (///reference.artifact function_name))
           apply_poly (.function (_ args func)
                        (|> func (_.do "apply" (list _.null args))))
           initialize_self! (_.define (//when.register 0) @self)
           initialize! (list#mix (.function (_ post pre!)
                                   (all _.then
                                        pre!
                                        (_.define (..input post) (_.at (_.i32 (.int post)) @@arguments))))
                                 initialize_self!
                                 (list.indices arity))]
     environment (monad.each ! (expression archive) environment)
     .let [[definition instantiation] (with_closure @self environment
                                        (all _.then
                                             (_.define @num_args (_.its "length" @@arguments))
                                             (<| (_.if (|> @num_args (_.= arityO))
                                                   (all _.then
                                                        initialize!
                                                        (_.with_label (_.label @scope)
                                                          (_.do_while (_.boolean true)
                                                                      body!))))
                                                 (_.if (|> @num_args (_.> arityO))
                                                   (let [arity_inputs (|> (_.array (list))
                                                                          (_.its "slice")
                                                                          (_.do "call" (list @@arguments (_.i32 +0) arityO)))
                                                         extra_inputs (|> (_.array (list))
                                                                          (_.its "slice")
                                                                          (_.do "call" (list @@arguments arityO)))]
                                                     (_.return (|> @self
                                                                   (apply_poly arity_inputs)
                                                                   (apply_poly extra_inputs)))))
                                                 ... (|> @num_args (_.< arityO))
                                                 (let [all_inputs (|> (_.array (list))
                                                                      (_.its "slice")
                                                                      (_.do "call" (list @@arguments)))]
                                                   (all _.then
                                                        (_.define @curried all_inputs)
                                                        (_.return (_.closure (list)
                                                                             (let [@missing all_inputs]
                                                                               (_.return (apply_poly (_.do "concat" (list @missing) @curried)
                                                                                                     @self))))))))
                                             ))]
     _ (/////translation.execute! definition)
     _ (/////translation.save! (product.right function_name) {.#None} definition)]
    (in instantiation)))
