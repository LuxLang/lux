... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except variant tuple record)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code]
    [macro
     ["^" pattern]
     ["[0]" template]]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 ["/" // (.only Operation Phase)
  ["[1][0]" type]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)
    ["[0]" extension]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(exception.the .public (cannot_infer [module type arguments])
  (Exception [Text Type (List Code)])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Arguments" (exception.listing (code.relative module) arguments)])))

(exception.the .public (cannot_infer_argument [module type argument])
  (Exception [Text Type Code])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Argument" (code.relative module argument)])))

(template.with [<name>]
  [(exception.the .public (<name> type)
     (Exception Type)
     (exception.report
      (list ["Type" (type.as_text type)])))]

  [not_a_variant]
  [not_a_record]
  [invalid_type_application]
  )

(the .public (quantified @var @parameter :it:)
  (-> check.Var Nat Type
      Type)
  (`` (when :it:
        {.#Nominal name co_variant}
        {.#Nominal name (list#each (quantified @var @parameter) co_variant)}

        (,, (template.with [<tag>]
              [{<tag> left right}
               {<tag> (quantified @var @parameter left)
                      (quantified @var @parameter right)}]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Apply]))
        
        {.#Var @}
        (if (n.= @var @)
          {.#Parameter @parameter}
          :it:)

        (,, (template.with [<tag>]
              [{<tag> env body}
               {<tag> (list#each (quantified @var @parameter) env)
                      (quantified @var (n.+ 2 @parameter) body)}]

              [.#Universal]
              [.#Existential]))

        (^.or {.#Parameter _}
              {.#Opaque _}
              {.#Named _})
        :it:)))

... Type-inference works by applying some (potentially quantified) type
... to a sequence of values.
... Function types are used for this, although inference is not always
... done for function application (alternative uses may be records and
... tagged variants).
... But, so long as the type being used for the inference can be treated
... as a function type, this method of inference should work.
(the (general' vars archive analyse inferT args)
  (-> (List check.Var) Archive Phase Type (List Code)
      (Operation [Type_Context
                  (List check.Var)
                  Type
                  (List /.Term)]))
  (when args
    {.#End}
    (do phase.monad
      [just_before (/type.check check.context)
       _ (/type.inference inferT)]
      (in [just_before vars inferT (list)]))
    
    {.#Item argC args'}
    (when inferT
      {.#Named name unnamedT}
      (general' vars archive analyse unnamedT args)

      {.#Universal _}
      (do phase.monad
        [[@var :var:] (/type.check check.var)]
        (general' (list.partial @var vars) archive analyse (maybe.trusted (type.applied (list :var:) inferT)) args))

      {.#Existential _}
      (do phase.monad
        [:ex: /type.existential]
        (general' vars archive analyse (maybe.trusted (type.applied (list :ex:) inferT)) args))

      {.#Apply inputT transT}
      (when (type.applied (list inputT) transT)
        {.#Some outputT}
        (general' vars archive analyse outputT args)

        {.#None}
        (/.except ..invalid_type_application [inferT]))

      ... Arguments are inferred back-to-front because, by convention,
      ... Lux functions take the most important arguments *last*, which
      ... means that the most information for doing proper inference is
      ... located in the last arguments to a function call.
      ... By inferring back-to-front, a lot of type-annotations can be
      ... avoided in Lux code, since the inference algorithm can piece
      ... things together more easily.
      {.#Function inputT outputT}
      (do phase.monad
        [[just_before vars outputT' args'A] (general' vars archive analyse outputT args')
         [here _] module.current
         argA (<| (/.with_exception ..cannot_infer_argument [here inputT argC])
                  (/type.expecting inputT)
                  (analyse archive argC))]
        (in [just_before vars outputT' (list.partial argA args'A)]))

      {.#Var infer_id}
      (do phase.monad
        [[here _] module.current
         ?inferT' (/type.check (check.peek infer_id))]
        (when ?inferT'
          {.#Some inferT'}
          (general' vars archive analyse inferT' args)

          _
          (/.except ..cannot_infer [here inferT args])))

      _
      (do phase.monad
        [[here _] module.current]
        (/.except ..cannot_infer [here inferT args])))
    ))

(the .public (general archive analyse inferT args)
  (-> Archive Phase Type (List Code)
      (Operation [Type (List /.Term)]))
  (do [! phase.monad]
    [[just_before vars :inference: terms] (general' (list) archive analyse inferT args)]
    (in [:inference: terms])
    ... (when vars
    ...   (list)
    ...   (in [:inference: terms])

    ...   _
    ...   (do !
    ...     [:inference: (/type.check
    ...                   (do [! check.monad]
    ...                     [quantifications (monad.mix ! (function (_ @var level)
    ...                                                     (do !
    ...                                                       [:var: (check.try (check.identity vars @var))]
    ...                                                       (when :var:
    ...                                                         {try.#Success _}
    ...                                                         (in level)

    ...                                                         {try.#Failure _}
    ...                                                         (do !
    ...                                                           [.let [:var: (|> level (n.* 2) ++ {.#Parameter})]
    ...                                                            _ (check.bind :var: @var)]
    ...                                                           (in (++ level))))))
    ...                                                 0
    ...                                                 vars)
    ...                      :inference:' (of ! each (type.univ_q quantifications) (check.clean vars :inference:))
    ...                      _ (check.with just_before)]
    ...                     (in :inference:')))
    ...      _ (/type.inference :inference:)]
    ...     (in [:inference: terms])))
    ))

(the (with_recursion @self recursion)
  (-> Nat Type Type
      Type)
  (function (again it)
    (`` (when it
          (^.or {.#Parameter index}
                {.#Apply {.#Nominal "" {.#End}}
                         {.#Parameter index}})
          (if (n.= @self index)
            recursion
            it)
          
          (,, (template.with [<tag>]
                [{<tag> left right}
                 {<tag> (again left) (again right)}]

                [.#Sum]
                [.#Product]
                [.#Function]
                [.#Apply]))
          
          (,, (template.with [<tag>]
                [{<tag> environment quantified}
                 {<tag> (list#each again environment)
                        (with_recursion (n.+ 2 @self) recursion quantified)}]

                [.#Universal]
                [.#Existential]))
          
          {.#Nominal name parameters}
          {.#Nominal name (list#each again parameters)}

          _
          it))))

(the parameters
  (-> Nat
      (List Type))
  (|>> list.indices
       (list#each (|>> (n.* 2) ++ {.#Parameter}))
       list.reversed))

(template.with [<name> <types> <inputs> <exception> <when> <then>]
  [(`` (the .public (<name> (,, (template.spliced <inputs>)) complex)
         (-> (,, (template.spliced <types>)) Type
             (Operation Type))
         (loop (again [depth 0
                       it complex])
           (`` (when it
                 {.#Named name it}
                 (again depth it)

                 (,, (template.with [<tag>]
                       [{<tag> env it}
                        (phase#each (|>> {<tag> env})
                                    (again (++ depth) it))]

                       [.#Universal]
                       [.#Existential]))

                 {.#Apply parameter abstraction}
                 (when (type.applied (list parameter) abstraction)
                   {.#Some it}
                   (again depth it)

                   {.#None}
                   (/.except ..invalid_type_application [it]))

                 {<when> _}
                 <then>

                 _
                 (/.except <exception> [complex]))))))]

  [record [Nat] [arity] ..not_a_record
   .#Product
   (let [[lefts right] (|> it
                           type.flat_tuple
                           (list.split_at (-- arity)))]
     (phase#in (type.function
                 (list#each (..with_recursion (|> depth -- (n.* 2)) complex)
                            (list#composite lefts (list (type.tuple right))))
                 (type.application (parameters depth) complex))))]
  [variant [Nat Bit] [lefts right?] ..not_a_variant
   .#Sum
   (|> it
       type.flat_variant
       (list.after lefts)
       (pipe.when
         {.#Item [head tail]}
         (let [case (if right?
                      (type.variant tail)
                      head)]
           (-> (if (n.= 0 depth)
                 case
                 (..with_recursion (|> depth -- (n.* 2)) complex case))
               (type.application (parameters depth) complex)))

         {.#End}
         (-> .Nothing complex))
       phase#in)]
  )
