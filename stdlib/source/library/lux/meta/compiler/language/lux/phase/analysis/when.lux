... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Pattern Analysis
                when tuple)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix monoid monad)]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" code]
    ["[0]" label]
    [macro
     ["^" pattern]
     ["[0]" template]]
    ["[0]" type (.only)
     ["[0]" check (.only Check)]]]]]
 ["[0]" //
  ["[1][0]" complex]
  [///
   ["[0]" phase]
   ["/" analysis (.only Operation Phase)
    ["[1][0]" simple]
    ["[1][0]" complex]
    ["[1][0]" pattern (.only Pattern)]
    ["[1][0]" type]
    ["[1][0]" scope]
    ["[1][0]" coverage (.only Coverage)]]]])

(exception.the .public (mismatch [module type pattern])
  (Exception [Text Type Code])
  (exception.report
   (list ["Type" (type.as_text type)]
         ["Pattern" (code.relative module pattern)])))

(exception.the .public (sum_has_no_case [case type])
  (Exception [Natural Type])
  (exception.report
   (list ["Case" (%.natural case)]
         ["Type" (type.as_text type)])))

(exception.the .public (invalid [module it])
  (Exception [Text Code])
  (exception.report
   (list ["Pattern" (code.relative module it)])))

(exception.the .public (non_tuple type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(exception.the .public (non_exhaustive [module input branches coverage])
  (Exception [Text Code (List [Code Code]) Coverage])
  (exception.report
   (list ["Input" (code.relative module input)]
         ["Branches" (|> branches
                         (list#each (function (_ [slot value])
                                      (list slot value)))
                         list#conjoint
                         code.tuple
                         (code.relative module))]
         ["Coverage" (/coverage.injection coverage)])))

(exception.the .public empty_branches)

(the (quantified envs baseT)
  (-> (List (List Type)) Type Type)
  (.when envs
    {.#End}
    baseT

    {.#Item head tail}
    (quantified tail {.#Universal head baseT})))

... Type-checking on the input value is done during the analysis of a
... "when" expression, to ensure that the patterns being used make
... sense for the type of the input value.
... Sometimes, that input value is complex, by depending on
... type-variables or quantifications.
... This function makes it easier for "when" analysis to properly
... type-check the input with respect to the patterns.
(the .public (tuple :it:)
  (-> Type (Check [(List type.Variable) Type]))
  (loop (again [envs (is (List (List Type))
                         (list))
                :it: :it:])
    (.when :it:
      {.#Variable id}
      (do check.monad
        [?:it:' (phase.try (check.type id))]
        (.when ?:it:'
          {try.#Success :it:'}
          (again envs :it:')

          _
          (check.except ..non_tuple :it:)))

      {.#Named name unnamedT}
      (again envs unnamedT)

      {.#Universal env unquantifiedT}
      (again {.#Item env envs} unquantifiedT)

      {.#Existential _}
      (do check.monad
        [[@head :head:] check.var
         [tail :tuple:] (again envs (maybe.trusted (type.applied (list :head:) :it:)))]
        (in [(list.partial @head tail) :tuple:]))

      {.#Apply _}
      (do [! check.monad]
        [.let [[:abstraction: :parameters:] (type.flat_application :it:)]
         :abstraction: (.when :abstraction:
                         {.#Variable @abstraction}
                         (do !
                           [?:abstraction: (phase.try (check.type @abstraction))]
                           (.when ?:abstraction:
                             {try.#Success :abstraction:}
                             (in :abstraction:)

                             _
                             (check.except ..non_tuple :it:)))

                         _
                         (in :abstraction:))]
        (.when (type.applied :parameters: :abstraction:)
          {.#Some :it:}
          (again envs :it:)

          {.#None}
          (check.except ..non_tuple :it:)))

      {.#Product _}
      (|> :it:
          type.flat_tuple
          (list#each (..quantified envs))
          type.tuple
          [(list)]
          (of check.monad in))

      _
      (of check.monad in [(list) (..quantified envs :it:)]))))

(the (simple_pattern_analysis type :input: location output next)
  (for_any (_ a) (-> Type Type Location Pattern (Operation a) (Operation [Pattern a])))
  (/.with_location location
    (do phase.monad
      [_ (/type.check (check.check :input: type))
       outputA next]
      (in [output outputA]))))

(the (tuple_pattern_analysis pattern_analysis :input: sub_patterns next)
  (for_any (_ a)
    (-> (-> Type Code (Operation a) (Operation [Pattern a]))
        Type (List Code) (Operation a) (Operation [Pattern a])))
  (do [! phase.monad]
    [[@ex_var+ :input:'] (/type.check (..tuple :input:))]
    (.when :input:'
      {.#Product _}
      (let [matches (loop (again [types (type.flat_tuple :input:')
                                  patterns sub_patterns
                                  output (is (List [Type Code])
                                             {.#End})])
                      (.when [types patterns]
                        [{.#End} {.#End}]
                        output

                        [{.#Item headT {.#End}} {.#Item headP {.#End}}]
                        {.#Item [headT headP] output}

                        [remainingT {.#Item headP {.#End}}]
                        {.#Item [(type.tuple remainingT) headP] output}

                        [{.#Item headT {.#End}} remainingP]
                        {.#Item [headT (code.tuple remainingP)] output}
                        
                        [{.#Item headT tailT} {.#Item headP tailP}]
                        (again tailT tailP {.#Item [headT headP] output})

                        _
                        (undefined)))]
        (do !
          [[memberP+ thenA] (list#mix (is (for_any (_ a)
                                            (-> [Type Code] (Operation [(List Pattern) a])
                                                (Operation [(List Pattern) a])))
                                          (function (_ [memberT memberC] then)
                                            (do !
                                              [[memberP [memberP+ thenA]] ((as (for_any (_ a) (-> Type Code (Operation a) (Operation [Pattern a])))
                                                                               pattern_analysis)
                                                                           memberT memberC then)]
                                              (in [(list.partial memberP memberP+) thenA]))))
                                      (do !
                                        [nextA next]
                                        (in [(list) nextA]))
                                      matches)
           _ (/type.check (monad.each check.monad check.forget! @ex_var+))]
          (in [(/pattern.tuple memberP+)
               thenA])))

      _
      (do !
        [[here _] module.current]
        (/.except ..mismatch [here :input:' (code.tuple sub_patterns)])))))

(every (Analysis of)
  (-> Type Code (Operation of)
      (Operation [Pattern of])))

(the (anonymous_variant pattern_analysis
                        :input: pattern next
                        location lefts right? values)
  (for_any (_ of)
    (-> (Analysis of)
        Type Code (Operation of)
        Location Natural Bit (List Code)
        (Operation [Pattern of])))
  (/.with_location location
    (do [! phase.monad]
      [[@ex_var+ :input:'] (/type.check (..tuple :input:))]
      (.when :input:'
        {.#Sum _}
        (let [flat_sum (type.flat_variant :input:')
              size_sum (list.size flat_sum)
              idx (/complex.tag right? lefts)]
          (.when (list.item idx flat_sum)
            (^.multi {try.#Success caseT}
                     (n.< size_sum idx))
            (do !
              [[testP nextA] (if (and (n.> size_sum size_sum)
                                      (n.= (-- size_sum) idx))
                               (pattern_analysis (type.variant (list.after (-- size_sum) flat_sum))
                                                 (` [(,* values)])
                                                 next)
                               (pattern_analysis caseT (` [(,* values)]) next))
               _ (/type.check (monad.each check.monad check.forget! @ex_var+))]
              (in [(/pattern.variant [lefts right? testP])
                   nextA]))

            _
            (/.except ..sum_has_no_case [idx :input:])))

        {.#Universal _}
        (do !
          [[ex_id exT] (/type.check check.existential)
           it (pattern_analysis (maybe.trusted (type.applied (list exT) :input:'))
                                pattern
                                next)
           _ (/type.check (monad.each check.monad check.forget! @ex_var+))]
          (in it))
        
        _
        (do !
          [[here _] module.current]
          (/.except ..mismatch [here :input:' pattern]))))))

... This function handles several concerns at once, but it must be that
... way because those concerns are interleaved when doing
... pattern-matching and they cannot be separated.
... The pattern is analysed in order to get a general feel for what is
... expected of the input value. This, in turn, informs the
... type-checking of the input.
... A kind of "continuation" value is passed around which signifies
... what needs to be done _after_ analysing a pattern.
... In general, this is done to analyse the "body" expression
... associated to a particular pattern _in the context of_ said
... pattern.
... The reason why *context* is important is because patterns may bind
... values to local variables, which may in turn be referenced in the
... body expressions.
... That is why the body must be analysed in the context of the
... pattern, and not separately.
(the (pattern_analysis :input: pattern next)
  Analysis
  (`` (.when pattern
        [location {.#Symbol ["" name]}]
        (/.with_location location
          (do phase.monad
            [outputA (/scope.with_local [name :input:]
                       next)
             idx /scope.next]
            (in [{/pattern.#Bind idx} outputA])))

        (,, (template.with [<type> <input> <output>]
              [[location <input>]
               (simple_pattern_analysis <type> :input: location {/pattern.#Simple <output>} next)]

              [Bit {.#Bit pattern_value} {/simple.#Bit pattern_value}]
              [Natural {.#Natural pattern_value} {/simple.#Natural pattern_value}]
              [Integer {.#Integer pattern_value} {/simple.#Integer pattern_value}]
              [Revolution {.#Revolution pattern_value} {/simple.#Revolution pattern_value}]
              [Decimal {.#Decimal pattern_value} {/simple.#Decimal pattern_value}]
              [Text {.#Text pattern_value} {/simple.#Text pattern_value}]
              [Any {.#Tuple {.#End}} {/simple.#Unit}]))
        
        [location {.#Tuple (list singleton)}]
        (pattern_analysis :input: singleton next)
        
        [location {.#Tuple sub_patterns}]
        (/.with_location location
          (do [! phase.monad]
            [record (//complex.normal true sub_patterns)
             record_size,members,recordT (is (Operation (Maybe [Natural (List Code) Type]))
                                             (.when record
                                               {.#Some record}
                                               (//complex.order true record)

                                               {.#None}
                                               (in {.#None})))]
            (.when record_size,members,recordT
              {.#Some [record_size members recordT]}
              (do !
                [_ (.when :input:
                     {.#Variable @input}
                     (/type.check (do check.monad
                                    [? (check.bound? @input)]
                                    (if ?
                                      (in [])
                                      (check.check :input: recordT))))

                     _
                     (in []))]
                (.when members
                  (list singleton)
                  (pattern_analysis :input: singleton next)

                  _
                  (..tuple_pattern_analysis pattern_analysis :input: members next)))
              
              {.#None}
              (..tuple_pattern_analysis pattern_analysis :input: sub_patterns next))))

        [location {.#Variant (list.partial [_ {.#Bit right?}] values)}]
        (anonymous_variant pattern_analysis
                           :input: pattern next
                           location 0 right? values)

        [location {.#Variant (list.partial [_ {.#Natural lefts}] [_ {.#Bit right?}] values)}]
        (anonymous_variant pattern_analysis
                           :input: pattern next
                           location lefts right? values)

        [location {.#Variant (list.partial [_ {.#Symbol tag}] values)}]
        (/.with_location location
          (do phase.monad
            [tag (binding.normal tag)
             [lefts,right? variantT] (label.tag tag)
             [lefts right?] (in (.when lefts,right?
                                  {.#Some [lefts right? family]}
                                  [lefts right?]

                                  {.#None}
                                  [0 false]))
             _ (/type.check (check.check :input: variantT))]
            (pattern_analysis :input: (` {(, (code.natural lefts)) (, (code.bit right?)) (,* values)}) next)))

        _
        (do phase.monad
          [[here _] module.current]
          (/.except ..invalid [here pattern]))
        )))

(the .public (when analyse branches archive inputC)
  (-> Phase (List [Code Code]) Phase)
  (.when branches
    {.#Item [patternH bodyH] branchesT}
    (do [! phase.monad]
      [[:input: inputA] (<| /type.inferring
                            (analyse archive inputC))
       outputH (pattern_analysis :input: patternH (analyse archive bodyH))
       outputT (monad.each !
                           (function (_ [patternT bodyT])
                             (pattern_analysis :input: patternT (analyse archive bodyT)))
                           branchesT)
       outputHC (|> outputH product.left /coverage.coverage /.of_try)
       outputTC (monad.each ! (|>> product.left /coverage.coverage /.of_try) outputT)
       _ (.when (monad.mix try.monad /coverage.composite outputHC outputTC)
           {try.#Success coverage}
           (do !
             [[here _] module.current]
             (phase.assertion ..non_exhaustive [here inputC branches coverage]
                              (/coverage.exhaustive? coverage)))

           {try.#Failure error}
           (/.failure error))
       @ meta.location]
      (in [@ {/.#When inputA [outputH outputT]}]))

    {.#End}
    (/.except ..empty_branches [])))
