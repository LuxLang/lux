(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["f" frac]]]
   [meta
    ["@" target (.only)
     ["_" php (.only Expression)]]]]]
 ["[0]" ////
  ["/" bundle]
  ["/[1]" //
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["[0]" reference]
    ["//" php
     ["[1][0]" runtime (.only Operation Phase Handler Bundle Translator)]
     ["[1][0]" when]]]
   [//
    ["[0]" synthesis (.only %synthesis)
     ["<s>" \\parser (.only Parser)]]
    ["[0]" translation]
    [///
     ["[1]" phase]]]]])

(def !unary
  (template (_ function)
    (|>> list _.apply (|> (_.constant function)))))

... TODO: Get rid of this ASAP
(def lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do [! /////.monad]
                 [inputG (phase archive input)
                  [[context_module context_artifact] elseG] (translation.with_new_context archive
                                                              (phase archive else))
                  @input (at ! each _.var (translation.symbol "input"))
                  conditionalsG (is (Operation (List [Expression Expression]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branchG (phase archive branch)]
                                                      (in [(|> chars
                                                               (list#each (|>> .int _.int (_.=== @input)))
                                                               (list#mix (function (_ clause total)
                                                                           (if (same? _.null total)
                                                                             clause
                                                                             (_.or clause total)))
                                                                         _.null))
                                                           branchG])))
                                                conditionals))
                  .let [foreigns (|> conditionals
                                     (list#each (|>> product.right synthesis.path/then //when.dependencies))
                                     (list.partial (//when.dependencies (synthesis.path/then else)))
                                     list.together
                                     (set.of_list _.hash)
                                     set.list)
                        @expression (_.constant (reference.artifact [context_module context_artifact]))
                        declaration (_.define_function @expression (list.partial (_.parameter @input) (list#each _.reference foreigns))
                                                       (list#mix (function (_ [test then] else)
                                                                   (_.if test (_.return then) else))
                                                                 (_.return elseG)
                                                                 conditionalsG))]
                  _ (translation.execute! declaration)
                  _ (translation.save! context_artifact declaration)]
                 (in (_.apply (list.partial inputG foreigns) @expression))))]))

(def lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurried _.===)))
      (/.install "try" (unary //runtime.lux//try))
      ))

(def (left_shifted [parameter subject])
  (Binary Expression)
  (_.bit_shl (_.% (_.int +64) parameter) subject))

(def i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried _.bit_and)))
          (/.install "or" (binary (product.uncurried _.bit_or)))
          (/.install "xor" (binary (product.uncurried _.bit_xor)))
          (/.install "left-shift" (binary ..left_shifted))
          (/.install "right-shift" (binary (product.uncurried //runtime.i64//right_shifted)))
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "+" (binary (product.uncurried //runtime.i64//+)))
          (/.install "-" (binary (product.uncurried //runtime.i64//-)))
          (/.install "*" (binary (product.uncurried //runtime.i64//*)))
          (/.install "/" (binary (function (_ [parameter subject])
                                   (_.intdiv/2 [subject parameter]))))
          (/.install "%" (binary (product.uncurried _.%)))
          (/.install "f64" (unary (_./ (_.float +1.0))))
          (/.install "char" (unary //runtime.i64//char))
          )))

(def (f64//% [parameter subject])
  (Binary Expression)
  (_.fmod/2 [subject parameter]))

(def (f64//encode subject)
  (Unary Expression)
  (_.number_format/2 [subject (_.int +17)]))

(def f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried _./)))
          (/.install "%" (binary ..f64//%))
          (/.install "i64" (unary _.intval/1))
          (/.install "encode" (unary ..f64//encode))
          (/.install "decode" (unary //runtime.f64//decode)))))

(def (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip paramO extraO subjectO))

(def (text//index [startO partO textO])
  (Trinary Expression)
  (//runtime.text//index textO partO startO))

(def text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.==)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "concat" (binary (product.uncurried (function.flipped _.concat))))
          (/.install "index" (trinary ..text//index))
          (/.install "size" (unary //runtime.text//size))
          (/.install "char" (binary (product.uncurried //runtime.text//char)))
          (/.install "clip" (trinary ..text//clip))
          )))

(def io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary //runtime.io//log!))
          (/.install "error" (unary //runtime.io//throw!)))))

(def .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> /.empty
          (dictionary.composite lux_procs)
          (dictionary.composite i64_procs)
          (dictionary.composite f64_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs))))
