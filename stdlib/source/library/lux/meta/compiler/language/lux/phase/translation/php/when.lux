... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except when let if)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set]]]
   [math
    [number
     ["i" int]]]
   [meta
    [macro
     ["^" pattern]]
    [target
     ["_" php (.only Expression Var Statement)]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Phase! Translator Translator!)]
  ["[1][0]" reference]
  ["[1][0]" primitive]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" synthesis
     ["[1]/[0]" when]]
    ["/[1]" //
     ["[1][0]" synthesis (.only Member Synthesis Path)]
     ["[1][0]" translation]
     ["//[1]" ///
      [reference
       ["[1][0]" variable (.only Register)]]
      ["[1][0]" phase (.use "[1]#[0]" monad)]
      [meta
       [archive (.only Archive)]]]]]]])

(the .public register
  (-> Register Var)
  (|>> (///reference.local //reference.system) as_expected))

(the .public capture
  (-> Register Var)
  (|>> (///reference.foreign //reference.system) as_expected))

(the .public (let expression archive [valueS register bodyS])
  (Translator [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)
     bodyG (expression archive bodyS)]
    (in (|> bodyG
            (list (_.set (..register register) valueG))
            _.array/*
            (_.item (_.int +1))))))

(the .public (let! statement expression archive [valueS register bodyS])
  (Translator! [Synthesis Register Synthesis])
  (do ///////phase.monad
    [valueO (expression archive valueS)
     body! (statement expression archive bodyS)]
    (in (all _.then
             (_.set! (..register register) valueO)
             body!))))

(the .public (if expression archive [testS thenS elseS])
  (Translator [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [testG (expression archive testS)
     thenG (expression archive thenS)
     elseG (expression archive elseS)]
    (in (_.? testG thenG elseG))))

(the .public (if! statement expression archive [testS thenS elseS])
  (Translator! [Synthesis Synthesis Synthesis])
  (do ///////phase.monad
    [test! (expression archive testS)
     then! (statement expression archive thenS)
     else! (statement expression archive elseS)]
    (in (_.if test!
          then!
          else!))))

(the .public (get expression archive [pathP valueS])
  (Translator [(List Member) Synthesis])
  (do ///////phase.monad
    [valueG (expression archive valueS)]
    (in (list#mix (function (_ side source)
                    (.let [method (.when side
                                    (^.with_template [<side> <accessor>]
                                      [(<side> lefts)
                                       (<accessor> (_.int (.int lefts)))])
                                    ([.#Left //runtime.tuple//left]
                                     [.#Right //runtime.tuple//right]))]
                      (method source)))
                  valueG
                  pathP))))

(the @savepoint (_.var "lux_pm_savepoint"))
(the @cursor (_.var "lux_pm_cursor"))
(the @temp (_.var "lux_pm_temp"))

(the (push! value)
  (-> Expression Statement)
  (_.; (_.array_push/2 [@cursor value])))

(the peek_and_pop
  Expression
  (_.array_pop/1 @cursor))

(the pop!
  Statement
  (_.; ..peek_and_pop))

(the peek
  Expression
  (_.item (|> @cursor _.count/1 (_.- (_.int +1)))
          @cursor))

(the save!
  Statement
  (.let [cursor (_.array_slice/2 [@cursor (_.int +0)])]
    (_.; (_.array_push/2 [@savepoint cursor]))))

(the restore!
  Statement
  (_.set! @cursor (_.array_pop/1 @savepoint)))

(the fail! _.break)

(the (multi_pop! pops)
  (-> Nat Statement)
  (_.; (_.array_splice/3 [@cursor
                          (_.int +0)
                          (_.int (i.* -1 (.int pops)))])))

(with_template [<name> <flag> <prep>]
  [(the (<name> simple? idx)
     (-> Bit Nat Statement)
     (all _.then
          (_.set! @temp (|> idx <prep> .int _.int (//runtime.sum//get ..peek <flag>)))
          (.if simple?
            (_.when (_.is_null/1 @temp)
              fail!)
            (_.if (_.is_null/1 @temp)
              fail!
              (..push! @temp)))))]

  [left_choice  _.null        (<|)]
  [right_choice (_.string "") ++]
  )

(the (alternation pre! post!)
  (-> Statement Statement Statement)
  (all _.then
       (_.do_while (_.bool false)
                   (all _.then
                        ..save!
                        pre!))
       (all _.then
            ..restore!
            post!)))

(the (pattern_matching' statement expression archive)
  (Translator! Path)
  (function (again pathP)
    (.when pathP
      {/////synthesis.#Then bodyS}
      (statement expression archive bodyS)

      {/////synthesis.#Pop}
      (///////phase#in ..pop!)

      {/////synthesis.#Bind register}
      (///////phase#in (_.set! (..register register) ..peek))

      {/////synthesis.#Bit_Fork when thenP elseP}
      (do [! ///////phase.monad]
        [then! (again thenP)
         else! (.when elseP
                 {.#Some elseP}
                 (again elseP)

                 {.#None}
                 (in ..fail!))]
        (in (.if when
              (_.if ..peek
                then!
                else!)
              (_.if ..peek
                else!
                then!))))

      (^.with_template [<tag> <injection>]
        [{<tag> item}
         (do [! ///////phase.monad]
           [clauses (monad.each ! (function (_ [match then])
                                    (do !
                                      [then! (again then)]
                                      (in [(_.=== (|> match <injection>)
                                                  ..peek)
                                           then!])))
                                {.#Item item})]
           (in (_.cond clauses ..fail!)))])
      ([/////synthesis.#I64_Fork //primitive.i64]
       [/////synthesis.#F64_Fork //primitive.f64]
       [/////synthesis.#Text_Fork //primitive.text])

      (^.with_template [<complex> <simple> <choice>]
        [(<complex> idx)
         (///////phase#in (<choice> false idx))

         (<simple> idx nextP)
         (|> nextP
             again
             (of ///////phase.monad each (_.then (<choice> true idx))))])
      ([/////synthesis.side/left  /////synthesis.simple_left_side  ..left_choice]
       [/////synthesis.side/right /////synthesis.simple_right_side ..right_choice])

      (/////synthesis.member/left 0)
      (///////phase#in (|> ..peek (_.item (_.int +0)) ..push!))
      
      (^.with_template [<pm> <getter>]
        [(<pm> lefts)
         (///////phase#in (|> ..peek (<getter> (_.int (.int lefts))) ..push!))])
      ([/////synthesis.member/left  //runtime.tuple//left]
       [/////synthesis.member/right //runtime.tuple//right])

      (/////synthesis.!bind_top register thenP)
      (do ///////phase.monad
        [then! (again thenP)]
        (///////phase#in (all _.then
                              (_.set! (..register register) ..peek_and_pop)
                              then!)))

      ... (/////synthesis.!multi_pop nextP)
      ... (.let [[extra_pops nextP'] (////synthesis/when.count_pops nextP)]
      ...   (do ///////phase.monad
      ...     [next! (again nextP')]
      ...     (///////phase#in (all _.then
      ...                    (..multi_pop! (n.+ 2 extra_pops))
      ...                    next!))))

      (^.with_template [<tag> <combinator>]
        [(<tag> preP postP)
         (do ///////phase.monad
           [pre! (again preP)
            post! (again postP)]
           (in (<combinator> pre! post!)))])
      ([/////synthesis.path/seq _.then]
       [/////synthesis.path/alt ..alternation]))))

(the (pattern_matching statement expression archive pathP)
  (Translator! Path)
  (do ///////phase.monad
    [iteration! (pattern_matching' statement expression archive pathP)]
    (in (all _.then
             (_.do_while (_.bool false)
                         iteration!)
             (_.throw (_.new (_.constant "Exception") (list (_.string ////synthesis/when.pattern_matching_error))))))))

(the .public dependencies
  (-> Path (List Var))
  (|>> ////synthesis/when.storage
       (its ////synthesis/when.#dependencies)
       set.list
       (list#each (function (_ variable)
                    (.when variable
                      {///////variable.#Local register}
                      (..register register)
                      
                      {///////variable.#Foreign register}
                      (..capture register))))))

(the .public (when! statement expression archive [valueS pathP])
  (Translator! [Synthesis Path])
  (do ///////phase.monad
    [stack_init (expression archive valueS)
     pattern_matching! (pattern_matching statement expression archive pathP)]
    (in (all _.then
             (_.set! @cursor (_.array/* (list stack_init)))
             (_.set! @savepoint (_.array/* (list)))
             pattern_matching!))))

(the .public (when statement expression archive [valueS pathP])
  (-> Phase! (Translator [Synthesis Path]))
  (do [! ///////phase.monad]
    [[[when_module when_artifact] when!] (/////translation.with_new_context archive
                                           (when! statement expression archive [valueS pathP]))
     .let [@when (_.constant (///reference.artifact [when_module when_artifact]))
           @dependencies+ (..dependencies (/////synthesis.path/seq (/////synthesis.path/then valueS)
                                                                   pathP))
           declaration (_.define_function @when (list#each _.parameter @dependencies+) when!)]
     _ (/////translation.execute! declaration)
     _ (/////translation.save! when_artifact declaration)]
    (in (_.apply @dependencies+ @when))))
