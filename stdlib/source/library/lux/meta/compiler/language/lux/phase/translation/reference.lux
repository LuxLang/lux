... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except local)
   [data
    [text
     ["%" \\injection]]]]]
 [////
  ["[0]" phase (.use "[1]#[0]" monad)]
  ["[0]" translation]
  [///
   ["[0]" reference (.only Reference)
    [register (.only Register)]
    ["[0]" variable (.only Variable)]]
   [meta
    [archive (.only Archive)
     ["[0]" unit]]]]])

... This universe constant is for languages where one can't just turn all compiled definitions
... into the local variables of some scoping function.
(the .public universe
  (for .lua
       ... In the case of Lua, there is a limit of 200 locals in a function's scope.
       (not (.lua_script_universe#))

       .ruby
       ... Cannot make all definitions be local variables because of limitations with JRuby.
       (not (.ruby_script_universe#))

       .php
       ... Cannot make all definitions be local variables because of limitations with PHP itself.
       (not ("php script universe"))

       .scheme
       ... Cannot make all definitions be local variables because of limitations with Kawa.
       (not ("scheme script universe"))

       ... Otherwise...
       false))

(the universe_label
  Text
  (with_expansions [<label> (%.message "u" (%.nat (if ..universe 1 0)))]
    (for .lua <label>
         .ruby <label>
         .php <label>
         .scheme <label>
         "")))

(the .public (artifact [module artifact])
  (-> unit.ID Text)
  (%.message ..universe_label
             "m" (%.nat module)
             "a" (%.nat artifact)))

(every .public (System expression)
  (Interface
   (is (-> Text
           expression)
       constant')
   (is (-> Text
           expression)
       variable')))

(the .public (constant system archive name)
  (for_any (_ anchor expression declaration)
    (-> (System expression) Archive Symbol
        (translation.Operation anchor expression declaration expression)))
  (phase#each (|>> ..artifact (of system constant'))
              (translation.remember archive name)))

(with_template [<sigil> <name>]
  [(the .public (<name> system)
     (for_any (_ expression)
       (-> (System expression)
           (-> Register expression)))
     (|>> %.nat (%.message <sigil>) (of system variable')))]

  ["f" foreign]
  ["l" local]
  )

(the .public (variable system variable)
  (for_any (_ expression)
    (-> (System expression)
        Variable expression))
  (when variable
    {variable.#Local register}
    (..local system register)
    
    {variable.#Foreign register}
    (..foreign system register)))

(the .public (reference system archive reference)
  (for_any (_ anchor expression declaration)
    (-> (System expression) Archive Reference
        (translation.Operation anchor expression declaration expression)))
  (when reference
    {reference.#Constant value}
    (..constant system archive value)
    
    {reference.#Variable value}
    (phase#in (..variable system value))))
