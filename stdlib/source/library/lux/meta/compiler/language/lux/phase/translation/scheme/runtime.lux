... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Location)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\format (.only format)]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" sequence]]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]
    ["@" target (.only)
     ["_" scheme (.only Expression Computation Var)]]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   [analysis (.only Variant)]
   ["[1][0]" synthesis (.only Synthesis)]
   ["[1][0]" translation]
   ["//[1]" /// (.only)
    ["[1][0]" phase]
    [reference
     [variable (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" artifact (.only Registry)]]]]]])

(def module_id
  0)

(with_template [<name> <base>]
  [(every .public <name>
     (<base> Var Expression Expression))]

  [Operation /////translation.Operation]
  [Phase /////translation.Phase]
  [Handler /////translation.Handler]
  [Bundle /////translation.Bundle]
  )

(every .public (Translator i)
  (-> Phase Archive i (Operation Expression)))

(def .public unit
  (_.string /////synthesis.unit))

(def .public with_vars
  (syntax (_ [vars (<code>.tuple (<>.some <code>.local))
              body <code>.any])
    (do [! meta.monad]
      [ids (monad.all ! (list.repeated (list.size vars) meta.seed))]
      (in (list (` (let [(,* (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.var (, (code.text (format "v" (%.nat id)))))))))
                                 list.together))]
                     (, body))))))))

(def runtime
  (syntax (_ [declaration (<>.or <code>.local
                                 (<code>.form (<>.and <code>.local
                                                      (<>.some <code>.local))))
              code <code>.any])
    (do meta.monad
      [runtime_id meta.seed]
      (macro.with_symbols [g!_]
        (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
              runtime_name (` (_.var (, (code.text (%.code runtime)))))]
          (when declaration
            {.#Left name}
            (let [g!name (code.local name)]
              (in (list (` (def .public (, g!name)
                             Var
                             (, runtime_name)))
                        
                        (` (def (, (code.local (format "@" name)))
                             _.Computation
                             (_.define_constant (, runtime_name) (, code)))))))
            
            {.#Right [name inputs]}
            (let [g!name (code.local name)
                  inputsC (list#each code.local inputs)
                  inputs_typesC (list#each (function.constant (` _.Expression))
                                           inputs)]
              (in (list (` (def .public ((, g!name) (,* inputsC))
                             (-> (,* inputs_typesC) _.Computation)
                             (_.apply (list (,* inputsC)) (, runtime_name))))

                        (` (def (, (code.local (format "@" name)))
                             _.Computation
                             (..with_vars [(,* inputsC)]
                               (_.define_function (, runtime_name) [(list (,* inputsC)) {.#None}]
                                                  (, code))))))))))))))

(def last_index
  (-> Expression Computation)
  (|>> _.length/1 (_.-/2 (_.int +1))))

(runtime
 (tuple//left lefts tuple)
 (with_vars [last_index_right]
   (_.begin
    (list (_.define_constant last_index_right (..last_index tuple))
          (_.if (_.>/2 lefts last_index_right)
            ... No need for recursion
            (_.vector_ref/2 tuple lefts)
            ... Needs recursion
            (tuple//left (_.-/2 last_index_right lefts)
                         (_.vector_ref/2 tuple last_index_right)))))))

(runtime
 (tuple//right lefts tuple)
 (with_vars [last_index_right right_index @slice]
   (_.begin
    (list (_.define_constant last_index_right (..last_index tuple))
          (_.define_constant right_index (_.+/2 (_.int +1) lefts))
          (<| (_.if (_.=/2 last_index_right right_index)
                (_.vector_ref/2 tuple right_index))
              (_.if (_.>/2 last_index_right right_index)
                ... Needs recursion.
                (tuple//right (_.-/2 last_index_right lefts)
                              (_.vector_ref/2 tuple last_index_right)))
              (_.begin
               (list (_.define_constant @slice (_.make_vector/1 (_.-/2 right_index (_.length/1 tuple))))
                     (_.vector_copy!/5 @slice (_.int +0) tuple right_index (_.length/1 tuple))
                     @slice))))
    )))

(def (variant' tag last? value)
  (-> Expression Expression Expression Computation)
  (all _.cons/2
       tag
       last?
       value))

(runtime
 (sum//make tag last? value)
 (variant' tag last? value))

(def .public (variant [lefts right? value])
  (-> (Variant Expression) Computation)
  (..sum//make (_.int (.int lefts)) (_.bool right?) value))

(runtime
 (sum//get sum last? wanted_tag)
 (with_vars [sum_tag sum_flag sum_value sum_temp sum_dump]
   (let [no_match _.nil
         test_recursion (_.if sum_flag
                          ... Must recurse.
                          (sum//get sum_value
                                    last?
                                    (|> wanted_tag (_.-/2 sum_tag)))
                          no_match)]
     (<| (_.let (list [sum_tag (_.car/1 sum)]
                      [sum_temp (_.cdr/1 sum)]))
         (_.let (list [sum_flag (_.car/1 sum_temp)]
                      [sum_value (_.cdr/1 sum_temp)]))
         (_.if (_.=/2 wanted_tag sum_tag)
           (_.if (_.eqv?/2 last? sum_flag)
             sum_value
             test_recursion))
         (_.if (_.</2 wanted_tag sum_tag)
           test_recursion)
         (_.if last?
           (variant' (|> sum_tag (_.-/2 wanted_tag)) sum_flag sum_value))
         no_match))))

(def runtime//adt
  Computation
  (_.begin (list @tuple//left
                 @tuple//right
                 @sum//get
                 @sum//make)))

(def .public none
  Computation
  (|> ..unit [0 #0] variant))

(def .public some
  (-> Expression Computation)
  (|>> [1 #1] ..variant))

(def .public left
  (-> Expression Computation)
  (|>> [0 #0] ..variant))

(def .public right
  (-> Expression Computation)
  (|>> [1 #1] ..variant))

(runtime
 (slice offset length list)
 (<| (_.if (_.null?/1 list)
       list)
     (_.if (|> offset (_.>/2 (_.int +0)))
       (slice (|> offset (_.-/2 (_.int +1)))
              length
              (_.cdr/1 list)))
     (_.if (|> length (_.>/2 (_.int +0)))
       (_.cons/2 (_.car/1 list)
                 (slice offset
                        (|> length (_.-/2 (_.int +1)))
                        (_.cdr/1 list))))
     _.nil))

(runtime
 (lux//try op)
 (with_vars [error]
   (_.with_exception_handler
     (_.lambda [(list error) {.#None}]
               (..left error))
     (_.lambda [(list) {.#None}]
               (..right (_.apply (list ..unit) op))))))

(runtime
 (lux//program_args program_args)
 (with_vars [@loop @input @output]
   (_.letrec (list [@loop (_.lambda [(list @input @output) {.#None}]
                                    (_.if (_.null?/1 @input)
                                      @output
                                      (_.apply/2 @loop (_.cdr/1 @input) (..some (_.vector/* (list (_.car/1 @input) @output))))))])
             (_.apply/2 @loop (_.reverse/1 program_args) ..none))))

(def runtime//lux
  Computation
  (_.begin (list @lux//try
                 @lux//program_args)))

(def i64//+limit (_.manual "+9223372036854775807"
                           ... "+0x7FFFFFFFFFFFFFFF"
                           ))
(def i64//-limit (_.manual "-9223372036854775808"
                           ... "-0x8000000000000000"
                           ))
(def i64//+iteration (_.manual "+18446744073709551616"
                               ... "+0x10000000000000000"
                               ))
(def i64//-iteration (_.manual "-18446744073709551616"
                               ... "-0x10000000000000000"
                               ))
(def i64//+cap (_.manual "+9223372036854775808"
                         ... "+0x8000000000000000"
                         ))
(def i64//-cap (_.manual "-9223372036854775809"
                         ... "-0x8000000000000001"
                         ))

(runtime
 (i64//64 input)
 (with_vars [temp]
   (`` (<| (,, (with_template [<scenario> <iteration> <cap> <entrance>]
                 [(_.if (|> input <scenario>)
                    (_.let (list [temp (_.remainder/2 <iteration> input)])
                      (_.if (|> temp <scenario>)
                        (|> temp (_.-/2 <cap>) (_.+/2 <entrance>))
                        temp)))]

                 [(_.>/2 ..i64//+limit) ..i64//+iteration ..i64//+cap ..i64//-limit]
                 [(_.</2 ..i64//-limit) ..i64//-iteration ..i64//-cap ..i64//+limit]
                 ))
           input))))

(runtime
 (i64//left_shifted param subject)
 (|> subject
     (_.arithmetic_shift/2 (_.remainder/2 (_.int +64) param))
     ..i64//64))

(def as_nat
  (_.remainder/2 ..i64//+iteration))

(runtime
 (i64//right_shifted shift subject)
 (_.let (list [shift (_.remainder/2 (_.int +64) shift)])
   (_.if (_.=/2 (_.int +0) shift)
     subject
     (|> subject
         ..as_nat
         (_.arithmetic_shift/2 (_.-/2 shift (_.int +0)))))))

(with_template [<runtime> <host>]
  [(runtime
    (<runtime> left right)
    (..i64//64 (<host> (..as_nat left) (..as_nat right))))]

  [i64//or _.bitwise_ior/2]
  [i64//xor _.bitwise_xor/2]
  [i64//and _.bitwise_and/2]
  )

(runtime
 (i64//division param subject)
 (|> subject (_.//2 param) _.truncate/1 ..i64//64))

(def runtime//i64
  Computation
  (_.begin (list @i64//64
                 @i64//left_shifted
                 @i64//right_shifted
                 @i64//or
                 @i64//xor
                 @i64//and
                 @i64//division)))

(runtime
 (f64//decode input)
 (with_vars [@output]
   (let [output_is_not_a_number? (_.not/1 (_.=/2 @output @output))
         input_is_not_a_number? (_.string=?/2 (_.string "+nan.0") input)]
     (_.let (list [@output (_.string->number/1 input)])
       (_.if (_.and (list output_is_not_a_number?
                          (_.not/1 input_is_not_a_number?)))
         ..none
         (..some @output))))))

(def runtime//f64
  Computation
  (_.begin (list @f64//decode)))

(runtime
 (text//index offset sub text)
 (with_vars [index]
   (_.let (list [index (_.string_contains/3 text sub offset)])
     (_.if index
       (..some index)
       ..none))))

(runtime
 (text//clip offset length text)
 (_.substring/3 text offset (_.+/2 offset length)))

(runtime
 (text//char index text)
 (_.char->integer/1 (_.string_ref/2 text index)))

(def runtime//text
  (_.begin (list @text//index
                 @text//clip
                 @text//char)))

(runtime
 (array//write idx value array)
 (_.begin (list (_.vector_set!/3 array idx value)
                array)))

(def runtime//array
  Computation
  (all _.then
       @array//write
       ))

(def runtime
  Computation
  (_.begin (list @slice
                 runtime//lux
                 runtime//i64
                 runtime//adt
                 runtime//f64
                 runtime//text
                 runtime//array
                 )))

(def .public translate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////translation.execute! ..runtime)
     _ (/////translation.save! (%.nat ..module_id) ..runtime)]
    (in [(|> artifact.empty
             artifact.resource
             product.right)
         (sequence.sequence [(%.nat ..module_id)
                             (|> ..runtime
                                 _.code
                                 (of utf8.codec encoded))])])))
