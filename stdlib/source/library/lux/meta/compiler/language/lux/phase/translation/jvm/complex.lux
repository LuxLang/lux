... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Variant Tuple)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["[0]" i32]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]
       ["[0]" type]
       [encoding
        ["[0]" signed]]]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" runtime (.only Operation Phase Translator)]
  ["[1][0]" primitive]
  ["///[1]" ////
   ["[0]" phase]
   ["[0]" synthesis]
   [analysis
    [complex (.only Variant Tuple)]]]])

(def .public (lefts lefts)
  (-> Nat
      (Bytecode Any))
  (when lefts
    0 _.iconst_0
    1 _.iconst_1
    2 _.iconst_2
    3 _.iconst_3
    4 _.iconst_4
    5 _.iconst_5
    _ (when (signed.s1 (.int lefts))
        {try.#Success value}
        (_.bipush value)

        {try.#Failure _}
        (when (signed.s2 (.int lefts))
          {try.#Success value}
          (_.sipush value)

          {try.#Failure _}
          (_.int (.i64 lefts))))))

(def .public (right? right?)
  (-> Bit
      (Bytecode Any))
  (if right?
    //runtime.right_right?
    //runtime.left_right?))

(def .public (variant phase archive [lefts right? valueS])
  (Translator (Variant synthesis.Term))
  (do phase.monad
    [valueI (phase archive valueS)]
    (in (do _.monad
          [_ (..lefts lefts)
           _ (..right? right?)
           _ valueI]
          (_.invokestatic //runtime.class "variant"
                          (type.method [(list)
                                        (list //type.lefts //type.right? //type.value)
                                        //type.variant
                                        (list)]))))))

(def .public (tuple phase archive membersS)
  (Translator (Tuple synthesis.Term))
  (when membersS
    {.#End}
    (of phase.monad in //runtime.unit)

    {.#Item singletonS {.#End}}
    (phase archive singletonS)

    _
    (do [! phase.monad]
      [membersI (|> membersS
                    list.enumeration
                    (monad.each ! (function (_ [idx member])
                                    (do !
                                      [memberI (phase archive member)]
                                      (in (do _.monad
                                            [_ _.dup
                                             _ (_.int (.i64 idx))
                                             _ memberI]
                                            _.aastore))))))]
      (in (do [! _.monad]
            [_ (_.int (.i64 (list.size membersS)))
             _ (_.anewarray //type.value)]
            (monad.all ! membersI))))))
