... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["|" pipe]
    ["[0]" function]
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" dictionary]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    [macro
     ["[0]" template]]
    [compiler
     [target
      ["_" python (.only Expression Statement)]]
     [meta
      [archive (.only Archive)]]]]]]
 [/////
  ["[0]" extension]
  [translation
   ["[0]" reference]
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" python
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Translator)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" function]
    ["[1][0]" when]
    ["[1][0]" loop]]]
  [//
   [analysis (.only)]
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only)
    ["<[1]>" \\projection (.only Projection)]]]])

(the .public (custom [projection handler])
  (for_any (_ s)
    (-> [(Projection s)
         (-> Phase Archive s (Operation Expression))]
        Handler))
  (function (_ phase archive input)
    (when (<synthesis>.value projection input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

(the .public (statement expression archive synthesis)
  Phase!
  (`` (when synthesis
        ... TODO: Get rid of this ASAP
        [@ {synthesis.#Extension [.prelude "when_char#|translation"] parameters}]
        (do phase.monad
          [body (expression archive synthesis)]
          (in (as Statement body)))
        
        (,, (template.with [<tag>]
              [(<tag> @ value)
               (phase#each _.return (expression archive synthesis))]

              [synthesis.bit]
              [synthesis.i64]
              [synthesis.f64]
              [synthesis.text]
              [synthesis.variant]
              [synthesis.tuple]
              [synthesis.its]
              [synthesis.apply]))

        (,, (template.with [<tag>]
              [[@ {<tag> value}]
               (phase#each _.return (expression archive synthesis))]

              [synthesis.#Reference]
              [synthesis.#Extension]))

        (synthesis.when @ it)
        (<| (,, (template.with [,synthesis ,translation]
                  [(when (,synthesis it)
                     {.#Some it}
                     (,translation statement expression archive it)

                     else)]

                  [synthesis.if //when.if!]
                  [synthesis.when_i64 //when.when_i64!]
                  [synthesis.when_f64 //when.when_f64!]
                  [synthesis.when_text //when.when_text!]
                  [synthesis.multi_let //when.multi_let!]
                  ))
            (//when.when! false statement expression archive it))

        (,, (template.with [<tag> <translator>]
              [(<tag> @ value)
               (<translator> statement expression archive value)]

              [synthesis.exec //when.exec!]
              [synthesis.let //when.let!]
              [synthesis.scope //loop.scope!]
              [synthesis.again //loop.again!]))

        (synthesis.abstraction @ abstraction)
        (phase#each _.return (//function.function statement expression archive abstraction))
        )))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  <synthesis>.any
                  <synthesis>.any
                  (<>.some (<synthesis>.tuple (all <>.and
                                                   (<synthesis>.tuple (<>.many <synthesis>.i64))
                                                   <synthesis>.any))))
             (function (_ phase archive [input else conditionals])
               (do [! phase.monad]
                 [inputG (phase archive input)
                  else! (..statement phase archive else)
                  @input (by ! each _.var (translation.symbol "input"))
                  conditionals! (is (Operation (List [Expression
                                                      Statement]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (..statement phase archive branch)]
                                                      (in [(|> chars
                                                               (list#each (|>> .integer _.int (_.= @input)))
                                                               (list#mix (function (_ clause total)
                                                                           (if (same? _.none total)
                                                                             clause
                                                                             (_.or clause total)))
                                                                         _.none))
                                                           branch!])))
                                                conditionals))
                  ... .let [dependencies (//case.dependencies (list#mix (function (_ right left)
                  ...                                                      (synthesis.path/seq left right))
                  ...                                                    (synthesis.path/then input)
                  ...                                                    {.#Item (synthesis.path/then else)
                  ...                                                     (list#each (|>> product.right
                  ...                                                                     synthesis.path/then)
                  ...                                                                conditionals)}))
                  ...       @closure (_.var (reference.artifact artifact_id))
                  ...       closure (_.def @closure dependencies
                  ...                      (all _.then
                  ...                          (_.set (list @input) inputG)
                  ...                          (list#mix (function (_ [test then!] else!)
                  ...                                       (_.if test then! else!))
                  ...                                     else!
                  ...                                     conditionals!)))]
                  ... _ (translation.execute! closure)
                  ... _ (translation.save! (product.right artifact_id) {.#None} closure)
                  ]
                 ... (in (_.apply @closure dependencies))
                 (in (<| (as Expression)
                         (is Statement)
                         (all _.then
                              (_.set (list @input) inputG)
                              (list#mix (function (_ [test then!] else!)
                                          (_.if test then! else!))
                                        else!
                                        conditionals!))))))]))

(the with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" lux::syntax_char_case!)
       (dictionary.has "is?#|translation" (binary (product.uncurried _.is)))
       (dictionary.has "try#|translation" (unary //runtime.lux::try))))

(the (capped operation parameter subject)
  (-> (-> Expression Expression Expression)
      (-> Expression Expression Expression))
  (//runtime.i64::64 (operation parameter subject)))

(the with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary (product.uncurried //runtime.i64::and)))
       (dictionary.has "i64_or#|translation" (binary (product.uncurried //runtime.i64::or)))
       (dictionary.has "i64_xor#|translation" (binary (product.uncurried //runtime.i64::xor)))
       (dictionary.has "i64_left#|translation" (binary (product.uncurried //runtime.i64::left_shifted)))
       (dictionary.has "i64_right#|translation" (binary (product.uncurried //runtime.i64::right_shifted)))

       (dictionary.has "i64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "i64_+#|translation" (binary (product.uncurried (..capped _.+))))
       (dictionary.has "i64_-#|translation" (binary (product.uncurried (..capped _.-))))
       ))

(the with_integer_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "int_*#|translation" (binary (product.uncurried (..capped _.*))))
       (dictionary.has "int_/#|translation" (binary (product.uncurried //runtime.i64#/)))
       (dictionary.has "int_%#|translation" (binary (product.uncurried //runtime.i64::remainder)))
       
       (dictionary.has "int_f64#|translation" (unary _.float/1))
       (dictionary.has "int_char#|translation" (unary //runtime.i64::char))
       ))

(the with_decimal_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "f64_-#|translation" (binary (product.uncurried _.-)))
       (dictionary.has "f64_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "f64_/#|translation" (binary (product.uncurried //runtime.f64::/)))
       (dictionary.has "f64_%#|translation" (binary (function (_ [parameter subject])
                                                      (|> (_.__import__/1 (_.unicode "math"))
                                                          (_.do "fmod" (list subject parameter))))))
       (dictionary.has "f64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "f64_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "f64_int#|translation" (unary _.int/1))))

(the (text::clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text::clip paramO extraO subjectO))

(the (text::index [startO partO textO])
  (Trinary Expression)
  (//runtime.text::index startO partO textO))

(the text::composite
  (Variadic Expression)
  (|>> (|.when (list)
         (_.string "")

         (list single)
         single

         (list left right)
         (|> left (_.+ right))

         parts
         (_.do "join" (list (_.list parts)) (_.string "")))))

(the with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "text_<#|translation" (binary (product.uncurried _.<)))
       (dictionary.has "text_composite#|translation" (variadic ..text::composite))
       (dictionary.has "text_index#|translation" (trinary ..text::index))
       (dictionary.has "text_size#|translation" (unary _.len/1))
       (dictionary.has "text_char#|translation" (binary (product.uncurried //runtime.text::char)))
       (dictionary.has "text_clip#|translation" (trinary ..text::clip))
       ))

(the with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary //runtime.io::log!))
       (dictionary.has "error#|translation" (unary //runtime.io::throw!))))

(the .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_i64_extensions
      with_integer_extensions
      with_decimal_extensions
      with_text_extensions
      with_io_extensions
      ))
