(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [meta
    [macro
     ["^" pattern]]
    [target
     ["_" scheme]]]]]
 ["[0]" /
  [runtime (.only Phase)]
  ["[1][0]" primitive]
  ["[1][0]" structure]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["[1][0]" function]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    ["[1][0]" extension]
    ["/[1]" //
     [analysis (.only)]
     ["[1][0]" synthesis]
     ["//[1]" ///
      ["[1][0]" phase (.use "[1]#[0]" monad)]
      [reference (.only)
       [variable (.only)]]]]]]])

(def .public (translate archive synthesis)
  Phase
  (when synthesis
    (^.with_template [<tag> <translator>]
      [(<tag> value)
       (//////phase#in (<translator> value))])
    ([////synthesis.bit  /primitive.bit]
     [////synthesis.i64  /primitive.i64]
     [////synthesis.f64  /primitive.f64]
     [////synthesis.text /primitive.text])

    {////synthesis.#Reference value}
    (//reference.reference /reference.system archive value)

    (^.with_template [<tag> <translator>]
      [(<tag> value)
       (<translator> translate archive value)])
    ([////synthesis.variant /structure.variant]
     [////synthesis.tuple /structure.tuple]
     [////synthesis.branch/let /when.let]
     [////synthesis.branch/if /when.if]
     [////synthesis.branch/get /when.get]
     [////synthesis.function/apply /function.apply]

     [////synthesis.branch/when /when.when]
     [////synthesis.loop/scope /loop.scope]
     [////synthesis.loop/again /loop.again]
     [////synthesis.function/abstraction /function.function])

    {////synthesis.#Extension extension}
    (///extension.apply archive translate extension)
    ))
