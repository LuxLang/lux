... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Analysis)
   ["[0]" ffi]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" array (.only Array)]
     ["[0]" dictionary]
     ["[0]" list]]]
   [meta
    [target
     ["_" scheme]]
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 [//
  ["/" lux (.only custom)]
  [//
   ["[0]" bundle]
   [//
    ["[0]" analysis
     ["[1]/[0]" type]]
    [//
     ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)]
     [///
      ["[0]" phase]]]]]])

(the array::new
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [lengthA (analysis/type.with_type Nat
                       (phase archive lengthC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list lengthA)}))))]))

(the array::length
  Handler
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer Nat)]
            (in {analysis.#Extension extension (list arrayA)}))))]))

(the array::read
  Handler
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer :var:)]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(the array::write
  Handler
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             valueA (analysis/type.with_type :var:
                      (phase archive valueC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA valueA arrayA)}))))]))

(the array::delete
  Handler
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@var :var:]))
          (do phase.monad
            [indexA (analysis/type.with_type Nat
                      (phase archive indexC))
             arrayA (analysis/type.with_type (type (Array :var:))
                      (phase archive arrayC))
             _ (analysis/type.infer (type (Array :var:)))]
            (in {analysis.#Extension extension (list indexA arrayA)}))))]))

(the bundle::array
  Bundle
  (<| (bundle.prefix "array")
      (|> bundle.empty
          (bundle.install "new" array::new)
          (bundle.install "length" array::length)
          (bundle.install "read" array::read)
          (bundle.install "write" array::write)
          (bundle.install "delete" array::delete)
          )))

(the Nil
  (for .scheme ffi.Nil
       Any))

(the Function
  (for .scheme ffi.Function
       Any))

(the bundle::object
  Bundle
  (<| (bundle.prefix "object")
      (|> bundle.empty
          (bundle.install "nil" (/.nullary ..Nil))
          (bundle.install "nil?" (/.unary Any Bit))
          )))

(the scheme::constant
  Handler
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (list (analysis.text name))})))]))

(the scheme::apply
  Handler
  (custom
   [(all <>.and <code>.any (<>.some <code>.any))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.with_type ..Function
                        (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.with_type Any)) inputsC)
         _ (analysis/type.infer Any)]
        (in {analysis.#Extension extension (list.partial abstractionA inputsA)})))]))

(the .public bundle
  Bundle
  (<| (bundle.prefix "scheme")
      (|> bundle.empty
          (dictionary.composite bundle::array)
          (dictionary.composite bundle::object)

          (bundle.install "constant" scheme::constant)
          (bundle.install "apply" scheme::apply)
          (bundle.install "script universe" (/.nullary .Bit))
          )))
