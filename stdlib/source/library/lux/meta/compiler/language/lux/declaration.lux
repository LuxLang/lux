(.require
 [library
  [lux (.except Module #module #imports)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid)]]]]]
 [//
  ["[0]" analysis]
  ["[0]" synthesis]
  ["[0]" generation]
  [phase
   ["[0]" extension]]
  [///
   ["[0]" phase]
   [meta
    [archive
     [module
      [descriptor (.only Module)]]]]]])

(type .public (Component state phase)
  (Record
   [#state state
    #phase phase]))

(type .public (State anchor expression declaration)
  (Record
   [#analysis (Component analysis.State+
                         analysis.Phase)
    #synthesis (Component synthesis.State+
                          synthesis.Phase)
    #generation (Component (generation.State+ anchor expression declaration)
                           (generation.Phase anchor expression declaration))]))

(type .public Import
  (Record
   [#module Module
    #alias Text]))

(type .public Requirements
  (Record
   [#imports (List Import)
    #referrals (List Code)]))

(def .public no_requirements
  Requirements
  [#imports (list)
   #referrals (list)])

(def .public (merge_requirements left right)
  (-> Requirements Requirements Requirements)
  [#imports (list#composite (the #imports left) (the #imports right))
   #referrals (list#composite (the #referrals left) (the #referrals right))])

(with_template [<special> <general>]
  [(type .public (<special> anchor expression declaration)
     (<general> (..State anchor expression declaration) Code Requirements))]

  [State+    extension.State]
  [Operation extension.Operation]
  [Phase     extension.Phase]
  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  )

(with_template [<name> <component> <phase>]
  [(def .public <name>
     (All (_ anchor expression declaration)
       (Operation anchor expression declaration <phase>))
     (function (_ [bundle state])
       {try.#Success [[bundle state] (the [<component> ..#phase] state)]}))]

  [analysis   ..#analysis   analysis.Phase]
  [synthesis  ..#synthesis  synthesis.Phase]
  [generation ..#generation (generation.Phase anchor expression declaration)]
  )

(with_template [<name> <component> <operation>]
  [(def .public <name>
     (All (_ anchor expression declaration output)
       (-> (<operation> output)
           (Operation anchor expression declaration output)))
     (|>> (phase.sub [(the [<component> ..#state])
                      (has [<component> ..#state])])
          extension.lifted))]

  [lifted_analysis   ..#analysis   analysis.Operation]
  [lifted_synthesis  ..#synthesis  synthesis.Operation]
  [lifted_generation ..#generation (generation.Operation anchor expression declaration)]
  )

(def .public (set_current_module module)
  (All (_ anchor expression declaration)
    (-> Module (Operation anchor expression declaration Any)))
  (do phase.monad
    [_ (..lifted_analysis
        (analysis.set_current_module module))]
    (..lifted_generation
     (generation.enter_module module))))
