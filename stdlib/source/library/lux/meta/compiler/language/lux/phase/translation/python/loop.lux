... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [compiler
     [target
      ["_" python (.only Expression SVar Statement)]]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Translator Phase! Translator!)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]" phase]
     ["[0]" synthesis (.only Scope)]
     ["[1][0]" translation]
     ["//[1]" ///
      [meta
       ["[0]" cache
        [dependency
         ["[1]" artifact]]]]
      [reference
       [register (.only Register)]
       ["[1][0]" variable]]]]]]])

(the (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list#each (|>> product.left (n.+ offset) //when.register)))]
    (all _.then
         (_.set variables (_.multi bindings))
         body)))

(the .public (set_scope body!)
  (-> Statement Statement)
  (_.while (_.bool true)
           body!
           {.#None}))

(the .public (scope! statement expression archive [start initsS+ bodyS])
  (Translator! (Scope synthesis.Term))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////translation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..set_scope
              body!)))))

(the .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Translator (Scope synthesis.Term)))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [dependencies (cache.dependencies archive bodyS)
       initsO+ (monad.each ! (expression archive) initsS+)
       [[loop_module loop_artifact] body!] (/////translation.with_new_context archive dependencies
                                             (/////translation.with_anchor start
                                               (statement expression archive bodyS)))
       .let [@loop (_.var (///reference.artifact [loop_module loop_artifact]))
             locals (|> initsS+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //when.register)))
             actual_loop (<| (_.def @loop locals)
                             ..set_scope
                             body!)
             [declaration instantiation] (is [Statement Expression]
                                             (when (|> (synthesis.path/then bodyS)
                                                       //when.dependencies
                                                       (set.of_list _.hash)
                                                       (set.difference (set.of_list _.hash locals))
                                                       set.list)
                                               {.#End}
                                               [actual_loop
                                                @loop]

                                               foreigns
                                               [(_.def @loop foreigns
                                                       (all _.then
                                                            actual_loop
                                                            (_.return @loop)
                                                            ))
                                                (_.apply foreigns @loop)]))]
       _ (/////translation.execute! declaration)
       _ (/////translation.save! loop_artifact {.#None} declaration)]
      (in (_.apply initsO+ instantiation)))))

(the .public (again! statement expression archive it)
  (Translator! (List synthesis.Term))
  (do [! phase.monad]
    [offset /////translation.anchor
     it (monad.each ! (expression archive) it)]
    (in (..setup offset it
                 _.continue))))
