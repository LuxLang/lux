(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [meta
    [macro
     ["^" pattern]]]]]
 ["[0]" /
  ["[1][0]" function]
  ["[1][0]" when]
  ["[1][0]" variable]
  ["/[1]" //
   ["[1][0]" extension]
   ["/[1]" //
    ["/" synthesis (.only Synthesis Phase)
     ["[1][0]" simple]]
    ["[1][0]" analysis (.only Analysis)
     ["[2][0]" simple]
     ["[2][0]" complex]]
    [///
     ["[0]" phase (.use "[1]#[0]" monad)]
     [reference (.only)
      [variable (.only)]]]]]])

(def (simple analysis)
  (-> ///simple.Simple /simple.Simple)
  (when analysis
    {///simple.#Unit}
    {/simple.#Text /.unit}
    
    (^.with_template [<analysis> <synthesis>]
      [{<analysis> value}
       {<synthesis> value}])
    ([///simple.#Bit  /simple.#Bit]
     [///simple.#Frac /simple.#F64]
     [///simple.#Text /simple.#Text])

    (^.with_template [<analysis> <synthesis>]
      [{<analysis> value}
       {<synthesis> (.i64 value)}])
    ([///simple.#Nat /simple.#I64]
     [///simple.#Int /simple.#I64]
     [///simple.#Rev /simple.#I64])))

(def (optimization archive)
  Phase
  (function (optimization' analysis)
    (when analysis
      {///analysis.#Simple analysis'}
      (phase#in {/.#Simple (..simple analysis')})

      {///analysis.#Reference reference}
      (phase#in {/.#Reference reference})

      {///analysis.#Structure structure}
      (/.with_currying? false
        (when structure
          {///complex.#Variant variant}
          (do phase.monad
            [valueS (optimization' (the ///complex.#value variant))]
            (in (/.variant (has ///complex.#value valueS variant))))

          {///complex.#Tuple tuple}
          (|> tuple
              (monad.each phase.monad optimization')
              (phase#each (|>> /.tuple)))))
      
      {///analysis.#When inputA branchesAB+}
      (/.with_currying? false
        (/when.synthesize optimization branchesAB+ archive inputA))

      (///analysis.no_op value)
      (optimization' value)

      {///analysis.#Apply _}
      (/.with_currying? false
        (/function.apply optimization archive analysis))

      {///analysis.#Function environmentA bodyA}
      (/function.abstraction optimization environmentA archive bodyA)

      {///analysis.#Extension name args}
      (/.with_currying? false
        (function (_ state)
          (|> (//extension.apply archive optimization [name args])
              (phase.result' state)
              (pipe.when
                {try.#Success output}
                {try.#Success output}
                
                {try.#Failure _}
                (|> args
                    (monad.each phase.monad optimization')
                    (phase#each (|>> [name] {/.#Extension}))
                    (phase.result' state))))))
      )))

(def .public (phase archive analysis)
  Phase
  (do phase.monad
    [synthesis (..optimization archive analysis)]
    (phase.lifted (/variable.optimization synthesis))))
