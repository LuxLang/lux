(.require
 [library
  [lux (.except Synthesis Analysis)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" meta (.only)
    [macro
     ["^" pattern]]
    [type
     ["[0]" check]]]]]
 ["[0]" /
  ["[1][0]" function]
  ["[1][0]" when]
  ["[1][0]" variable]
  ["/[1]" //
   ["[1][0]" extension]
   ["/[1]" //
    ["/" synthesis (.only Synthesis Operation Phase Extender)
     ["[1][0]" simple]]
    ["[1][0]" analysis (.only Analysis)
     ["[2][0]" simple]
     ["[2][0]" complex]]
    [///
     ["[0]" phase (.use "[1]#[0]" monad)]
     [reference (.only)
      [variable (.only)]]
     [meta
      [archive (.only Archive)]]]]]])

(def (simple analysis)
  (-> ///simple.Simple /simple.Simple)
  (when analysis
    {///simple.#Unit}
    {/simple.#Text /.unit}
    
    (^.with_template [<analysis> <synthesis>]
      [{<analysis> value}
       {<synthesis> value}])
    ([///simple.#Bit  /simple.#Bit]
     [///simple.#Frac /simple.#F64]
     [///simple.#Text /simple.#Text])

    (^.with_template [<analysis> <synthesis>]
      [{<analysis> value}
       {<synthesis> (.i64 value)}])
    ([///simple.#Nat /simple.#I64]
     [///simple.#Int /simple.#I64]
     [///simple.#Rev /simple.#I64])))

(exception.def .public (not_an_extension [name expected actual])
  (Exception [Symbol Type Type])
  (exception.report
   (list ["Name" (%.symbol name)]
         ["Expected" (%.type expected)]
         ["Actual" (%.type actual)])))

(def (extension_application extender lux
                            phase archive
                            name parameters)
  (-> Extender Lux
      (-> Extender Lux Phase) Archive
      Symbol (List Analysis)
      (Operation Synthesis))
  (when (|> name
            meta.export
            (meta.result lux))
    {try.#Success [exported? type value]}
    (if (check.subsumes? .Synthesis type)
      ((extender value) "" (phase extender lux) archive parameters)
      (phase.except ..not_an_extension [name .Synthesis type]))

    {try.#Failure error}
    (phase.failure error)))

(def (optimization phase extender lux archive)
  (-> Phase Extender Lux Phase)
  (function (optimization' analysis)
    (when analysis
      {///analysis.#Simple analysis'}
      (phase#in {/.#Simple (..simple analysis')})

      {///analysis.#Reference reference}
      (phase#in {/.#Reference reference})

      {///analysis.#Structure structure}
      (/.with_currying? false
        (when structure
          {///complex.#Variant variant}
          (do phase.monad
            [valueS (optimization' (the ///complex.#value variant))]
            (in (/.variant (has ///complex.#value valueS variant))))

          {///complex.#Tuple tuple}
          (|> tuple
              (monad.each phase.monad optimization')
              (phase#each (|>> /.tuple)))))
      
      {///analysis.#When inputA branchesAB+}
      (/.with_currying? false
        (/when.synthesize (optimization phase extender lux) branchesAB+ archive inputA))

      (///analysis.no_op value)
      (optimization' value)

      {///analysis.#Apply _}
      (/.with_currying? false
        (/function.apply (optimization phase extender lux) archive analysis))

      {///analysis.#Function environmentA bodyA}
      (/function.abstraction (optimization phase extender lux) environmentA archive bodyA)

      {///analysis.#Extension ["" name] args}
      (/.with_currying? false
        (function (_ state)
          (|> (//extension.apply archive (optimization phase extender lux) [name args])
              (phase.result' state)
              (pipe.when
                {try.#Failure _}
                (|> args
                    (monad.each phase.monad optimization')
                    (phase#each (|>> [["" name]] {/.#Extension}))
                    (phase.result' state))

                success
                success))))

      {///analysis.#Extension name parameters}
      (extension_application extender lux
                             (optimization phase) archive
                             name parameters)
      )))

(def .public (phase extender lux)
  (-> Extender Lux Phase)
  (function (phase archive analysis)
    (do phase.monad
      [synthesis (..optimization phase extender lux archive analysis)]
      (phase.lifted (/variable.optimization synthesis)))))
