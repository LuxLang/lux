(.require
 [library
  [lux (.except Variant Tuple Synthesis Translation)
   [abstract
    ["[0]" monad (.only do)]]
   [meta
    [compiler
     [target
      ["_" c++]]]]]]
 [//
  ["[0]" runtime (.only Translation)]
  [////
   ["[0]" phase]
   [synthesis (.only Synthesis)]
   [analysis
    [complex (.only Variant Tuple)]]]])

(def .public (variant phase archive [lefts right? value])
  (Translation (Variant Synthesis))
  (do phase.monad
    [value (phase archive value)]
    (in (runtime.variant (_.int (.int lefts))
                         (_.bool right?)
                         value))))

(def .public (tuple phase archive values)
  (Translation (Tuple Synthesis))
  (let [! phase.monad]
    (when values
      {.#End}
      (of ! in runtime.unit)

      {.#Item it {.#End}}
      (phase archive it)

      _
      (|> values
          (monad.each ! (phase archive))
          (of ! each runtime.tuple)))))
