(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [data
    ["[0]" product]
    ["[0]" bit]
    [text
     ["%" \\format]]]
   [math
    [number
     ["[0]" nat]]]]])

(type .public Member
  (Record
   [#lefts Nat
    #right? Bit]))

(def .public (format it)
  (%.Format Member)
  (%.format "[" (%.nat (the #lefts it)) " " (%.bit (the #right? it)) "]"))

(def .public hash
  (Hash Member)
  (all product.hash
       nat.hash
       bit.hash
       ))

(def .public equivalence
  (Equivalence Member)
  (at ..hash equivalence))
