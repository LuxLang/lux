... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Type)
   [abstract
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode) (.use "[1]#[0]" monad)]
       ["[0]" field (.only Field)]
       [type (.only Type)
        [category (.only Class)]]
       [constant
        [pool (.only Resource)]]]]]]]]
 ["[0]" // (.only)
  ["[1][0]" count]
  ["/[1]" //
   [constant
    ["[1][0]" arity]]
   ["//[1]" ///
    ["[1][0]" reference]
    [//////
     ["[0]" arity (.only Arity)]
     [reference
      [variable (.only Register)]]]]]])

(def .public (initial amount)
  (-> Nat (Bytecode Any))
  (all _.composite
       (|> _.aconst_null
           (list.repeated amount)
           (monad.all _.monad))
       (_#in [])))

(def .public (get class register)
  (-> (Type Class) Register (Bytecode Any))
  (//.get class (/////reference.partial_name register)))

(def .public (put class register value)
  (-> (Type Class) Register (Bytecode Any) (Bytecode Any))
  (//.put /////reference.partial_name class register value))

(def .public variables
  (-> Arity (List (Resource Field)))
  (|>> (n.- ///arity.minimum) (//.variables /////reference.partial_name)))

(def .public (new arity)
  (-> Arity (Bytecode Any))
  (if (arity.multiary? arity)
    (all _.composite
         //count.initial
         (initial (n.- ///arity.minimum arity)))
    (_#in [])))
