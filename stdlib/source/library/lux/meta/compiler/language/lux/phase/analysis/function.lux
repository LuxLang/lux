... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad)]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 [////
  ["[0]" phase (.use "[1]#[0]" functor)]
  ["/" analysis (.only Operation Phase)
   ["[1][0]" type]
   ["[1][0]" inference]
   ["[1][0]" scope]]
  [///
   [reference (.only)
    [variable (.only)]]]])

(exception.the .public (cannot_analyse [module expected function argument body])
  (Exception [Text Type Text Text Code])
  (exception.report
   (list ["Type" (type.as_text expected)]
         ["Function" function]
         ["Argument" argument]
         ["Body" (code.relative module body)])))

(exception.the .public (cannot_apply [module :function: functionC arguments])
  (Exception [Text Type Code (List Code)])
  (exception.report
   (list ["Function type" (type.as_text :function:)]
         ["Function" (code.relative module functionC)]
         ["Arguments" (|> arguments
                          list.enumeration
                          (list#each (.function (_ [idx argC])
                                       (%.message (%.natural idx) " " (code.relative module argC))))
                          (text.interposed text.new_line))])))

(the .public (function analyse function_name arg_name archive body)
  (-> Phase Text Text
      Phase)
  (do [! phase.monad]
    [functionT meta.expected_type
     [here _] module.current]
    (loop (again [expectedT functionT])
      (/.with_exception ..cannot_analyse [here expectedT function_name arg_name body]
        (when expectedT
          {.#Function :input: :output:}
          (<| (do !
                [@ meta.location])
              (by ! each (.function (_ [scope bodyA])
                           [@ {/.#Function (list#each (|>> (/.variable @))
                                                      (/scope.environment scope))
                                           bodyA}]))
              /scope.with
              ... Functions have access not only to their argument, but
              ... also to themselves, through a local variable.
              (/scope.with_local [function_name functionT])
              (/scope.with_local [arg_name :input:])
              (/type.expecting :output:)
              (analyse archive body))
          
          {.#Named name :anonymous:}
          (again :anonymous:)

          {.#Apply argT funT}
          (when (type.applied (list argT) funT)
            {.#Some value}
            (again value)

            {.#None}
            (/.failure (exception.error ..cannot_analyse [here expectedT function_name arg_name body])))

          {.#Universal _}
          (do !
            [[@instance :instance:] (/type.check check.existential)]
            (again (maybe.trusted (type.applied (list :instance:) expectedT))))

          {.#Existential _}
          (<| /type.with_var
              (.function (_ [@instance :instance:]))
              (again (maybe.trusted (type.applied (list :instance:) expectedT))))
          
          {.#Variable id}
          (do !
            [?expectedT' (phase.try (/type.check (check.type id)))]
            (when ?expectedT'
              {try.#Success expectedT'}
              (again expectedT')

              ... Inference
              _
              (<| /type.with_var
                  (.function (_ [@input :input:]))
                  /type.with_var
                  (.function (_ [@output :output:]))
                  (do !
                    [functionA (again {.#Function :input: :output:})])
                  /type.check
                  (do check.monad
                    [:output: (check.identity (list) @output)
                     ?:input: (check.try (check.identity (list @output) @input))
                     ? (check.linked? @input @output)
                     _ (<| (check.check expectedT)
                           (when ?:input:
                             {try.#Success :input:}
                             {.#Function :input: (if ?
                                                   :input:
                                                   :output:)}

                             {try.#Failure _}
                             (|> (if ?
                                   :input:
                                   :output:)
                                 {.#Function :input:}
                                 (/inference.quantified @input 1)
                                 {.#Universal (list)})))]
                    (in functionA)))))

          _
          (/.failure "")
          )))))

(the .public (apply analyse argsC+ :function: functionA archive functionC)
  (-> Phase (List Code) Type /.Term
      Phase)
  (do phase.monad
    [[here _] module.current]
    (|> (/inference.general archive analyse :function: argsC+)
        (phase#each (|>> product.right [functionA] /.reified))
        (/.with_exception ..cannot_apply [here :function: functionC argsC+]))))
