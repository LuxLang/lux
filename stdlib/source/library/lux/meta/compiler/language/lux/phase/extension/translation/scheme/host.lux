... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" function]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [meta
    [macro
     ["[0]" template]]
    [compiler
     [target
      ["_" scheme (.only Var Expression)]]]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["//[1]" ///
   ["/" bundle]
   ["/[1]" //
    ["[0]" extension]
    [translation
     [extension (.only Nullary Unary Binary Trinary
                       nullary unary binary trinary)]
     ["[0]" reference]
     ["//" scheme
      ["[1][0]" runtime (.only Operation Phase Handler Bundle
                               with_vars)]]]
    ["/[1]" //
     [synthesis
      ["<s>" \\projection]]
     ["//[1]" ///
      ["[1][0]" phase]]]]]])

(the (array::new size)
  (Unary Expression)
  (_.make_vector/2 size _.nil))

(the array::length
  (Unary Expression)
  _.vector_length/1)

(the (array::read [indexG arrayG])
  (Binary Expression)
  (_.vector_ref/2 arrayG indexG))

(the (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(the (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//write indexG _.nil arrayG))

(the array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary array::length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.eq?/2 <unit>))]

  [object::nil object::nil? _.nil]
  )

(the object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "nil" (nullary object::nil))
          (/.install "nil?" (unary object::nil?))
          )))

(the scheme::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (do ////////phase.monad
        []
        (in (_.var name))))]))

(the scheme::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(the .public bundle
  Bundle
  (<| (/.prefix "scheme")
      (|> /.empty
          (dictionary.composite ..array)
          (dictionary.composite ..object)

          (/.install "constant" scheme::constant)
          (/.install "apply" scheme::apply)
          (/.install "script universe" (nullary (function.constant (_.bool reference.universe))))
          )))
