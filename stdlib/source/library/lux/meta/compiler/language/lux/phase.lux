... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except except with try)
   [abstract
    [functor (.only Functor)]
    [monad (.only Monad do)]]
   [control
    ["[0]" state]
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]
    ["[0]" io]]
   [data
    ["[0]" product]
    [text
     ["%" \\format (.only format)]]]
   [world
    [time
     ["[0]" instant]
     ["[0]" duration]]]]]
 [////
  [meta
   [archive (.only Archive)]]])

(every .public (Operation state of)
  (state.With Try state of))

(the .public functor
  (All (_ state)
    (Functor (Operation state)))
  (implementation
   (the (each f it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' output]}
         {try.#Success [state' (f output)]}
         
         {try.#Failure error}
         {try.#Failure error})))))

(the .public monad
  (All (_ state)
    (Monad (Operation state)))
  (implementation
   (the functor ..functor)
   
   (the (in it)
     (function (_ state)
       {try.#Success [state it]}))

   (the (conjoint it)
     (function (_ state)
       (when (it state)
         {try.#Success [state' it']}
         (it' state')
         
         {try.#Failure error}
         {try.#Failure error})))))

(every .public (Phase state input output)
  (-> Archive input
      (Operation state output)))

(every .public Wrapper
  (All (_ state input output)
    (-> (Phase state input output)
        Any)))

(the .public (value' state operation)
  (All (_ state of)
    (-> state (Operation state of)
        (Try [state of])))
  (operation state))

(the .public (value state operation)
  (All (_ state of)
    (-> state (Operation state of)
        (Try of)))
  (|> state
      operation
      (of try.monad each product.right)))

(the .public state
  (All (_ state)
    (Operation state state))
  (function (_ state)
    {try.#Success [state state]}))

(the .public (with state)
  (All (_ state)
    (-> state
        (Operation state Any)))
  (function (_ _)
    {try.#Success [state []]}))

(the .public (sub [get set] operation)
  (All (_ state state' of)
    (-> [(-> state state') (-> state' state state)]
        (Operation state' of)
        (Operation state of)))
  (function (_ state)
    (do try.monad
      [[state' output] (operation (get state))]
      (in [(set state' state) output]))))

(the .public failure
  (-> Text
      Operation)
  (|>> {try.#Failure} (state.lifted try.monad)))

(the .public (except exception parameters)
  (All (_ of)
    (-> (Exception of) of
        Operation))
  (..failure (exception.error exception parameters)))

(the .public (of_try error)
  (All (_ state of)
    (-> (Try of)
        (Operation state of)))
  (function (_ state)
    (try#each (|>> [state]) error)))

(the .public assertion
  (template (_ exception message test)
    [(if test
       (of ..monad in [])
       (..except exception message))]))

(the .public (try it)
  (All (_ state value)
    (-> (Operation state value)
        (Operation state (Try value))))
  (function (_ state)
    (when (it state)
      {try.#Success [state' it']}
      {try.#Success [state' {try.#Success it'}]}
      
      {try.#Failure error}
      {try.#Success [state {try.#Failure error}]})))

(the .public identity
  (All (_ state of)
    (Phase state of of))
  (function (_ archive input state)
    {try.#Success [state input]}))

(the .public (composite pre post)
  (All (_ state/0 state/1 input middle output)
    (-> (Phase state/0 input middle)
        (Phase state/1 middle output)
        (Phase [state/0 state/1] input output)))
  (function (_ archive input [pre/state post/state])
    (do try.monad
      [[pre/state' temp] (pre archive input pre/state)
       [post/state' output] (post archive temp post/state)]
      (in [[pre/state' post/state'] output]))))

(the .public (read get)
  (All (_ state of)
    (-> (-> state of)
        (Operation state of)))
  (function (_ state)
    {try.#Success [state (get state)]}))

(the .public (update transform)
  (All (_ state)
    (-> (-> state state)
        (Operation state Any)))
  (function (_ state)
    {try.#Success [(transform state) []]}))

(the .public (localized get set transform)
  (All (_ state state' of)
    (-> (-> state state') (-> state' state state) (-> state' state')
        (-> (Operation state of)
            (Operation state of))))
  (function (_ operation)
    (function (_ state)
      (let [old (get state)]
        (when (operation (set (transform old) state))
          {try.#Success [state' output]}
          {try.#Success [(set old state') output]}

          failure
          failure)))))

(the .public (temporary transform)
  (All (_ state of)
    (-> (-> state state)
        (-> (Operation state of)
            (Operation state of))))
  (function (_ operation)
    (function (_ state)
      (when (operation (transform state))
        {try.#Success [state' output]}
        {try.#Success [state output]}

        failure
        failure))))
