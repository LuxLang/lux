(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary]]]
   [math
    [number
     ["f" frac]]]
   [meta
    ["@" target (.only)
     ["_" js (.only Literal Expression Statement)]]
    [macro
     ["^" pattern]]]]]
 ["[0]" ////
  ["/" bundle]
  ["/[1]" //
   ["[0]" extension]
   [generation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" js
     ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Generator)]
     ["[1][0]" primitive]
     ["[1][0]" structure]
     ["[1][0]" reference]
     ["[1][0]" when]
     ["[1][0]" loop]
     ["[1][0]" function]]]
   [//
    ["[0]" synthesis (.only %synthesis)
     ["<s>" \\parser (.only Parser)]]
    [///
     ["[1]" phase (.use "[1]#[0]" monad)]]]]])

(def .public (custom [parser handler])
  (All (_ s)
    (-> [(Parser s)
         (-> Text (Generator s))]
        Handler))
  (function (_ extension_name phase archive input)
    (when (<s>.result parser input)
      {try.#Success input'}
      (handler extension_name phase archive input')

      {try.#Failure error}
      (/////.except extension.invalid_syntax [extension_name %synthesis input]))))

... [Procedures]
... [[Bits]]
(with_template [<name> <op>]
  [(def (<name> [paramG subjectG])
     (Binary Expression)
     (<op> subjectG (//runtime.i64::number paramG)))]

  [i64::left_shifted  //runtime.i64::left_shifted]
  [i64::right_shifted //runtime.i64::right_shifted]
  )

... [[Numbers]]
(def f64//decode
  (Unary Expression)
  (|>> list
       (_.apply (_.var "parseFloat"))
       _.return
       (_.closure (list))
       //runtime.lux//try))

(def i64::char
  (Unary Expression)
  (|>> //runtime.i64::number
       (list)
       (_.apply (_.var "String.fromCharCode"))))

... [[Text]]
(def (text//concat [leftG rightG])
  (Binary Expression)
  (|> leftG (_.do "concat" (list rightG))))

(def (text//clip [startG endG subjectG])
  (Trinary Expression)
  (//runtime.text//clip startG endG subjectG))

(def (text//index [startG partG subjectG])
  (Trinary Expression)
  (//runtime.text//index startG partG subjectG))

... [[IO]]
(def (io//log messageG)
  (Unary Expression)
  (all _.,
       (//runtime.io//log messageG)
       //runtime.unit))

(def .public (statement expression archive synthesis)
  Phase!
  (when synthesis
    ... TODO: Get rid of this ASAP
    {synthesis.#Extension "lux syntax char case!" parameters}
    (do /////.monad
      [body (expression archive synthesis)]
      (in (as Statement body)))

    (^.with_template [<tag>]
      [(<tag> value)
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.bit]
     [synthesis.i64]
     [synthesis.f64]
     [synthesis.text]
     [synthesis.variant]
     [synthesis.tuple]
     [synthesis.branch/get]
     [synthesis.function/apply])

    (^.with_template [<tag>]
      [{<tag> value}
       (/////#each _.return (expression archive synthesis))])
    ([synthesis.#Reference]
     [synthesis.#Extension])

    (synthesis.branch/when when)
    (//when.when! statement expression archive when)

    (synthesis.branch/exec it)
    (//when.exec! statement expression archive it)

    (synthesis.branch/let let)
    (//when.let! statement expression archive let)

    (synthesis.branch/if if)
    (//when.if! statement expression archive if)

    (synthesis.loop/scope scope)
    (//loop.scope! statement expression archive scope)

    (synthesis.loop/again updates)
    (//loop.again! statement expression archive updates)

    (synthesis.function/abstraction abstraction)
    (/////#each _.return (//function.function statement expression archive abstraction))
    ))

... TODO: Get rid of this ASAP
(def lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do [! /////.monad]
                 [inputG (phase archive input)
                  else! (..statement phase archive else)
                  conditionals! (is (Operation (List [(List Literal)
                                                      Statement]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (..statement phase archive branch)]
                                                      (in [(list#each (|>> .int _.int) chars)
                                                           branch!])))
                                                conditionals))]
                 ... (in (_.apply (_.closure (list)
                 ...                           (_.switch (_.the //runtime.i64_low_field inputG)
                 ...                                     conditionals!
                 ...                                     {.#Some (_.return else!)}))
                 ...                (list)))
                 (in (<| (as Expression)
                         (is Statement)
                         (_.switch (_.the //runtime.i64_low_field inputG)
                                   conditionals!
                                   {.#Some else!})))))]))

... [Bundles]
(def lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurried _.=)))
      (/.install "try" (unary //runtime.lux//try))))

(def i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried //runtime.i64::and)))
          (/.install "or" (binary (product.uncurried //runtime.i64::or)))
          (/.install "xor" (binary (product.uncurried //runtime.i64::xor)))
          (/.install "left-shift" (binary i64::left_shifted))
          (/.install "right-shift" (binary i64::right_shifted))
          (/.install "=" (binary (product.uncurried //runtime.i64::=)))
          (/.install "<" (binary (product.uncurried //runtime.i64::<)))
          (/.install "+" (binary (product.uncurried //runtime.i64::+)))
          (/.install "-" (binary (product.uncurried //runtime.i64::-)))
          (/.install "*" (binary (product.uncurried //runtime.i64::*)))
          (/.install "/" (binary (product.uncurried //runtime.i64::/)))
          (/.install "%" (binary (product.uncurried //runtime.i64::%)))
          (/.install "f64" (unary //runtime.i64::number))
          (/.install "char" (unary i64::char))
          )))

(def f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "+" (binary (product.uncurried _.+)))
          (/.install "-" (binary (product.uncurried _.-)))
          (/.install "*" (binary (product.uncurried _.*)))
          (/.install "/" (binary (product.uncurried _./)))
          (/.install "%" (binary (product.uncurried _.%)))
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "i64" (unary //runtime.i64::of_number))
          (/.install "encode" (unary (_.do "toString" (list))))
          (/.install "decode" (unary f64//decode)))))

(def text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.=)))
          (/.install "<" (binary (product.uncurried _.<)))
          (/.install "concat" (binary text//concat))
          (/.install "index" (trinary text//index))
          (/.install "size" (unary (|>> (_.the "length") //runtime.i64::of_number)))
          (/.install "char" (binary (product.uncurried //runtime.text//char)))
          (/.install "clip" (trinary text//clip))
          )))

(def io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary io//log))
          (/.install "error" (unary //runtime.io//error)))))

(def .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> lux_procs
          (dictionary.composite i64_procs)
          (dictionary.composite f64_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs)
          )))
