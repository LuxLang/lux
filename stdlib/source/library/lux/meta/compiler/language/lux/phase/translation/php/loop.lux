... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Scope)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [target
     ["_" php (.only Var Expression Label Statement)]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Phase! Translator Translator!)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]" synthesis (.only Scope Synthesis)]
     ["[1][0]" translation]
     ["//[1]" ///
      ["[1][0]" phase]
      [meta
       [archive (.only Archive)]]
      [reference
       [variable (.only Register)]]]]]]])

(the @scope
  (-> Nat Label)
  (|>> %.nat (%.format "scope") _.label))

(the (setup offset bindings body)
  (-> Register (List Expression) Statement Statement)
  ... TODO: There is a bug in the way the variables are updated. Do it like it's done in either JS or Lua.
  (|> bindings
      list.enumeration
      (list#each (function (_ [register value])
                   (let [variable (//when.register (n.+ offset register))]
                     (_.set! variable value))))
      list.reversed
      (list#mix _.then body)))

(the .public (scope! statement expression archive [start initsS+ bodyS])
  (Translator! (Scope Synthesis))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [@scope (of ! each ..@scope /////translation.next)
       initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////translation.with_anchor [start @scope]
               (statement expression archive bodyS))]
      (in (..setup start initsO+
                   (all _.then
                        (_.set_label @scope)
                        body!))))))

(the .public (scope statement expression archive [start initsS+ bodyS])
  (-> Phase! (Translator (Scope Synthesis)))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! ///////phase.monad]
      [[[loop_module loop_artifact] scope!] (/////translation.with_new_context archive
                                              (..scope! statement expression archive [start initsS+ bodyS]))
       .let [locals (|> initsS+
                        list.enumeration
                        (list#each (|>> product.left (n.+ start) //when.register _.parameter)))
             @loop (_.constant (///reference.artifact [loop_module loop_artifact]))
             loop_variables (set.of_list _.hash (list#each product.right locals))
             referenced_variables (is (-> Synthesis (Set Var))
                                      (|>> synthesis.path/then
                                           //when.dependencies
                                           (set.of_list _.hash)))
             [declaration instantiation] (is [Statement Expression]
                                             (when (|> (list#each referenced_variables initsS+)
                                                       (list#mix set.union (referenced_variables bodyS))
                                                       (set.difference loop_variables)
                                                       set.list)
                                               {.#End}
                                               [(_.define_function @loop (list) scope!)
                                                @loop]

                                               foreigns
                                               [(<| (_.define_function @loop (list#each _.parameter foreigns))
                                                    (_.return (_.closure (list#each _.parameter foreigns) (list) scope!)))
                                                (_.apply foreigns @loop)]))]
       _ (/////translation.execute! declaration)
       _ (/////translation.save! loop_artifact declaration)]
      (in (_.apply (list) instantiation)))))

... TODO: Stop using a constant hard-coded variable. Translate a new one each time.
(the @temp
  (_.var "lux_again_values"))

(the .public (again! statement expression archive argsS+)
  (Translator! (List Synthesis))
  (do [! ///////phase.monad]
    [[offset @scope] /////translation.anchor
     argsO+ (monad.each ! (expression archive) argsS+)]
    (in (all _.then
             (_.set! @temp (_.array/* argsO+))
             (..setup offset
                      (|> argsO+
                          list.enumeration
                          (list#each (function (_ [idx _])
                                       (_.item (_.int (.int idx)) @temp))))
                      (_.go_to @scope))))))
