... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Synthesis)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]]
   ["[0]" meta (.only)
    [macro
     ["^" pattern]]
    [type
     ["[0]" check]]
    [compiler
     [meta
      ["[0]" archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]]
 ["[0]" /
  [runtime (.only Operation Phase Handler)]
  ["[1][0]" primitive]
  ["[1][0]" complex]
  ... ["[1][0]" reference]
  ... ["[1][0]" function]
  ... ["[1][0]" when]
  ... ["[1][0]" loop]
  ["//[1]" ///
   ["[0]" extension]
   [//
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" synthesis (.only Synthesis)]
    ["[0]" translation]
    [///
     ["[0]" reference]]]]])

(def .public (translation extender lux)
  (-> extension.Extender Lux
      Phase)
  (function (phase archive it)
    (when it
      (^.with_template [<tag> <translator>]
        [(<tag> @ it)
         (phase#in (<translator> it))])
      ([synthesis.bit  /primitive.bit]
       [synthesis.i64  /primitive.i64]
       [synthesis.f64  /primitive.f64]
       [synthesis.text /primitive.text])

      (synthesis.variant @ it)
      (/complex.variant phase archive it)

      (synthesis.tuple @ it)
      (/complex.tuple phase archive it)

      ... [@ {synthesis.#Reference reference}]
      ... (when reference
      ...   {reference.#Variable variable}
      ...   (/reference.variable archive variable)
      
      ...   {reference.#Constant constant}
      ...   (/reference.constant archive constant))

      ... (synthesis.branch/when @ [valueS pathS])
      ... (/when.when phase archive [valueS pathS])

      ... (synthesis.branch/exec @ [this that])
      ... (/when.exec phase archive [this that])

      ... (synthesis.branch/let @ [inputS register bodyS])
      ... (/when.let phase archive [inputS register bodyS])

      ... (synthesis.branch/if @ [conditionS thenS elseS])
      ... (/when.if phase archive [conditionS thenS elseS])

      ... (synthesis.branch/get @ [path recordS])
      ... (/when.get phase archive [path recordS])

      ... (synthesis.loop/scope @ scope)
      ... (/loop.scope phase archive scope)

      ... (synthesis.loop/again @ updates)
      ... (/loop.again phase archive updates)

      ... (synthesis.function/abstraction @ abstraction)
      ... (/function.abstraction phase archive abstraction)

      ... (synthesis.function/apply @ application)
      ... (/function.apply phase archive application)

      ... [@ {synthesis.#Extension [name parameters]}]
      ... (extension.application extender lux phase archive .Translation false name parameters
      ...                        (|>>)
      ...                        (function (_ _) {.#None}))

      _
      (undefined)
      )))
