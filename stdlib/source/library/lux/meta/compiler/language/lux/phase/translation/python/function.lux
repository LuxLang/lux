... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" stack (.use "[1]#[0]" monoid functor mix)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    [compiler
     [target
      ["_" python (.only SVar)]]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Expression Phase!)]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["/[1]" //
   ["[1][0]" reference]
   ["//[1]" ///
    ["[0]" phase]
    ["[0]" synthesis]
    ["[0]" translation]
    ["//[1]" ///
     [arity (.only Arity)]
     [reference
      [register (.only Register)]
      [variable (.only Variable)]]
     [meta
      [archive (.only Archive)
       ["[0]" artifact]
       ["[0]" unit]]
      ["[0]" cache
       [dependency
        ["[1]" artifact]]]]]]]])

(the .public capture
  (-> Register
      SVar)
  (|>> (///reference.foreign //reference.system)
       as_expected))

(the (procedure_id abstraction_id)
  (-> unit.ID
      unit.ID)
  [unit.#module (its unit.#module abstraction_id)
   unit.#artifact (++ (its unit.#artifact abstraction_id))])

(the (procedure environment name arity body)
  (-> (Stack //runtime.Value) unit.ID Arity _.Statement
      _.Statement)
  (_.def (_.var (///reference.artifact name))
         (all stack#composite
              (|> (stack.enumeration environment)
                  (stack#each (|>> product.left ..capture)))
              (stack (//when.register 0))
              (stack#each (|>> ++ //when.register)
                          (stack.indices arity))
              )
         (<| //loop.set_tail_recursion
             body)))

(the (arbitrary_reification' expression archive [abstraction parameters])
  (Expression [//runtime.Value (Stack synthesis.Term)])
  (do [! phase.monad]
    [parameters (monad.each ! (expression archive) parameters)]
    (in (_.apply parameters abstraction))))

(the (arbitrary_reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (do phase.monad
    [abstraction (expression archive abstraction)]
    (arbitrary_reification' expression archive [abstraction parameters])))

(the (exact_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (Stack synthesis.Term)])
  (do [! phase.monad]
    [parameters (monad.each ! (expression archive) parameters)]
    (in (_.apply {.#Top (_.var (///reference.artifact abstraction))
                        parameters}
                 (_.var (///reference.artifact (..procedure_id abstraction)))))))

(the (successive_reification expression archive [abstraction arity parameters])
  (Expression [unit.ID Arity (Stack synthesis.Term)])
  (do [! phase.monad]
    [first (exact_reification expression archive [abstraction arity (stack.first arity parameters)])]
    (arbitrary_reification' expression archive [first (stack.after arity parameters)])))

(the .public (reification expression archive [abstraction parameters])
  (Expression synthesis.Reification)
  (when abstraction
    (synthesis.constant @ $abstraction)
    (do [! phase.monad]
      [[@definition |abstraction|] (translation.definition archive $abstraction)
       .let [actual_arity (stack.size parameters)]]
      (when |abstraction|
        {.#Some [_ {.#Some [expected_arity @abstraction]}]}
        (if (n.= expected_arity actual_arity)
          (exact_reification expression archive [@abstraction expected_arity parameters])

          (n.< expected_arity actual_arity)
          (arbitrary_reification expression archive [abstraction parameters])
          
          ... (n.> expected_arity actual_arity)
          (successive_reification expression archive [@abstraction expected_arity parameters]))
        
        _
        (arbitrary_reification expression archive [abstraction parameters])))

    _
    (arbitrary_reification expression archive [abstraction parameters])))

(the (with_closure abstraction_id @function inits abstraction_definition)
  (-> artifact.ID SVar (Stack _.Expression) _.Statement (Operation _.Expression))
  (when inits
    {.#Empty}
    (do phase.monad
      [_ (translation.execute! abstraction_definition)
       _ (translation.save! abstraction_id {.#None} abstraction_definition)]
      (in @function))

    _
    (do [! phase.monad]
      [.let [declaration (_.def @function
                                (|> (stack.enumeration inits)
                                    (stack#each (|>> product.left ..capture)))
                                (all _.then
                                     abstraction_definition
                                     (_.return @function)))]
       _ (translation.execute! declaration)
       _ (translation.save! abstraction_id {.#None} declaration)]
      (in (_.apply inits @function)))))

(the input
  (|>> ++ //when.register))

(the .public (function statement expression archive [environment arity bodyS])
  (-> Phase! (Expression synthesis.Abstraction))
  (do [! phase.monad]
    [dependencies (cache.dependencies archive bodyS)
     environment (monad.each ! (expression archive) environment)
     [abstraction_id body!] (let [abstraction (<| (translation.with_new_context archive dependencies)
                                                  (translation.with_anchor 1)
                                                  (statement expression archive)
                                                  bodyS)]
                              (when environment
                                (stack)
                                (do !
                                  [[abstraction_id procedure_id body!] (<| (translation.with_new_context archive dependencies)
                                                                           abstraction)
                                   .let [procedure_definition (..procedure environment procedure_id arity body!)]
                                   _ (translation.execute! procedure_definition)
                                   _ (translation.save! (its unit.#artifact procedure_id) {.#None} procedure_definition)]
                                  (in [abstraction_id body!]))

                                non_empty
                                abstraction))
     .let [[abstraction_module abstraction_artifact] abstraction_id
           @curried (_.var "curried")
           arityO (|> arity .integer _.int)
           @num_args (_.var "num_args")
           @self (_.var (///reference.artifact [abstraction_module abstraction_artifact]))
           apply_poly (.function (_ args func)
                        (_.apply (stack (_.splat_poly args)) func))
           initialize_self! (_.set (stack (//when.register 0)) @self)
           initialize! (stack#mix (.function (_ post pre!)
                                    (all _.then
                                         pre!
                                         (_.set (stack (..input post)) (_.item (|> post .integer _.int) @curried))))
                                  initialize_self!
                                  (stack.indices arity))]]
    (with_closure abstraction_artifact @self environment
      (_.def @self (stack (_.poly @curried))
             (all _.then
                  (_.set (stack @num_args) (_.len/1 @curried))
                  (<| (_.if (|> @num_args (_.= arityO))
                        (<| (_.then initialize!)
                            //loop.set_tail_recursion
                            body!))
                      (_.if (|> @num_args (_.< arityO))
                        (let [@next (_.var "next")
                              @missing (_.var "missing")]
                          (all _.then
                               (_.def @next (stack (_.poly @missing))
                                      (_.return (|> @self (apply_poly (|> @curried (_.+ @missing))))))
                               (_.return @next)
                               )))
                      ... (|> @num_args (_.> arityO))
                      (let [arity_inputs (_.slice (_.int +0) arityO @curried)
                            extra_inputs (_.slice arityO @num_args @curried)]
                        (_.return (|> @self
                                      (apply_poly arity_inputs)
                                      (apply_poly extra_inputs)))))
                  )))
    ))
