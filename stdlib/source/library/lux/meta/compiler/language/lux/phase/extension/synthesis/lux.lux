(.require
 [library
  [lux (.except Synthesis)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary]]]
   [meta
    ["[0]" location]
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    [compiler
     ["[0]" phase]]]]]
 ["[0]" /// (.only)
  [///
   ["[0]" synthesis (.only Synthesis Handler Bundle)]]])

(def .public synthesis
  (-> Text Text)
  (|>> (text.suffix "|synthesis")))

(def translation
  (-> Text Text)
  (text.replaced (synthesis "") "|translation"))

(def .public (install name anonymous)
  (-> Text (-> Text Handler)
      (-> Bundle Bundle))
  (dictionary.has name (anonymous name)))

(def (flat_text_composite expected)
  (-> Symbol (List Synthesis)
      (List Synthesis))
  (|>> (list#each (function (_ it)
                    (when it
                      [@ {synthesis.#Extension actual parameters}]
                      (if (symbol#= expected actual)
                        parameters
                        (list it))

                      _
                      (list it))))
       list#conjoint))

(def (text::composite self)
  (-> Text Handler)
  (let [translation [.prelude (translation self)]]
    (function (_ synthesis archive parts)
      (do [! phase.monad]
        [parts (monad.each ! (synthesis archive) parts)]
        (in [location.dummy {synthesis.#Extension translation (flat_text_composite translation parts)}])))))

(def .public bundle
  Bundle
  (`` (|> ///.empty
          (,, (with_template [<default> <handler>]
                [(..install (let [[_ short] (symbol <default>)]
                              (synthesis short))
                            <handler>)]

                [.text_composite# ..text::composite]
                )))))
