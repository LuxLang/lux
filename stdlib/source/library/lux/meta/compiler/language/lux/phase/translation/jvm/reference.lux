... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    [text
     ["%" \\format (.only format)]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]
       ["[0]" type]
       [encoding
        ["[0]" unsigned]]]]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation)]
  ["[1][0]" value]
  ["[1][0]" type]
  ["//[1]" ///
   [//
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" translation]
    [///
     [reference
      ["[0]" variable (.only Register Variable)]]
     [meta
      [archive (.only Archive)]]]]]])

(def .public this
  (Bytecode Any)
  _.aload_0)

(with_template [<name> <prefix>]
  [(def .public <name>
     (-> Register Text)
     (|>> %.nat (format <prefix>)))]

  [foreign_name "f"]
  [partial_name "p"]
  )

(def (foreign archive variable)
  (-> Archive Register (Operation (Bytecode Any)))
  (do [! phase.monad]
    [bytecode_name (of ! each //runtime.class_name
                       (translation.context archive))]
    (in (all _.composite
             ..this
             (_.getfield (type.class bytecode_name (list))
                         (..foreign_name variable)
                         //type.value)))))

(def .public (variable archive variable)
  (-> Archive Variable (Operation (Bytecode Any)))
  (when variable
    {variable.#Local variable}
    (phase#in (_.aload variable))
    
    {variable.#Foreign variable}
    (..foreign archive variable)))

(def .public (constant archive name)
  (-> Archive Symbol (Operation (Bytecode Any)))
  (do phase.monad
    [[@definition |abstraction|] (translation.definition archive name)
     .let [:definition: (type.class (//runtime.class_name @definition) (list))]]
    (in (when |abstraction|
          {.#Some [_ {.#Some [expected_arity @abstraction]}]}
          (let [:abstraction: (type.class (//runtime.class_name @abstraction) (list))]
            (_.getstatic :definition: //value.field :abstraction:))
          
          _
          (_.getstatic :definition: //value.field //type.value)))))
