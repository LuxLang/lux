(.require
 [library
  [lux (.except Type Label Synthesis)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["|" pipe]
    ["<>" parser]
    ["[0]" try]
    ["[0]" function]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary]]]
   [math
    [number
     ["f" frac]
     ["[0]" i32]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Label Bytecode) (.use "[1]#[0]" monad)]
       [encoding
        ["[0]" signed (.only S4)]]
       ["[0]" type (.only Type)
        [category (.only Primitive Class)]]]]]]]]
 ["[0]" /////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["///" jvm
    ["[1][0]" value]
    ["[1][0]" runtime (.only Operation Phase Bundle Handler)]
    ["[1][0]" function
     ["[1]" abstract]]]]
  [//
   ["[0]" phase]
   ["[0]" synthesis (.only Synthesis %synthesis)
    ["<[1]>" \\parser (.only Parser)]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(def .public (custom [parser handler])
  (All (_ s)
    (-> [(Parser s)
         (-> Phase Archive s (Operation (Bytecode Any)))]
        Handler))
  (function (_ phase archive input)
    (when (<synthesis>.result parser input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

(def $Boolean (type.class "java.lang.Boolean" (list)))
(def $Double (type.class "java.lang.Double" (list)))
(def $Character (type.class "java.lang.Character" (list)))
(def $String (type.class "java.lang.String" (list)))
(def $CharSequence (type.class "java.lang.CharSequence" (list)))
(def $Object (type.class "java.lang.Object" (list)))
(def $PrintStream (type.class "java.io.PrintStream" (list)))
(def $System (type.class "java.lang.System" (list)))
(def $Error (type.class "java.lang.Error" (list)))

(def lux_int
  (Bytecode Any)
  (all _.composite
       _.i2l
       (///value.boxed type.long)))

(def jvm_int
  (Bytecode Any)
  (all _.composite
       (///value.primitive type.long)
       _.l2i))

(def (predicate bytecode)
  (-> (-> Label (Bytecode Any))
      (Bytecode Any))
  (do _.monad
    [@then _.new_label
     @end _.new_label]
    (all _.composite
         (bytecode @then)
         (_.getstatic $Boolean "FALSE" $Boolean)
         (_.goto @end)
         (_.set_label @then)
         (_.getstatic $Boolean "TRUE" $Boolean)
         (_.set_label @end)
         )))

... TODO: Get rid of this ASAP
(def lux::syntax_char_case!
  (..custom [(all <>.and
                  <synthesis>.any
                  <synthesis>.any
                  (<>.some (<synthesis>.tuple (all <>.and
                                                   (<synthesis>.tuple (<>.many <synthesis>.i64))
                                                   <synthesis>.any))))
             (function (_ phase archive [inputS elseS conditionalsS])
               (do [! phase.monad]
                 [@end ///runtime.forge_label
                  inputG (phase archive inputS)
                  elseG (phase archive elseS)
                  conditionalsG+ (is (Operation (List [(List [S4 Label])
                                                       (Bytecode Any)]))
                                     (monad.each ! (function (_ [chars branch])
                                                     (do !
                                                       [branchG (phase archive branch)
                                                        @branch ///runtime.forge_label]
                                                       (in [(list#each (function (_ char)
                                                                         [(try.trusted (signed.s4 (.int char))) @branch])
                                                                       chars)
                                                            (all _.composite
                                                                 (_.set_label @branch)
                                                                 branchG
                                                                 (_.when_continuous (_.goto @end)))])))
                                                 conditionalsS))
                  .let [table (|> conditionalsG+
                                  (list#each product.left)
                                  list#conjoint)
                        conditionalsG (|> conditionalsG+
                                          (list#each product.right)
                                          (monad.all _.monad))]]
                 (in (do _.monad
                       [@else _.new_label]
                       (all _.composite
                            inputG (///value.primitive type.long) _.l2i
                            (_.lookupswitch @else table)
                            conditionalsG
                            (_.set_label @else)
                            elseG
                            (<| (_.when_acknowledged @end)
                                (_.set_label @end))
                            )))))]))

(def (lux::is [referenceG sampleG])
  (Binary (Bytecode Any))
  (all _.composite
       referenceG
       sampleG
       (..predicate _.if_acmpeq)))

(def (lux::try riskyG)
  (Unary (Bytecode Any))
  (all _.composite
       riskyG
       (_.checkcast ///function.class)
       ///runtime.try))

(def with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" ..lux::syntax_char_case!)
       (dictionary.has "is?#|translation" (binary ..lux::is))
       (dictionary.has "try#|translation" (unary ..lux::try))))

(with_template [<name> <op>]
  [(def (<name> [maskG inputG])
     (Binary (Bytecode Any))
     (all _.composite
          inputG (///value.primitive type.long)
          maskG (///value.primitive type.long)
          <op> (///value.boxed type.long)))]

  [i64::and _.land]
  [i64::or  _.lor]
  [i64::xor _.lxor]
  )

(with_template [<name> <op>]
  [(def (<name> [shiftG inputG])
     (Binary (Bytecode Any))
     (all _.composite
          inputG (///value.primitive type.long)
          shiftG ..jvm_int
          <op> (///value.boxed type.long)))]

  [i64::left_shifted  _.lshl]
  [i64::right_shifted _.lushr]
  )

(with_template [<name> <type> <op>]
  [(def (<name> [paramG subjectG])
     (Binary (Bytecode Any))
     (all _.composite
          subjectG (///value.primitive <type>)
          paramG (///value.primitive <type>)
          <op> (///value.boxed <type>)))]

  [i64::+ type.long   _.ladd]
  [i64::- type.long   _.lsub]
  [i64::* type.long   _.lmul]
  [i64::/ type.long   _.ldiv]
  [i64::% type.long   _.lrem]
  
  [f64::+ type.double _.dadd]
  [f64::- type.double _.dsub]
  [f64::* type.double _.dmul]
  [f64::/ type.double _.ddiv]
  [f64::% type.double _.drem]
  )

(with_template [<eq> <lt> <type> <cmp>]
  [(with_template [<name> <reference>]
     [(def (<name> [paramG subjectG])
        (Binary (Bytecode Any))
        (all _.composite
             subjectG (///value.primitive <type>)
             paramG (///value.primitive <type>)
             <cmp>
             <reference>
             (..predicate _.if_icmpeq)))]
     
     [<eq> _.iconst_0]
     [<lt> _.iconst_m1])]

  [i64::= i64::< type.long   _.lcmp]
  [f64::= f64::< type.double _.dcmpg]
  )

(def (::toString class from)
  (-> (Type Class) (Type Primitive) (Bytecode Any))
  (_.invokestatic class "toString" (type.method [(list) (list from) ..$String (list)])))

(with_template [<name> <prepare> <transform>]
  [(def (<name> inputG)
     (Unary (Bytecode Any))
     (all _.composite
          inputG
          <prepare>
          <transform>))]

  [i64::f64
   (///value.primitive type.long)
   (all _.composite
        _.l2d
        (///value.boxed type.double))]

  [i64::char
   (///value.primitive type.long)
   (all _.composite
        _.l2i
        _.i2c
        (..::toString ..$Character type.char))]

  [f64::i64
   (///value.primitive type.double)
   (all _.composite
        _.d2l
        (///value.boxed type.long))]
  
  [f64::encode
   (///value.primitive type.double)
   (..::toString ..$Double type.double)]
  
  [f64::decode
   (_.checkcast $String)
   ///runtime.decode_frac]
  )

(def with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary ..i64::and))
       (dictionary.has "i64_or#|translation" (binary ..i64::or))
       (dictionary.has "i64_xor#|translation" (binary ..i64::xor))
       (dictionary.has "i64_left#|translation" (binary ..i64::left_shifted))
       (dictionary.has "i64_right#|translation" (binary ..i64::right_shifted))

       (dictionary.has "i64_=#|translation" (binary ..i64::=))
       (dictionary.has "i64_+#|translation" (binary ..i64::+))
       (dictionary.has "i64_-#|translation" (binary ..i64::-))))

(def with_int_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary ..i64::<))
       (dictionary.has "int_*#|translation" (binary ..i64::*))
       (dictionary.has "int_/#|translation" (binary ..i64::/))
       (dictionary.has "int_%#|translation" (binary ..i64::%))
       
       (dictionary.has "int_f64#|translation" (unary ..i64::f64))
       (dictionary.has "int_char#|translation" (unary ..i64::char))))

(def with_frac_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary ..f64::+))
       (dictionary.has "f64_-#|translation" (binary ..f64::-))
       (dictionary.has "f64_*#|translation" (binary ..f64::*))
       (dictionary.has "f64_/#|translation" (binary ..f64::/))
       (dictionary.has "f64_%#|translation" (binary ..f64::%))
       (dictionary.has "f64_=#|translation" (binary ..f64::=))
       (dictionary.has "f64_<#|translation" (binary ..f64::<))
       (dictionary.has "f64_int#|translation" (unary ..f64::i64))
       (dictionary.has "f64_encoded#|translation" (unary ..f64::encode))
       (dictionary.has "f64_decoded#|translation" (unary ..f64::decode))))

(def $String::length
  (_.invokevirtual ..$String "length" (type.method [(list) (list) type.int (list)])))

(def (text::size inputG)
  (Unary (Bytecode Any))
  (all _.composite
       inputG
       (_.checkcast $String)
       $String::length
       ..lux_int))

(def no_op
  (Bytecode Any)
  (_#in []))

(with_template [<name> <pre_subject> <pre_param> <op> <post>]
  [(def (<name> [paramG subjectG])
     (Binary (Bytecode Any))
     (all _.composite
          subjectG <pre_subject>
          paramG <pre_param>
          <op> <post>))]

  [text::= ..no_op ..no_op
   (_.invokevirtual ..$Object "equals" (type.method [(list) (list ..$Object) type.boolean (list)]))
   (///value.boxed type.boolean)]
  [text::< (_.checkcast $String) (_.checkcast $String)
   (_.invokevirtual ..$String "compareTo" (type.method [(list) (list ..$String) type.int (list)]))
   (..predicate _.iflt)]
  [text::char (_.checkcast $String) ..jvm_int
   (_.invokevirtual ..$String "charAt" (type.method [(list) (list type.int) type.char (list)]))
   ..lux_int]
  )

(def text::composite
  (Variadic (Bytecode Any))
  (let [$StringBuilder (type.class "java.lang.StringBuilder" (list))
        add_part! (is (-> (Bytecode Any)
                          (Bytecode Any))
                      (function (_ it)
                        (all _.composite
                             it
                             (_.checkcast $String)
                             )))
        update_size! (is (Bytecode Any)
                         (all _.composite
                              _.dup
                              $String::length
                              _.dup2_x1
                              _.pop2
                              _.iadd
                              ))
        new_StringBuilder (is (Bytecode Any)
                              (all _.composite
                                   (_.new $StringBuilder)
                                   _.dup_x1
                                   _.swap
                                   (_.invokespecial $StringBuilder "<init>" (type.method [(list) (list type.int) type.void (list)]))
                                   ))
        compose_part! (is (Bytecode Any)
                          (all _.composite
                               _.swap
                               (_.invokevirtual $StringBuilder "append" (type.method [(list) (list ..$String) $StringBuilder (list)]))
                               ))]
    (|>> (|.when (list)
           (_.string "")

           (list single)
           single

           (list left right)
           (all _.composite
                left (_.checkcast $String)
                right (_.checkcast $String)
                (_.invokevirtual ..$String "concat" (type.method [(list) (list ..$String) ..$String (list)])))

           parts
           (do [! _.monad]
             [_ (_.int (.i64 +0))
              _ (monad.each ! (is (-> (Bytecode Any)
                                      (Bytecode Any))
                                  (function (_ it)
                                    (all _.composite
                                         (add_part! it)
                                         update_size!
                                         )))
                            (list.reversed parts))
              _ new_StringBuilder
              _ (monad.each ! (function.constant compose_part!)
                            parts)]
             (_.invokevirtual $StringBuilder "toString" (type.method [(list) (list) ..$String (list)])))
           ))))

(def (text::clip [offset! length! subject!])
  (Trinary (Bytecode Any))
  (all _.composite
       subject! (_.checkcast $String)
       offset! ..jvm_int
       _.dup
       length! ..jvm_int
       _.iadd
       (_.invokevirtual ..$String "substring" (type.method [(list) (list type.int type.int) ..$String (list)]))))

(def index_method (type.method [(list) (list ..$String type.int) type.int (list)]))
(def (text::index [startG partG textG])
  (Trinary (Bytecode Any))
  (do _.monad
    [@not_found _.new_label
     @end _.new_label]
    (all _.composite
         textG (_.checkcast $String)
         partG (_.checkcast $String)
         startG ..jvm_int
         (_.invokevirtual ..$String "indexOf" index_method)
         _.dup
         _.iconst_m1
         (_.if_icmpeq @not_found)
         ..lux_int
         ///runtime.some_injection
         (_.goto @end)
         (_.set_label @not_found)
         _.pop
         ///runtime.none_injection
         (_.set_label @end))))

(def with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary ..text::=))
       (dictionary.has "text_<#|translation" (binary ..text::<))
       (dictionary.has "text_composite#|translation" (variadic ..text::composite))
       (dictionary.has "text_index#|translation" (trinary ..text::index))
       (dictionary.has "text_size#|translation" (unary ..text::size))
       (dictionary.has "text_char#|translation" (binary ..text::char))
       (dictionary.has "text_clip#|translation" (trinary ..text::clip))))

(def string_method (type.method [(list) (list ..$String) type.void (list)]))
(def (io::log messageG)
  (Unary (Bytecode Any))
  (all _.composite
       (_.getstatic ..$System "out" ..$PrintStream)
       messageG
       (_.checkcast $String)
       (_.invokevirtual ..$PrintStream "println" ..string_method)
       ///runtime.unit))

(def (io::error messageG)
  (Unary (Bytecode Any))
  (all _.composite
       (_.new ..$Error)
       _.dup
       messageG
       (_.checkcast $String)
       (_.invokespecial ..$Error "<init>" ..string_method)
       _.athrow))

(def with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary ..io::log))
       (dictionary.has "error#|translation" (unary ..io::error))))

(def .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_io_extensions
      with_text_extensions
      with_i64_extensions
      with_int_extensions
      with_frac_extensions
      ))
