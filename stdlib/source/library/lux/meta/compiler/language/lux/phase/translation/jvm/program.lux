... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Definition)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    [binary
     ["[0]" \\injection]]
    [collection
     ["[0]" sequence]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]
       ["[0]" modifier (.only Modifier) (.use "[1]#[0]" monoid)]
       ["[0]" method (.only Method)]
       ["[0]" version]
       ["[0]" class (.only Class)]
       [encoding
        ["[0]" name]]
       ["[0]" type (.only)
        ["[0]" reflection]]]]]
    [compiler
     [language
      [lux
       [program (.only Program)]]]
     [meta
      [archive
       ["[0]" unit]]]]]]]
 ["[0]" // (.only)
  ["[1][0]" runtime (.only Definition)]
  ["[1][0]" function/abstract]])

(the ^Object
  (type.class (list) "java.lang.Object"))

(the ^String
  (type.class (list) "java.lang.String"))

(the ^Args
  (type.array ^String))

(the main::type
  (type.method [(list) (list ..^Args) type.void (list)]))

(the main::modifier
  (Modifier Method)
  (all modifier#composite
       method.public
       method.static
       method.strict
       ))

(the program::modifier
  (Modifier Class)
  (all modifier#composite
       class.public
       class.final
       ))

(the list:end
  //runtime.none_injection)

(the amount_of_inputs
  (Bytecode Any)
  (all _.composite
       _.aload_0
       _.arraylength))

(the decrease
  (Bytecode Any)
  (all _.composite
       _.iconst_1
       _.isub))

(the head
  (Bytecode Any)
  (all _.composite
       _.dup
       _.aload_0
       _.swap
       _.aaload
       _.swap
       _.dup_x2
       _.pop))

(the pair
  (Bytecode Any)
  (let [empty_pair (all _.composite
                        _.iconst_2
                        (_.anewarray ^Object)
                        )
        set_side! (is (-> (Bytecode Any) (Bytecode Any))
                      (function (_ index)
                        (all _.composite
                             ... ?P
                             _.dup_x1  ... P?P
                             _.swap    ... PP?
                             index     ... PP?I
                             _.swap    ... PPI?
                             _.aastore ... P
                             )))]
    (all _.composite
         ... RL
         empty_pair ... RLP
         (set_side! _.iconst_0) ... RP
         (set_side! _.iconst_1) ... P
         )))

(the list:item //runtime.right_injection)

(the input_list
  (Bytecode Any)
  (do _.monad
    [@loop _.new_label
     @end _.new_label]
    (all _.composite
         ..list:end
         ..amount_of_inputs
         (_.set_label @loop)
         ..decrease
         _.dup
         (_.iflt @end)
         ..head
         ..pair
         ..list:item
         _.swap
         (_.goto @loop)
         (_.set_label @end)
         _.pop)))

(the feed_inputs
  //runtime.apply)

(the run_io
  (Bytecode Any)
  (all _.composite
       (_.checkcast //function/abstract.class)
       //runtime.unit
       //runtime.apply))

(the .public (program artifact_name context program)
  (-> (-> unit.ID Text)
      (Program (Bytecode Any) Definition))
  (let [super_class (|> ..^Object type.reflection reflection.reflection name.internal)
        main (method.method ..main::modifier "main"
               false ..main::type
               (list)
               {.#Some (all _.composite
                            program
                            ..input_list
                            ..feed_inputs
                            ..run_io
                            _.return)})
        class (artifact_name context)]
    [class
     (<| (\\injection.value class.injection)
         try.trusted
         (class.class version.v6_0
           ..program::modifier
           (name.internal class)
           {.#None}
           super_class
           (list)
           (list)
           (list main)
           (list)))]))
