... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" stack]]]
   ["[0]" type (.only)
    ["[0]" check]]
   ["[0]" meta (.only)
    [compiler
     [target
      ["_" python]]]
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" //
  ["/" lux (.only custom)]
  ["/[1]" // (.only)
   [///
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(the array::new
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [lengthA (analysis/type.expecting Natural
                                              (phase archive lengthC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack lengthA)}]))))]))

(the array::length
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference Natural)
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack arrayA)}]))))]))

(the array::read
  (-> Text Handler)
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference :read:)
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA arrayA)}]))))]))

(the array::write
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             valueA (analysis/type.expecting :write:
                                             (phase archive valueC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA valueA arrayA)}]))))]))

(the array::delete
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Natural
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type (array.Array' :read: :write:)))
             @ meta.provenance]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (stack indexA arrayA)}]))))]))

(the with_array_extensions
  (-> Bundle Bundle)
  (|>> (/.install "python_array_new#" array::new)
       (/.install "python_array_length#" array::length)
       (/.install "python_array_read#" array::read)
       (/.install "python_array_write#" array::write)
       (/.install "python_array_delete#" array::delete)
       ))

(the None
  (for .python ffi.None
       Any))

(the Object
  (for .python (type (ffi.Object Any))
       Any))

(the Function
  (for .python ffi.Function
       Any))

(the Dict
  (for .python ffi.Dict
       Any))

(the object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ fieldC)
                                           objectA)}])))]))

(the object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack.partial (analysis.text @ methodC)
                                                   objectA
                                                   inputsA)}])))]))

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.install "python_object_get#" object::get)
       (/.install "python_object_do#" object::do)
       (/.install "python_object_none#" (/.nullary ..None))
       (/.install "python_object_none?#" (/.unary Any Bit))
       ))

(the python::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ name))}])))]))

(the python::import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference ..Object)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.text @ name))}])))]))

(the python::apply
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.expecting ..Function
                                               (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack.partial abstractionA inputsA)}])))]))

(the python::function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.natural <code>.any)
    (function (_ extension phase archive [arity abstractionC])
      (do phase.monad
        [.let [inputT (type.tuple (stack.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference ..Function)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack (analysis.natural @ arity)
                                           abstractionA)}])))]))

(the python::exec
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [codeC globalsC])
      (do phase.monad
        [codeA (analysis/type.expecting Text
                                        (phase archive codeC))
         globalsA (analysis/type.expecting ..Dict
                                           (phase archive globalsC))
         _ (analysis/type.inference .Any)
         @ meta.provenance]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (stack codeA globalsA)}])))]))

(the .public bundle
  Bundle
  (|> ///.empty
      with_array_extensions
      with_object_extensions

      (/.install "python_constant#" python::constant)
      (/.install "python_import#" python::import)
      (/.install "python_apply#" python::apply)
      (/.install "python_function#" python::function)
      (/.install "python_exec#" python::exec)
      ))
