(.require
 [library
  [lux (.except Analysis)
   ["[0]" ffi]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" array]
     ["[0]" dictionary]
     ["[0]" list]]]
   ["[0]" meta (.only)
    ["@" target (.only)
     ["_" python]]
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 ["[0]" //
  ["/" lux (.only custom)]
  ["/[1]" // (.only)
   [///
    ["[0]" phase]
    ["[0]" analysis (.only Analysis Operation Phase Handler Bundle)
     ["[1]/[0]" type]]]]])

(def array::new
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive lengthC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [lengthA (analysis/type.expecting Nat
                                              (phase archive lengthC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))
             @ meta.location]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (list lengthA)}]))))]))

(def array::length
  (-> Text Handler)
  (custom
   [<code>.any
    (function (_ extension phase archive arrayC)
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference Nat)
             @ meta.location]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (list arrayA)}]))))]))

(def array::read
  (-> Text Handler)
  (custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference :read:)
             @ meta.location]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (list indexA arrayA)}]))))]))

(def array::write
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any <code>.any)
    (function (_ extension phase archive [indexC valueC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             valueA (analysis/type.expecting :write:
                                             (phase archive valueC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))
             @ meta.location]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (list indexA valueA arrayA)}]))))]))

(def array::delete
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [indexC arrayC])
      (<| analysis/type.with_var
          (function (_ [@read :read:]))
          analysis/type.with_var
          (function (_ [@write :write:]))
          (do phase.monad
            [indexA (analysis/type.expecting Nat
                                             (phase archive indexC))
             arrayA (analysis/type.expecting (type_literal (array.Array' :read: :write:))
                                             (phase archive arrayC))
             _ (analysis/type.inference (type_literal (array.Array' :read: :write:)))
             @ meta.location]
            (in [@ {analysis.#Extension (/.translation extension)
                                        (list indexA arrayA)}]))))]))

(def with_array_extensions
  (-> Bundle Bundle)
  (|>> (/.install "python_array_new#" array::new)
       (/.install "python_array_length#" array::length)
       (/.install "python_array_read#" array::read)
       (/.install "python_array_write#" array::write)
       (/.install "python_array_delete#" array::delete)
       ))

(def None
  (for @.python ffi.None
       Any))

(def Object
  (for @.python (type_literal (ffi.Object Any))
       Any))

(def Function
  (for @.python ffi.Function
       Any))

(def Dict
  (for @.python ffi.Dict
       Any))

(def object::get
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any)
    (function (_ extension phase archive [fieldC objectC])
      (do phase.monad
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         _ (analysis/type.inference .Any)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list (analysis.text @ fieldC)
                                          objectA)}])))]))

(def object::do
  (-> Text Handler)
  (custom
   [(all <>.and <code>.text <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [methodC objectC inputsC])
      (do [! phase.monad]
        [objectA (analysis/type.expecting ..Object
                                          (phase archive objectC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference .Any)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list.partial (analysis.text @ methodC)
                                                  objectA
                                                  inputsA)}])))]))

(def with_object_extensions
  (-> Bundle Bundle)
  (|>> (/.install "python_object_get#" object::get)
       (/.install "python_object_do#" object::do)
       (/.install "python_object_none#" (/.nullary ..None))
       (/.install "python_object_none?#" (/.unary Any Bit))
       ))

(def python::constant
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference Any)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list (analysis.text @ name))}])))]))

(def python::import
  (-> Text Handler)
  (custom
   [<code>.text
    (function (_ extension phase archive name)
      (do phase.monad
        [_ (analysis/type.inference ..Object)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list (analysis.text @ name))}])))]))

(def python::apply
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any (<code>.tuple (<>.some <code>.any)))
    (function (_ extension phase archive [abstractionC inputsC])
      (do [! phase.monad]
        [abstractionA (analysis/type.expecting ..Function
                                               (phase archive abstractionC))
         inputsA (monad.each ! (|>> (phase archive) (analysis/type.expecting Any)) inputsC)
         _ (analysis/type.inference Any)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list.partial abstractionA inputsA)}])))]))

(def python::function
  (-> Text Handler)
  (custom
   [(all <>.and <code>.nat <code>.any)
    (function (_ extension phase archive [arity abstractionC])
      (do phase.monad
        [.let [inputT (type.tuple (list.repeated arity Any))]
         abstractionA (analysis/type.expecting (-> inputT Any)
                                               (phase archive abstractionC))
         _ (analysis/type.inference ..Function)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list (analysis.nat @ arity)
                                          abstractionA)}])))]))

(def python::exec
  (-> Text Handler)
  (custom
   [(all <>.and <code>.any <code>.any)
    (function (_ extension phase archive [codeC globalsC])
      (do phase.monad
        [codeA (analysis/type.expecting Text
                                        (phase archive codeC))
         globalsA (analysis/type.expecting ..Dict
                                           (phase archive globalsC))
         _ (analysis/type.inference .Any)
         @ meta.location]
        (in [@ {analysis.#Extension (/.translation extension)
                                    (list codeA globalsA)}])))]))

(def .public bundle
  Bundle
  (|> ///.empty
      with_array_extensions
      with_object_extensions

      (/.install "python_constant#" python::constant)
      (/.install "python_import#" python::import)
      (/.install "python_apply#" python::apply)
      (/.install "python_function#" python::function)
      (/.install "python_exec#" python::exec)
      ))
