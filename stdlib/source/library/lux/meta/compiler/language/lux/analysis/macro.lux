(.require
 [library
  [lux (.except)
   ["[0]" meta]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text
     ["%" \\format (.only format)]]]]]
 [/////
  ["[0]" phase]])

(exception.def .public (expansion_failed [macro inputs error])
  (Exception [Symbol (List Code) Text])
  (exception.report
   (list ["Macro" (%.symbol macro)]
         ["Inputs" (exception.listing %.code inputs)]
         ["Error" error])))

(exception.def .public (must_have_single_expansion [macro inputs outputs])
  (Exception [Symbol (List Code) (List Code)])
  (exception.report
   (list ["Macro" (%.symbol macro)]
         ["Inputs" (exception.listing %.code inputs)]
         ["Outputs" (exception.listing %.code outputs)])))

(type .public Expander
  (-> Macro (List Code) Lux (Try (Try [Lux (List Code)]))))

(def .public (expansion expander name macro inputs)
  (-> Expander Symbol Macro (List Code) (Meta (List Code)))
  (function (_ state)
    (do try.monad
      [output (expander macro inputs state)]
      (when output
        {try.#Failure error}
        ((meta.failure (exception.error ..expansion_failed [name inputs error])) state)

        _
        output))))

(def .public (single_expansion expander name macro inputs)
  (-> Expander Symbol Macro (List Code) (Meta Code))
  (do meta.monad
    [expansion (..expansion expander name macro inputs)]
    (when expansion
      (list single)
      (in single)

      _
      (meta.failure (exception.error ..must_have_single_expansion [name inputs expansion])))))
