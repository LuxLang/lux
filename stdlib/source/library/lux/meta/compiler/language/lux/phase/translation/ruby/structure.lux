(.require
 [library
  [lux (.except Variant Tuple)
   [abstract
    ["[0]" monad (.only do)]]
   [meta
    [target
     ["_" ruby (.only Expression)]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Translator)]
  ["[1][0]" primitive]
  ["///[1]" ////
   [analysis
    [complex (.only Variant Tuple)]]
   ["[1][0]" synthesis (.only Synthesis)]
   ["//[1]" ///
    ["[1][0]" phase (.use "[1]#[0]" monad)]]]])

(def .public (tuple translate archive elemsS+)
  (Translator (Tuple Synthesis))
  (when elemsS+
    {.#End}
    (///////phase#in (//primitive.text /////synthesis.unit))

    {.#Item singletonS {.#End}}
    (translate archive singletonS)

    _
    (|> elemsS+
        (monad.each ///////phase.monad (translate archive))
        (///////phase#each _.array))))

(def .public (variant translate archive [lefts right? valueS])
  (Translator (Variant Synthesis))
  (///////phase#each (//runtime.variant lefts right?)
                     (translate archive valueS)))
