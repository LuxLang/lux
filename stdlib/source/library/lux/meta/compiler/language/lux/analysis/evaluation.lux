(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" io]
    [concurrency
     ["[0]" atom (.only Atom)]]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    [type (.only sharing)]]]]
 ["[0]" // (.only Operation)
  [macro (.only Expander)]
  ["[1][0]" type]
  ["[1][0]" scope]
  [//
   [phase
    ["[0]P" extension]
    ["[0]P" analysis]
    [//
     ["[0]" synthesis]
     ["[0]" generation]
     [///
      ["[0]" phase]
      [meta
       ["[0]" archive (.only Archive)
        ["[0]" module]]]]]]]])

(type .public Eval
  (-> Archive Type Code (Operation Any)))

(def evals
  (Atom (Dictionary module.ID Nat))
  (atom.atom (dictionary.empty n.hash)))

(def .public (evaluator expander
                        [synthesis_state synthesis]
                        [generation_state generation])
  (All (_ anchor expression artifact)
    (-> Expander
        [synthesis.State+
         synthesis.Phase]
        [(generation.State+ anchor expression artifact)
         (generation.Phase anchor expression artifact)]
        Eval))
  (let [analysis (analysisP.phase expander)]
    (function (eval archive type exprC)
      (do phase.monad
        [exprA (<| (//type.expecting type)
                   //scope.reset
                   (analysis archive exprC))
         module (extensionP.lifted
                 meta.current_module_name)]
        (<| phase.lifted
            (do try.monad
              [exprS (|> exprA
                         (synthesis archive)
                         (phase.result synthesis_state))])
            (phase.result generation_state)
            (do phase.monad
              [@module (sharing [anchor expression artifact]
                         (is (generation.Phase anchor expression artifact)
                             generation)
                         (is (generation.Operation anchor expression artifact module.ID)
                             (generation.module_id module archive)))
               .let [[evals _] (io.run! (atom.update! (dictionary.revised' @module 0 ++) ..evals))
                     @eval (maybe.else 0 (dictionary.value @module evals))]
               exprO (<| (generation.with_registry_shift (|> @module
                                                             ("lux i64 left-shift" 16)
                                                             ("lux i64 or" @eval)
                                                             ("lux i64 left-shift" 32)))
                         (generation archive exprS))]
              (generation.evaluate! [@module @eval] [{.#None} exprO])))))))
