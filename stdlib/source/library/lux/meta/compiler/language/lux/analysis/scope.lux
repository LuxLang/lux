... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except local with)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix monoid)
      ["[0]" property]]]]]]
 ["/" // (.only Environment Operation Phase)
  [//
   ["[0]" phase]
   [///
    [reference
     [register (.only Register)]
     ["[0]" variable (.only Variable)]]]]])

(every Local
  (Bindings Text [Type Register]))

(every Foreign
  (Bindings Text [Type Variable]))

(the (local? name scope)
  (-> Text Scope Bit)
  (|> scope
      (its [.#locals .#mappings])
      (property.contains? name)))

(the (local name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (|> scope
      (its [.#locals .#mappings])
      (property.value name)
      (maybe#each (function (_ [type value])
                    [type {variable.#Local value}]))))

(the (captured? name scope)
  (-> Text Scope Bit)
  (|> scope
      (its [.#captured .#mappings])
      (property.contains? name)))

(the (captured name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (loop (again [idx 0
                mappings (its [.#captured .#mappings] scope)])
    (when mappings
      {.#Item [_name [_source_type _source_ref]] mappings'}
      (if (text.= name _name)
        {.#Some [_source_type {variable.#Foreign idx}]}
        (again (++ idx) mappings'))

      {.#End}
      {.#None})))

(the (reference? name scope)
  (-> Text Scope Bit)
  (or (local? name scope)
      (captured? name scope)))

(the (reference name scope)
  (-> Text Scope (Maybe [Type Variable]))
  (when (..local name scope)
    {.#Some type}
    {.#Some type}

    _
    (..captured name scope)))

(the .public (variable name)
  (-> Text (Operation (Maybe [Type Variable])))
  (function (_ state)
    (let [[inner outer] (|> state
                            (its .#scopes)
                            (list.split_when (|>> (reference? name))))]
      (when outer
        {.#End}
        {.#Right [state {.#None}]}

        {.#Item top_outer _}
        (let [[ref_type init_ref] (maybe.else (undefined)
                                              (..reference name top_outer))
              [ref inner'] (list#mix (is (-> Scope [Variable (List Scope)] [Variable (List Scope)])
                                         (function (_ scope ref+inner)
                                           [{variable.#Foreign (its [.#captured .#counter] scope)}
                                            {.#Item (revised .#captured
                                                             (is (-> Foreign Foreign)
                                                                 (|>> (revised .#counter ++)
                                                                      (revised .#mappings (property.has name [ref_type (product.left ref+inner)]))))
                                                             scope)
                                                    (product.right ref+inner)}]))
                                     [init_ref {.#End}]
                                     (list.reversed inner))
              scopes (list#composite inner' outer)]
          {.#Right [(has .#scopes scopes state)
                    {.#Some [ref_type ref]}]})
        ))))

(exception.the .public no_scope)
(exception.the .public drained)

(the .public (with_local [name type] action)
  (for_any (_ a) (-> [Text Type] (Operation a) (Operation a)))
  (function (_ state)
    (when (its .#scopes state)
      {.#Item head tail}
      (let [old_mappings (its [.#locals .#mappings] head)
            new_var_id (its [.#locals .#counter] head)
            new_head (revised .#locals
                              (is (-> Local Local)
                                  (|>> (revised .#counter ++)
                                       (revised .#mappings (property.has name [type new_var_id]))))
                              head)]
        (when (phase.value' (has .#scopes {.#Item new_head tail} state)
                            action)
          {try.#Success [state' output]}
          (when (its .#scopes state')
            {.#Item head' tail'}
            (let [scopes' {.#Item (has .#locals (its .#locals head) head')
                                  tail'}]
              {try.#Success [(has .#scopes scopes' state')
                             output]})

            _
            (exception.except ..drained []))

          {try.#Failure error}
          {try.#Failure error}))

      _
      (exception.except ..no_scope []))))

(the empty
  Scope
  (let [bindings (is Bindings
                     [.#counter 0
                      .#mappings (list)])]
    [.#scope_name (list)
     .#inner_scopes 0
     .#locals bindings
     .#captured bindings]))

(the .public (reset action)
  (for_any (_ a) (-> (Operation a) (Operation a)))
  (function (_ state)
    (when (action (has .#scopes (list ..empty) state))
      {try.#Success [state' output]}
      {try.#Success [(has .#scopes (its .#scopes state) state')
                     output]}

      failure
      failure)))

(the .public (with action)
  (for_any (_ a)
    (-> (Operation a)
        (Operation [Scope a])))
  (function (_ state)
    (when (action (revised .#scopes (|>> {.#Item ..empty}) state))
      {try.#Success [state' output]}
      (when (its .#scopes state')
        {.#Item head tail}
        {try.#Success [(has .#scopes tail state')
                       [head output]]}

        {.#End}
        (exception.except ..drained []))

      {try.#Failure error}
      {try.#Failure error})))

(the .public next
  (Operation Register)
  (function (_ state)
    (when (its .#scopes state)
      {.#Item top _}
      {try.#Success [state (its [.#locals .#counter] top)]}

      {.#End}
      (exception.except ..no_scope []))))

(the .public environment
  (-> Scope (Environment Variable))
  (|>> (its [.#captured .#mappings])
       (list#each (function (_ [_ [_ ref]]) ref))))
