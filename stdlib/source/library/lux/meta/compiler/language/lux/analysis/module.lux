... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with alias)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)
      ["[0]" property]]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" symbol]
    [macro
     ["[0]" template]]]]]
 ["/" // (.only Operation)
  [//
   ["[0]" phase]]])

(exception.the .public (unknown_module module)
  (Exception module.Name)
  (exception.report
   (list ["Module" module])))

(exception.the .public (cannot_define_more_than_once [name already_existing])
  (Exception [Symbol Global])
  (exception.report
   (list ["Definition" (symbol.as_text name)]
         ["Original" (when already_existing
                       {.#Alias it}
                       (%.message "alias of " (symbol.as_text it))
                       
                       {.#Definition it}
                       (%.message "definition " (symbol.as_text name))

                       {.#Default it}
                       (%.message "default " (symbol.as_text name)))])))

(exception.the .public (can_only_change_state_of_active_module [module state])
  (Exception [module.Name Module_State])
  (exception.report
   (list ["Module" module]
         ["Desired state" (when state
                            {.#Active}   "Active"
                            {.#Compiled} "Compiled"
                            {.#Cached}   "Cached")])))

(the .public (empty hash)
  (-> Natural
      Module)
  [.#module_hash    hash
   .#module_aliases (list)
   .#definitions    (list)
   .#imports        (list)
   .#module_state   {.#Active}])

(the .public (import module)
  (-> module.Name
      (Operation Any))
  (do phase.monad
    [[self_name _] module.current]
    (function (_ state)
      {try.#Success [(revised .#modules
                              (property.revised self_name (revised .#imports (function (_ current)
                                                                               (if (list.any? (text.= module)
                                                                                              current)
                                                                                 current
                                                                                 {.#Item module current}))))
                              state)
                     []]})))

(the .public (by_alias it origin)
  (-> Text module.Name
      (Operation [module.Name Module]))
  (do phase.monad
    [modules module.all
     name (phase.of_try
           (do try.monad
             [origin (property.value origin modules)]
             (property.value it (its .#module_aliases origin))))
     module (module.by_name name)]
    (in [name module])))

(exception.the .public (cannot_re-use_alias [alias for origin])
  (Exception [Text module.Name module.Name])
  (exception.report
   (list ["Alias" (%.text alias)]
         ["For" (%.text for)]
         ["In module" (%.text origin)])))

(the .public (alias it module)
  (-> Text module.Name
      (Operation Any))
  (do phase.monad
    [[current _] module.current
     previous (phase.try (by_alias it current))]
    (when previous
      {try.#Success _}
      (/.except ..cannot_re-use_alias [it module current])
      
      {try.#Failure _}
      (function (_ state)
        {try.#Success [(revised .#modules
                                (property.revised current (revised .#module_aliases (is (-> (List [Text Text]) (List [Text Text]))
                                                                                        (|>> {.#Item [it module]}))))
                                state)
                       []]}))))

(the .public (exists? module)
  (-> module.Name
      (Operation Bit))
  (function (_ state)
    (|> state
        (its .#modules)
        (property.value module)
        (pipe.when
          {try.#Success _}
          true
          
          failure
          false)
        [state]
        {try.#Success})))

(the .public (define name exported?,definition)
  (-> Text [Bit Global]
      (Operation Any))
  (do phase.monad
    [[self_name self] module.current]
    (function (_ state)
      (when (property.value name (its .#definitions self))
        {try.#Success [_ already_existing]}
        ((/.except ..cannot_define_more_than_once [[self_name name] already_existing])
         state)

        failure
        {try.#Success [(revised .#modules
                                (property.has self_name
                                              (revised .#definitions
                                                       (is (-> (List [Text [Bit Global]])
                                                               (List [Text [Bit Global]]))
                                                           (|>> {.#Item [name exported?,definition]}))
                                                       self))
                                state)
                       []]}))))

(the .public (override_definition [module short] exported?,definition)
  (-> Symbol [Bit Global]
      (Operation Any))
  (function (_ state)
    {try.#Success [(revised .#modules
                            (property.revised module
                                              (revised .#definitions
                                                       (property.has short exported?,definition)))
                            state)
                   []]}))

(the .public (create hash name)
  (-> Natural module.Name
      (Operation Any))
  (function (_ state)
    {try.#Success [(revised .#modules
                            (property.has name (..empty hash))
                            state)
                   []]}))

(the .public (with hash name action)
  (for_any (_ of)
    (-> Natural module.Name (Operation of)
        (Operation [Module of])))
  (do phase.monad
    [_ (..create hash name)
     output (/.with_current_module name
              action)
     module (module.by_name name)]
    (in [module output])))

(template.with [<setter> <asker> <tag>]
  [(the .public (<setter> module_name)
     (-> module.Name
         (Operation Any))
     (function (_ state)
       (when (|> state
                 (its .#modules)
                 (property.value module_name))
         {try.#Success module}
         (let [active? (when (its .#module_state module)
                         {.#Active}
                         true
                         
                         _
                         false)]
           (if active?
             {try.#Success [(revised .#modules
                                     (property.has module_name (has .#module_state {<tag>} module))
                                     state)
                            []]}
             ((/.except ..can_only_change_state_of_active_module [module_name {<tag>}])
              state)))

         failure
         ((/.except ..unknown_module module_name)
          state))))
   
   (the .public (<asker> module_name)
     (-> module.Name
         (Operation Bit))
     (function (_ state)
       (when (|> state
                 (its .#modules)
                 (property.value module_name))
         {try.#Success module}
         {try.#Success [state
                        (when (its .#module_state module)
                          {<tag>}
                          true
                          
                          _
                          false)]}

         failure
         ((/.except ..unknown_module module_name)
          state))))]

  [set_active   active?   .#Active]
  [set_compiled compiled? .#Compiled]
  [set_cached   cached?   .#Cached]
  )
