(.require
 [library
  [lux (.except with alias)
   ["[0]" meta]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)
      ["[0]" property]]]]]]
 ["/" // (.only Operation)
  [//
   ["[0]" phase]]])

(exception.def .public (unknown_module module)
  (Exception Text)
  (exception.report
   (list ["Module" module])))

(exception.def .public (cannot_define_more_than_once [name already_existing])
  (Exception [Symbol Global])
  (exception.report
   (list ["Definition" (%.symbol name)]
         ["Original" (when already_existing
                       {.#Alias it}
                       (format "alias " (%.symbol it))
                       
                       {.#Definition it}
                       (format "definition " (%.symbol name))

                       {.#Default it}
                       (format "default " (%.symbol name)))])))

(exception.def .public (can_only_change_state_of_active_module [module state])
  (Exception [Text Module_State])
  (exception.report
   (list ["Module" module]
         ["Desired state" (when state
                            {.#Active}   "Active"
                            {.#Compiled} "Compiled"
                            {.#Cached}   "Cached")])))

(def .public (empty hash)
  (-> Nat
      Module)
  [.#module_hash    hash
   .#module_aliases (list)
   .#definitions    (list)
   .#imports        (list)
   .#module_state   {.#Active}])

(def .public (import module)
  (-> Text
      (Operation Any))
  (do phase.monad
    [self_name meta.current_module_name]
    (function (_ state)
      {try.#Success [(revised .#modules
                              (property.revised self_name (revised .#imports (function (_ current)
                                                                               (if (list.any? (text#= module)
                                                                                              current)
                                                                                 current
                                                                                 {.#Item module current}))))
                              state)
                     []]})))

(def .public (alias it module)
  (-> Text Text
      (Operation Any))
  (do phase.monad
    [self_name meta.current_module_name]
    (function (_ state)
      {try.#Success [(revised .#modules
                              (property.revised self_name (revised .#module_aliases (is (-> (List [Text Text]) (List [Text Text]))
                                                                                        (|>> {.#Item [it module]}))))
                              state)
                     []]})))

(def .public (exists? module)
  (-> Text
      (Operation Bit))
  (function (_ state)
    (|> state
        (the .#modules)
        (property.value module)
        (pipe.when
          {.#Some _}
          true
          
          {.#None}
          false)
        [state]
        {try.#Success})))

(def .public (define name exported?,definition)
  (-> Text [Bit Global]
      (Operation Any))
  (do phase.monad
    [self_name meta.current_module_name
     self meta.current_module]
    (function (_ state)
      (when (property.value name (the .#definitions self))
        {.#None}
        {try.#Success [(revised .#modules
                                (property.has self_name
                                              (revised .#definitions
                                                       (is (-> (List [Text [Bit Global]])
                                                               (List [Text [Bit Global]]))
                                                           (|>> {.#Item [name exported?,definition]}))
                                                       self))
                                state)
                       []]}

        {.#Some [_ already_existing]}
        ((/.except ..cannot_define_more_than_once [[self_name name] already_existing])
         state)))))

(def .public (override_definition [module short] exported?,definition)
  (-> Symbol [Bit Global]
      (Operation Any))
  (function (_ state)
    {try.#Success [(revised .#modules
                            (property.revised module
                                              (revised .#definitions
                                                       (property.has short exported?,definition)))
                            state)
                   []]}))

(def .public (create hash name)
  (-> Nat Text
      (Operation Any))
  (function (_ state)
    {try.#Success [(revised .#modules
                            (property.has name (..empty hash))
                            state)
                   []]}))

(def .public (with hash name action)
  (All (_ of)
    (-> Nat Text (Operation of)
        (Operation [Module of])))
  (do phase.monad
    [_ (..create hash name)
     output (/.with_current_module name
              action)
     module (meta.module name)]
    (in [module output])))

(with_template [<setter> <asker> <tag>]
  [(def .public (<setter> module_name)
     (-> Text
         (Operation Any))
     (function (_ state)
       (when (|> state (the .#modules) (property.value module_name))
         {.#Some module}
         (let [active? (when (the .#module_state module)
                         {.#Active}
                         true
                         
                         _
                         false)]
           (if active?
             {try.#Success [(revised .#modules
                                     (property.has module_name (has .#module_state {<tag>} module))
                                     state)
                            []]}
             ((/.except ..can_only_change_state_of_active_module [module_name {<tag>}])
              state)))

         {.#None}
         ((/.except ..unknown_module module_name)
          state))))
   
   (def .public (<asker> module_name)
     (-> Text
         (Operation Bit))
     (function (_ state)
       (when (|> state (the .#modules) (property.value module_name))
         {.#Some module}
         {try.#Success [state
                        (when (the .#module_state module)
                          {<tag>}
                          true
                          
                          _
                          false)]}

         {.#None}
         ((/.except ..unknown_module module_name)
          state))))]

  [set_active   active?   .#Active]
  [set_compiled compiled? .#Compiled]
  [set_cached   cached?   .#Cached]
  )
