(.require
 [library
  [lux (.except Label with)
   ["[0]" meta]
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" pipe]
    ["[0]" try]
    ["[0]" exception (.only exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)
      ["[0]" property]]]]]]
 ["/" // (.only Operation)
  ["//[1]" //
   [phase
    ["[1][0]" extension]]
   [///
    ["[1]" phase]]]])

(type .public Label
  Text)

(exception .public (unknown_module [module Text])
  (exception.report
   (list ["Module" module])))

(with_template [<name>]
  [(exception .public (<name> [labels (List Label)
                               owner Type])
     (exception.report
      (list ["Labels" (text.interposed " " labels)]
            ["Type" (%.type owner)])))]

  [cannot_declare_labels_for_anonymous_type]
  [cannot_declare_labels_for_foreign_type]
  )

(exception .public (cannot_define_more_than_once [name Symbol
                                                  already_existing Global])
  (exception.report
   (list ["Definition" (%.symbol name)]
         ["Original" (case already_existing
                       {.#Alias alias}
                       (format "alias " (%.symbol alias))
                       
                       {.#Definition definition}
                       (format "definition " (%.symbol name))

                       {.#Type _}
                       (format "type " (%.symbol name))

                       {.#Tag _}
                       (format "tag " (%.symbol name))

                       {.#Slot _}
                       (format "slot " (%.symbol name)))])))

(exception .public (can_only_change_state_of_active_module [module Text
                                                            state Module_State])
  (exception.report
   (list ["Module" module]
         ["Desired state" (case state
                            {.#Active}   "Active"
                            {.#Compiled} "Compiled"
                            {.#Cached}   "Cached")])))

(def .public (empty hash)
  (-> Nat Module)
  [.#module_hash    hash
   .#module_aliases (list)
   .#definitions    (list)
   .#imports        (list)
   .#module_state   {.#Active}])

(def .public (import module)
  (-> Text (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name]
     (function (_ state)
       {try.#Success [(revised .#modules
                               (property.revised self_name (revised .#imports (function (_ current)
                                                                                (if (list.any? (text#= module)
                                                                                               current)
                                                                                  current
                                                                                  {.#Item module current}))))
                               state)
                      []]}))))

(def .public (alias alias module)
  (-> Text Text (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name]
     (function (_ state)
       {try.#Success [(revised .#modules
                               (property.revised self_name (revised .#module_aliases (is (-> (List [Text Text]) (List [Text Text]))
                                                                                         (|>> {.#Item [alias module]}))))
                               state)
                      []]}))))

(def .public (exists? module)
  (-> Text (Operation Bit))
  (///extension.lifted
   (function (_ state)
     (|> state
         (the .#modules)
         (property.value module)
         (pipe.case
           {.#Some _}
           true
           
           {.#None}
           false)
         [state]
         {try.#Success}))))

(def .public (define name definition)
  (-> Text Global (Operation Any))
  (///extension.lifted
   (do ///.monad
     [self_name meta.current_module_name
      self meta.current_module]
     (function (_ state)
       (case (property.value name (the .#definitions self))
         {.#None}
         {try.#Success [(revised .#modules
                                 (property.has self_name
                                               (revised .#definitions
                                                        (is (-> (List [Text Global]) (List [Text Global]))
                                                            (|>> {.#Item [name definition]}))
                                                        self))
                                 state)
                        []]}

         {.#Some already_existing}
         ((///extension.up (/.except ..cannot_define_more_than_once [[self_name name] already_existing]))
          state))))))

(def .public (create hash name)
  (-> Nat Text (Operation Any))
  (///extension.lifted
   (function (_ state)
     {try.#Success [(revised .#modules
                             (property.has name (..empty hash))
                             state)
                    []]})))

(def .public (with hash name action)
  (All (_ a) (-> Nat Text (Operation a) (Operation [Module a])))
  (do ///.monad
    [_ (..create hash name)
     output (/.with_current_module name
              action)
     module (///extension.lifted (meta.module name))]
    (in [module output])))

(with_template [<setter> <asker> <tag>]
  [(def .public (<setter> module_name)
     (-> Text (Operation Any))
     (///extension.lifted
      (function (_ state)
        (case (|> state (the .#modules) (property.value module_name))
          {.#Some module}
          (let [active? (case (the .#module_state module)
                          {.#Active}
                          true
                          
                          _
                          false)]
            (if active?
              {try.#Success [(revised .#modules
                                      (property.has module_name (has .#module_state {<tag>} module))
                                      state)
                             []]}
              ((///extension.up (/.except ..can_only_change_state_of_active_module [module_name {<tag>}]))
               state)))

          {.#None}
          ((///extension.up (/.except ..unknown_module module_name))
           state)))))
   
   (def .public (<asker> module_name)
     (-> Text (Operation Bit))
     (///extension.lifted
      (function (_ state)
        (case (|> state (the .#modules) (property.value module_name))
          {.#Some module}
          {try.#Success [state
                         (case (the .#module_state module)
                           {<tag>}
                           true
                           
                           _
                           false)]}

          {.#None}
          ((///extension.up (/.except ..unknown_module module_name))
           state)))))]

  [set_active   active?   .#Active]
  [set_compiled compiled? .#Compiled]
  [set_cached   cached?   .#Cached]
  )

(def .public (declare_labels record? labels exported? type)
  (-> Bit (List Label) Bit Type (Operation Any))
  (do [! ///.monad]
    [self_name (///extension.lifted meta.current_module_name)
     [type_module type_name] (case type
                               {.#Named type_name _}
                               (in type_name)

                               _
                               (/.except ..cannot_declare_labels_for_anonymous_type [labels type]))
     _ (///.assertion ..cannot_declare_labels_for_foreign_type [labels type]
                      (text#= self_name type_module))]
    (monad.each ! (function (_ [index short])
                    (..define short
                              (if record?
                                {.#Slot [exported? type labels index]}
                                {.#Tag [exported? type labels index]})))
                (list.enumeration labels))))
