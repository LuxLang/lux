... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["|" pipe]
    ["[0]" try]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary]]]
   [meta
    [macro
     ["^" pattern]]
    [compiler
     [target
      ["_" js (.only Literal Expression Statement)]]
     [meta
      [archive (.only Archive)]]]]]]
 [/////
  ["[0]" extension]
  [translation
   [extension (.only Nullary Unary Binary Trinary Variadic
                     nullary unary binary trinary variadic)]
   ["//" js
    ["[1][0]" runtime (.only Operation Phase Phase! Handler Bundle Translator)]
    ["[1][0]" primitive]
    ["[1][0]" structure]
    ["[1][0]" reference]
    ["[1][0]" when]
    ["[1][0]" loop]
    ["[1][0]" function]]]
  [//
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" synthesis (.only)
    ["?[1]" \\parser (.only Parser)]]]])

(the .public (custom [parser handler])
  (All (_ s)
    (-> [(Parser s)
         (-> Phase Archive s (Operation Expression))]
        Handler))
  (function (_ phase archive input)
    (when (?synthesis.value parser input)
      {try.#Success input'}
      (handler phase archive input')

      {try.#Failure error}
      (phase.failure error))))

... [Procedures]
... [[Bits]]
(with_template [<name> <op>]
  [(the (<name> [paramG subjectG])
     (Binary Expression)
     (<op> subjectG (//runtime.i64::number paramG)))]

  [i64::left_shifted  //runtime.i64::left_shifted]
  [i64::right_shifted //runtime.i64::right_shifted]
  )

... [[Numbers]]
(the f64//decode
  (Unary Expression)
  (|>> list
       (_.apply (_.var "parseFloat"))
       _.return
       (_.closure (list))
       //runtime.lux//try))

(the i64::char
  (Unary Expression)
  (|>> //runtime.i64::number
       (list)
       (_.apply (_.var "String.fromCharCode"))))

... [[Text]]
(the text//composite
  (Variadic Expression)
  (|>> (|.when
         (list)
         (_.string "")

         (list single)
         single

         (list.partial left rights)
         ... (|> left (_.do "concat" rights))
         (list#mix (function (_ right left)
                     (|> left (_.do "concat" (list right))))
                   left
                   rights))))

(the (text//clip [startG endG subjectG])
  (Trinary Expression)
  (//runtime.text//clip startG endG subjectG))

(the (text//index [startG partG subjectG])
  (Trinary Expression)
  (//runtime.text//index startG partG subjectG))

... [[IO]]
(the (io//log messageG)
  (Unary Expression)
  (all _.,
       (//runtime.io//log messageG)
       //runtime.unit))

(the .public (statement expression archive synthesis)
  Phase!
  (when synthesis
    ... TODO: Get rid of this ASAP
    [@ {synthesis.#Extension [.prelude "when_char#|translation"] parameters}]
    (do phase.monad
      [body (expression archive synthesis)]
      (in (as Statement body)))

    (^.with_template [<tag>]
      [(<tag> @ value)
       (phase#each _.return
                   (expression archive synthesis))])
    ([synthesis.bit]
     [synthesis.i64]
     [synthesis.f64]
     [synthesis.text]
     [synthesis.variant]
     [synthesis.tuple]
     [synthesis.its]
     [synthesis.apply])

    (^.with_template [<tag>]
      [[@ {<tag> value}]
       (phase#each _.return
                   (expression archive synthesis))])
    ([synthesis.#Reference]
     [synthesis.#Extension])

    (synthesis.when @ when)
    (//when.when! statement expression archive when)

    (synthesis.exec @ it)
    (//when.exec! statement expression archive it)

    (synthesis.let @ let)
    (//when.let! statement expression archive let)

    (synthesis.if @ if)
    (//when.if! statement expression archive if)

    (synthesis.scope @ scope)
    (//loop.scope! statement expression archive scope)

    (synthesis.again @ updates)
    (//loop.again! statement expression archive updates)

    (synthesis.abstraction @ abstraction)
    (phase#each _.return (//function.function statement expression archive abstraction))
    ))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  ?synthesis.any
                  ?synthesis.any
                  (<>.some (?synthesis.tuple (all <>.and
                                                  (?synthesis.tuple (<>.many ?synthesis.i64))
                                                  ?synthesis.any))))
             (function (_ phase archive [input else conditionals])
               (do [! phase.monad]
                 [inputG (phase archive input)
                  else! (..statement phase archive else)
                  conditionals! (is (Operation (List [(List Literal)
                                                      Statement]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branch! (..statement phase archive branch)]
                                                      (in [(list#each (|>> .int _.int) chars)
                                                           branch!])))
                                                conditionals))]
                 ... (in (_.apply (_.closure (list)
                 ...                           (_.switch (_.its //runtime.i64_low_field inputG)
                 ...                                     conditionals!
                 ...                                     {.#Some (_.return else!)}))
                 ...                (list)))
                 (in (<| (as Expression)
                         (is Statement)
                         (_.switch (_.its //runtime.i64_low_field inputG)
                                   conditionals!
                                   {.#Some else!})))))]))

... [Bundles]
(the with_basic_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "when_char#|translation" lux::syntax_char_case!)
       (dictionary.has "is?#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "try#|translation" (unary //runtime.lux//try))))

(the with_i64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "i64_and#|translation" (binary (product.uncurried //runtime.i64::and)))
       (dictionary.has "i64_or#|translation" (binary (product.uncurried //runtime.i64::or)))
       (dictionary.has "i64_xor#|translation" (binary (product.uncurried //runtime.i64::xor)))
       (dictionary.has "i64_left#|translation" (binary i64::left_shifted))
       (dictionary.has "i64_right#|translation" (binary i64::right_shifted))
       (dictionary.has "i64_=#|translation" (binary (product.uncurried //runtime.i64::=)))
       (dictionary.has "i64_+#|translation" (binary (product.uncurried //runtime.i64::+)))
       (dictionary.has "i64_-#|translation" (binary (product.uncurried //runtime.i64::-)))
       ))

(the with_int_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "int_<#|translation" (binary (product.uncurried //runtime.i64::<)))
       
       (dictionary.has "int_*#|translation" (binary (product.uncurried //runtime.i64::*)))
       (dictionary.has "int_/#|translation" (binary (product.uncurried //runtime.i64::/)))
       (dictionary.has "int_%#|translation" (binary (product.uncurried //runtime.i64::%)))
       
       (dictionary.has "int_f64#|translation" (unary //runtime.i64::number))
       (dictionary.has "int_char#|translation" (unary i64::char))
       ))

(the with_f64_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "f64_+#|translation" (binary (product.uncurried _.+)))
       (dictionary.has "f64_-#|translation" (binary (product.uncurried _.-)))
       (dictionary.has "f64_*#|translation" (binary (product.uncurried _.*)))
       (dictionary.has "f64_/#|translation" (binary (product.uncurried _./)))
       (dictionary.has "f64_%#|translation" (binary (product.uncurried _.%)))

       (dictionary.has "f64_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "f64_<#|translation" (binary (product.uncurried _.<)))
       
       (dictionary.has "f64_int#|translation" (unary //runtime.i64::of_number))
       (dictionary.has "f64_encoded#|translation" (unary (_.do "toString" (list))))
       (dictionary.has "f64_decoded#|translation" (unary f64//decode))
       ))

(the with_text_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "text_=#|translation" (binary (product.uncurried _.=)))
       (dictionary.has "text_<#|translation" (binary (product.uncurried _.<)))
       
       (dictionary.has "text_composite#|translation" (variadic text//composite))
       (dictionary.has "text_index#|translation" (trinary text//index))
       (dictionary.has "text_size#|translation" (unary (|>> (_.its "length") //runtime.i64::of_number)))
       (dictionary.has "text_char#|translation" (binary (product.uncurried //runtime.text//char)))
       (dictionary.has "text_clip#|translation" (trinary text//clip))
       ))

(the with_io_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "log!#|translation" (unary io//log))
       (dictionary.has "error#|translation" (unary //runtime.io//error))))

(the .public bundle
  Bundle
  (|> extension.empty
      with_basic_extensions
      with_i64_extensions
      with_int_extensions
      with_f64_extensions
      with_text_extensions
      with_io_extensions
      ))
