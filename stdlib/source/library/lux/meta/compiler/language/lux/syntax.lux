... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... This is LuxC's parser.
... It takes the source code of a Lux file in raw text form and
... extracts the syntactic structure of the code from it.
... It only produces Lux Code nodes, and thus removes any white-space
... and comments while processing its inputs.

... Another important aspect of the parser is that it keeps track of
... its position within the input data.
... That is, the parser takes into account the line and column
... information in the input text (it doesn't really touch the
... file-name aspect of the location, leaving it intact in whatever
... base-line location it is given).

... This particular piece of functionality is not located in one
... function, but it is instead scattered throughout several parsers,
... since the logic for how to update the location varies, depending on
... what is being parsed, and the rules involved.

... You will notice that several parsers have a "where" parameter, that
... tells them the location position prior to the parser being run.
... They are supposed to produce some parsed output, alongside an
... updated location pointing to the end position, after the parser was run.

... Lux Code nodes/tokens are annotated with location meta-data
... [file-name, line, column] to keep track of their provenance and
... location, which is helpful for documentation and debugging.
(.require
 [library
  [lux (.except prelude)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     [\\parser (.only Offset)]
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]]]
   [meta
    ["[0]" symbol]
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]]]
   [math
    [number
     ["n" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" frac]]]]])

(the declaration_name
  (syntax (_ [[name parameters] (<code>.form (<>.and <code>.any (<>.some <code>.any)))])
    (in (list name))))

(the inlined
  (template (_ <declaration> <type> <body>)
    [(for .python (the <declaration> <type> <body>)
          ... TODO: No longer skip inlining Lua after Rembulan isn't being used anymore.
          .lua (the <declaration> <type> <body>)
          (`` (the (,, (..declaration_name <declaration>))
                (template <declaration>
                  [<body>]))))]))

... TODO: Implement .when_char# as a custom extension.
... That way, it should be possible to obtain the char without wrapping
... it into a java.lang.Long, thereby improving performance.

... TODO: Make an extension to take advantage of java/lang/String::indexOf<int,int>
... to get better performance than the current .text_index# extension.

... TODO: Instead of always keeping a "where" location variable, keep the
... individual components (i.e. file, line and column) separate, so
... that updated the "where" only involved updating the components, and
... producing the locations only involved building them, without any need
... for pattern-matching and de-structuring.

(every Char
  Nat)

(with_template [<extension> <diff> <name>]
  [(the <name>
     (template (_ value)
       [(<extension> <diff> value)]))]

  [.i64_+# 1 !++]
  [.i64_+# 2 !++/2]
  [.i64_-# 1 !--]
  )

(the !clip
  (template (_ from to text)
    [(.text_clip# from (n.- from to) text)]))

(with_template [<name> <extension>]
  [(the <name>
     (template (_ reference subject)
       [(<extension> reference subject)]))]

  [!n/= .i64_=#]
  [!i/< .int_<#]
  )

(with_template [<name> <extension>]
  [(the <name>
     (template (_ param subject)
       [(<extension> param subject)]))]

  [!n/+ .i64_+#]
  [!n/- .i64_-#]
  )

(every .public Aliases
  (Dictionary Text Text))

(the .public no_aliases
  Aliases
  (dictionary.empty text.hash))

(the .public prelude
  .prelude)

(the .public text_delimiter text.double_quote)

(with_template [<char> <definition>]
  [(the .public <definition> <char>)]

  ... Form delimiters
  ["(" open_form]
  [")" close_form]

  ... Variant delimiters
  ["{" open_variant]
  ["}" close_variant]

  ... Tuple delimiters
  ["[" open_tuple]
  ["]" close_tuple]

  ["#" sigil]

  ["," digit_separator]

  ["+" positive_sign]
  ["-" negative_sign]

  ["." frac_separator]

  ... The parts of a name are separated by a single mark.
  ... E.g. module.short.
  ... Only one such mark may be used in an name, since there
  ... can only be 2 parts to a name (the module [before the
  ... mark], and the short [after the mark]).
  ... There are also some extra rules regarding name syntax,
  ... encoded in the parser.
  [symbol.separator symbol_separator]
  )

(exception.the .public (end_of_file module)
  (Exception Text)
  (exception.report
   (list ["Module" (%.text module)])))

(the amount_of_input_shown 64)

(inlined (input_at start input)
  (-> Offset Text Text)
  (let [end (|> start (!n/+ amount_of_input_shown) (n.min (.text_size# input)))]
    (!clip start end input)))

(exception.the .public (unrecognized_input [[file line column] context input offset])
  (Exception [Location Text Text Offset])
  (exception.report
   (list ["File" file]
         ["Line" (%.nat line)]
         ["Column" (%.nat column)]
         ["Context" (%.text context)]
         ["Input" (input_at offset input)])))

(exception.the .public (text_cannot_contain_new_lines text)
  (Exception Text)
  (exception.report
   (list ["Text" (%.text text)])))

(the !failure
  (template (_ parser where offset source_code)
    [{.#Left [[where offset source_code]
              (exception.error ..unrecognized_input [where (%.symbol (symbol parser)) source_code offset])]}]))

(the !end_of_file
  (template (_ where offset source_code current_module)
    [{.#Left [[where offset source_code]
              (exception.error ..end_of_file current_module)]}]))

(every (Parser a)
  (-> Source (Either [Source Text] [Source a])))

(the !with_char+
  (template (_ @source_code_size @source_code @offset @char @else @body)
    [(if (!i/< (as Int @source_code_size)
               (as Int @offset))
       (let [@char (.text_char# @offset @source_code)]
         @body)
       @else)]))

(the !with_char
  (template (_ @source_code @offset @char @else @body)
    [(!with_char+ (.text_size# @source_code) @source_code @offset @char @else @body)]))

(the !letE
  (template (_ <binding> <computation> <body>)
    [(when <computation>
       {.#Right <binding>}
       <body>

       ... {.#Left error}
       <<otherwise>>
       (as_expected <<otherwise>>))]))

(the !horizontal
  (template (_ where offset source_code)
    [[(revised .#column ++ where)
      (!++ offset)
      source_code]]))

(inlined (!new_line where)
  (-> Location Location)
  (let [[where::file where::line where::column] where]
    [where::file (!++ where::line) 0]))

(inlined (!forward length where)
  (-> Nat Location Location)
  (let [[where::file where::line where::column] where]
    [where::file where::line (!n/+ length where::column)]))

(the !vertical
  (template (_ where offset source_code)
    [[(!new_line where)
      (!++ offset)
      source_code]]))

(with_template [<name> <close> <tag>]
  [(inlined (<name> parse where offset source_code)
     (-> (Parser Code) Location Offset Text
         (Either [Source Text] [Source Code]))
     (loop (again [source (is Source [(!forward 1 where) offset source_code])
                   stack (is (List Code) {.#End})])
       (when (parse source)
         {.#Right [source' top]}
         (again source' {.#Item top stack})
         
         {.#Left [source' error]}
         (if (same? <close> error)
           {.#Right [source'
                     [where {<tag> (list.reversed stack)}]]}
           {.#Left [source' error]}))))]

  ... Form and tuple syntax is mostly the same, differing only in the
  ... delimiters involved.
  ... They may have an arbitrary number of arbitrary Code nodes as elements.
  [form_parser    ..close_form    .#Form]
  [variant_parser ..close_variant .#Variant]
  [tuple_parser   ..close_tuple   .#Tuple]
  )

(the !guarantee_no_new_lines
  (template (_ where offset source_code content body)
    [(when (.text_index# 0 (static text.new_line) content)
       {.#None}
       body

       g!_
       {.#Left [[where offset source_code]
                (exception.error ..text_cannot_contain_new_lines content)]})]))

(the (text_parser where offset source_code)
  (-> Location Offset Text (Either [Source Text] [Source Code]))
  (when (.text_index# offset (static ..text_delimiter) source_code)
    {.#Some g!end}
    (<| (let [g!content (!clip offset g!end source_code)])
        (!guarantee_no_new_lines where offset source_code g!content)
        {.#Right [[(let [size (!n/- offset g!end)]
                     (revised .#column (|>> (!n/+ size) (!n/+ 2)) where))
                   (!++ g!end)
                   source_code]
                  [where
                   {.#Text g!content}]]})
    
    _
    (!failure ..text_parser where offset source_code)))

(with_expansions [<digits> (these "0" "1" "2" "3" "4" "5" "6" "7" "8" "9")
                  <non_symbol_chars> (with_template [<char>]
                                       [(,, (static <char>))]

                                       [text.space]
                                       [text.new_line] [text.carriage_return]
                                       [..symbol_separator]
                                       [..open_form] [..close_form]
                                       [..open_variant] [..close_variant]
                                       [..open_tuple] [..close_tuple]
                                       [..text_delimiter])
                  <digit_separator> (static ..digit_separator)]
  (these (the !if_digit?
           (template (_ @char @then @else)
             [(.when_char# @char
                           [[<digits>]
                            @then]

                           ... else
                           @else)]))

         (the !if_digit?+
           (template (_ @char @then @else_options @else)
             [(`` (.when_char# @char
                               [[<digits> <digit_separator>]
                                @then

                                (,, (template.spliced @else_options))]

                               ... else
                               @else))]))

         (`` (the !if_symbol_char?|tail
               (template (_ @char @then @else)
                 [(.when_char# @char
                               [[<non_symbol_chars>]
                                @else]

                               ... else
                               @then)])))

         (`` (the !if_symbol_char?|head
               (template (_ @char @then @else)
                 [(.when_char# @char
                               [[<non_symbol_chars> <digits>]
                                @else]

                               ... else
                               @then)]))))
  )

(the !number_output
  (template (_ <source_code> <start> <end> <codec> <tag>)
    [(when (|> <source_code>
               (!clip <start> <end>)
               (text.replaced ..digit_separator "")
               (of <codec> decoded))
       {.#Right output}
       {.#Right [[(let [[where::file where::line where::column] where]
                    [where::file where::line (!n/+ (!n/- <start> <end>) where::column)])
                  <end>
                  <source_code>]
                 [where {<tag> output}]]}
       
       {.#Left error}
       {.#Left [[where <start> <source_code>]
                error]})]))

(the no_exponent
  Offset
  0)

(with_expansions [<int_output> (these (!number_output source_code start end int.decimal .#Int))
                  <frac_output> (these (!number_output source_code start end frac.decimal .#Frac))
                  <failure> (!failure ..frac_parser where offset source_code)
                  <frac_separator> (static ..frac_separator)
                  <signs> (with_template [<sign>]
                            [(,, (static <sign>))]

                            [..positive_sign]
                            [..negative_sign])]
  (these (inlined (frac_parser source_code//size start where offset source_code)
           (-> Nat Nat Location Offset Text
               (Either [Source Text] [Source Code]))
           (loop (again [end offset
                         exponent (static ..no_exponent)])
             (<| (!with_char+ source_code//size source_code end char/0 <frac_output>)
                 (!if_digit?+ char/0
                              (again (!++ end) exponent)

                              [["e" "E"]
                               (if (same? (static ..no_exponent) exponent)
                                 (<| (!with_char+ source_code//size source_code (!++ end) char/1 <failure>)
                                     (`` (.when_char# char/1
                                                      [[<signs>]
                                                       (<| (!with_char+ source_code//size source_code (!n/+ 2 end) char/2 <failure>)
                                                           (!if_digit?+ char/2
                                                                        (again (!n/+ 3 end) char/0)
                                                                        []
                                                                        <failure>))]
                                                      ... else
                                                      <failure>)))
                                 <frac_output>)]

                              <frac_output>))))

         (inlined (signed_parser source_code//size start where offset source_code)
           (-> Nat Nat Location Offset Text
               (Either [Source Text] [Source Code]))
           (loop (again [end offset])
             (<| (!with_char+ source_code//size source_code end char <int_output>)
                 (!if_digit?+ char
                              (again (!++ end))

                              [[<frac_separator>]
                               (frac_parser source_code//size start where (!++ end) source_code)]

                              <int_output>)))))
  )

(with_template [<parser> <codec> <tag>]
  [(inlined (<parser> source_code//size start where offset source_code)
     (-> Nat Nat Location Offset Text
         (Either [Source Text] [Source Code]))
     (loop (again [g!end offset])
       (<| (!with_char+ source_code//size source_code g!end g!char (!number_output source_code start g!end <codec> <tag>))
           (!if_digit?+ g!char
                        (again (!++ g!end))
                        []
                        (!number_output source_code start g!end <codec> <tag>)))))]

  [nat_parser n.decimal .#Nat]
  [rev_parser rev.decimal .#Rev]
  )

(the !signed_parser
  (template (_ source_code//size offset where source_code @aliases @end)
    [(<| (let [g!offset/1 (!++ offset)])
         (!with_char+ source_code//size source_code g!offset/1 g!char/1 @end)
         (!if_digit? g!char/1
                     (signed_parser source_code//size offset where (!++/2 offset) source_code)
                     (!full_symbol_parser offset [where (!++ offset) source_code] where @aliases .#Symbol)))]))

(with_expansions [<output> {.#Right [[(revised .#column (|>> (!n/+ (!n/- start end))) where)
                                      end
                                      source_code]
                                     (!clip start end source_code)]}]
  (inlined (symbol_part_parser start where offset source_code)
    (-> Nat Location Offset Text
        (Either [Source Text] [Source Text]))
    (let [source_code//size (.text_size# source_code)]
      (loop (again [end offset])
        (<| (!with_char+ source_code//size source_code end char <output>)
            (!if_symbol_char?|tail char
                                   (again (!++ end))
                                   <output>))))))

(the !half_symbol_parser
  (template (_ @offset @char @module)
    [(!if_symbol_char?|head @char
                            (!letE [source' symbol] (..symbol_part_parser @offset (!forward 1 where) (!++ @offset) source_code)
                                   {.#Right [source' [@module symbol]]})
                            (!failure ..!half_symbol_parser where @offset source_code))]))

(`` (the (short_symbol_parser source_code//size current_module [where offset/0 source_code])
      (-> Nat Text (Parser Symbol))
      (<| (!with_char+ source_code//size source_code offset/0 char/0
                       (!end_of_file where offset/0 source_code current_module))
          (if (!n/= (char (,, (static ..symbol_separator))) char/0)
            (<| (let [offset/1 (!++ offset/0)])
                (!with_char+ source_code//size source_code offset/1 char/1
                             (!end_of_file where offset/1 source_code current_module))
                (!half_symbol_parser offset/1 char/1 current_module))
            (!half_symbol_parser offset/0 char/0 (static ..prelude))))))

(the !short_symbol_parser
  (template (_ source_code//size @current_module @source @where @tag)
    [(!letE [source' symbol] (..short_symbol_parser source_code//size @current_module @source)
            {.#Right [source' [@where {@tag symbol}]]})]))

(with_expansions [<simple> (these {.#Right [source' ["" simple]]})]
  (`` (the (full_symbol_parser aliases start source)
        (-> Aliases Offset (Parser Symbol))
        (<| (!letE [source' simple] (let [[where offset source_code] source]
                                      (..symbol_part_parser start where offset source_code)))
            (let [[where' offset' source_code'] source'])
            (!with_char source_code' offset' char/separator <simple>)
            (if (!n/= (char (,, (static ..symbol_separator))) char/separator)
              (<| (let [offset'' (!++ offset')])
                  (!letE [source'' complex] (..symbol_part_parser offset'' (!forward 1 where') offset'' source_code'))
                  (if (.text_=# "" complex)
                    (let [[where offset source_code] source]
                      (!failure ..full_symbol_parser where offset source_code))
                    {.#Right [source'' [(|> aliases
                                            (dictionary.value simple)
                                            (try.else simple))
                                        complex]]}))
              <simple>)))))

(the !full_symbol_parser
  (template (_ @offset @source @where @aliases @tag)
    [(!letE [source' full_symbol] (..full_symbol_parser @aliases @offset @source)
            {.#Right [source' [@where {@tag full_symbol}]]})]))

... TODO: Grammar macro for specifying syntax.
... (the lux_grammar
...   (grammar [expression "..."]
...            [form "(" [#* expression] ")"]))

(with_expansions [<consume_1> (these where (!++ offset/0) source_code)
                  <move_1> (these [(!forward 1 where) (!++ offset/0) source_code])
                  <move_2> (these [(!forward 1 where) (!++/2 offset/0) source_code])
                  <again> (these (parse current_module aliases source_code//size))]

  (these (the !close
           (template (_ closer)
             [{.#Left [<move_1> closer]}]))

         (the (bit_syntax value [where offset/0 source_code])
           (-> Bit (Parser Code))
           {.#Right [[(revised .#column (|>> !++/2) where)
                      (!++/2 offset/0)
                      source_code]
                     [where {.#Bit value}]]})
         
         (the .public (parse current_module aliases source_code//size)
           (-> Text Aliases Nat (Parser Code))
           ... The "exec []" is only there to avoid function fusion.
           ... This is to preserve the loop as much as possible and keep it tight.
           (exec
             []
             (function (again [where offset/0 source_code])
               (<| (!with_char+ source_code//size source_code offset/0 char/0
                                (!end_of_file where offset/0 source_code current_module))
                   (with_expansions [<composites> (with_template [<open> <close> <parser>]
                                                    [[(,, (static <open>))]
                                                     (<parser> <again> <consume_1>)

                                                     [(,, (static <close>))]
                                                     (!close <close>)]

                                                    [..open_form ..close_form form_parser]
                                                    [..open_variant ..close_variant variant_parser]
                                                    [..open_tuple ..close_tuple tuple_parser]
                                                    )]
                     (`` (.when_char# char/0
                                      [[(,, (static text.space))
                                        (,, (static text.carriage_return))]
                                       (again (!horizontal where offset/0 source_code))
                                       
                                       ... New line
                                       [(,, (static text.new_line))]
                                       (again (!vertical where offset/0 source_code))

                                       <composites>

                                       ... Text
                                       [(,, (static ..text_delimiter))]
                                       (text_parser where (!++ offset/0) source_code)

                                       ... Coincidentally (= ..symbol_separator ..frac_separator)
                                       [(,, (static ..symbol_separator))
                                        ... (,, (static ..frac_separator))
                                        ]
                                       ... It's either a Rev, a symbol, or a comment.
                                       (with_expansions [<rev_parser> (rev_parser source_code//size offset/0 where (!++ offset/1) source_code)
                                                         <short_symbol_parser> (!short_symbol_parser source_code//size current_module [where offset/1 source_code] where .#Symbol)
                                                         <comment_parser> (when (.text_index# (!++ offset/1) (static text.new_line) source_code)
                                                                            {.#Some end}
                                                                            (again (!vertical where end source_code))
                                                                            
                                                                            _
                                                                            (!end_of_file where offset/1 source_code current_module))]
                                         (<| (let [offset/1 (!++ offset/0)])
                                             (!with_char+ source_code//size source_code offset/1 char/1
                                                          (!end_of_file where offset/1 source_code current_module))
                                             (!if_digit? char/1
                                                         ... It's a Rev.
                                                         <rev_parser>
                                                         ... It's either a symbol, or a comment.
                                                         (.when_char# char/1
                                                                      [[(,, (static ..symbol_separator))]
                                                                       ... It's either a symbol, or a comment.
                                                                       (<| (let [offset/2 (!++ offset/1)])
                                                                           (!with_char+ source_code//size source_code offset/2 char/2
                                                                                        (!end_of_file where offset/2 source_code current_module))
                                                                           (.when_char# char/2
                                                                                        [[(,, (static ..symbol_separator))]
                                                                                         ... It's a comment.
                                                                                         <comment_parser>]
                                                                                        ... It's a symbol.
                                                                                        <short_symbol_parser>))]
                                                                      ... It's a symbol.
                                                                      <short_symbol_parser>))))

                                       [(,, (static ..positive_sign))
                                        (,, (static ..negative_sign))]
                                       (!signed_parser source_code//size offset/0 where source_code aliases
                                                       (!end_of_file where offset/0 source_code current_module))

                                       [(,, (static ..sigil))]
                                       (<| (let [offset/1 (!++ offset/0)])
                                           (!with_char+ source_code//size source_code offset/1 char/1
                                                        (!end_of_file where offset/1 source_code current_module))
                                           (.when_char# char/1
                                                        [(,, (with_template [<char> <bit>]
                                                               [[<char>]
                                                                (..bit_syntax <bit> [where offset/0 source_code])]

                                                               ["0" #0]
                                                               ["1" #1]))]

                                                        ... else
                                                        (!full_symbol_parser offset/0 [<consume_1>] where aliases .#Symbol)))]

                                      ... else
                                      (!if_digit? char/0
                                                  ... Natural number
                                                  (nat_parser source_code//size offset/0 where (!++ offset/0) source_code)
                                                  ... Symbol
                                                  (!full_symbol_parser offset/0 [<consume_1>] where aliases .#Symbol))
                                      )))
                   )))))
  )
