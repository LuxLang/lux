... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only with_symbols)
     [syntax (.only syntax)]]]]]
 ["[0]" ///
  ["[1][0]" extension]
  [//
   ["[0]" phase]
   ["[0]" translation]]])

(def Vector
  (syntax (_ [size <code>.nat
              elemT <code>.any])
    (in (list (` [(,* (list.repeated size elemT))])))))

(def Arity
  (template (_ arity)
    [(All (_ of)
       (-> (Vector arity of) of))]))

(exception.def .public (incorrect_arity [expected actual])
  (Exception [Nat Nat])
  (exception.report
   (list ["Expected" (%.nat expected)]
         ["Actual" (%.nat actual)])))

(def arity
  (syntax (_ [arity <code>.nat])
    (with_symbols [g!_ g!extension g!phase g!archive g!inputs g!anchor g!expression g!declaration]
      (do [! meta.monad]
        [g!input+ (monad.all ! (list.repeated arity (macro.symbol "input")))]
        (in (list (` (is (All ((, g!_) (, g!anchor) (, g!expression) (, g!declaration))
                           (-> ((Arity (, (code.nat arity))) (, g!expression))
                               (translation.Handler (, g!anchor) (, g!expression) (, g!declaration))))
                         (function ((, g!_) (, g!extension))
                           (function ((, g!_) (, g!phase) (, g!archive) (, g!inputs))
                             (when (, g!inputs)
                               (list (,* g!input+))
                               (do phase.monad
                                 [(,* (|> g!input+
                                          (list#each (function (_ g!input)
                                                       (list g!input (` ((, g!phase) (, g!archive) (, g!input))))))
                                          list.together))]
                                 ((,' in) ((, g!extension) [(,* g!input+)])))

                               (, g!_)
                               (phase.except ..incorrect_arity [(, (code.nat arity)) (list.size (, g!inputs))]))
                             ))))))))))

(with_template [<arity> <type> <term>]
  [(every .public <type> (Arity <arity>))
   (def .public <term> (arity <arity>))]

  [0 Nullary nullary]
  [1 Unary unary]
  [2 Binary binary]
  [3 Trinary trinary]
  )

(every .public (Variadic of)
  (-> (List of) of))

(def .public (variadic extension)
  (All (_ anchor expression declaration)
    (-> (Variadic expression) (translation.Handler anchor expression declaration)))
  (function (_ phase archive inputsS)
    (let [! phase.monad]
      (|> inputsS
          (monad.each ! (phase archive))
          (of ! each extension)))))
