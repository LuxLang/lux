... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Label
                let exec when its
                if or and)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" natural]
     ["[0]" i32]]]
   [meta
    [macro
     ["[0]" template]]
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Label Bytecode) (.use "[1]#[0]" monad)]
       ["[0]" type (.only Type)
        [category (.only Method)]]]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[1][0]" runtime (.only Operation Phase Expression)]
  ["[1][0]" value]
  ["[1][0]" complex]
  ["[1][0]" primitive]
  [////
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["[0]" translation]
   ["[0]" synthesis (.only Path Fork)
    [access
     ["[0]" member (.only Member)]]]
   [///
    [reference
     [register (.only Register)]]]]])

(the (pop_alt stack_depth)
  (-> Natural
      (Bytecode Any))
  (.when stack_depth
    0 (_#in [])
    1 _.pop
    2 _.pop2
    _ ... (n.> 2)
    (all _.composite
         _.pop2
         (pop_alt (n.- 2 stack_depth)))))

(the int
  (-> (I64 Any)
      (Bytecode Any))
  (|>> .i64 i32.i32 _.int))

(the peek
  (Bytecode Any)
  (all _.composite
       _.dup
       (//runtime.get //runtime.stack_head)))

(the pop
  (Bytecode Any)
  (all _.composite
       (//runtime.get //runtime.stack_tail)
       (_.checkcast //type.stack)))

(the (left_projection lefts)
  (-> Natural
      (Bytecode Any))
  (all _.composite
       (_.checkcast //type.tuple)
       (..int lefts)
       (.when lefts
         0
         _.aaload
         
         lefts
         //runtime.left_projection)))

(the (right_projection lefts)
  (-> Natural
      (Bytecode Any))
  (all _.composite
       (_.checkcast //type.tuple)
       (..int lefts)
       //runtime.right_projection))

(the object_equals
  (.let [class (type.class (list) "java.lang.Object")
         method (type.method [(list) (list //type.value) type.boolean (list)])]
    (_.invokevirtual class "equals" method)))

(the (bind register)
  (-> Register
      (Operation (Bytecode Any)))
  (phase#in (all _.composite
                 ..peek
                 (_.astore register))))

(the (bit_pattern_matching again @else [when thenP elseP])
  (-> (-> Path (Operation (Bytecode Any)))
      Label [Bit Path (Maybe Path)]
      (Operation (Bytecode Any)))
  (do phase.monad
    [then! (again thenP)
     else! (.when elseP
             {.#Some elseP}
             (again elseP)

             {.#None}
             (in (_.goto @else)))
     .let [if! (.if when _.ifeq _.ifne)]]
    (in (do _.monad
          [@else _.new_label]
          (all _.composite
               ..peek
               (//value.primitive type.boolean)
               (if! @else)
               then!
               (_.set_label @else)
               else!)))))

(template.with [<name> <type> <unwrap> <dup> <pop> <test> <comparison> <if>]
  [(the (<name> again @else cons)
     (-> (-> Path (Operation (Bytecode Any)))
         Label (Fork <type> Path)
         (Operation (Bytecode Any)))
     (do [! phase.monad]
       [fork! (monad.mix ! (function (_ [test thenP] else!)
                             (do !
                               [then! (again thenP)]
                               (in (do _.monad
                                     [@else _.new_label]
                                     (all _.composite
                                          <dup>
                                          (<test> test)
                                          <comparison>
                                          (<if> @else)
                                          <pop>
                                          then!
                                          (_.set_label @else)
                                          else!)))))
                         (all _.composite
                              <pop>
                              (_.goto @else))
                         (list.reversed {.#Item cons}))]
       (in (all _.composite
                ..peek
                <unwrap>
                fork!))))]

  [i64_pattern_matching I64 (//value.primitive type.long) _.dup2 _.pop2 //primitive.i64' _.lcmp _.ifne]
  [f64_pattern_matching F64 (//value.primitive type.double) _.dup2 _.pop2 //primitive.f64' _.dcmpl _.ifne]
  [text_pattern_matching Text (by _.monad in []) _.dup _.pop //primitive.text ..object_equals _.ifeq]
  )

(the (optimized_pattern_matching pattern_matching it)
  (-> (-> Path (Operation (Bytecode Any)))
      (-> Path (Operation (Maybe (Bytecode Any)))))
  (`` (.when it
        (,, (template.with [<pattern> <projection>]
              [(synthesis.path/seq
                (<pattern> lefts)
                (synthesis.!bind_top register then))
               (do phase.monad
                 [then (pattern_matching then)]
                 (in {.#Some (all _.composite
                                  ..peek
                                  (<projection> lefts)
                                  (_.astore register)
                                  then)}))]

              [synthesis.member/left ..left_projection]
              [synthesis.member/right ..right_projection]))
        
        else
        (phase#in {.#None}))))

(the (pattern_matching' stack_depth @else @end expression archive)
  (-> Natural Label Label
      (Expression Path))
  (function (again path)
    (do phase.monad
      [outcome (optimized_pattern_matching again path)]
      (.when outcome
        {.#Some outcome}
        (in outcome)

        else
        (`` (.when path
              {synthesis.#Pop}
              (in ..pop)
              
              {synthesis.#Bind register}
              (..bind register)

              (,, (template.with [<tag> <path>]
                    [{<tag> it}
                     (<path> again @else it)]

                    [synthesis.#Bit_Fork ..bit_pattern_matching]
                    [synthesis.#I64_Fork ..i64_pattern_matching]
                    [synthesis.#F64_Fork ..f64_pattern_matching]
                    [synthesis.#Text_Fork ..text_pattern_matching]))

              {synthesis.#Then bodyS}
              (do phase.monad
                [body! (expression archive bodyS)]
                (in (all _.composite
                         (..pop_alt stack_depth)
                         body!
                         (_.when_continuous (_.goto @end)))))
              
              (synthesis.side lefts right?)
              (in (do _.monad
                    [@success _.new_label]
                    (all _.composite
                         ..peek
                         (_.checkcast //type.variant)
                         (//complex.lefts lefts)
                         (//complex.right? right?)
                         //runtime.when
                         _.dup
                         (_.ifnonnull @success)
                         _.pop
                         (_.goto @else)
                         (_.set_label @success)
                         //runtime.push)))

              (,, (template.with [<pattern> <projection>]
                    [(<pattern> lefts)
                     (in (all _.composite
                              ..peek
                              (<projection> lefts)
                              //runtime.push))]

                    [synthesis.member/left ..left_projection]
                    [synthesis.member/right ..right_projection]))
              
              {synthesis.#Seq leftP rightP}
              (do phase.monad
                [left! (again leftP)
                 right! (again rightP)]
                (in (all _.composite
                         left!
                         right!)))

              {synthesis.#Alt leftP rightP}
              (do phase.monad
                [@alt_else //runtime.forge_label
                 left! (pattern_matching' (++ stack_depth) @alt_else @end expression archive leftP)
                 right! (again rightP)]
                (in (all _.composite
                         _.dup
                         left!
                         (_.set_label @alt_else)
                         _.pop
                         right!)))
              ))))))

(the (pattern_matching @end expression archive path)
  (-> Label
      (Expression Path))
  (do phase.monad
    [@else //runtime.forge_label
     pattern_matching! (..pattern_matching' 1 @else @end expression archive path)]
    (in (all _.composite
             pattern_matching!
             (<| (_.when_acknowledged @else)
                 (all _.composite
                      (_.set_label @else)
                      //runtime.pm_failure
                      (_.goto @end)
                      ))
             ))))

(the .public (exec expression archive [this that])
  (Expression synthesis.Exec)
  (do phase.monad
    [this! (expression archive this)
     that! (expression archive that)]
    (in (all _.composite
             this!
             _.pop
             that!))))

(the .public (let expression archive [register inputS bodyS])
  (Expression synthesis.Let)
  (do phase.monad
    [input! (expression archive inputS)
     body! (expression archive bodyS)]
    (in (all _.composite
             input!
             (_.astore register)
             body!))))

(the (projection it)
  (.if (.its member.#right? it)
    (..right_projection (.its member.#lefts it))
    (..left_projection (.its member.#lefts it))))

(the .public (its expression archive [path recordS])
  (Expression synthesis.Its)
  (do phase.monad
    [record! (expression archive recordS)]
    (in (list#mix (function (_ step so_far!)
                    (all _.composite
                         so_far!
                         (..projection step)))
                  record!
                  path))))

(the .public (when expression archive [valueS path])
  (Expression [synthesis.Term Path])
  (do phase.monad
    [@end //runtime.forge_label
     value! (expression archive valueS)
     pattern_matching! (..pattern_matching @end expression archive path)]
    (in (all _.composite
             _.aconst_null
             value!
             //runtime.push
             pattern_matching!
             (<| (_.when_acknowledged @end)
                 (_.set_label @end))))))

(the .public (multi_let expression archive [input bindings body])
  (Expression synthesis.Multi_Let)
  (do phase.monad
    [input (expression archive input)
     body (expression archive body)]
    (in (all _.composite
             (list#mix (function (_ [register member] left)
                         (all _.composite
                              left
                              _.dup
                              (..projection member)
                              (_.astore register)))
                       input
                       bindings)
             _.pop
             body))))

(the .public (if expression archive [testS thenS elseS])
  (Expression synthesis.If)
  (do phase.monad
    [test! (expression archive testS)
     then! (expression archive thenS)
     else! (expression archive elseS)]
    (in (do _.monad
          [@else _.new_label
           @end _.new_label]
          (all _.composite
               test!
               (//value.primitive type.boolean)
               (_.ifeq @else)
               then!
               (_.when_continuous (_.goto @end))
               (_.set_label @else)
               else!
               (<| (_.when_acknowledged @end)
                   (_.set_label @end)))))))

(template.with [,name ,type ,un_box ,literal ,dup ,pop ,comparison ,if]
  [(the .public (,name expression archive [input cases else])
     (Expression [synthesis.Term (List [,type synthesis.Term]) synthesis.Term])
     (do [! phase.monad]
       [input (expression archive input)
        cases (monad.each ! (function (_ [when then])
                              (by ! each
                                  (|>> [when])
                                  (expression archive then)))
                          cases)
        else (expression archive else)]
       (in (do [! _.monad]
             [@end _.new_label]
             (all _.composite
                  input
                  ,un_box
                  (list#mix (function (_ [when then] else)
                              (do [! _.monad]
                                [@else _.new_label]
                                (all _.composite
                                     ,dup
                                     (,literal when)
                                     ,comparison
                                     (,if @else)
                                     ,pop
                                     then
                                     (_.when_continuous (_.goto @end))
                                     (_.set_label @else)
                                     else)))
                            (all _.composite
                                 ,pop
                                 else
                                 (<| (_.when_acknowledged @end)
                                     (_.set_label @end)))
                            (list.reversed cases)))))))]

  [when_i64 I64 (//value.primitive type.long) //primitive.i64' _.dup2 _.pop2 _.lcmp _.ifne]
  [when_f64 F64 (//value.primitive type.double) //primitive.f64' _.dup2 _.pop2 _.dcmpl _.ifne]
  [when_text Text (in []) //primitive.text _.dup _.pop ..object_equals _.ifeq]
  )
