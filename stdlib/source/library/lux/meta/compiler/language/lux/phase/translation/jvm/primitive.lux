... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except i64)
   ["[0]" ffi (.only import)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [math
    [number
     ["i" int]]]
   [meta
    [macro
     ["^" pattern]]
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]
       ["[0]" type]
       [encoding
        ["[0]" signed]]]]]]]])

(the $Boolean (type.class "java.lang.Boolean" (list)))
(the $Long (type.class "java.lang.Long" (list)))
(the $Double (type.class "java.lang.Double" (list)))

(the .public (bit value)
  (-> Bit
      (Bytecode Any))
  (_.getstatic $Boolean (if value "TRUE" "FALSE") $Boolean))

(the wrap_i64
  (_.invokestatic $Long "valueOf" (type.method [(list) (list type.long) $Long (list)])))

(the .public (i64 value)
  (-> (I64 Any)
      (Bytecode Any))
  (when (.int value)
    (^.with_template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>]
         ..wrap_i64)])
    ([+0 _.lconst_0]
     [+1 _.lconst_1])

    (^.with_template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.i2l]
         ..wrap_i64)])
    ([-1 _.iconst_m1]
     ... [+0 _.iconst_0]
     ... [+1 _.iconst_1]
     [+2 _.iconst_2]
     [+3 _.iconst_3]
     [+4 _.iconst_4]
     [+5 _.iconst_5])

    value
    (when (signed.s1 value)
      {try.#Success value}
      (do _.monad
        [_ (_.bipush value)
         _ _.i2l]
        ..wrap_i64)

      {try.#Failure _}
      (when (signed.s2 value)
        {try.#Success value}
        (do _.monad
          [_ (_.sipush value)
           _ _.i2l]
          ..wrap_i64)

        {try.#Failure _}
        (do _.monad
          [_ (_.long value)]
          ..wrap_i64)))))

(the wrap_f64
  (_.invokestatic $Double "valueOf" (type.method [(list) (list type.double) $Double (list)])))

(import java/lang/Double
  "[1]::[0]"
  ("static" doubleToRawLongBits [double] long))

(the double_bits
  (-> Dec
      Int)
  (|>> [] java/lang/Double::doubleToRawLongBits
       ffi.of_long))

(the d0_bits
  Int
  (double_bits +0.0))

(the .public (f64 value)
  (-> Dec
      (Bytecode Any))
  (when value
    (^.with_template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>]
         ..wrap_f64)])
    ([+1.0 _.dconst_1])

    (^.with_template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.f2d]
         ..wrap_f64)])
    ([+2.0 _.fconst_2])

    (^.with_template [<int> <instruction>]
      [<int>
       (do _.monad
         [_ <instruction>
          _ _.i2d]
         ..wrap_f64)])
    ([-1.0 _.iconst_m1]
     ... [+0.0 _.iconst_0]
     ... [+1.0 _.iconst_1]
     ... [+2.0 _.iconst_2]
     [+3.0 _.iconst_3]
     [+4.0 _.iconst_4]
     [+5.0 _.iconst_5])
    
    _
    (let [constantI (if (|> value
                            ..double_bits
                            (i.= ..d0_bits))
                      _.dconst_0
                      (_.double value))]
      (do _.monad
        [_ constantI]
        ..wrap_f64))))

(the .public text
  (-> Text
      (Bytecode Any))
  _.string)
