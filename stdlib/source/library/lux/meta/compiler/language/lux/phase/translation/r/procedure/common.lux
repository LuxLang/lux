... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 lux
 (lux (control [library
                [monad (.only do)]]
               ["ex" exception]
               ["p" projection])
      (data ["e" error]
            [text]
            text/injection
            [number]
            (coll [list "list/" Functor<List>]
                  (dictionary ["dict" unordered (.only Dict)])))
      [meta
       [macro
        ["[0]" template]]]
      [macro (.only with_symbols)]
      (macro [code]
        ["s" syntax (.only syntax)])
      [host])
 (luxc ["&" lang]
       (lang ["la" analysis]
             ["ls" synthesis]
             (host [r (.only Expression)])))
 [///]
 (/// ["[0]T" runtime]
      ["[0]T" when]
      ["[0]T" function]
      ["[0]T" loop]))

... [Types]
(every .public Translator
  (-> ls.Synthesis (Meta Expression)))

(every .public Proc
  (-> Translator (List ls.Synthesis) (Meta Expression)))

(every .public Bundle
  (Dict Text Proc))

... [Utils]
(the .public (install name unnamed)
  (-> Text (-> Text Proc)
      (-> Bundle Bundle))
  (dict.has name (unnamed name)))

(the .public (prefix prefix bundle)
  (-> Text Bundle Bundle)
  (|> bundle
      dict.entries
      (list/each (function (_ [key val]) [(%.message prefix " " key) val]))
      (dict.from_list text.Hash<Text>)))

... [Procedures]
... [[Lux]]
(the (lux//is [leftO rightO])
  Binary
  (r.apply (list leftO rightO)
           (r.global "identical")))

(the (lux//if [testO thenO elseO])
  Trinary
  (whenT.translate_if testO thenO elseO))

(the (lux//try riskyO)
  Unary
  (runtimeT.lux//try riskyO))

(exception.the .public (Wrong_Syntax message)
  (Exception Text)
  message)

(the .public (wrong_syntax procedure args)
  (-> Text (List ls.Synthesis) Text)
  (%.message "Procedure: " procedure "\n"
             "Arguments: " (%code (code.tuple args))))

(the lux//loop
  (-> Text Proc)
  (function (_ proc_name)
    (function (_ translate inputsS)
      (when (s.value inputsS (all p.and s.nat (s.tuple (p.many s.any)) s.any))
        {e.#Success [offset initsS+ bodyS]}
        (loopT.translate_loop translate offset initsS+ bodyS)

        {e.#Error error}
        (&.throw Wrong_Syntax (wrong_syntax proc_name inputsS)))
      )))

(the lux//again
  (-> Text Proc)
  (function (_ proc_name)
    (function (_ translate inputsS)
      (loopT.translate_again translate inputsS))))

(the lux_procs
  Bundle
  (|> (dict.empty text.Hash<Text>)
      (install "is" (binary lux//is))
      (install "try" (unary lux//try))
      (install "if" (trinary lux//if))
      (install "loop" lux//loop)
      (install "again" lux//again)
      ))

... [[Bits]]
(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]
  
  [bit//and runtimeT.bit//and]
  [bit//or  runtimeT.bit//or]
  [bit//xor runtimeT.bit//xor]
  )

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (<op> (runtimeT.int64_low paramO) subjectO))]

  [bit//left_shifted             runtimeT.bit//left_shifted]
  [bit//arithmetic_right_shifted runtimeT.bit//arithmetic_right_shifted]
  [bit//logical_right_shifted    runtimeT.bit//logical_right_shifted]
  )

(the bit_procs
  Bundle
  (<| (prefix "bit")
      (|> (dict.empty text.Hash<Text>)
          (install "and" (binary bit//and))
          (install "or" (binary bit//or))
          (install "xor" (binary bit//xor))
          (install "left-shift" (binary bit//left_shifted))
          (install "logical-right-shift" (binary bit//logical_right_shifted))
          (install "arithmetic-right-shift" (binary bit//arithmetic_right_shifted))
          )))

... [[Numbers]]
(host.import java/lang/Double
  ("static" MIN_VALUE Double)
  ("static" MAX_VALUE Double))

(template.with [<name> <const> <encode>]
  [(the (<name> _)
     Nullary
     (<encode> <const>))]

  [dec//smallest Double::MIN_VALUE            r.float]
  [dec//min      (f/* -1.0 Double::MAX_VALUE) r.float]
  [dec//max      Double::MAX_VALUE            r.float]
  )

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (|> subjectO (<op> paramO)))]

  [int//add        runtimeT.int//+]
  [int//sub        runtimeT.int//-]
  [int//mul        runtimeT.int//*]
  [int//div        runtimeT.int///]
  [int//rem        runtimeT.int//%]
  )

(template.with [<name> <op>]
  [(the (<name> [subjectO paramO])
     Binary
     (<op> paramO subjectO))]

  [dec//add r.+]
  [dec//sub r.-]
  [dec//mul r.*]
  [dec//div r./]
  [dec//rem r.%%]
  [dec//=   r.=]
  [dec//<   r.<]

  [text//=   r.=]
  [text//<   r.<]
  )

(template.with [<name> <cmp>]
  [(the (<name> [subjectO paramO])
     Binary
     (<cmp> paramO subjectO))]

  [int//= runtimeT.int//=]
  [int//< runtimeT.int//<]
  )

(the (apply1 func)
  (-> Expression (-> Expression Expression))
  (function (_ value)
    (r.apply (list value) func)))

(the int//char (|>> runtimeT.int64_low (apply1 (r.global "intToUtf8"))))

(the int_procs
  Bundle
  (<| (prefix "int")
      (|> (dict.empty text.Hash<Text>)
          (install "+" (binary int//add))
          (install "-" (binary int//sub))
          (install "*" (binary int//mul))
          (install "/" (binary int//div))
          (install "%" (binary int//rem))
          (install "=" (binary int//=))
          (install "<" (binary int//<))
          (install "to-dec" (unary runtimeT.int//float))
          (install "char" (unary int//char)))))

(the (dec//encode value)
  (-> Expression Expression)
  (r.apply (list (r.string "%f") value) (r.global "sprintf")))

(the dec_procs
  Bundle
  (<| (prefix "dec")
      (|> (dict.empty text.Hash<Text>)
          (install "+" (binary dec//add))
          (install "-" (binary dec//sub))
          (install "*" (binary dec//mul))
          (install "/" (binary dec//div))
          (install "%" (binary dec//rem))
          (install "=" (binary dec//=))
          (install "<" (binary dec//<))
          (install "smallest" (nullary dec//smallest))
          (install "min" (nullary dec//min))
          (install "max" (nullary dec//max))
          (install "to-int" (unary (apply1 (r.global "as.integer"))))
          (install "encode" (unary dec//encode))
          (install "decode" (unary runtimeT.dec//decode)))))

... [[Text]]
(the (text//concat [subjectO paramO])
  Binary
  (r.apply (list subjectO paramO) (r.global "paste0")))

(the (text//char [subjectO paramO])
  Binary
  (runtimeT.text//char subjectO paramO))

(the (text//clip [subjectO paramO extraO])
  Trinary
  (runtimeT.text//clip subjectO paramO extraO))

(the (text//index [textO partO startO])
  Trinary
  (runtimeT.text//index textO partO startO))

(the text_procs
  Bundle
  (<| (prefix "text")
      (|> (dict.empty text.Hash<Text>)
          (install "=" (binary text//=))
          (install "<" (binary text//<))
          (install "concat" (binary text//concat))
          (install "index" (trinary text//index))
          (install "size" (unary (|>> (apply1 (r.global "nchar")) runtimeT.int//from_float)))
          (install "char" (binary text//char))
          (install "clip" (trinary text//clip))
          )))

... [[IO]]
(the (io//exit input)
  Unary
  (r.apply_kw (list)
              (list ["status" (runtimeT.int//float input)])
              (r.global "quit")))

(the (void code)
  (-> Expression Expression)
  (r.block (r.then code runtimeT.unit)))

(the io_procs
  Bundle
  (<| (prefix "io")
      (|> (dict.empty text.Hash<Text>)
          (install "log" (unary (|>> r.print ..void)))
          (install "error" (unary r.stop))
          (install "exit" (unary io//exit))
          (install "current-time" (nullary (function (_ _)
                                             (runtimeT.io//current_time! runtimeT.unit)))))))

... [Bundles]
(the .public procedures
  Bundle
  (<| (prefix "lux")
      (|> lux_procs
          (dict.composite bit_procs)
          (dict.composite int_procs)
          (dict.composite dec_procs)
          (dict.composite text_procs)
          (dict.composite io_procs)
          )))
