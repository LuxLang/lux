... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except #Bit #Text)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]]
   [math
    [number
     ["[0]" i64 (.use "[1]#[0]" equivalence)]
     ["n" nat]
     ["i" int]
     ["f" frac]]]
   [meta
    [macro
     ["^" pattern]]]]])

(every .public Simple
  (Variant
   {#Bit Bit}
   {#I64 I64}
   {#F64 Frac}
   {#Text Text}))

(the .public (format it)
  (%.Format Simple)
  (when it
    (^.with_template [<pattern> <format>]
      [{<pattern> value}
       (<format> value)])
    ([#Bit  %.bit]
     [#F64  %.frac]
     [#Text %.text])
    
    {#I64 value}
    (%.int (.int value))))

(the .public equivalence
  (Equivalence Simple)
  (implementation
   (the (= reference sample)
     (when [reference sample]
       (^.with_template [<tag> <eq> <format>]
         [[{<tag> reference'} {<tag> sample'}]
          (<eq> reference' sample')])
       ([#Bit  bit#=  %.bit]
        [#F64  f.=    %.frac]
        [#Text text#= %.text])

       [{#I64 reference'} {#I64 sample'}]
       (i64#= reference' sample')

       _
       false))))

(the .public hash
  (Hash Simple)
  (implementation
   (the equivalence ..equivalence)

   (the hash
     (|>> (pipe.when
            (^.with_template [<factor> <tag> <hash>]
              [{<tag> value'}
               (n.* <factor>  (of <hash> hash value'))])
            ([2 #Bit  bit.hash]
             [3 #F64  f.hash]
             [5 #Text text.hash]
             [7 #I64  i64.hash]))))))
