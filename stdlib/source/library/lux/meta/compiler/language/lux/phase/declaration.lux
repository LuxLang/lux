... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix monoid)]]]
   ["[0]" meta (.only)
    [macro
     ["^" pattern]]
    ["[0]" code]
    [type (.only sharing)
     ["[0]" check]]]]]
 ["[0]" // (.use "[1]#[0]" monad)
  ["[0]" extension]
  ["/[1]" //
   ["/" declaration (.only Operation Phase Handler Extender)]
   ["[0]" analysis (.only)
    ["[0]" evaluation]
    ["[1]/[0]" macro (.only Expander)]
    ["[1]/[0]" type]]
   [///
    [reference (.only)
     [variable (.only)]]
    [meta
     [archive (.only Archive)]]]]])

(exception.the .public (not_a_declaration [module code])
  (Exception [Text Code])
  (exception.report
   (list ["Declaration" (code.relative module code)])))

(exception.the .public (invalid_macro_call [module code])
  (Exception [Text Code])
  (exception.report
   (list ["Code" (code.relative module code)])))

(every Eval
  (-> Type Code (Meta Any)))

(the (requiring phase archive expansion)
  (All (_ anchor expression declaration)
    (-> (Phase anchor expression declaration) Archive (List Code)
        (Operation anchor expression declaration /.Requirements)))
  (when expansion
    {.#End}
    (//#in /.no_requirements)
    
    {.#Item head tail}
    (do //.monad
      [head' (phase archive head)
       tail' (requiring phase archive tail)]
      (in (/.merge_requirements head' tail')))))

(every Outcome
  (Variant
   {#More (List Code)}
   {#Done /.Requirements}))

(the (macro_or_extension analysis archive whole_term function_term)
  (All (_ anchor expression declaration)
    (-> analysis.Phase Archive Code Code
        (Operation anchor expression declaration Symbol)))
  (do //.monad
    [here (/.of_analysis meta.current_module_name)
     attempt (/.of_analysis
              (all //.or
                   (<| (analysis/type.expecting .Macro)
                       (analysis archive function_term))
                   (<| //.try
                       (analysis/type.expecting .Declaration)
                       (analysis archive function_term))))]
    (when attempt
      (^.or {#0 analysis}
            {#1 {try.#Success analysis}})
      (when analysis
        (analysis.constant @ definition)
        (in definition)

        _
        (//.except ..not_a_declaration [here function_term]))

      {#1 {try.#Failure error}}
      (if (text.contains? (its exception.#label extension.defaults_cannot_be_referenced)
                          error)
        (when function_term
          [_ {.#Symbol definition}]
          (in definition)

          _
          (//.except ..not_a_declaration [here function_term]))
        (//.except ..not_a_declaration [here function_term])))))

(with_expansions [<lux_def_module> (these [|form_location| {.#Form (list.partial [|text_location| {.#Symbol [..prelude "module#"]}] annotations)}])]
  (the .public (phase wrapper extender expander)
    (All (_ anchor expression declaration)
      (-> //.Wrapper (Extender anchor expression declaration) Expander (Phase anchor expression declaration)))
    (function (again archive code)
      (do [! //.monad]
        [state //.state
         .let [analysis (its [/.#analysis /.#phase] state)
               compiler_eval ((evaluation.evaluator analysis
                                                    [(its [/.#synthesis /.#state] state)
                                                     (its [/.#synthesis /.#phase] state)]
                                                    [(its [/.#translation /.#state] state)
                                                     (its [/.#translation /.#phase] state)])
                              archive)
               extension_eval (as Eval (wrapper (as_expected compiler_eval)))]
         _ (//.with (has [/.#analysis /.#state .#eval] extension_eval state))]
        (when code
          [_ {.#Form (list.partial term inputs)}]
          (do !
            [macro|extension (macro_or_extension analysis archive code term)
             expansion|requirements (extension.application extender
                                                           (its [/.#analysis /.#state] state) again archive
                                                           .Declaration macro|extension inputs
                                                           (|>> {#Done})
                                                           (function (_ _)
                                                             {.#Some (do !
                                                                       [macro (/.of_analysis (meta.macro macro|extension))]
                                                                       (when macro
                                                                         {.#Some macro}
                                                                         (/.of_analysis
                                                                          (do !
                                                                            [expansion (analysis/macro.expansion expander macro|extension macro inputs)]
                                                                            (in {#More expansion})))
                                                                         
                                                                         {.#None}
                                                                         (do !
                                                                           [here (/.of_analysis meta.current_module_name)]
                                                                           (//.except ..invalid_macro_call [here code]))))}))]
            (when expansion|requirements
              {.#Left expansion}
              (when expansion
                (list.partial <lux_def_module> referrals)
                (|> (again archive <lux_def_module>)
                    (of ! each (revised /.#referrals (list#composite referrals))))

                _
                (..requiring again archive expansion))

              {.#Right requirements}
              (in requirements)))

          _
          (do !
            [here (/.of_analysis meta.current_module_name)]
            (//.except ..not_a_declaration [here code])))))))
