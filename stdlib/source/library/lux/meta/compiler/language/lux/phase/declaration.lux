(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix monoid)]]]
   ["[0]" meta (.only)
    [type (.only sharing)
     ["[0]" check]]]]]
 ["[0]" //
  ["[1][0]" extension]
  ["[1][0]" analysis]
  ["/[1]" //
   ["/" declaration (.only Operation Phase Handler Extender)]
   ["[1][0]" analysis (.only)
    ["[0]" evaluation]
    ["[1]/[0]" macro (.only Expander)]
    ["[1]/[0]" type]]
   [///
    ["//" phase]
    [reference (.only)
     [variable (.only)]]
    [meta
     [archive (.only Archive)]]]]])

(exception.def .public (not_a_declaration code)
  (Exception Code)
  (exception.report
   (list ["Declaration" (%.code code)])))

(exception.def .public (invalid_macro_call code)
  (Exception Code)
  (exception.report
   (list ["Code" (%.code code)])))

(type Eval
  (-> Type Code (Meta Any)))

(def (requiring phase archive expansion)
  (All (_ anchor expression declaration)
    (-> (Phase anchor expression declaration) Archive (List Code)
        (Operation anchor expression declaration /.Requirements)))
  (function (_ state)
    (loop (again [state state
                  input expansion
                  output /.no_requirements])
      (when input
        {.#End}
        {try.#Success [state output]}
        
        {.#Item head tail}
        (when (phase archive head state)
          {try.#Success [state' head']}
          (again state' tail (/.merge_requirements head' output))
          
          {try.#Failure error}
          {try.#Failure error})))))

(exception.def .public (not_an_extension [name expected actual])
  (Exception [Symbol Type Type])
  (exception.report
   (list ["Name" (%.symbol name)]
         ["Expected" (%.type expected)]
         ["Actual" (%.type actual)])))

(type Value
  (Variant
   {#Normal Any}
   {#Special Any}))

(def (global_value name)
  (-> Symbol (Meta [Type Value]))
  (do meta.monad
    [global (meta.local name)]
    (when global
      {.#Definition [exported? type value]}
      (in [type {#Normal value}])

      {.#Default [exported? type value]}
      (in [type {#Special value}])
      
      {.#Alias _}
      (undefined))))

(def (global_declaration name)
  (-> Symbol (Meta Value))
  (do meta.monad
    [[type value] (global_value name)]
    (if (check.subsumes? .Declaration type)
      (in value)
      (meta.failure (exception.error ..not_an_extension [name .Declaration type])))))

(def (extension_application extender
                            phase archive
                            name parameters)
  (All (_ anchor expression declaration)
    (-> (Extender anchor expression declaration)
        (Phase anchor expression declaration) Archive
        Symbol (List Code)
        (Operation anchor expression declaration /.Requirements)))
  (do //.monad
    [value (<| /.lifted_analysis
               //extension.lifted
               (global_declaration name))]
    (when value
      {#Normal definition}
      ((extender definition) "" phase archive parameters)

      {#Special default}
      (let [default (sharing [anchor expression declaration]
                      (is (Extender anchor expression declaration)
                          extender)
                      (is (Handler anchor expression declaration)
                          (as_expected default)))]
        (default "" phase archive parameters)))))

(type Outcome
  (Variant
   {#More (List Code)}
   {#Done /.Requirements}))

(with_expansions [<lux_def_module> (these [|form_location| {.#Form (list.partial [|text_location| {.#Symbol [..prelude "module#"]}] annotations)}])]
  (def .public (phase wrapper extender expander)
    (All (_ anchor expression declaration)
      (-> //.Wrapper (Extender anchor expression declaration) Expander (Phase anchor expression declaration)))
    (function (again archive code)
      (do [! //.monad]
        [state //.state
         .let [analysis (the [/.#analysis /.#phase] state)
               compiler_eval ((evaluation.evaluator analysis
                                                    [(the [/.#synthesis /.#state] state)
                                                     (the [/.#synthesis /.#phase] state)]
                                                    [(the [/.#generation /.#state] state)
                                                     (the [/.#generation /.#phase] state)])
                              archive)
               extension_eval (as Eval (wrapper (as_expected compiler_eval)))]
         _ (//.with (has [/.#analysis /.#state .#eval] extension_eval state))]
        (when code
          [_ {.#Form (list.partial [_ {.#Symbol macro|extension}] inputs)}]
          (do !
            [expansion|requirements (do !
                                      [[def_type def_value] (<| /.lifted_analysis
                                                                //extension.lifted
                                                                (global_value macro|extension))]
                                      (when def_value
                                        {#Normal def_value}
                                        (cond (check.subsumes? Macro def_type)
                                              (/.lifted_analysis
                                               (do !
                                                 [expansion (//extension.lifted (///analysis/macro.expansion expander macro|extension (as Macro def_value) inputs))]
                                                 (in {#More expansion})))

                                              (check.subsumes? .Declaration def_type)
                                              (do !
                                                [requirements (extension_application extender again archive macro|extension inputs)]
                                                (in {#Done requirements}))
                                              
                                              ... else
                                              (//.except ..invalid_macro_call [code]))

                                        {#Special def_value}
                                        (if (check.subsumes? .Declaration def_type)
                                          (do !
                                            [requirements (extension_application extender again archive macro|extension inputs)]
                                            (in {#Done requirements}))
                                          (//.except ..invalid_macro_call [code]))))]
            (when expansion|requirements
              {.#Left expansion}
              (when expansion
                (list.partial <lux_def_module> referrals)
                (|> (again archive <lux_def_module>)
                    (at ! each (revised /.#referrals (list#composite referrals))))

                _
                (..requiring again archive expansion))

              {.#Right requirements}
              (in requirements)))

          _
          (//.except ..not_a_declaration code))))))
