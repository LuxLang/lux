... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Tuple Variant Pattern
                #Function #Apply
                nat int rev when local except variant tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monad (.only do)]]
   [control
    ["[0]" function]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" bit (.use "[1]#[0]" equivalence)]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]
     ["i" int]
     ["r" rev]
     ["f" frac]]]
   [meta
    ["[0]" location]
    ["[0]" configuration (.only Configuration)]
    ["[0]" type]
    ["[0]" code
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]]]]]
 ["[0]" /
  ["[1][0]" simple (.only Simple)]
  ["[1][0]" complex (.only Tuple Variant Complex)]
  ["[1][0]" pattern (.only Pattern)]
  [//
   ["[0]" phase (.only)
    ["[0]" extension (.only Extension)]]
   [///
    [arity (.only Arity)]
    ["[0]" version (.only Version)]
    ["[0]" reference (.only Reference)
     ["[0]" variable (.only Variable)]]
    [meta
     [archive (.only Archive)]]]]])

(every .public (Branch' e)
  (Record
   [#when Pattern
    #then e]))

(every .public (Match' e)
  [(Branch' e) (List (Branch' e))])

(every .public (Environment a)
  (List a))

(with_expansions [@ ($ (Term' $))]
  (every .public (Term' $)
    (.Variant
     {#Simple Simple}
     {#Structure (Complex @)}
     {#Reference Reference}
     {#When @ (Match' @)}
     {#Function (Environment @) @}
     {#Apply @ @}
     {#Extension (Extension @)})))

(every .public Term
  (Ann Location
       (Term' (Ann Location))))

(every .public Branch
  (Branch' Term))

(every .public Match
  (Match' Term))

(the (branch_equivalence equivalence)
  (-> (Equivalence Term)
      (Equivalence Branch))
  (implementation
   (the (= [reference_pattern reference_body] [sample_pattern sample_body])
     (and (of /pattern.equivalence = reference_pattern sample_pattern)
          (of equivalence = reference_body sample_body)))))

(the .public equivalence
  (Equivalence Term)
  (implementation
   (the (= [_ reference] [_ sample])
     (.when [reference sample]
       [{#Simple reference} {#Simple sample}]
       (of /simple.equivalence = reference sample)

       [{#Structure reference} {#Structure sample}]
       (of (/complex.equivalence =) = reference sample)

       [{#Reference reference} {#Reference sample}]
       (of reference.equivalence = reference sample)

       [{#When [reference_analysis reference_match]}
        {#When [sample_analysis sample_match]}]
       (and (= reference_analysis sample_analysis)
            (of (list.equivalence (branch_equivalence =)) = {.#Item reference_match} {.#Item sample_match}))

       [{#Function [reference_environment reference_analysis]}
        {#Function [sample_environment sample_analysis]}]
       (and (= reference_analysis sample_analysis)
            (of (list.equivalence =) = reference_environment sample_environment))

       [{#Apply [reference_input reference_abstraction]}
        {#Apply [sample_input sample_abstraction]}]
       (and (= reference_input sample_input)
            (= reference_abstraction sample_abstraction))

       [{#Extension reference} {#Extension sample}]
       (of (extension.equivalence =) = reference sample)

       _
       false))))

(with_template [<name> <tag>]
  [(the .public <name>
     (template (<name> location content)
       [[location {<tag> content}]]))]

  [when ..#When]
  )

(the .public unit
  (template (unit location)
    [[location {..#Simple {/simple.#Unit}}]]))

(with_template [<name> <tag>]
  [(the .public <name>
     (template (<name> location value)
       [[location {..#Simple {<tag> value}}]]))]

  [bit  /simple.#Bit]
  [nat  /simple.#Nat]
  [int  /simple.#Int]
  [rev  /simple.#Rev]
  [frac /simple.#Frac]
  [text /simple.#Text]
  )

(every .public (Abstraction c)
  [(Environment c) Arity c])

(every .public (Reification c)
  [c (List c)])

(the .public no_op
  (template (no_op @ value)
    [(|> 1
         {variable.#Local}
         {reference.#Variable}
         {..#Reference} [@]
         {..#Function (list)} [@]
         {..#Apply value} [@])]))

(the .public (reified [[@ abstraction] inputs])
  (-> (Reification Term)
      Term)
  (list#mix (function (_ input abstraction')
              [@ {#Apply input abstraction'}])
            [@ abstraction]
            inputs))

(the .public (reification analysis)
  (-> Term
      (Reification Term))
  (loop (again [[@ abstraction] analysis
                inputs (is (List Term)
                           (list))])
    (.when abstraction
      {#Apply input next}
      (again next {.#Item input inputs})

      _
      [[@ abstraction] inputs])))

(with_template [<name> <tag>]
  [(the .public <name>
     (syntax (_ [location <code>.any
                 content <code>.any])
       (in (list (` (.<| [(, location)]
                         {..#Reference}
                         <tag>
                         (, content)))))))]

  [variable {reference.#Variable}]
  [constant {reference.#Constant}]

  [local    reference.local]
  [foreign  reference.foreign]
  )

(with_template [<name> <tag>]
  [(the .public <name>
     (template (<name> location content)
       [(.<| [location]
             {..#Structure}
             {<tag>}
             content)]))]

  [variant /complex.#Variant]
  [tuple   /complex.#Tuple]
  )

(the .public (format [@ analysis])
  (%.Format Term)
  (.when analysis
    {#Simple it}
    (/simple.format it)
    
    {#Structure it}
    (/complex.format format it)
    
    {#Reference reference}
    (reference.format reference)
    
    {#When analysis match}
    (%.format "({"
              (|> {.#Item match}
                  (list#each (function (_ [when then])
                               (%.format (/pattern.format when) " " (format then))))
                  (text.interposed " "))
              "} "
              (format analysis)
              ")")
    
    {#Function environment body}
    (|> (format body)
        (%.format " ")
        (%.format (|> environment
                      (list#each format)
                      (text.interposed " ")
                      (text.enclosed ["[" "]"])))
        (text.enclosed ["(" ")"]))
    
    {#Apply _}
    (|> [@ analysis]
        ..reification
        {.#Item}
        (list#each format)
        (text.interposed " ")
        (text.enclosed ["(" ")"]))
    
    {#Extension name parameters}
    (|> parameters
        (list#each format)
        (text.interposed " ")
        (%.format (%.symbol name) " ")
        (text.enclosed ["(" ")"]))))

(every .public State
  Lux)

(every .public Operation
  (phase.Operation State))

(every .public Phase
  (phase.Phase State Code Term))

(with_template [<special> <general>]
  [(every .public <special>
     (<general> State Code Term))]

  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  [Extender  extension.Extender]
  )

(the .public (with_source_code source action)
  (All (_ of)
    (-> Source (Operation of)
        (Operation of)))
  (function (_ state)
    (let [old_source (its .#source state)]
      (.when (action (has .#source source state))
        {try.#Success [state' output]}
        {try.#Success [(has .#source old_source state')
                       output]}

        failure
        failure))))

(the .public (with_current_module name)
  (All (_ of)
    (-> Text (Operation of)
        (Operation of)))
  (phase.localized (its .#current_module)
                   (has .#current_module)
                   (function.constant {.#Some name})))

(the .public (with_location location action)
  (All (_ of)
    (-> Location (Operation of)
        (Operation of)))
  (if (text#= "" (product.left location))
    action
    (function (_ state)
      (let [old_location (its .#location state)]
        (.when (action (has .#location location state))
          {try.#Success [state' output]}
          {try.#Success [(has .#location old_location state')
                         output]}

          failure
          failure)))))

(the (located location error)
  (-> Location Text
      Text)
  (%.format (%.location location) text.new_line
            error))

(the .public (failure error)
  (-> Text
      Operation)
  (function (_ state)
    {try.#Failure (located (its .#location state) error)}))

(the .public (of_try it)
  (All (_ of)
    (-> (Try of)
        (Operation of)))
  (function (_ state)
    (.when it
      {try.#Failure error}
      {try.#Failure (located (its .#location state) error)}

      {try.#Success it}
      {try.#Success [state it]})))

(the .public (except exception parameters)
  (All (_ ex)
    (-> (Exception ex) ex
        Operation))
  (..failure (exception.error exception parameters)))

(the .public (assertion exception parameters condition)
  (All (_ ex)
    (-> (Exception ex) ex Bit
        (Operation Any)))
  (if condition
    (of phase.monad in [])
    (..except exception parameters)))

(the .public (with_exception exception message action)
  (All (_ ex of)
    (-> (Exception ex) ex (Operation of)
        (Operation of)))
  (function (_ state)
    (.when (exception.with exception message
             (action state))
      {try.#Failure error}
      {try.#Failure (located (its .#location state) error)}

      success
      success)))

(the .public (set_state state)
  (-> .Lux
      (Operation Any))
  (function (_ _)
    {try.#Success [state []]}))

(with_template [<name> <type> <field> <value>]
  [(the .public (<name> value)
     (-> <type>
         (Operation Any))
     (phase.update (has <field> <value>)))]

  [set_source_code    Source   .#source         value]
  [set_current_module Text     .#current_module {.#Some value}]
  [set_location       Location .#location       value]
  )

(the .public (location file)
  (-> Text
      Location)
  [file 1 0])

(the .public (source file code)
  (-> Text Text
      Source)
  [(location file) 0 code])

(the dummy_source
  Source
  [location.dummy 0 ""])

(the type_context
  Type_Context
  [.#ex_counter 0
   .#var_counter 0
   .#var_bindings (list)])

(the .public (info version host configuration)
  (-> Version Text Configuration
      Info)
  [.#target host
   .#version (version.format version)
   .#mode {.#Build}
   .#configuration configuration])

(the .public (state info)
  (-> Info
      Lux)
  [.#info            info
   .#source          ..dummy_source
   .#location        location.dummy
   .#current_module  {.#None}
   .#modules         (list)
   .#scopes          (list)
   .#type_context    ..type_context
   .#expected        {.#None}
   .#seed            0
   .#scope_type_vars (list)
   .#extensions      []
   .#eval            (as (-> Type Code (Meta Any)) [])
   .#host            []])

(the .public (delegated extender analysis archive extension parameters)
  (-> Extender Phase Archive Symbol (List Code)
      (Operation Term))
  (do phase.monad
    [lux phase.state]
    (extension.application extender
                           lux analysis archive
                           .Analysis false extension parameters
                           (|>>)
                           (function (_ _) {.#None}))))
