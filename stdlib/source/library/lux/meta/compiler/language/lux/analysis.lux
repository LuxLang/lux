... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tuple Variant Pattern
                #Reification
                text natural integer revolution when local except variant tuple)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" natural]
     ["i" integer]
     ["r" revolution]]]
   ["[0]" type]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   [meta
    ["[0]" provenance]
    ["[0]" configuration (.only Configuration)]
    ["[0]" name]
    ["[0]" code
     ["<[1]>" \\projection]]]]]
 ["[0]" /
  ["[1][0]" simple (.only Simple)]
  ["[1][0]" complex (.only Tuple Variant Complex)]
  ["[1][0]" pattern (.only Pattern)]
  [//
   ["[0]" phase (.only)
    ["[0]" extension (.only Extension)]]
   [///
    [arity (.only Arity)]
    ["[0]" version (.only Version)]
    ["[0]" reference (.only Reference)
     ["[0]" variable (.only Variable)]]
    [meta
     [archive (.only Archive)]]]]])

(every .public (Branch' e)
  (Record
   [#when Pattern
    #then e]))

(every .public (Match' e)
  [(Branch' e) (Stack (Branch' e))])

(every .public (Environment a)
  (Stack a))

(expansion.let [@ ($ (Term' $))]
  (every .public (Term' $)
    (.Variant
     {#Simple Simple}
     {#Structure (Complex @)}
     {#Reference Reference}
     {#When @ (Match' @)}
     {#Abstraction (Environment @) @}
     {#Reification @ @}
     {#Extension (Extension @)})))

(every .public Term
  (Annotated Provenance
             (Term' (Annotated Provenance))))

(every .public Branch
  (Branch' Term))

(every .public Match
  (Match' Term))

(the (branch_equivalence equivalence)
  (-> (Equivalence Term)
      (Equivalence Branch))
  (implementation
   (the (= [expected_pattern expected_body] [actual_pattern actual_body])
     (and (by /pattern.equivalence = expected_pattern actual_pattern)
          (by equivalence = expected_body actual_body)))))

(the .public equivalence
  (Equivalence Term)
  (implementation
   (the (= [_ expected] [_ actual])
     (.when [expected actual]
       [{#Simple expected} {#Simple actual}]
       (by /simple.equivalence = expected actual)

       [{#Structure expected} {#Structure actual}]
       (by (/complex.equivalence =) = expected actual)

       [{#Reference expected} {#Reference actual}]
       (by reference.equivalence = expected actual)

       [{#When [expected_analysis expected_match]}
        {#When [actual_analysis actual_match]}]
       (and (= expected_analysis actual_analysis)
            (by (stack.equivalence (branch_equivalence =)) = {.#Top expected_match} {.#Top actual_match}))

       [{#Abstraction [expected_environment expected_analysis]}
        {#Abstraction [actual_environment actual_analysis]}]
       (and (= expected_analysis actual_analysis)
            (by (stack.equivalence =) = expected_environment actual_environment))

       [{#Reification [expected_input expected_abstraction]}
        {#Reification [actual_input actual_abstraction]}]
       (and (= expected_input actual_input)
            (= expected_abstraction actual_abstraction))

       [{#Extension expected} {#Extension actual}]
       (by (extension.equivalence =) = expected actual)

       _
       false))))

(alias [=]
       ..equivalence)

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance content)
       [[provenance {<tag> content}]]))]

  [when ..#When]
  )

(the .public unit
  (template.macro (unit provenance)
    [[provenance {..#Simple {/simple.#Unit}}]]))

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance value)
       [[provenance {..#Simple {<tag> value}}]]))]

  [bit /simple.#Bit]
  [natural /simple.#Natural]
  [integer /simple.#Integer]
  [revolution /simple.#Revolution]
  [decimal /simple.#Decimal]
  [text /simple.#Text]
  )

(every .public (Abstraction c)
  [(Environment c) Arity c])

(every .public (Reification c)
  [c (Stack c)])

(the .public no_op
  (template.macro (no_op @ value)
    [(|> 1
         {variable.#Local}
         {reference.#Variable}
         {..#Reference} [@]
         {..#Abstraction (stack)} [@]
         {..#Reification value} [@])]))

(the .public (reified [[@ abstraction] inputs])
  (-> (Reification Term)
      Term)
  (stack#mix (function (_ input abstraction')
               [@ {#Reification input abstraction'}])
             [@ abstraction]
             inputs))

(the .public (reification analysis)
  (-> Term
      (Reification Term))
  (loop (again [[@ abstraction] analysis
                inputs (is (Stack Term)
                           (stack))])
    (.when abstraction
      {#Reification input next}
      (again next {.#Top input inputs})

      _
      [[@ abstraction] inputs])))

(template.with [<name> <tag>]
  [(the .public <name>
     (syntax.macro (_ [provenance <code>.any
                       content <code>.any])
       (in (stack (` (.<| [(, provenance)]
                          {..#Reference}
                          <tag>
                          (, content)))))))]

  [variable {reference.#Variable}]
  [constant {reference.#Constant}]

  [local    reference.local]
  [foreign  reference.foreign]
  )

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> provenance content)
       [(.<| [provenance]
             {..#Structure}
             {<tag>}
             content)]))]

  [variant /complex.#Variant]
  [tuple   /complex.#Tuple]
  )

(the .public (as_text [@ analysis])
  (text.Injection Term)
  (.when analysis
    {#Simple it}
    (/simple.as_text it)
    
    {#Structure it}
    (/complex.as_text as_text it)
    
    {#Reference it}
    (reference.as_text it)
    
    {#When analysis match}
    (.text "({"
           (|> {.#Top match}
               (stack#each (function (_ [when then])
                             (.text (/pattern.as_text when) " " (as_text then))))
               (text.interposed " "))
           "} "
           (as_text analysis)
           ")")
    
    {#Abstraction environment body}
    (|> (as_text body)
        (.text (|> environment
                   (stack#each as_text)
                   (text.interposed " ")
                   (text.enclosed ["[" "]"]))
               " ")
        (text.enclosed ["(" ")"]))
    
    {#Reification _}
    (|> [@ analysis]
        ..reification
        {.#Top}
        (stack#each as_text)
        (text.interposed " ")
        (text.enclosed ["(" ")"]))
    
    {#Extension name parameters}
    (|> parameters
        (stack#each as_text)
        (text.interposed " ")
        (.text (name.as_text name) " ")
        (text.enclosed ["(" ")"]))))

(every .public State
  Lux)

(every .public Operation
  (phase.Operation State))

(every .public Phase
  (phase.Phase State Code Term))

(template.with [<special> <general>]
  [(every .public <special>
     (<general> State Code Term))]

  [Handler   extension.Handler]
  [Bundle    extension.Bundle]
  [Extender  extension.Extender]
  )

(the .public (with_source_code source action)
  (for_any (_ of)
    (-> Source (Operation of)
        (Operation of)))
  (function (_ state)
    (let [old_source (its .#source state)]
      (.when (action (has .#source source state))
        {try.#Success [state' output]}
        {try.#Success [(has .#source old_source state')
                       output]}

        failure
        failure))))

(the .public (with_current_module name)
  (for_any (_ of)
    (-> Text (Operation of)
        (Operation of)))
  (phase.localized (its .#current_module)
                   (has .#current_module)
                   (function.constant {.#Some name})))

(the .public (with_provenance provenance action)
  (for_any (_ of)
    (-> Provenance (Operation of)
        (Operation of)))
  (if (text.= "" (product.left provenance))
    action
    (function (_ state)
      (let [old_provenance (its .#provenance state)]
        (.when (action (has .#provenance provenance state))
          {try.#Success [state' output]}
          {try.#Success [(has .#provenance old_provenance state')
                         output]}

          failure
          failure)))))

(the (located provenance error)
  (-> Provenance Text
      Text)
  (.text (provenance.as_text provenance) text.new_line
         error))

(the .public (failure error)
  (-> Text
      Operation)
  (function (_ state)
    {try.#Failure (located (its .#provenance state) error)}))

(the .public (of_try it)
  (for_any (_ of)
    (-> (Try of)
        (Operation of)))
  (function (_ state)
    (.when it
      {try.#Failure error}
      {try.#Failure (located (its .#provenance state) error)}

      {try.#Success it}
      {try.#Success [state it]})))

(the .public (except exception parameters)
  (for_any (_ ex)
    (-> (Exception ex) ex
        Operation))
  (..failure (exception.error exception parameters)))

(the .public (assertion exception parameters condition)
  (for_any (_ ex)
    (-> (Exception ex) ex Bit
        (Operation Any)))
  (if condition
    (by phase.monad in [])
    (..except exception parameters)))

(the .public (with_exception exception message action)
  (for_any (_ ex of)
    (-> (Exception ex) ex (Operation of)
        (Operation of)))
  (function (_ state)
    (.when (exception.with exception message
             (action state))
      {try.#Failure error}
      {try.#Failure (located (its .#provenance state) error)}

      success
      success)))

(the .public (set_state state)
  (-> .Lux
      (Operation Any))
  (function (_ _)
    {try.#Success [state []]}))

(template.with [<name> <type> <field> <value>]
  [(the .public (<name> value)
     (-> <type>
         (Operation Any))
     (phase.update (has <field> <value>)))]

  [set_source_code    Source     .#source         value]
  [set_current_module Text       .#current_module {.#Some value}]
  [set_provenance     Provenance .#provenance     value]
  )

(the .public (provenance file)
  (-> Text
      Provenance)
  [file 1 0])

(the .public (source file code)
  (-> Text Text
      Source)
  [(provenance file) 0 code])

(the dummy_source
  Source
  [provenance.dummy 0 ""])

(the type_context
  Type_Context
  [.#ex_counter 0
   .#var_counter 0
   .#var_bindings (stack)])

(the .public (info version host configuration)
  (-> Version Text Configuration
      Info)
  [.#target host
   .#version (version.as_text version)
   .#mode {.#Build}
   .#configuration configuration])

(the .public (state info)
  (-> Info
      Lux)
  [.#info            info
   .#source          ..dummy_source
   .#provenance      provenance.dummy
   .#current_module  {.#None}
   .#modules         (stack)
   .#scopes          (stack)
   .#type_context    ..type_context
   .#expected        {.#None}
   .#seed            0
   .#scope_type_vars (stack)
   .#extensions      []
   .#eval            (as (-> Type Code (Meta Any)) [])
   .#host            []])

(the .public (delegated extender analysis archive extension parameters)
  (-> Extender Phase Archive Name (Stack Code)
      (Operation Term))
  (do phase.monad
    [lux phase.state]
    (extension.reification extender
                           lux analysis archive
                           .Analysis extension parameters
                           (|>>)
                           (function (_ _) {.#None}))))
