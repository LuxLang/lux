(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" exception (.only exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]]
   ["[0]" meta (.only)
    [macro
     ["^" pattern]]]]]
 ["[0]" //
  ["/[1]" //
   ["[1][0]" extension]
   [//
    ["/" analysis (.only Analysis Operation)
     ["[1][0]" type]
     ["[1][0]" scope]]
    [///
     ["[1][0]" reference]
     ["[1]" phase]]]]])

(exception .public (foreign_module_has_not_been_imported [current Text
                                                          foreign Text
                                                          quoted Text
                                                          definition Symbol])
  (exception.report
   (list ["Current" current]
         ["Foreign" foreign]
         ["Quoted" quoted]
         ["Definition" (%.symbol definition)])))

(exception .public (definition_has_not_been_exported [definition Symbol])
  (exception.report
   (list ["Definition" (%.symbol definition)])))

(exception .public (labels_are_not_definitions [definition Symbol])
  (exception.report
   (list ["Label" (%.symbol definition)])))

(def (definition quoted_module def_name)
  (-> Text Symbol (Operation Analysis))
  (with_expansions [<return> (in (|> def_name ///reference.constant {/.#Reference}))]
    (do [! ///.monad]
      [constant (///extension.lifted (meta.definition def_name))]
      (case constant
        {.#Alias real_def_name}
        (definition quoted_module real_def_name)
        
        {.#Definition [exported? actualT _]}
        (do !
          [_ (/type.inference actualT)
           (^.let def_name [::module ::name]) (///extension.lifted (meta.normal def_name))
           current (///extension.lifted meta.current_module_name)]
          (if (text#= current ::module)
            <return>
            (if exported?
              (do !
                [imported! (///extension.lifted (meta.imported_by? ::module current))]
                (if (or imported!
                        (text#= quoted_module ::module))
                  <return>
                  (/.except ..foreign_module_has_not_been_imported [current ::module quoted_module def_name])))
              (/.except ..definition_has_not_been_exported def_name))))

        {.#Type [exported? value labels]}
        (do !
          [_ (/type.inference .Type)
           (^.let def_name [::module ::name]) (///extension.lifted (meta.normal def_name))
           current (///extension.lifted meta.current_module_name)]
          (if (text#= current ::module)
            <return>
            (if exported?
              (do !
                [imported! (///extension.lifted (meta.imported_by? ::module current))]
                (if (or imported!
                        (text#= quoted_module ::module))
                  <return>
                  (/.except ..foreign_module_has_not_been_imported [current ::module quoted_module def_name])))
              (/.except ..definition_has_not_been_exported def_name))))

        {.#Tag _}
        (/.except ..labels_are_not_definitions [def_name])
        
        {.#Slot _}
        (/.except ..labels_are_not_definitions [def_name])))))

(def (variable var_name)
  (-> Text (Operation (Maybe Analysis)))
  (do [! ///.monad]
    [?var (/scope.variable var_name)]
    (case ?var
      {.#Some [actualT ref]}
      (do !
        [_ (/type.inference actualT)]
        (in {.#Some (|> ref ///reference.variable {/.#Reference})}))

      {.#None}
      (in {.#None}))))

(def .public (reference quoted_module it)
  (-> Text Symbol (Operation Analysis))
  (case it
    ["" simple_name]
    (do [! ///.monad]
      [?var (variable simple_name)]
      (case ?var
        {.#Some varA}
        (in varA)

        {.#None}
        (do !
          [this_module (///extension.lifted meta.current_module_name)]
          (definition quoted_module [this_module simple_name]))))

    _
    (definition quoted_module it)))
