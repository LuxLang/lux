(.require
 [library
  [lux (.except Variant Tuple Synthesis)
   [abstract
    ["[0]" monad (.only do)]]
   [meta
    [target
     ["_" js (.only Expression)]]]]]
 ["[0]" //
  ["[1][0]" runtime (.only Operation Phase Translator)]
  ["[1][0]" primitive]
  ["///[1]" ////
   ["[1][0]" synthesis (.only Synthesis)]
   [analysis
    [complex (.only Variant Tuple)]]
   ["//[1]" /// (.only)
    ["[1][0]" phase (.use "[1]#[0]" monad)]]]])

(def .public (tuple translate archive elemsS+)
  (Translator (Tuple Synthesis))
  (when elemsS+
    {.#End}
    (///////phase#in //runtime.unit)

    {.#Item singletonS {.#End}}
    (translate archive singletonS)

    _
    (do [! ///////phase.monad]
      [elemsT+ (monad.each ! (translate archive) elemsS+)]
      (in (_.array elemsT+)))))

(def .public (variant translate archive [lefts right? valueS])
  (Translator (Variant Synthesis))
  (///////phase#each (//runtime.variant (_.i32 (.int lefts))
                                        (//runtime.flag right?))
                     (translate archive valueS)))
