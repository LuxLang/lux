... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" function]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [meta
    [macro
     ["[0]" template]]
    [compiler
     [target
      ["_" php (.only Var Expression)]]]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["//[1]" ///
   ["/" bundle]
   ["/[1]" //
    ["[0]" extension]
    [translation
     [extension (.only Nullary Unary Binary Trinary
                       nullary unary binary trinary)]
     ["[0]" reference]
     ["//" php
      ["[1][0]" runtime (.only Operation Phase Handler Bundle
                               with_vars)]]]
    ["/[1]" //
     ["[0]" translation]
     [synthesis
      ["<s>" \\projection]]
     ["//[1]" ///
      ["[1][0]" phase]]]]]])

(the (array::new size)
  (Unary Expression)
  (//runtime.tuple//make size (_.array_fill/3 [(_.int +0) size _.null])))

(the (array::read [indexG arrayG])
  (Binary Expression)
  (_.item indexG arrayG))

(the (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(the (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//write indexG _.null arrayG))

(the array
  Bundle
  (<| (/.prefix "array")
      (|> /.empty
          (/.install "new" (unary array::new))
          (/.install "length" (unary //runtime.array//length))
          (/.install "read" (binary array::read))
          (/.install "write" (trinary array::write))
          (/.install "delete" (binary array::delete))
          )))

(the object::new
  (custom
   [(all <>.and <s>.text (<>.some <s>.any))
    (function (_ extension phase archive [constructor inputsS])
      (do [! ////////phase.monad]
        [inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.new (_.constant constructor) inputsG))))]))

(the object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ extension phase archive [fieldS objectS])
      (do ////////phase.monad
        [objectG (phase archive objectS)]
        (in (_.its fieldS objectG))))]))

(the object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [methodS objectS inputsS])
      (do [! ////////phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.=== <unit>))]

  [object::null object::null? _.null]
  )

(the object
  Bundle
  (<| (/.prefix "object")
      (|> /.empty
          (/.install "new" object::new)
          (/.install "get" object::get)
          (/.install "do" object::do)
          (/.install "null" (nullary object::null))
          (/.install "null?" (unary object::null?))
          )))

(the php::constant
  (custom
   [<s>.text
    (function (_ extension phase archive name)
      (of ////////phase.monad in (_.constant name)))]))

(the php::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ extension phase archive [abstractionS inputsS])
      (do [! ////////phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(the php::pack
  (custom
   [(all <>.and <s>.any <s>.any)
    (function (_ extension phase archive [formatS dataS])
      (do [! ////////phase.monad]
        [formatG (phase archive formatS)
         dataG (phase archive dataS)]
        (in (_.pack/2 [formatG (_.splat dataG)]))))]))

(the .public bundle
  Bundle
  (<| (/.prefix "php")
      (|> /.empty
          (dictionary.composite ..array)
          (dictionary.composite ..object)

          (/.install "constant" php::constant)
          (/.install "apply" php::apply)
          (/.install "pack" php::pack)
          (/.install "script universe" (nullary (function.constant (_.bool reference.universe))))
          )))
