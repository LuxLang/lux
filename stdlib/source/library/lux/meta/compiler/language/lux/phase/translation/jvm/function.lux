... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Type Label with)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try]]
   [data
    ["[0]" product]
    [binary
     ["[0]" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid mix functor)]
     ["[0]" sequence]]]
   [math
    [number
     ["n" nat]
     ["[0]" i32]]]
   [meta
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Label Bytecode) (.use "[1]#[0]" monad)]
       ["[0]" version]
       ["[0]" modifier (.only Modifier) (.use "[1]#[0]" monoid)]
       ["[0]" field (.only Field)]
       ["[0]" method (.only Method)]
       ["[0]" class (.only Class)]
       ["[0]" attribute]
       ["[0]" type (.only Type)
        [category (.only Return' Value')]
        ["[0]" reflection]]
       ["[0]" constant (.only)
        [pool (.only Resource)]]
       [encoding
        ["[0]" name (.only External Internal)]
        ["[0]" unsigned]]]]]
    [compiler
     [meta
      ["[0]" archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]]
 ["[0]" /
  ["[1][0]" abstract]
  [field
   [constant
    ["[1][0]" arity]]
   [variable
    ["[1][0]" foreign]
    ["[1][0]" partial]]]
  [method
   ["[1][0]" init]
   ["[1][0]" implementation]
   ["[1][0]" reset]
   ["[1][0]" apply]]
  ["/[1]" //
   ["[1][0]" runtime (.only Operation Phase Translator)]
   ["[1][0]" reference]
   [////
    [analysis (.only Environment)]
    ["[0]" phase]
    ["[0]" synthesis (.only Abstraction Apply)]
    ["[0]" translation]
    [///
     ["[0]" arity (.only Arity)]
     [meta
      [archive
       ["[0]" unit]]]
     [reference
      [register (.only Register)]]]]]])

(def .public (with translate archive @begin class environment arity body)
  (-> Phase Archive Label External (Environment synthesis.Term) Arity (Bytecode Any)
      (Operation [(List (Resource Field))
                  (List (Resource Method))
                  (Bytecode Any)]))
  (let [classT (type.class class (list))
        fields (is (List (Resource Field))
                   (list#composite (/foreign.variables environment)
                                   (/partial.variables arity)))
        methods (is (List (Resource Method))
                    (list.partial (/init.method classT environment arity)
                                  (/reset.method classT environment arity)
                                  (if (arity.multiary? arity)
                                    (|> (n.min arity /arity.maximum)
                                        list.indices
                                        (list#each (|>> ++ (/apply.method classT environment arity @begin)))
                                        (list.partial (/implementation.method classT arity @begin body)))
                                    (list (/implementation.method classT arity @begin body)
                                          (/apply.method classT environment arity @begin 1)))))]
    (do [! phase.monad]
      [environment (monad.each ! (translate archive) environment)]
      (in [fields methods (/init.instance classT environment arity)]))))

(def modifier
  (Modifier Class)
  (all modifier#composite
       class.public
       class.final))

(def this_offset
  1)

(def internal
  (All (_ category)
    (-> (Type (<| Return' Value' category))
        Internal))
  (|>> type.reflection
       reflection.reflection
       name.internal))

(def .public (abstraction translate archive [environment arity bodyS])
  (Translator Abstraction)
  (do phase.monad
    [dependencies (cache/artifact.dependencies archive bodyS)
     @begin //runtime.forge_label
     [function_context bodyG] (<| (translation.with_new_context archive dependencies)
                                  (translation.with_anchor [@begin ..this_offset])
                                  (translate archive bodyS))
     .let [function_class (//runtime.class_name function_context)]
     [fields methods instance] (..with translate archive @begin function_class environment arity bodyG)
     module translation.module
     class (phase.of_try (class.class version.v6_0
                           ..modifier
                           (name.internal function_class)
                           {.#None}
                           (..internal /abstract.class) (list)
                           fields
                           methods
                           (list (attribute.source_file module))))
     .let [bytecode [function_class (\\format.value class.format class)]]
     _ (translation.execute! bytecode)
     _ (translation.save! (product.right function_context) {.#None} bytecode)]
    (in instance)))

(def (apply/?' translate archive [abstractionG inputsS])
  (Translator [(Bytecode Any) (List synthesis.Term)])
  (do [! phase.monad]
    [inputsG (monad.each ! (translate archive) inputsS)]
    (in (all _.composite
             abstractionG
             (|> inputsG
                 (list.sub /arity.maximum)
                 (monad.each _.monad
                             (function (_ batchG)
                               (all _.composite
                                    (_.checkcast /abstract.class)
                                    (monad.all _.monad batchG)
                                    (_.invokevirtual /abstract.class //runtime.apply::name (//runtime.apply::type (list.size batchG)))
                                    ))))
             ))))

(def (apply/? translate archive [abstractionS inputsS])
  (Translator Apply)
  (do [! phase.monad]
    [abstractionG (translate archive abstractionS)]
    (apply/?' translate archive [abstractionG inputsS])))

(def (apply/= translate archive [$abstraction @abstraction arity inputsS])
  (Translator [Symbol unit.ID Arity (List synthesis.Term)])
  (do [! phase.monad]
    [.let [:abstraction: (type.class (//runtime.class_name @abstraction) (list))]
     abstractionG (//reference.constant archive $abstraction)
     inputsG (monad.each ! (translate archive) inputsS)]
    (in (all _.composite
             abstractionG
             (monad.all _.monad inputsG)
             (/implementation.call :abstraction: arity)
             ))))

(def (apply/> translate archive [$abstraction @abstraction arity inputsS])
  (Translator [Symbol unit.ID Arity (List synthesis.Term)])
  (do [! phase.monad]
    [=G (apply/= translate archive [$abstraction @abstraction arity (list.first arity inputsS)])]
    (apply/?' translate archive [=G (list.after arity inputsS)])))

(def .public (apply translate archive [abstractionS inputsS])
  (Translator Apply)
  (when abstractionS
    (synthesis.constant @ $abstraction)
    (do [! phase.monad]
      [[@definition |abstraction|] (translation.definition archive $abstraction)
       .let [actual_arity (list.size inputsS)]]
      (when |abstraction|
        {.#Some [_ {.#Some [expected_arity @abstraction]}]}
        (cond (n.< expected_arity actual_arity)
              (apply/? translate archive [abstractionS inputsS])
              
              (n.= expected_arity actual_arity)
              (apply/= translate archive [$abstraction @abstraction expected_arity inputsS])
              
              ... (n.> expected_arity actual_arity)
              (apply/> translate archive [$abstraction @abstraction expected_arity inputsS]))
        
        _
        (apply/? translate archive [abstractionS inputsS])))

    _
    (apply/? translate archive [abstractionS inputsS])))
