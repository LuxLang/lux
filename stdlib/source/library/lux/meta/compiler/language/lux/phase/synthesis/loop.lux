... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe (.use "[1]#[0]" monad)]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   [meta
    [macro
     ["^" pattern]]]]]
 [////
  ["/" synthesis (.only Path Abstraction)]
  ["[0]" analysis (.only Environment)
   ["[1]/[0]" complex]]
  [///
   [arity (.only Arity)]
   ["[0]" reference (.only)
    ["[0]" variable (.only Register Variable)]]]])

(type .public (Transform of)
  (-> of
      (Maybe of)))

(def .public (register_optimization offset)
  (-> Register
      (-> Register
          Register))
  (|>> -- (n.+ offset)))

(def (path_optimization body_optimization offset)
  (-> (Transform /.Term) Register
      (Transform Path))
  (function (again path)
    (when path
      {/.#Bind register}
      {.#Some {/.#Bind (register_optimization offset register)}}

      (^.with_template [<tag>]
        [{<tag> left right}
         (do maybe.monad
           [left' (again left)
            right' (again right)]
           (in {<tag> left' right'}))])
      ([/.#Alt] [/.#Seq])

      {/.#Bit_Fork test then else}
      (do [! maybe.monad]
        [then (again then)
         else (when else
                {.#Some else}
                (of ! each (|>> {.#Some}) (again else))

                {.#None}
                (in {.#None}))]
        (in {/.#Bit_Fork test then else}))
      
      (^.with_template [<tag>]
        [{<tag> [[test then] elses]}
         (do [! maybe.monad]
           [then (again then)
            elses (monad.each ! (function (_ [else_test else_then])
                                  (do !
                                    [else_then (again else_then)]
                                    (in [else_test else_then])))
                              elses)]
           (in {<tag> [[test then] elses]}))])
      ([/.#I64_Fork]
       [/.#F64_Fork]
       [/.#Text_Fork])
      
      {/.#Then body}
      (|> body
          body_optimization
          (maybe#each (|>> {/.#Then})))

      _
      {.#Some path})))

(def (body_optimization true_loop? offset scope_environment arity expr)
  (-> Bit Register (Environment /.Term) Arity
      (Transform /.Term))
  (loop (again [return? true
                expr expr])
    (when expr
      [@ {/.#Simple _}]
      {.#Some expr}

      [@ {/.#Structure structure}]
      (when structure
        {analysis/complex.#Variant variant}
        (do maybe.monad
          [value' (|> variant (the analysis/complex.#value) (again false))]
          (in (|> variant
                  (has analysis/complex.#value value')
                  (/.variant @))))
        
        {analysis/complex.#Tuple tuple}
        (|> tuple
            (monad.each maybe.monad (again false))
            (maybe#each (|>> (/.tuple @)))))

      [@ {/.#Reference reference}]
      (when reference
        {reference.#Variable (variable.self)}
        (if true_loop?
          {.#None}
          {.#Some expr})
        
        (reference.constant constant)
        {.#Some expr}

        (reference.local register)
        {.#Some [@ {/.#Reference (reference.local (register_optimization offset register))}]}

        (reference.foreign register)
        (if true_loop?
          (list.item register scope_environment)
          {.#Some expr}))

      (/.when @ [input path])
      (do maybe.monad
        [input' (again false input)
         path' (path_optimization (again return?) offset path)]
        (in (|> path' [input'] (/.when @))))

      (/.exec @ [this that])
      (do maybe.monad
        [this (again false this)
         that (again return? that)]
        (in (/.exec @ [this that])))

      (/.let @ [[register input] body])
      (do maybe.monad
        [input' (again false input)
         body' (again return? body)]
        (in (/.let @ [[(register_optimization offset register) input'] body'])))

      (/.if @ [input then else])
      (do maybe.monad
        [input' (again false input)
         then' (again return? then)
         else' (again return? else)]
        (in (/.if @ [input' then' else'])))

      (/.the @ [path record])
      (do maybe.monad
        [record (again false record)]
        (in (/.the @ [path record])))

      (/.scope @ scope)
      (do [! maybe.monad]
        [inits' (|> scope
                    (the /.#inits)
                    (monad.each ! (again false)))
         iteration' (again return? (the /.#iteration scope))]
        (in (/.scope @ [/.#start (|> scope (the /.#start) (register_optimization offset))
                        /.#inits inits'
                        /.#iteration iteration'])))

      (/.again @ args)
      (|> args
          (monad.each maybe.monad (again false))
          (maybe#each (|>> (/.again @))))

      (/.abstraction @ [environment arity body])
      (do [! maybe.monad]
        [environment' (monad.each ! (again false) environment)]
        (in (/.abstraction @ [environment' arity body])))
      
      (/.apply @ [abstraction arguments])
      (do [! maybe.monad]
        [arguments' (monad.each ! (again false) arguments)]
        (with_expansions [<application> (these (do !
                                                 [abstraction' (again false abstraction)]
                                                 (in (/.apply @ [abstraction' arguments']))))]
          (when abstraction
            [@ {/.#Reference {reference.#Variable (variable.self)}}]
            (if (and return?
                     (n.= arity (list.size arguments)))
              (in (/.again @ arguments'))
              (if true_loop?
                {.#None}
                <application>))
            
            _
            <application>)))

      ... TODO: Stop relying on this custom code.
      [@ {/.#Extension [[.prelude "when_char#|translation"] (list.partial input else matches)]}]
      (if return?
        (do [! maybe.monad]
          [input (again false input)
           matches (monad.each !
                               (is (-> /.Term
                                       (Maybe /.Term))
                                   (function (_ match)
                                     (when match
                                       [@ {/.#Structure {analysis/complex.#Tuple (list when then)}}]
                                       (do !
                                         [when (again false when)
                                          then (again return? then)]
                                         (in [@ {/.#Structure {analysis/complex.#Tuple (list when then)}}]))

                                       _
                                       (again false match))))
                               matches)
           else (again return? else)]
          (in [@ {/.#Extension [[.prelude "when_char#|translation"] (list.partial input else matches)]}]))
        {.#None})

      [@ {/.#Extension [name args]}]
      (|> args
          (monad.each maybe.monad (again false))
          (maybe#each (|>> [name] {/.#Extension} [@]))))))

(def .public (optimization true_loop? offset inits functionS)
  (-> Bit Register (List /.Term) Abstraction
      (Maybe [Register (List /.Term) /.Term]))
  (|> (the /.#body functionS)
      (body_optimization true_loop? offset (the /.#environment functionS) (the /.#arity functionS))
      (maybe#each (|>> [offset inits]))))
