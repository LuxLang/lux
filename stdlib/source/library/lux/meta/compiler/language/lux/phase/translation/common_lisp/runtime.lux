(.require
 [library
  [lux (.except Location)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" hash)
     ["%" \\format (.only format)]
     ["[0]" encoding]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" sequence]]]
   [math
    [number (.only hex)
     ["[0]" i64]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]
    ["@" target
     ["_" common_lisp (.only Expression Computation Literal)]]]]]
 ["[0]" ///
  ["[1][0]" reference]
  ["//[1]" ///
   [analysis (.only Variant)]
   ["[1][0]" synthesis (.only Synthesis)]
   ["[1][0]" translation]
   ["//[1]" /// (.only)
    ["[1][0]" phase]
    [reference
     [variable (.only Register)]]
    [meta
     [archive (.only Output Archive)
      ["[0]" artifact (.only Registry)]]]]]])

(def module_id
  0)

(with_template [<name> <base>]
  [(type .public <name>
     (<base> [_.Tag Register] (Expression Any) (Expression Any)))]

  [Operation /////translation.Operation]
  [Phase /////translation.Phase]
  [Handler /////translation.Handler]
  [Bundle /////translation.Bundle]
  )

(type .public (Translator i)
  (-> Phase Archive i (Operation (Expression Any))))

(def .public unit
  (_.string /////synthesis.unit))

(def (flag value)
  (-> Bit Literal)
  (if value
    (_.string "")
    _.nil))

(def (variant' tag last? value)
  (-> (Expression Any) (Expression Any) (Expression Any) (Computation Any))
  (_.list/* (list tag last? value)))

(def .public (variant [lefts right? value])
  (-> (Variant (Expression Any)) (Computation Any))
  (variant' (_.int (.int lefts)) (flag right?) value))

(def .public none
  (Computation Any)
  (|> ..unit [0 #0] ..variant))

(def .public some
  (-> (Expression Any) (Computation Any))
  (|>> [1 #1] ..variant))

(def .public left
  (-> (Expression Any) (Computation Any))
  (|>> [0 #0] ..variant))

(def .public right
  (-> (Expression Any) (Computation Any))
  (|>> [1 #1] ..variant))

(def .public with_vars
  (syntax (_ [vars (<code>.tuple (<>.some <code>.local))
              body <code>.any])
    (do [! meta.monad]
      [ids (monad.all ! (list.repeated (list.size vars) meta.seed))]
      (in (list (` (let [(,* (|> vars
                                 (list.zipped_2 ids)
                                 (list#each (function (_ [id var])
                                              (list (code.local var)
                                                    (` (_.var (, (code.text (format "v" (%.nat id)))))))))
                                 list.together))]
                     (, body))))))))

(def runtime
  (syntax (_ [declaration (<>.or <code>.local
                                 (<code>.form (<>.and <code>.local
                                                      (<>.some <code>.local))))
              code <code>.any])
    (do meta.monad
      [runtime_id meta.seed]
      (macro.with_symbols [g!_]
        (let [runtime (code.local (///reference.artifact [..module_id runtime_id]))
              runtime_name (` (_.var (, (code.text (%.code runtime)))))]
          (when declaration
            {.#Left name}
            (let [g!name (code.local name)
                  code_nameC (code.local (format "@" name))]
              (in (list (` (def .public (, g!name)
                             _.Var/1
                             (, runtime_name)))
                        
                        (` (def (, code_nameC)
                             (_.Expression Any)
                             (_.defparameter (, runtime_name) (, code)))))))
            
            {.#Right [name inputs]}
            (let [g!name (code.local name)
                  code_nameC (code.local (format "@" name))
                  
                  inputsC (list#each code.local inputs)
                  inputs_typesC (list#each (function.constant (` (_.Expression Any)))
                                           inputs)]
              (in (list (` (def .public ((, g!name) (,* inputsC))
                             (-> (,* inputs_typesC) (_.Computation Any))
                             (_.call/* (, runtime_name) (list (,* inputsC)))))
                        
                        (` (def (, code_nameC)
                             (_.Expression Any)
                             (..with_vars [(,* inputsC)]
                               (_.defun (, runtime_name) (_.args (list (,* inputsC)))
                                        (, code))))))))))))))

(runtime
 (lux//try op)
 (with_vars [error]
   (_.handler_case
    (list [(_.bool true) error
           (..left (_.format/3 [_.nil (_.string "~A") error]))])
    (..right (_.funcall/+ [op (list ..unit)])))))

... TODO: Use Common Lisp's swiss-army loop macro instead.
(runtime
 (lux//program_args inputs)
 (with_vars [loop input tail]
   (_.labels (list [loop [(_.args (list input tail))
                          (_.if (_.null/1 input)
                            tail
                            (_.funcall/+ [(_.function/1 loop)
                                          (list (_.cdr/1 input)
                                                (..some (_.vector/* (list (_.car/1 input) tail))))]))]])
             (_.funcall/+ [(_.function/1 loop)
                           (list (_.reverse/1 inputs)
                                 ..none)]))))

(def runtime//lux
  (List (Expression Any))
  (list @lux//try
        @lux//program_args))

(def last_index
  (|>> _.length/1 [(_.int +1)] _.-/2))

(with_expansions [<recur> (these (all _.then
                                      (_.; (_.set lefts (_.-/2 [last_index_right lefts])))
                                      (_.; (_.set tuple (_.nth last_index_right tuple)))))]
  (def !recur
    (template (_ <side>)
      (<side> (_.-/2 [last_index_right lefts])
              (_.elt/2 [tuple last_index_right]))))
  
  (runtime
   (tuple//left lefts tuple)
   (with_vars [last_index_right]
     (_.let (list [last_index_right (..last_index tuple)])
       (list (_.if (_.>/2 [lefts last_index_right])
               ... No need for recursion
               (_.elt/2 [tuple lefts])
               ... Needs recursion
               (!recur tuple//left))))))

  (runtime
   (tuple//right lefts tuple)
   (with_vars [last_index_right right_index]
     (_.let (list [last_index_right (..last_index tuple)]
                  [right_index (_.+/2 [(_.int +1) lefts])])
       (list (_.cond (list [(_.=/2 [last_index_right right_index])
                            (_.elt/2 [tuple right_index])]
                           [(_.>/2 [last_index_right right_index])
                            ... Needs recursion.
                            (!recur tuple//right)])
                     (_.subseq/3 [tuple right_index (_.length/1 tuple)])))))))

... TODO: Find a way to extract parts of the sum without "nth", which
... does a linear search, and is thus expensive.
(runtime
 (sum//get sum wantsLast wantedTag)
 (with_vars [sum_tag sum_flag]
   (let [no_match! (_.return sum)
         sum_value (_.nth/2 [(_.int +2) sum])
         test_recursion! (_.if sum_flag
                           ... Must iterate.
                           (_.progn (list (_.setq wantedTag (_.-/2 [sum_tag wantedTag]))
                                          (_.setq sum sum_value)))
                           no_match!)]
     (_.while (_.bool true)
              (_.let (list [sum_tag (_.nth/2 [(_.int +0) sum])]
                           [sum_flag (_.nth/2 [(_.int +1) sum])])
                (list (_.cond (list [(_.=/2 [sum_tag wantedTag])
                                     (_.if (_.equal/2 [wantsLast sum_flag])
                                       (_.return sum_value)
                                       test_recursion!)]

                                    [(_.>/2 [sum_tag wantedTag])
                                     test_recursion!]

                                    [(_.and (_.</2 [sum_tag wantedTag])
                                            wantsLast)
                                     (_.return (variant' (_.-/2 [wantedTag sum_tag]) sum_flag sum_value))])

                              no_match!)))))))

(def runtime//adt
  (List (Expression Any))
  (list @tuple//left
        @tuple//right
        @sum//get))

(runtime
 (i64//right_shifted shift input)
 (_.if (_.=/2 [(_.int +0) shift])
   input
   (let [anti_shift (_.-/2 [shift (_.int +64)])
         mask (|> (_.int +1)
                  [anti_shift] _.ash/2
                  [(_.int +1)] _.-/2)]
     (|> input
         [(_.*/2 [(_.int -1) shift])] _.ash/2
         [mask] _.logand/2))))

(def runtime//i64
  (List (Expression Any))
  (list @i64//right_shifted))

(runtime
 (text//clip offset length text)
 (_.subseq/3 [text offset (_.+/2 [offset length])]))

(runtime
 (text//index offset sub text)
 (with_vars [index]
   (_.let (list [index (_.search/3 [sub text offset])])
     (list (_.if index
             (..some index)
             ..none)))))

(def runtime//text
  (List (Expression Any))
  (list @text//index
        @text//clip))

(runtime
 (io//exit code)
 (_.progn (list (_.conditional+ (list "sbcl")
                                (_.call/* (_.var "sb-ext:quit") (list code)))
                (_.conditional+ (list "clisp")
                                (_.call/* (_.var "ext:exit") (list code)))
                (_.conditional+ (list "ccl")
                                (_.call/* (_.var "ccl:quit") (list code)))
                (_.conditional+ (list "allegro")
                                (_.call/* (_.var "excl:exit") (list code)))
                (_.call/* (_.var "cl-user::quit") (list code)))))

(def runtime//io
  (List (Expression Any))
  (list @io//exit))

(def runtime
  (_.progn (all list#composite
                runtime//adt
                runtime//lux
                runtime//i64
                runtime//text
                runtime//io)))

(def .public translate
  (Operation [Registry Output])
  (do ///////phase.monad
    [_ (/////translation.execute! ..runtime)
     _ (/////translation.save! (%.nat ..module_id) ..runtime)]
    (in [(|> artifact.empty
             artifact.resource
             product.right)
         (sequence.sequence [(%.nat ..module_id)
                             (|> ..runtime
                                 _.code
                                 (at encoding.utf8 encoded))])])))
