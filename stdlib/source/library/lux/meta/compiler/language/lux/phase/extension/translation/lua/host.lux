(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list]]
    [text
     ["%" \\format (.only format)]]]
   [meta
    [target
     ["_" lua (.only Var Expression)]]]]]
 ["[0]" //
  ["[1][0]" common (.only custom)]
  ["///[1]" ////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["[0]" reference]
    ["//" lua
     ["[1][0]" runtime (.only Operation Phase Handler Bundle
                              with_vars)]]]
   ["/[1]" //
    ["[0]" phase]
    ["[0]" translation]
    [synthesis
     ["<s>" \\parser (.only Parser)]]]]])

(def array::new
  (Unary Expression)
  (|>> ["n"] list _.table))

(def array::length
  (Unary Expression)
  (_.the "n"))

(def (array::read [indexG arrayG])
  (Binary Expression)
  (_.item (_.+ (_.int +1) indexG) arrayG))

(def (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (//runtime.array//write indexG valueG arrayG))

(def (array::delete [indexG arrayG])
  (Binary Expression)
  (//runtime.array//write indexG _.nil arrayG))

(def with_array_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "lua_array_new#|translation" (unary array::new))
       (dictionary.has "lua_array_length#|translation" (unary array::length))
       (dictionary.has "lua_array_read#|translation" (binary array::read))
       (dictionary.has "lua_array_write#|translation" (trinary array::write))
       (dictionary.has "lua_array_delete#|translation" (binary array::delete))
       ))

(def object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(with_template [<!> <?> <unit>]
  [(def <!> (Nullary Expression) (function.constant <unit>))
   (def <?> (Unary Expression) (_.= <unit>))]

  [object::nil object::nil? _.nil]
  )

(def with_object_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "lua_object_get#|translation" object::get)
       (dictionary.has "lua_object_do#|translation" object::do)
       (dictionary.has "lua_object_nil#|translation" (nullary object::nil))
       (dictionary.has "lua_object_nil?#|translation" (unary object::nil?))
       ))

(def $input
  (_.var "input"))

(def utf8::encode
  (custom
   [<s>.any
    (function (_ phase archive inputS)
      (do [! phase.monad]
        [inputG (phase archive inputS)]
        (in (<| (_.apply (list inputG))
                (_.closure (list $input))
                (_.return (_.apply (list (_.apply (list $input (_.int +1) (_.length $input))
                                                  (_.var "string.byte")))
                                   (_.var "table.pack")))))))]))

(def utf8::decode
  (custom
   [<s>.any
    (function (_ phase archive inputS)
      (do [! phase.monad]
        [inputG (phase archive inputS)]
        (in (_.apply (list (_.apply (list inputG)
                                    (_.var "table.unpack")))
                     (_.var "string.char")))))]))

(def with_utf8_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "lua_utf8_encoded#|translation" utf8::encode)
       (dictionary.has "lua_utf8_decoded#|translation" utf8::decode)
       ))

(def lua::constant
  (custom
   [<s>.text
    (function (_ phase archive name)
      (of phase.monad in (_.var name)))]))

(def lua::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(def lua::power
  (custom
   [(all <>.and <s>.any <s>.any)
    (function (_ phase archive [powerS baseS])
      (do [! phase.monad]
        [powerG (phase archive powerS)
         baseG (phase archive baseS)]
        (in (_.^ powerG baseG))))]))

(def lua::import
  (custom
   [<s>.text
    (function (_ phase archive module)
      (of phase.monad in
          (_.require/1 (_.string module))))]))

(def lua::function
  (custom
   [(all <>.and <s>.i64 <s>.any)
    (function (_ phase archive [arity abstractionS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> translation.symbol
                                 (of ! each _.var)))]
         g!inputs (monad.each ! (function (_ _)
                                  (variable "input"))
                              (list.repeated (.nat arity) []))]
        (in (<| (_.closure g!inputs)
                _.return
                (when (.nat arity)
                  0 (_.apply (list //runtime.unit) abstractionG)
                  1 (_.apply g!inputs abstractionG)
                  _ (_.apply (list (_.array g!inputs)) abstractionG))))))]))

(def .public bundle
  Bundle
  (|> extension.empty
      with_array_extensions
      with_object_extensions
      with_utf8_extensions

      (dictionary.has "lua_constant#|translation" lua::constant)
      (dictionary.has "lua_apply#|translation" lua::apply)
      (dictionary.has "lua_power#|translation" lua::power)
      (dictionary.has "lua_import#|translation" lua::import)
      (dictionary.has "lua_function#|translation" lua::function)
      (dictionary.has "lua_script_universe#|translation" (nullary (function.constant (_.boolean reference.universe))))
      ))
