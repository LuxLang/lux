... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   ["[0]" meta (.only)
    [macro
     ["[0]" template]]
    [type
     ["[0]" check]]
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]]]
     [meta
      ["[0]" archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]]
 ["[0]" /
  [runtime (.only Operation Phase Handler)]
  ["[1][0]" primitive]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" function]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["//[1]" ///
   ["[0]" extension]
   [//
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" synthesis]
    ["[0]" translation]
    [///
     ["[0]" reference]]]]])

(the (with_source_mapping @ it)
  (for_any (_ of)
    (-> Location (Operation (Bytecode of))
        (Operation (Bytecode of))))
  (do [! phase.monad]
    [.let [[expected_module line column] @]
     actual_module translation.module
     it it]
    (in (if (text.= expected_module actual_module)
          (do _.monad
            [_ (_.map line)]
            it)
          it))))

(the .public (translate extender lux)
  (-> extension.Extender Lux
      Phase)
  (function (phase archive it)
    (`` (`` (when it
              (,, (template.with [<tag> <translator>]
                    [(<tag> @ it)
                     (with_source_mapping @
                       (phase#in (<translator> it)))]

                    [synthesis.bit  /primitive.bit]
                    [synthesis.i64  /primitive.i64]
                    [synthesis.f64  /primitive.f64]
                    [synthesis.text /primitive.text]
                    ))

              (,, (template.with [,tag ,translation]
                    [(,tag @ it)
                     (with_source_mapping @
                       (,translation archive it))]

                    [synthesis.variable /reference.variable]
                    [synthesis.constant /reference.constant]
                    ))

              (,, (template.with [,tag ,translation]
                    [(,tag @ it)
                     (with_source_mapping @
                       (,translation phase archive it))]

                    [synthesis.variant /complex.variant]
                    [synthesis.tuple /complex.tuple]

                    [synthesis.tail_recursion /loop.tail_recursion]
                    [synthesis.tail_iteration /loop.tail_iteration]
                    
                    [synthesis.abstraction /function.abstraction]
                    [synthesis.reification /function.reification]
                    ))

              (,, (template.with [,tag ,translation ,parameters]
                    [(,tag @ (,, (template.spliced ,parameters)))
                     (with_source_mapping @
                       (,translation phase archive ,parameters))]

                    [synthesis.let /when.let [register input body]]
                    [synthesis.exec /when.exec [before after]]
                    ))

              (synthesis.when @ it)
              (`` (<| (with_source_mapping @)
                      (,, (template.with [,synthesis ,translation]
                            [(when (,synthesis it)
                               {.#Some it}
                               (,translation phase archive it)

                               else)]

                            [synthesis.if /when.if]
                            [synthesis.its /when.its]
                            [synthesis.when_i64 /when.when_i64]
                            [synthesis.when_f64 /when.when_f64]
                            [synthesis.when_text /when.when_text]
                            [synthesis.multi_let /when.multi_let]
                            ))
                      (/when.when phase archive it)))

              [@ {synthesis.#Extension [name parameters]}]
              (with_source_mapping @
                (extension.application extender lux phase archive .Translation name parameters
                                       (|>>)
                                       (function (_ _) {.#None})))
              )))))
