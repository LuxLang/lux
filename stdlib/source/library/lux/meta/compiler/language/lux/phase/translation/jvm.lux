... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   ["[0]" meta (.only)
    [macro
     ["[0]" template]]
    [type
     ["[0]" check]]
    [compiler
     [target
      [jvm
       ["_" bytecode (.only Bytecode)]]]
     [meta
      ["[0]" archive (.only Archive)]
      ["[0]" cache
       [dependency
        ["[1]/[0]" artifact]]]]]]]]
 ["[0]" /
  [runtime (.only Operation Phase Handler)]
  ["[1][0]" primitive]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" function]
  ["[1][0]" when]
  ["[1][0]" loop]
  ["//[1]" ///
   ["[0]" extension]
   [//
    ["[0]" phase (.use "[1]#[0]" monad)]
    ["[0]" synthesis]
    ["[0]" translation]
    [///
     ["[0]" reference]]]]])

(the (with_source_mapping @ it)
  (for_any (_ of)
    (-> Location (Operation (Bytecode of))
        (Operation (Bytecode of))))
  (do [! phase.monad]
    [.let [[expected_module line column] @]
     actual_module translation.module
     it it]
    (in (if (text.= expected_module actual_module)
          (do _.monad
            [_ (_.map line)]
            it)
          it))))

(the .public (translate extender lux)
  (-> extension.Extender Lux
      Phase)
  (function (phase archive it)
    (`` (when it
          (,, (template.with [<tag> <translator>]
                [(<tag> @ it)
                 (with_source_mapping @
                   (phase#in (<translator> it)))]

                [synthesis.bit  /primitive.bit]
                [synthesis.i64  /primitive.i64]
                [synthesis.f64  /primitive.f64]
                [synthesis.text /primitive.text]))

          (synthesis.variant @ it)
          (with_source_mapping @
            (/complex.variant phase archive it))

          (synthesis.tuple @ it)
          (with_source_mapping @
            (/complex.tuple phase archive it))

          [@ {synthesis.#Reference it}]
          (with_source_mapping @
            (when it
              {reference.#Variable it}
              (/reference.variable archive it)
              
              {reference.#Constant it}
              (/reference.constant archive it)))

          (synthesis.when @ it)
          (with_source_mapping @
            (/when.when phase archive it))

          (synthesis.exec @ it)
          (with_source_mapping @
            (/when.exec phase archive it))

          (synthesis.let @ it)
          (with_source_mapping @
            (/when.let phase archive it))

          (synthesis.if @ it)
          (with_source_mapping @
            (/when.if phase archive it))

          (synthesis.its @ it)
          (with_source_mapping @
            (/when.its phase archive it))

          (synthesis.scope @ it)
          (with_source_mapping @
            (/loop.scope phase archive it))

          (synthesis.again @ it)
          (with_source_mapping @
            (/loop.again phase archive it))

          (synthesis.abstraction @ it)
          (with_source_mapping @
            (/function.abstraction phase archive it))

          (synthesis.apply @ it)
          (with_source_mapping @
            (/function.apply phase archive it))

          [@ {synthesis.#Extension [name parameters]}]
          (with_source_mapping @
            (extension.application extender lux phase archive .Translation name parameters
                                   (|>>)
                                   (function (_ _) {.#None})))
          ))))
