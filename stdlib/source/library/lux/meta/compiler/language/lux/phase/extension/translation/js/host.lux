... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad (.only do)]]
   [control]
   ["[0]" function]
   [data
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [macro
    ["[0]" template]]
   [meta
    [compiler
     [target
      ["_" js (.only Var Expression)]]]]]]
 [//
  [common (.only custom)]
  [////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    [js
     ["[0]" runtime (.only Operation Phase Handler Bundle
                           with_vars)]]]
   [//
    ["[0]" phase]
    ["[0]" translation]
    [synthesis
     ["<s>" \\projection]]]]])

(the array::new
  (Unary Expression)
  (|>> (_.its runtime.i64_low_field) list (_.new (_.var "Array"))))

(the array::length
  (Unary Expression)
  (|>> (_.its "length") runtime.i64::of_number))

(the (array::read [indexG arrayG])
  (Binary Expression)
  (_.at (_.its runtime.i64_low_field indexG)
        arrayG))

(the (array::write [indexG valueG arrayG])
  (Trinary Expression)
  (runtime.array//write indexG valueG arrayG))

(the (array::delete [indexG arrayG])
  (Binary Expression)
  (runtime.array//delete indexG arrayG))

(the with_array_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "js_array_new#|translation" (unary array::new))
       (dictionary.has "js_array_length#|translation" (unary array::length))
       (dictionary.has "js_array_read#|translation" (binary array::read))
       (dictionary.has "js_array_write#|translation" (trinary array::write))
       (dictionary.has "js_array_delete#|translation" (binary array::delete))
       ))

(the object::new
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ phase archive [constructorS inputsS])
      (do [! phase.monad]
        [constructorG (phase archive constructorS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.new constructorG inputsG))))]))

(the object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (in (_.its fieldS objectG))))]))

(the object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(template.with [<!> <?> <unit>]
  [(the <!> (Nullary Expression) (function.constant <unit>))
   (the <?> (Unary Expression) (_.= <unit>))]

  [object::null object::null? _.null]
  [object::undefined object::undefined? _.undefined]
  )

(the with_object_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "js_object_new#|translation" object::new)
       (dictionary.has "js_object_get#|translation" object::get)
       (dictionary.has "js_object_do#|translation" object::do)

       (dictionary.has "js_object_null#|translation" (nullary object::null))
       (dictionary.has "js_object_null?#|translation" (unary object::null?))

       (dictionary.has "js_object_undefined#|translation" (nullary object::undefined))
       (dictionary.has "js_object_undefined?#|translation" (unary object::undefined?))
       ))

(the js::constant
  (custom
   [<s>.text
    (function (_ phase archive name)
      (by phase.monad in (_.var name)))]))

(the js::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply abstractionG inputsG))))]))

(the js::function
  (custom
   [(all <>.and <s>.i64 <s>.any)
    (function (_ phase archive [arity abstractionS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation Var))
                            (|>> translation.name
                                 (by ! each _.var)))]
         'inputs (monad.each ! (function (_ _) (variable "input"))
                             (list.repeated (.natural arity) []))
         'abstraction (variable "abstraction")]
        (in (_.closure 'inputs
                       (all _.then
                            (_.define 'abstraction abstractionG)
                            (_.return (when (.natural arity)
                                        0 (_.apply_1 'abstraction runtime.unit)
                                        1 (_.apply 'abstraction 'inputs)
                                        _ (_.apply_1 'abstraction (_.array 'inputs)))))))))]))

(the .public bundle
  Bundle
  (|> extension.empty
      with_array_extensions
      with_object_extensions

      (dictionary.has "js_constant#|translation" js::constant)
      (dictionary.has "js_apply#|translation" js::apply)
      (dictionary.has "js_type_of#|translation" (unary _.type_of))
      (dictionary.has "js_function#|translation" js::function)
      ))
