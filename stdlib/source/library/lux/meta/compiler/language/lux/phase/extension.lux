... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except global)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.only)
      ["[0]" property]]
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" symbol]
    ["[0]" type (.only sharing)
     ["[0]" check]]]]]
 [///
  ["[0]" phase (.only Operation Phase) (.use "[1]#[0]" functor)]
  [///
   [meta
    [archive (.only Archive)]]]])

(every .public (Extension of)
  (Record
   [#name Symbol
    #parameters (List of)]))

(the .public equivalence
  (for_any (_ of)
    (-> (Equivalence of)
        (Equivalence (Extension of))))
  (|>> list.equivalence
       (product.equivalence symbol.equivalence)))

(the .public hash
  (for_any (_ of)
    (-> (Hash of)
        (Hash (Extension of))))
  (|>> list.hash
       (product.hash symbol.hash)))

(every .public (Handler state input output)
  (-> (Phase state input output)
      (Phase state (List input) output)))

(every .public (Bundle state input output)
  (Dictionary Text (Handler state input output)))

(the .public empty
  Bundle
  (dictionary.empty text.hash))

(every .public (Extender state input output)
  (-> Any
      (Handler state input output)))

(exception.the .public (invalid [global expected actual])
  (Exception [Symbol Type Type])
  (exception.report
   (list ["Definition" (symbol.as_text global)]
         ["Expected" (type.as_text expected)]
         ["Actual" (type.as_text actual)])))

(exception.the .public (error error)
  (Exception Text)
  error)

(every Value
  (Variant
   {#Normal Any}
   {#Special Any}))

(the (global name)
  (-> Symbol
      (Meta Global))
  (do meta.monad
    [name (binding.normal name)
     lux meta.compiler_state]
    (loop (again [[normal_module normal_short] name])
      (when (is (Maybe [Bit Global])
                (do maybe.monad
                  [(open "/[0]") (|> lux
                                     (its .#modules)
                                     (property.value normal_module))]
                  (property.value normal_short /#definitions)))
        {.#Some [exported? it]}
        (when it
          {.#Alias de_aliased}
          (again de_aliased)

          _
          (in it))

        {.#None it}
        (meta.failure (%.message "Unknown global: " (symbol.as_text name)))))))

(the (global_value name)
  (-> Symbol
      (Meta [Type Value]))
  (do meta.monad
    [global (..global name)]
    (when global
      {.#Definition [type value]}
      (in [type {#Normal value}])

      {.#Default [type value]}
      (in [type {#Special value}])
      
      {.#Alias _}
      (undefined))))

(the (global_extension expected_type name)
  (-> Type Symbol (Meta Value))
  (do meta.monad
    [[actual_type value] (global_value name)]
    (if (check.subsumed? expected_type actual_type)
      (in value)
      (meta.failure (exception.error ..invalid [name expected_type actual_type])))))

(the .public (application extender
                          lux phase archive
                          expected_type global parameters
                          when_valid
                          when_invalid)
  (for_any (_ state input raw_output processed_output)
    (-> (Extender state input raw_output)
        Lux (Phase state input raw_output) Archive
        Type Symbol (List input)
        (-> raw_output processed_output)
        (-> Text (Maybe (Operation state processed_output)))
        (Operation state processed_output)))
  (when (|> (do [! meta.monad]
              [value (global_extension expected_type global)]
              (in ((when value
                     {#Normal definition}
                     (extender definition)

                     {#Special default}
                     (sharing [state input raw_output]
                       (is (Extender state input raw_output)
                           extender)
                       (is (Handler state input raw_output)
                           (as_expected default))))
                   phase archive parameters)))
            (meta.value lux))
    {try.#Success operation}
    (phase#each when_valid operation)

    {try.#Failure error}
    (when (when_invalid error)
      {.#Some when_invalid}
      when_invalid

      {.#None}
      (phase.except ..error [error]))))

(exception.the .public (defaults_cannot_be_referenced global)
  (Exception Symbol)
  (exception.report
   (list ["Default" (symbol.as_text global)])))
