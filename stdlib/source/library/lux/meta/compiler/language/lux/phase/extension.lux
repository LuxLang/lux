(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only Format)]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" meta (.only)
    ["[0]" symbol]
    [type (.only sharing)
     ["[0]" check]]]]]
 [/////
  ["[0]" phase (.only Operation Phase) (.use "[1]#[0]" functor)]
  [meta
   [archive (.only Archive)]]])

(type .public (Extension of)
  (Record
   [#name Symbol
    #parameters (List of)]))

(def .public equivalence
  (All (_ of)
    (-> (Equivalence of)
        (Equivalence (Extension of))))
  (|>> list.equivalence
       (product.equivalence symbol.equivalence)))

(def .public hash
  (All (_ of)
    (-> (Hash of)
        (Hash (Extension of))))
  (|>> list.hash
       (product.hash symbol.hash)))

(type .public (Handler state input output)
  (-> (Phase state input output)
      (Phase state (List input) output)))

(type .public (Bundle state input output)
  (Dictionary Text (Handler state input output)))

(def .public empty
  Bundle
  (dictionary.empty text.hash))

(type .public (Extender state input output)
  (-> Any
      (Handler state input output)))

(exception.def .public (invalid [global expected actual])
  (Exception [Symbol Type Type])
  (exception.report
   (list ["Definition" (%.symbol global)]
         ["Expected" (%.type expected)]
         ["Actual" (%.type actual)])))

(exception.def .public (error error)
  (Exception Text)
  error)

(type Value
  (Variant
   {#Normal Any}
   {#Special Any}))

(def (global_value name)
  (-> Symbol (Meta [Type Value]))
  (do meta.monad
    [global (meta.local name)]
    (when global
      {.#Definition [exported? type value]}
      (in [type {#Normal value}])

      {.#Default [exported? type value]}
      (in [type {#Special value}])
      
      {.#Alias _}
      (undefined))))

(def (global_extension expected_type name)
  (-> Type Symbol (Meta Value))
  (do meta.monad
    [[actual_type value] (global_value name)]
    (if (check.subsumes? expected_type actual_type)
      (in value)
      (meta.failure (exception.error ..invalid [name expected_type actual_type])))))

(def .public (application extender
                          lux phase archive
                          expected_type global parameters
                          when_valid
                          when_invalid)
  (All (_ state input raw_output processed_output)
    (-> (Extender state input raw_output)
        Lux (Phase state input raw_output) Archive
        Type Symbol (List input)
        (-> raw_output processed_output)
        (-> Text (Maybe (Operation state processed_output)))
        (Operation state processed_output)))
  (when (|> (do [! meta.monad]
              [value (global_extension expected_type global)]
              (in ((when value
                     {#Normal definition}
                     (extender definition)

                     {#Special default}
                     (sharing [state input raw_output]
                       (is (Extender state input raw_output)
                           extender)
                       (is (Handler state input raw_output)
                           (as_expected default))))
                   phase archive parameters)))
            (meta.result lux))
    {try.#Success operation}
    (phase#each when_valid operation)

    {try.#Failure error}
    (when (when_invalid error)
      {.#Some when_invalid}
      when_invalid

      {.#None}
      (phase.except ..error [error]))))
