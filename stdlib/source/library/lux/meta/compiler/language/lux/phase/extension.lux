(.require
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\format (.only Format)]]
    [collection
     ["[0]" list]
     ["[0]" dictionary (.only Dictionary)]]]]]
 [/////
  ["[0]" phase]])

(type .public Name
  Text)

(type .public (Extension a)
  (Record
   [#name Name
    #parameters (List a)]))

(def .public equivalence
  (All (_ a)
    (-> (Equivalence a)
        (Equivalence (Extension a))))
  (|>> list.equivalence
       (product.equivalence text.equivalence)))

(def .public hash
  (All (_ a)
    (-> (Hash a)
        (Hash (Extension a))))
  (|>> list.hash
       (product.hash text.hash)))

(type .public (Handler s i o)
  (-> (phase.Phase s i o)
      (phase.Phase s (List i) o)))

(type .public (Bundle s i o)
  (Dictionary Name (Handler s i o)))

(exception.def .public (incorrect_arity [name arity args])
  (Exception [Name Nat Nat])
  (exception.report
   (list ["Extension" (%.text name)]
         ["Expected" (%.nat arity)]
         ["Actual" (%.nat args)])))

(exception.def .public (invalid_syntax [name %format inputs])
  (All (_ a)
    (Exception [Name (Format a) (List a)]))
  (exception.report
   (list ["Extension" (%.text name)]
         ["Inputs" (exception.listing %format inputs)])))

(type .public (Extender s i o)
  (-> Any
      (Handler s i o)))
