... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Type Label if let exec when int)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" function]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]]
   [math
    [number
     ["n" nat]
     ["[0]" i32]]]
   [meta
    [macro
     ["^" pattern]]
    [compiler
     [target
      ["_" c++]]]]]]
 ["[0]" //
  ["[1][0]" reference]
  ["[1][0]" runtime (.only Operation Phase Term)]
  [////
   ["[0]" phase (.use "[1]#[0]" functor)]
   ["[0]" translation]
   ["[0]" synthesis (.only Path Fork)
    [access
     ["[0]" member (.only Member)]]]
   [///
    [reference
     [variable (.only Register)]]]]])

(def .public (if next archive it)
  (Term synthesis.If)
  (do phase.monad
    [when (next archive (the synthesis.#if_when it))
     then (next archive (the synthesis.#if_then it))
     else (next archive (the synthesis.#if_else it))]
    (in (_.? when then else))))

(def .public (let next archive it)
  (Term synthesis.Let)
  (do [! phase.monad]
    [.let [[tail body] (synthesis.flat_let (the synthesis.#expression it))
           context (the synthesis.#context it)]
     bindings (monad.each ! (function (_ [binding value])
                              (do !
                                [value (next archive value)]
                                (in (_.variable (//reference.local binding) //runtime.value_type value))))
                          (list.partial context
                                        tail))
     body (next archive body)]
    (in (_.on (list)
              (_.lambda (.when context
                          [0 _] (list)
                          [_ _] (list _.all_by_value))
                        (list)
                        {.#Some //runtime.value_type}
                        (list#mix _.then
                                  (_.return body)
                                  (list.reversed bindings))
                        )))))

(def .public (exec next archive it)
  (Term synthesis.Exec)
  (do [! phase.monad]
    [.let [[tail after] (synthesis.flat_exec (the synthesis.#after it))]
     all_before (monad.each ! (|>> (next archive)
                                   (phase#each _.;))
                            (list.partial (the synthesis.#before it) tail))
     after (next archive after)]
    (in (_.on (list)
              (_.lambda (list _.all_by_value)
                        (list)
                        {.#Some //runtime.value_type}
                        (list#mix _.then
                                  (_.return after)
                                  (list.reversed all_before)))))))
