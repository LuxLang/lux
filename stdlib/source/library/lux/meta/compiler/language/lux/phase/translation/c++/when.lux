... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Type Label
                if let exec when local its)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]
     ["[0]" set]]]
   [meta
    ["[0]" location]
    [compiler
     [target
      ["_" c++]]]]]]
 ["[0]" //
  ["[1][0]" type]
  ["[0]" runtime (.only Operation Phase)]
  ["[0]" primitive]
  ["[0]" reference]
  [statement
   ["/" when]]
  [////
   ["[0]" translation]
   ["[0]" synthesis (.only Path Fork)
    [access
     ["[0]" member (.only Member)]]]
   ["[0]" phase (.use "[1]#[0]" monad)
    ["[0]" synthesis
     ["[1]/[0]" when]]]
   [///
    [reference
     [register (.only Register)]]
    [meta
     [archive (.only Archive)]]]]])

(the .public (if next archive it)
  (runtime.Expression synthesis.If)
  (do phase.monad
    [when (next archive (.its synthesis.#if_when it))
     then (next archive (.its synthesis.#if_then it))
     else (next archive (.its synthesis.#if_else it))]
    (in (_.? when then else))))

(the .public (let next archive it)
  (runtime.Expression synthesis.Let)
  (do [! phase.monad]
    [.let [[tail body] (synthesis.flat_let (.its synthesis.#expression it))
           context (.its synthesis.#context it)]
     bindings (monad.each ! (function (_ [binding value])
                              (do !
                                [value (next archive value)]
                                (in (_.constant (reference.local binding)
                                                runtime.value_type
                                                value))))
                          (list.partial context
                                        tail))
     body (next archive body)]
    (in (_.on (list)
              (_.lambda (.when context
                          [0 _] (list)
                          [_ _] (list _.all_by_value))
                        (list)
                        {.#Some runtime.value_type}
                        (list#mix _.then
                                  (_.return body)
                                  (list.reversed bindings))
                        )))))

... https://en.wikipedia.org/wiki/Comma_operator
(the .public (exec next archive it)
  (runtime.Expression synthesis.Exec)
  (do [! phase.monad]
    [before (next archive (.its synthesis.#before it))
     after (next archive (.its synthesis.#after it))]
    (in (_., before
             after))))

(the .public (its next archive it)
  (runtime.Expression synthesis.Its)
  (do phase.monad
    [source (next archive (.its synthesis.#source it))]
    (in (list#mix (function (_ side source)
                    (.let [method (.if (.its member.#right? side)
                                    (runtime.right (_.int (.integer (.its member.#lefts side))))
                                    (runtime.left (_.int (.integer (.its member.#lefts side)))))]
                      (method source)))
                  source
                  (.its synthesis.#path it)))))

(the .public (when statement expression archive it)
  (-> runtime.Phase'
      (runtime.Expression synthesis.When))
  (do [! phase.monad]
    [.let [storage (synthesis/when.storage (.its synthesis.#output it))]
     it (statement expression archive (synthesis.when location.dummy it))]
    (in (_.on (list)
              (_.lambda (.if (set.member? (.its synthesis/when.#bindings storage)
                                          0)
                          (list)
                          (list _.all_by_value))
                        (list)
                        {.#Some runtime.value_type}
                        it)))))
