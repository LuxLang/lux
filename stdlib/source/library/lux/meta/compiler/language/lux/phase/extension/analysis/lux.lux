... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except global local when function)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["?" projection]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     [character (.only Character)]
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" symbol]
    [module
     ["[0]" import]]
    ["[0]" code
     ["?[1]" \\projection (.only Projection)]]
    [macro
     ["^" pattern]]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 ["[0]" /// (.only)
  ["[0]" synthesis
   ["[1]" lux]]
  ["/[1]" //
   [//
    ["[0]" phase (.only)
     [analysis
      ["[0]" when]
      ["[0]" function]]]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     [evaluation (.only Eval)]
     ["[0]A" type]
     ["[0]" scope]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(the .public (custom [syntax handler] extension_name)
  (for_any (_ of)
    (-> [(Projection of)
         (-> Text Phase Archive of (Operation analysis.Term))]
        (-> Text Handler)))
  (.function (_ analysis archive args)
    (.when (?code.value syntax args)
      {try.#Success inputs}
      (handler extension_name analysis archive inputs)

      {try.#Failure error}
      (phase.failure error))))

(the .public translation
  (-> Text
      Symbol)
  (|>> (text.suffix "|translation")
       [.prelude]))

(the .public (install name anonymous)
  (-> Text (-> Text Handler)
      (-> Bundle Bundle))
  (dictionary.has name (anonymous name)))

(exception.the .public (incorrect_arity [expected actual])
  (Exception [Natural Natural])
  (exception.report
   (list ["Expected" (%.natural expected)]
         ["Actual" (%.natural actual)])))

(the (simple inputsT+ outputT extension_name)
  (-> (List Type) Type (-> Text Handler))
  (let [num_expected (list.size inputsT+)]
    (.function (_ analysis archive args)
      (let [num_actual (list.size args)]
        (if (n.= num_expected num_actual)
          (do [! phase.monad]
            [_ (typeA.inference outputT)
             argsA (monad.each !
                               (.function (_ [argT argC])
                                 (<| (typeA.expecting argT)
                                     (analysis archive argC)))
                               (list.zipped_2 inputsT+ args))
             @ meta.location]
            (in [@ {analysis.#Extension (..translation extension_name) argsA}]))
          (analysis.except ..incorrect_arity [num_expected num_actual]))))))

(the .public (nullary valueT)
  (-> Type
      (-> Text Handler))
  (simple (list) valueT))

(the .public (unary inputT outputT)
  (-> Type Type
      (-> Text Handler))
  (simple (list inputT) outputT))

(the .public (binary subjectT paramT outputT)
  (-> Type Type Type
      (-> Text Handler))
  (simple (list subjectT paramT) outputT))

(the .public (trinary subjectT param0T param1T outputT)
  (-> Type Type Type Type
      (-> Text Handler))
  (simple (list subjectT param0T param1T) outputT))

(the .public (variadic input output next extension_name)
  (-> Type Type (-> Text Text)
      (-> Text Handler))
  (.function (_ analysis archive args)
    (do [! phase.monad]
      [_ (typeA.inference output)
       argsA (monad.each !
                         (|>> (analysis archive)
                              (typeA.expecting input))
                         args)
       @ meta.location]
      (in [@ {analysis.#Extension [.prelude (next extension_name)] argsA}]))))

... TODO: Get rid of this ASAP
(these
 (exception.the .public (character_text_must_be_size_1 text)
   (Exception Text)
   (exception.report
    (list ["Text" (%.text text)])))
 
 (the text_char
   (Projection Character)
   (do ?.monad
     [raw ?code.text]
     (.when (text.size raw)
       1 (in (|> raw (text.character 0) maybe.trusted))
       _ (?.failure (exception.error ..character_text_must_be_size_1 [raw])))))

 (the lux::syntax_char_case!
   (-> Text Handler)
   (..custom
    [(all ?.and
          ?code.any
          (?code.tuple (?.some (?.and (?code.tuple (?.many ..text_char))
                                      ?code.any)))
          ?code.any)
     (.function (_ extension_name phase archive [input conditionals else])
       (do [! phase.monad]
         [input (<| (typeA.expecting Character)
                    (phase archive input))
          expectedT meta.expected_type
          conditionals (monad.each ! (.function (_ [cases branch])
                                       (do !
                                         [branch (<| (typeA.expecting expectedT)
                                                     (phase archive branch))]
                                         (in [cases branch])))
                                   conditionals)
          else (<| (typeA.expecting expectedT)
                   (phase archive else))
          @ meta.location]
         (in (|> conditionals
                 (list#each (.function (_ [cases branch])
                              (<| (analysis.tuple @)
                                  (list (analysis.tuple @ (list#each (|>> (analysis.natural @)) cases))
                                        branch))))
                 (list.partial input else)
                 {analysis.#Extension (..translation extension_name)}
                 [@]))))])))

... .is?# represents reference/pointer equality.
(the (lux::is? extension_name)
  (-> Text Handler)
  (.function (_ analysis archive args)
    (<| typeA.with_var
        (.function (_ [@var :var:]))
        ((binary :var: :var: Bit extension_name)
         analysis archive args))))

... .try# provides a unified way to interact with the host platform's runtime error-handling facilities.
(the lux::try
  (-> Text Handler)
  (..custom
   [?code.any
    (.function (_ extension_name analysis archive opC)
      (<| typeA.with_var
          (.function (_ [@var :var:]))
          (do [! phase.monad]
            [_ (typeA.inference (type (Either Text :var:)))
             @ meta.location]
            (|> opC
                (analysis archive)
                (typeA.expecting (type (-> .Any :var:)))
                (of ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(the .public (in_module#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(?.and ?code.any ?code.any)
    (.function (_ extension_name analysis archive [module 'expression])
      (do [! phase.monad]
        [module (eval archive Text module)]
        (analysis.with_current_module (as Text module)
          (.when 'expression
            [_ 'expression]
            (analysis archive [[(as Text module) 0 0] 'expression])))))]))

(the .public (is#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(?.and ?code.any ?code.any)
    (.function (_ extension_name analysis archive [typeC valueC])
      (do [! phase.monad]
        [actualT (of ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)]
        (<| (typeA.expecting actualT)
            (analysis archive valueC))))]))

(the .public (as#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(?.and ?code.any ?code.any)
    (.function (_ extension_name analysis archive [typeC valueC])
      (do [! phase.monad]
        [actualT (of ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)
         [valueT valueA] (typeA.inferring (analysis archive valueC))]
        (in valueA)))]))

(the (caster input output)
  (-> Type Type
      (-> Text Handler))
  (..custom
   [?code.any
    (.function (_ extension_name phase archive valueC)
      (do [! phase.monad]
        [_ (typeA.inference output)]
        (<| (typeA.expecting input)
            (phase archive valueC))))]))

(exception.the .public (cannot_access_global [from global])
  (Exception [Text Symbol])
  (exception.report
   (list ["From" (%.text from)]
         ["Global" (symbol.as_text global)])))

(the (expected_module current quoted)
  (-> Text Text
      Text)
  (.when quoted
    "" current
    _ quoted))

... It may seem odd that type-checking is done just prior to raising an exception.
... It would be a completely useless labor...
... Except for that fact that, under certain circumstances, the compiler needs to access defaults.
... And it only needs to forbid access in every other situation.
... What this does is make sure that any code which does need to access defaults can just catch
... the exception, and know that the default it was looking for has the correct type, because
... the exception is only ever raised _after_ the inference.
(the (global_default name [type _])
  (for_any (_ of)
    (-> Symbol Default
        (Operation of)))
  (do phase.monad
    [_ (typeA.inference type)]
    (analysis.except ///.defaults_cannot_be_referenced [name])))

(the .public global
  (-> Text Handler)
  (..custom
   [(?.and ?code.text ?code.global)
    (.function (_ extension_name phase archive [quoted_module def_name])
      (loop (de_aliased [validated_access? false
                         def_name def_name])
        (do [! phase.monad]
          [(^.let def_name [::module ::name]) (binding.normal def_name)
           [exported? constant] (binding.definition def_name)
           [current _] module.current
           .let [expected (..expected_module current quoted_module)]
           imported! (import.by? ::module expected)]
          (if (let [in_the_same_module? (text.= expected ::module)
                    can_access_export? (and exported? imported!)]
                (or validated_access?
                    in_the_same_module?
                    can_access_export?))
            (.when constant
              {.#Alias real_def_name}
              (de_aliased true real_def_name)
              
              {.#Definition [type _]}
              (do !
                [_ (typeA.inference type)
                 @ meta.location]
                (in (analysis.constant @ def_name)))

              {.#Default it}
              (global_default def_name it))
            (analysis.except ..cannot_access_global [expected def_name])))))]))

(exception.the .public (unknown_local name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(the .public local
  (-> Text Handler)
  (..custom
   [?code.local
    (.function (_ extension_name phase archive [it])
      (do [! phase.monad]
        [?var (scope.variable it)]
        (.when ?var
          {.#Some [local_type local_reference]}
          (do !
            [_ (typeA.inference local_type)
             @ meta.location]
            (in (analysis.variable @ local_reference)))

          {.#None}
          (analysis.except ..unknown_local [it]))))]))

(the universe
  (-> Text Handler)
  (..custom
   [?code.end
    (.function (_ extension_name phase archive [])
      (do phase.monad
        [_ (typeA.inference Natural)
         @ meta.location]
        (in (analysis.natural @ (++ (.universe#))))))]))

(the when
  (-> Text Handler)
  (..custom
   [(?.and ?code.any
           (?.many (?.and ?code.any ?code.any)))
    (.function (_ extension_name phase archive [input branches])
      (when.when phase branches archive input))]))

(the function
  (-> Text Handler)
  (..custom
   [(all ?.and
         ?code.local
         ?code.local
         ?code.any)
    (.function (_ extension_name phase archive [function_name arg_name body])
      (function.function phase function_name arg_name archive body))]))

(the with_basic_extensions
  (-> Bundle
      Bundle)
  (|>> (install "is_type#" (..caster .Type .Type))
       (install "is?#" lux::is?)
       (install "try#" lux::try)
       (install "when_char#" lux::syntax_char_case!)
       (install "local#" ..local)
       (install "global#" ..global)
       (install "universe#" ..universe)
       (install "when#" ..when)
       (install "function#" ..function)))

(the with_io_extensions
  (-> Bundle
      Bundle)
  (|>> (install "log!#" (unary Text Any))
       (install "error#" (unary Text Nothing))))

(the Any_I64
  (type (I64 Any)))

(the with_i64_extensions
  (-> Bundle
      Bundle)
  (|>> (install "i64_and#" (binary Any_I64 Any_I64 I64))
       (install "i64_or#" (binary Any_I64 Any_I64 I64))
       (install "i64_xor#" (binary Any_I64 Any_I64 I64))
       (install "i64_left#" (binary Natural Any_I64 I64))
       (install "i64_right#" (binary Natural Any_I64 I64))

       (install "i64_=#" (binary Any_I64 Any_I64 Bit))
       (install "i64_+#" (binary Any_I64 Any_I64 I64))
       (install "i64_-#" (binary Any_I64 Any_I64 I64))))

(the with_integer_extensions
  (-> Bundle
      Bundle)
  (|>> (install "int_<#" (binary Integer Integer Bit))
       (install "int_*#" (binary Integer Integer Integer))
       (install "int_/#" (binary Integer Integer Integer))
       (install "int_%#" (binary Integer Integer Integer))
       
       (install "int_f64#" (unary Integer Decimal))
       (install "int_char#" (unary Integer Text))))

(the with_decimal_extensions
  (-> Bundle
      Bundle)
  (|>> (install "f64_+#" (binary Decimal Decimal Decimal))
       (install "f64_-#" (binary Decimal Decimal Decimal))
       (install "f64_*#" (binary Decimal Decimal Decimal))
       (install "f64_/#" (binary Decimal Decimal Decimal))
       (install "f64_%#" (binary Decimal Decimal Decimal))
       (install "f64_=#" (binary Decimal Decimal Bit))
       (install "f64_<#" (binary Decimal Decimal Bit))
       
       (install "f64_int#" (unary Decimal Integer))))

(the with_text_extensions
  (-> Bundle
      Bundle)
  (|>> (install "text_=#" (binary Text Text Bit))
       (install "text_<#" (binary Text Text Bit))
       (install "text_composite#" (variadic Text Text synthesis.synthesis))
       (install "text_index#" (trinary Natural Text Text (type (Maybe Natural))))
       (install "text_size#" (unary Text Natural))
       (install "text_char#" (binary Natural Text Natural))
       (install "text_clip#" (trinary Natural Natural Text Text))
       ))

(the .public bundle
  (|> ///.empty
      with_basic_extensions
      with_io_extensions
      with_text_extensions
      with_i64_extensions
      with_integer_extensions
      with_decimal_extensions
      ))
