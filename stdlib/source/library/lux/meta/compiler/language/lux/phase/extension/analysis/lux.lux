... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except global local)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     [char (.only Char)]
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]
    [macro
     ["^" pattern]]
    ["[0]" type (.only)
     ["[0]" check]]]]]
 ["[0]" /// (.only)
  ["[0]" synthesis
   ["[1]" lux]]
  ["/[1]" //
   [//
    ["[0]" phase]
    ["[0]" analysis (.only Operation Phase Handler Bundle)
     [evaluation (.only Eval)]
     ["[0]A" type]
     ["[0]" scope]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(def .public (custom [syntax handler] extension_name)
  (All (_ of)
    (-> [(Parser of)
         (-> Text Phase Archive of (Operation analysis.Term))]
        (-> Text Handler)))
  (function (_ analyse archive args)
    (when (<code>.value syntax args)
      {try.#Success inputs}
      (handler extension_name analyse archive inputs)

      {try.#Failure error}
      (phase.failure error))))

(def .public translation
  (-> Text
      Symbol)
  (|>> (text.suffix "|translation")
       [.prelude]))

(def .public (install name anonymous)
  (-> Text (-> Text Handler)
      (-> Bundle Bundle))
  (dictionary.has name (anonymous name)))

(exception.def .public (incorrect_arity [expected actual])
  (Exception [Nat Nat])
  (exception.report
   (list ["Expected" (%.nat expected)]
         ["Actual" (%.nat actual)])))

(def (simple inputsT+ outputT extension_name)
  (-> (List Type) Type (-> Text Handler))
  (let [num_expected (list.size inputsT+)]
    (function (_ analyse archive args)
      (let [num_actual (list.size args)]
        (if (n.= num_expected num_actual)
          (do [! phase.monad]
            [_ (typeA.inference outputT)
             argsA (monad.each !
                               (function (_ [argT argC])
                                 (<| (typeA.expecting argT)
                                     (analyse archive argC)))
                               (list.zipped_2 inputsT+ args))
             @ meta.location]
            (in [@ {analysis.#Extension (..translation extension_name) argsA}]))
          (analysis.except ..incorrect_arity [num_expected num_actual]))))))

(def .public (nullary valueT)
  (-> Type
      (-> Text Handler))
  (simple (list) valueT))

(def .public (unary inputT outputT)
  (-> Type Type
      (-> Text Handler))
  (simple (list inputT) outputT))

(def .public (binary subjectT paramT outputT)
  (-> Type Type Type
      (-> Text Handler))
  (simple (list subjectT paramT) outputT))

(def .public (trinary subjectT param0T param1T outputT)
  (-> Type Type Type Type
      (-> Text Handler))
  (simple (list subjectT param0T param1T) outputT))

(def .public (variadic input output next extension_name)
  (-> Type Type (-> Text Text)
      (-> Text Handler))
  (function (_ analyse archive args)
    (do [! phase.monad]
      [_ (typeA.inference output)
       argsA (monad.each !
                         (|>> (analyse archive)
                              (typeA.expecting input))
                         args)
       @ meta.location]
      (in [@ {analysis.#Extension [.prelude (next extension_name)] argsA}]))))

... TODO: Get rid of this ASAP
(these
 (exception.def .public (char_text_must_be_size_1 text)
   (Exception Text)
   (exception.report
    (list ["Text" (%.text text)])))
 
 (def text_char
   (Parser Char)
   (do <>.monad
     [raw <code>.text]
     (when (text.size raw)
       1 (in (|> raw (text.char 0) maybe.trusted))
       _ (<>.failure (exception.error ..char_text_must_be_size_1 [raw])))))

 (def lux::syntax_char_case!
   (-> Text Handler)
   (..custom
    [(all <>.and
          <code>.any
          (<code>.tuple (<>.some (<>.and (<code>.tuple (<>.many ..text_char))
                                         <code>.any)))
          <code>.any)
     (function (_ extension_name phase archive [input conditionals else])
       (do [! phase.monad]
         [input (<| (typeA.expecting Char)
                    (phase archive input))
          expectedT meta.expected_type
          conditionals (monad.each ! (function (_ [cases branch])
                                       (do !
                                         [branch (<| (typeA.expecting expectedT)
                                                     (phase archive branch))]
                                         (in [cases branch])))
                                   conditionals)
          else (<| (typeA.expecting expectedT)
                   (phase archive else))
          @ meta.location]
         (in (|> conditionals
                 (list#each (function (_ [cases branch])
                              (<| (analysis.tuple @)
                                  (list (analysis.tuple @ (list#each (|>> (analysis.nat @)) cases))
                                        branch))))
                 (list.partial input else)
                 {analysis.#Extension (..translation extension_name)}
                 [@]))))])))

... .is?# represents reference/pointer equality.
(def (lux::is? extension_name)
  (-> Text Handler)
  (function (_ analyse archive args)
    (<| typeA.with_var
        (function (_ [@var :var:]))
        ((binary :var: :var: Bit extension_name)
         analyse archive args))))

... .try# provides a unified way to interact with the host platform's runtime error-handling facilities.
(def lux::try
  (-> Text Handler)
  (..custom
   [<code>.any
    (function (_ extension_name analyse archive opC)
      (<| typeA.with_var
          (function (_ [@var :var:]))
          (do [! phase.monad]
            [_ (typeA.inference (type (Either Text :var:)))
             @ meta.location]
            (|> opC
                (analyse archive)
                (typeA.expecting (type (-> .Any :var:)))
                (of ! each (|>> list
                                {analysis.#Extension (..translation extension_name)}
                                [@]))))))]))

(def .public (in_module#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension_name analyse archive [module exprC])
      (do [! phase.monad]
        [module (eval archive Text module)]
        (analysis.with_current_module (as Text module)
          (analyse archive exprC))))]))

(def .public (is#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension_name analyse archive [typeC valueC])
      (do [! phase.monad]
        [actualT (of ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)]
        (<| (typeA.expecting actualT)
            (analyse archive valueC))))]))

(def .public (as#_extension eval)
  (-> Eval
      (-> Text Handler))
  (..custom
   [(<>.and <code>.any <code>.any)
    (function (_ extension_name analyse archive [typeC valueC])
      (do [! phase.monad]
        [actualT (of ! each (|>> (as Type))
                     (eval archive Type typeC))
         _ (typeA.inference actualT)
         [valueT valueA] (typeA.inferring
                          (analyse archive valueC))]
        (in valueA)))]))

(def (caster input output)
  (-> Type Type
      (-> Text Handler))
  (..custom
   [<code>.any
    (function (_ extension_name phase archive valueC)
      (do [! phase.monad]
        [_ (typeA.inference output)]
        (<| (typeA.expecting input)
            (phase archive valueC))))]))

(exception.def .public (foreign_module_has_not_been_imported [current foreign quoted global])
  (Exception [Text Text Text Symbol])
  (exception.report
   (list ["Current" current]
         ["Foreign" foreign]
         ["Quoted" quoted]
         ["Global" (%.symbol global)])))

(exception.def .public (global_has_not_been_exported global)
  (Exception Symbol)
  (exception.report
   (list ["Global" (%.symbol global)])))

(exception.def .public (defaults_cannot_be_referenced global)
  (Exception Symbol)
  (exception.report
   (list ["Default" (%.symbol global)])))

(def global
  (-> Text Handler)
  (..custom
   [(<>.and <code>.text <code>.global)
    (function (_ extension_name phase archive [quoted_module def_name])
      (loop (again [exported_alias? false
                    def_name def_name])
        (do [! phase.monad]
          [(^.let def_name [::module ::name]) (meta.normal def_name)
           current meta.current_module_name
           [exported? constant] (meta.definition def_name)]
          (when constant
            {.#Alias real_def_name}
            (again (or exported_alias?
                       (text#= current ::module)
                       exported?)
                   real_def_name)
            
            {.#Definition [actualT _]}
            (do !
              [_ (typeA.inference actualT)
               @ meta.location]
              (with_expansions [<return> (in (|> def_name reference.constant {analysis.#Reference} [@]))]
                (if (or exported_alias?
                        (text#= current ::module))
                  <return>
                  (if exported?
                    (do !
                      [imported! (meta.imported_by? ::module current)]
                      (if (or imported!
                              (text#= quoted_module ::module))
                        <return>
                        (analysis.except ..foreign_module_has_not_been_imported [current ::module quoted_module def_name])))
                    (analysis.except ..global_has_not_been_exported [def_name])))))

            {.#Default _}
            (analysis.except ..defaults_cannot_be_referenced [def_name])))))]))

(exception.def .public (unknown_local name)
  (Exception Text)
  (exception.report
   (list ["Name" (%.text name)])))

(def local
  (-> Text Handler)
  (..custom
   [<code>.local
    (function (_ extension_name phase archive [it])
      (do [! phase.monad]
        [?var (scope.variable it)]
        (when ?var
          {.#Some [local_type local_reference]}
          (do !
            [_ (typeA.inference local_type)
             @ meta.location]
            (in (|> local_reference reference.variable {analysis.#Reference} [@])))

          {.#None}
          (analysis.except ..unknown_local [it]))))]))

(def universe
  (-> Text Handler)
  (..custom
   [<code>.end
    (function (_ extension_name phase archive [])
      (do phase.monad
        [_ (typeA.inference Nat)
         @ meta.location]
        (in (analysis.nat @ (++ (.universe#))))))]))

(def with_basic_extensions
  (-> Bundle
      Bundle)
  (|>> (install "is_type#" (..caster .Type .Type))
       (install "is?#" lux::is?)
       (install "try#" lux::try)
       (install "when_char#" lux::syntax_char_case!)
       (install "local#" ..local)
       (install "global#" ..global)
       (install "universe#" ..universe)))

(def with_io_extensions
  (-> Bundle
      Bundle)
  (|>> (install "log!#" (unary Text Any))
       (install "error#" (unary Text Nothing))))

(def I64*
  (type (I64 Any)))

(def with_i64_extensions
  (-> Bundle
      Bundle)
  (|>> (install "i64_and#" (binary I64* I64* I64))
       (install "i64_or#" (binary I64* I64* I64))
       (install "i64_xor#" (binary I64* I64* I64))
       (install "i64_left#" (binary Nat I64* I64))
       (install "i64_right#" (binary Nat I64* I64))

       (install "i64_=#" (binary I64* I64* Bit))
       (install "i64_+#" (binary I64* I64* I64))
       (install "i64_-#" (binary I64* I64* I64))))

(def with_int_extensions
  (-> Bundle
      Bundle)
  (|>> (install "int_<#" (binary Int Int Bit))
       (install "int_*#" (binary Int Int Int))
       (install "int_/#" (binary Int Int Int))
       (install "int_%#" (binary Int Int Int))
       
       (install "int_f64#" (unary Int Frac))
       (install "int_char#" (unary Int Text))))

(def with_frac_extensions
  (-> Bundle
      Bundle)
  (|>> (install "f64_+#" (binary Frac Frac Frac))
       (install "f64_-#" (binary Frac Frac Frac))
       (install "f64_*#" (binary Frac Frac Frac))
       (install "f64_/#" (binary Frac Frac Frac))
       (install "f64_%#" (binary Frac Frac Frac))
       (install "f64_=#" (binary Frac Frac Bit))
       (install "f64_<#" (binary Frac Frac Bit))
       
       (install "f64_int#" (unary Frac Int))
       (install "f64_encoded#" (unary Frac Text))
       (install "f64_decoded#" (unary Text (type (Maybe Frac))))))

(def with_text_extensions
  (-> Bundle
      Bundle)
  (|>> (install "text_=#" (binary Text Text Bit))
       (install "text_<#" (binary Text Text Bit))
       (install "text_composite#" (variadic Text Text synthesis.synthesis))
       (install "text_index#" (trinary Nat Text Text (type (Maybe Nat))))
       (install "text_size#" (unary Text Nat))
       (install "text_char#" (binary Nat Text Nat))
       (install "text_clip#" (trinary Nat Nat Text Text))
       ))

(def .public bundle
  (|> ///.empty
      with_basic_extensions
      with_io_extensions
      with_text_extensions
      with_i64_extensions
      with_int_extensions
      with_frac_extensions
      ))
