... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" code]
    [macro
     ["^" pattern]]
    [type
     ["[0]" check]]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" function]
  [//
   ["[0]" extension]
   [//
    ["//" phase]
    ["/" analysis (.only Operation Phase Handler Extender)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(exception.the .public (invalid [module syntax])
  (Exception [Text Code])
  (exception.report
   (list ["Syntax" (code.relative module syntax)])))

... TODO: Replace with an inline function.
(the variant_analysis
  (template (_ analysis archive tag values)
    ... (-> Phase Archive Symbol (List Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(the sum_analysis
  (template (_ analysis archive lefts right? values)
    ... (-> Phase Archive Nat Bit (List Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(the when_analysis
  (template (_ analysis archive input branches code)
    ... (-> Phase Archive Code (List Code) Code (Operation /.Term))
    [(when (list.pairs branches)
       {try.#Success branches}
       (/when.when analysis branches archive input)

       {try.#Failure _}
       (do //.monad
         [here meta.current_module_name]
         (//.except ..invalid [here code])))]))

... TODO: Replace with an inline function.
(exception.the .public (not_a_macro name)
  (Exception Symbol)
  (exception.report
   (list ["Name" (%.symbol name)])))

(the (macro_application extender expander analysis archive def_name argsC+)
  (-> Extender Expander Phase Archive Symbol (List Code)
      (Operation /.Term))
  (do [! //.monad]
    [?macro (meta.macro def_name)]
    (when ?macro
      {.#Some macro}
      (do !
        [expansion (/macro.single_expansion expander def_name macro argsC+)]
        (analysis archive expansion))

      _
      (//.except ..not_a_macro [def_name]))))

... TODO: Replace with an inline function.
(the (global_application extender expander analysis archive function_type function_analysis def_name functionC argsC+)
  (-> Extender Expander Phase Archive Type /.Term Symbol Code (List Code)
      (Operation /.Term))
  (<| (if (check.subsumes? .Macro function_type)
        (macro_application extender expander analysis archive def_name argsC+))
      (if (check.subsumes? .Analysis function_type)
        (do //.monad
          [lux meta.compiler_state]
          (extension.application extender
                                 lux analysis archive
                                 .Analysis true def_name argsC+
                                 (|>>)
                                 (function (_ _) {.#None}))))
      (/function.apply analysis argsC+ function_type function_analysis archive functionC)))

... TODO: Replace with an inline function.
(the (term_application extender expander analysis archive functionC argsC+)
  (-> Extender Expander Phase Archive Code (List Code)
      (Operation /.Term))
  (do //.monad
    [[function_type function_analysis] (/type.inferring
                                        (analysis archive functionC))]
    (when function_analysis
      (/.constant @ def_name)
      (global_application extender expander analysis archive function_type function_analysis def_name functionC argsC+)

      _
      (/function.apply analysis argsC+ function_type function_analysis archive functionC))))

... TODO: Replace with an inline function.
(the apply_analysis
  (template (_ extender expander analysis archive functionC argsC+)
    ... (-> Extender Expander Phase Archive Code (List Code) (Operation /.Term))
    [(when functionC
       [_ {.#Symbol global}]
       (do //.monad
         [lux meta.compiler_state]
         (extension.application extender
                                lux analysis archive
                                .Analysis false global argsC+
                                (|>>)
                                (function (_ _)
                                  {.#Some (term_application extender expander analysis archive functionC argsC+)})))

       _
       (term_application extender expander analysis archive functionC argsC+))]))

(the .public (phase extender expander)
  (-> Extender Expander
      Phase)
  (function (analysis archive code)
    (<| (let [[@ code'] code])
        ... The location must be set in the state for the sake
        ... of having useful error messages.
        (/.with_location @)
        (when code
          (^.with_template [<tag> <analyser>]
            [[_ {<tag> value}]
             (<analyser> value)])
          ([.#Text /simple.text]
           [.#Nat  /simple.nat]
           [.#Bit  /simple.bit]
           [.#Dec  /simple.dec]
           [.#Int  /simple.int]
           [.#Rev  /simple.rev])

          [[quoted_module @line @row] {.#Symbol value}]
          (/reference.reference extender analysis archive quoted_module value)

          (^.` [(^.,* elems)])
          (/complex.record analysis archive elems)

          (^.` {(^., [_ {.#Symbol tag}]) (^.,* values)})
          (..variant_analysis analysis archive tag values)

          (^.` ({(^.,* branches)} (^., input)))
          (..when_analysis analysis archive input branches code)

          (^.` ([(^., [_ {.#Symbol ["" function_name]}]) (^., [_ {.#Symbol ["" arg_name]}])] (^., body)))
          (/function.function analysis function_name arg_name archive body)

          (^.` ((^., functionC) (^.,* argsC+)))
          (..apply_analysis extender expander analysis archive functionC argsC+)

          (^.` {(^., [_ {.#Bit right?}]) (^.,* values)})
          (..sum_analysis analysis archive 0 right? values)

          (^.` {(^., [_ {.#Nat lefts}]) (^., [_ {.#Bit right?}]) (^.,* values)})
          (..sum_analysis analysis archive lefts right? values)

          _
          (do //.monad
            [here meta.current_module_name]
            (//.except ..invalid [here code]))))))
