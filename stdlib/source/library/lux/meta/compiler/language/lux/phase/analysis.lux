... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except #Function)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" natural]]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" binding]
    ["[0]" location]
    ["[0]" code]
    [macro
     ["^" pattern]
     ["[0]" template]]
    [type
     ["[0]" check]]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" function]
  ["[0]" // (.use "[1]#[0]" functor)
   ["[0]" extension]
   [//
    ["/" analysis (.only Operation Phase Handler Extender)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(exception.the .public (invalid [module syntax])
  (Exception [Text Code])
  (exception.report
   (list ["Syntax" (code.relative module syntax)])))

... TODO: Replace with an inline function.
(the variant_analysis
  (template.macro (_ analysis archive tag values)
    ... (-> Phase Archive Symbol (List Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(the sum_analysis
  (template.macro (_ analysis archive lefts right? values)
    ... (-> Phase Archive Natural Bit (List Code) (Operation /.Term))
    [(when values
       (list value)
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

(every Abstraction
  (Variant
   {#Macro Symbol Macro}
   {#Extension Symbol}
   {#Function Type /.Term}))

(the (not_an_abstraction term)
  (-> Code
      (Operation Abstraction))
  (do //.monad
    [[here _] module.current]
    (//.except ..invalid [here term])))

(the (macro_abstraction analysis archive term)
  (-> Phase Archive Code
      (Operation Abstraction))
  (do [! //.monad]
    [it (<| (/type.expecting .Macro)
            (analysis archive term))]
    (when it
      (/.constant @ name)
      (do [! //.monad]
        [it (binding.macro name)]
        (in {#Macro name it}))

      _
      (..not_an_abstraction term))))

(the (extension_abstraction analysis archive term)
  (-> Phase Archive Code
      (Operation Abstraction))
  (do //.monad
    [it (<| //.try
            (/type.expecting .Analysis)
            (analysis archive term))]
    (when it
      {try.#Success it}
      (when it
        (/.constant @ it)
        (in {#Extension it})

        _
        (..not_an_abstraction term))

      {try.#Failure error}
      (if (text.contains? (its exception.#label extension.defaults_cannot_be_referenced)
                          error)
        (when term
          [_ {.#Symbol ["" _]}]
          (..not_an_abstraction term)
          
          [_ {.#Symbol it}]
          (in {#Extension it})

          _
          (..not_an_abstraction term))
        (..not_an_abstraction term)))))

(the (function_abstraction analysis archive term)
  (-> Phase Archive Code
      (Operation Abstraction))
  (<| (//#each (|>> {#Function}))
      /type.inferring
      (analysis archive term)))

(the (abstraction analysis archive term)
  (-> Phase Archive Code
      (Operation Abstraction))
  (all //.either
       (macro_abstraction analysis archive term)
       (extension_abstraction analysis archive term)
       (function_abstraction analysis archive term)
       ))

... TODO: Replace with an inline function.
(the application
  (template.macro (_ extender expander analysis archive 'abstraction argsC+)
    ... (-> Extender Expander Phase Archive Code (List Code) (Operation /.Term))
    [(do [! //.monad]
       [abstraction (abstraction analysis archive 'abstraction)]
       (when abstraction
         {#Function type abstraction}
         (/function.apply analysis argsC+ type abstraction archive 'abstraction)

         {#Macro name macro}
         (do !
           [expansion (/macro.single_expansion expander name macro argsC+)]
           (analysis archive expansion))
         
         {#Extension abstraction}
         (do !
           [lux meta.compiler_state]
           (extension.application extender
                                  lux analysis archive
                                  .Analysis abstraction argsC+
                                  (|>>)
                                  (function (_ _) {.#None})))))]))

(the .public (phase extender expander)
  (-> Extender Expander
      Phase)
  (function (analysis archive code)
    (<| (let [[@ code'] code])
        ... The location must be set in the state for the sake
        ... of having useful error messages.
        (/.with_location @)
        (`` (when code
              ... The `quoted_module` value is extracted from the symbol's location in order to solve a problem with macro expansion.
              ... Suppose that we have 3 modules: `A`, `B`, and `C`.
              ... Module `A` exports a definition named `a`.
              ... Module `B` exports a macro named `b`, which makes a reference to `A.a` in its expansion.
              ... Module `C` imports module `B`, but not module `A`. It also utilizes the `B.b` macro somewhere in its code.
              ... Now, Module `C` has a reference to `A.a` somewhere in its code, which it cannot access because it does not import `A`.
              ... In order to allow macros to reference any definition their owning module can see, when programmatically generating a symbol, they set themselves
              ... as the module in the symbol's location.
              ... The compiler then picks that up as the `quoted_module`, and uses it for symbol resolution in order to guarantee visibility of symbols in the expansion.
              [[quoted_module _line _row] {.#Symbol it}]
              (/reference.reference extender analysis archive quoted_module it)

              (^.` ((^., functionC) (^.,* argsC+)))
              (..application extender expander analysis archive functionC argsC+)

              (^.` {(^., [_ {.#Symbol tag}]) (^.,* values)})
              (..variant_analysis analysis archive tag values)

              (^.` {(^., [_ {.#Bit right?}]) (^.,* values)})
              (..sum_analysis analysis archive 0 right? values)

              (^.` {(^., [_ {.#Natural lefts}]) (^., [_ {.#Bit right?}]) (^.,* values)})
              (..sum_analysis analysis archive lefts right? values)

              (^.` [(^.,* elems)])
              (/complex.record analysis archive elems)

              (,, (template.with [<tag> <analyser>]
                    [[_ {<tag> value}]
                     (<analyser> value)]

                    [.#Text /simple.text]
                    [.#Natural /simple.natural]
                    [.#Bit /simple.bit]
                    [.#Decimal /simple.decimal]
                    [.#Integer /simple.integer]
                    [.#Revolution /simple.revolution]))

              _
              (do //.monad
                [[here _] module.current]
                (//.except ..invalid [here code])))))))
