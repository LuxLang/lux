(.require
 [library
  [lux (.except Analysis)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" code]
    [macro
     ["^" pattern]]
    [type
     ["[0]" check]]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" function]
  ["/[1]" //
   ["[1][0]" extension]
   ["/[1]" //
    ["/" analysis (.only Analysis Operation Phase Extender)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["//" phase]
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(exception.def .public (invalid syntax)
  (Exception Code)
  (exception.report
   (list ["Syntax" (%.code syntax)])))

... TODO: Replace with an inline function.
(def variant_analysis
  (template (_ analysis archive tag values)
    ... (-> Phase Archive Symbol (List Code) (Operation Analysis))
    [(when values
       (list value)
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(def sum_analysis
  (template (_ analysis archive lefts right? values)
    ... (-> Phase Archive Nat Bit (List Code) (Operation Analysis))
    [(when values
       (list value)
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(def when_analysis
  (template (_ analysis archive input branches code)
    ... (-> Phase Archive Code (List Code) Code (Operation Analysis))
    [(when (list.pairs branches)
       {.#Some branches}
       (/when.when analysis branches archive input)

       {.#None}
       (//.except ..invalid [code]))]))

(exception.def .public (not_an_extension [name expected actual])
  (Exception [Symbol Type Type])
  (exception.report
   (list ["Name" (%.symbol name)]
         ["Expected" (%.type expected)]
         ["Actual" (%.type actual)])))

(def (extension_application extender
                            phase archive
                            name parameters)
  (-> Extender
      Phase Archive
      Symbol (List Code)
      (Operation Analysis))
  (do //.monad
    [[exported? type value] (//extension.lifted (meta.export name))]
    (if (check.subsumes? .Analysis type)
      ((extender value) "" phase archive parameters)
      (//.except ..not_an_extension [name .Analysis type]))))

... TODO: Replace with an inline function.
(def apply_analysis
  (template (_ extender expander analysis archive functionC argsC+)
    ... (-> Extender Expander Phase Archive Code (List Code) (Operation Analysis))
    [(do [! //.monad]
       [[function_type function_analysis] (/type.inferring
                                           (analysis archive functionC))]
       (when function_analysis
         (/.constant def_name)
         (if (check.subsumes? .Analysis function_type)
           (extension_application extender analysis archive def_name argsC+)
           (do !
             [?macro (//extension.lifted (meta.macro def_name))]
             (when ?macro
               {.#Some macro}
               (do !
                 [expansion (//extension.lifted (/macro.single_expansion expander def_name macro argsC+))]
                 (analysis archive expansion))

               _
               (/function.apply analysis argsC+ function_type function_analysis archive functionC))))

         _
         (/function.apply analysis argsC+ function_type function_analysis archive functionC)))]))

(def .public (phase extender expander)
  (-> Extender Expander Phase)
  (function (analysis archive code)
    (<| (let [[location code'] code])
        ... The location must be set in the state for the sake
        ... of having useful error messages.
        (/.with_location location)
        (when code
          (^.with_template [<tag> <analyser>]
            [[_ {<tag> value}]
             (<analyser> value)])
          ([.#Text /simple.text]
           [.#Nat  /simple.nat]
           [.#Bit  /simple.bit]
           [.#Frac /simple.frac]
           [.#Int  /simple.int]
           [.#Rev  /simple.rev])

          [[quoted_module @line @row] {.#Symbol value}]
          (/reference.reference quoted_module value)

          (^.` [(^.,* elems)])
          (/complex.record analysis archive elems)

          (^.` {(^., [_ {.#Symbol tag}]) (^.,* values)})
          (..variant_analysis analysis archive tag values)

          (^.` ({(^.,* branches)} (^., input)))
          (..when_analysis analysis archive input branches code)

          (^.` ([(^., [_ {.#Symbol ["" function_name]}]) (^., [_ {.#Symbol ["" arg_name]}])] (^., body)))
          (/function.function analysis function_name arg_name archive body)

          (^.` ((^., [_ {.#Text extension_name}]) (^.,* extension_args)))
          (//extension.apply archive analysis [extension_name extension_args])

          (^.` ((^., functionC) (^.,* argsC+)))
          (..apply_analysis extender expander analysis archive functionC argsC+)

          (^.` {(^., [_ {.#Nat lefts}]) (^., [_ {.#Bit right?}]) (^.,* values)})
          (..sum_analysis analysis archive lefts right? values)

          _
          (//.except ..invalid [code])))))
