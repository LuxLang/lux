(.require
 [library
  [lux (.except Analysis)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" code]
    [macro
     ["^" pattern]]
    [type
     ["[0]" check]]]]]
 ["[0]" /
  ["[1][0]" simple]
  ["[1][0]" complex]
  ["[1][0]" reference]
  ["[1][0]" when]
  ["[1][0]" function]
  ["/[1]" //
   ["[1][0]" extension]
   ["/[1]" //
    ["/" analysis (.only Analysis Operation Phase Handler Extender)
     ["[1][0]" macro (.only Expander)]
     ["[1][0]" type]]
    [///
     ["//" phase]
     ["[0]" reference]
     [meta
      [archive (.only Archive)]]]]]])

(exception.def .public (invalid syntax)
  (Exception Code)
  (exception.report
   (list ["Syntax" (%.code syntax)])))

... TODO: Replace with an inline function.
(def variant_analysis
  (template (_ analysis archive tag values)
    ... (-> Phase Archive Symbol (List Code) (Operation Analysis))
    [(when values
       (list value)
       (/complex.variant analysis tag archive value)

       _
       (/complex.variant analysis tag archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(def sum_analysis
  (template (_ analysis archive lefts right? values)
    ... (-> Phase Archive Nat Bit (List Code) (Operation Analysis))
    [(when values
       (list value)
       (/complex.sum analysis lefts right? archive value)

       _
       (/complex.sum analysis lefts right? archive (code.tuple values)))]))

... TODO: Replace with an inline function.
(def when_analysis
  (template (_ analysis archive input branches code)
    ... (-> Phase Archive Code (List Code) Code (Operation Analysis))
    [(when (list.pairs branches)
       {.#Some branches}
       (/when.when analysis branches archive input)

       {.#None}
       (//.except ..invalid [code]))]))

(type Value
  (Variant
   {#Normal Any}
   {#Special Any}))

(def (global_value name)
  (-> Symbol (Meta (Maybe [Type Value])))
  (do meta.monad
    [global (meta.try (meta.local name))]
    (when global
      {try.#Success global}
      (in (when global
            {.#Definition [exported? type value]}
            {.#Some [type {#Normal value}]}

            {.#Default [exported? type value]}
            {.#Some [type {#Special value}]}
            
            {.#Alias _}
            {.#None}))
      
      {try.#Failure error}
      (in {.#None}))))

(def (global_analysis name)
  (-> Symbol (Meta (Maybe Value)))
  (do meta.monad
    [type,value (global_value name)]
    (in (do maybe.monad
          [[type value] type,value
           maybe.when (check.subsumes? .Analysis type)]
          (in value)))))

(def (extension_application extender
                            phase archive
                            name parameters)
  (-> Extender
      Phase Archive
      Symbol (List Code)
      (Operation (Maybe Analysis)))
  (do [! //.monad]
    [value (//extension.lifted (global_analysis name))
     .let [[module short] name]]
    (when value
      {.#Some value}
      (do !
        [it (when value
              {#Normal definition}
              ((extender definition) short phase archive parameters)

              {#Special default}
              ((as Handler default) short phase archive parameters))]
        (in {.#Some it}))

      {.#None}
      (in {.#None}))))

... TODO: Replace with an inline function.
(exception.def .public (not_a_macro name)
  (Exception Symbol)
  (exception.report
   (list ["Name" (%.symbol name)])))

(def (macro_application extender expander analysis archive def_name argsC+)
  (-> Extender Expander Phase Archive Symbol (List Code) (Operation Analysis))
  (do [! //.monad]
    [?macro (//extension.lifted (meta.macro def_name))]
    (when ?macro
      {.#Some macro}
      (do !
        [expansion (//extension.lifted (/macro.single_expansion expander def_name macro argsC+))]
        (analysis archive expansion))

      _
      (//.except ..not_a_macro [def_name]))))

... TODO: Replace with an inline function.
(def (global_application extender expander analysis archive function_type function_analysis def_name functionC argsC+)
  (-> Extender Expander Phase Archive Type Analysis Symbol Code (List Code) (Operation Analysis))
  (<| (if (check.subsumes? .Macro function_type)
        (macro_application extender expander analysis archive def_name argsC+))
      (if (check.subsumes? .Analysis function_type)
        (do //.monad
          [it (extension_application extender analysis archive def_name argsC+)]
          (in (maybe.trusted it))))
      (/function.apply analysis argsC+ function_type function_analysis archive functionC)))

... TODO: Replace with an inline function.
(def (term_application extender expander analysis archive functionC argsC+)
  (-> Extender Expander Phase Archive Code (List Code) (Operation Analysis))
  (do //.monad
    [[function_type function_analysis] (/type.inferring
                                        (analysis archive functionC))]
    (when function_analysis
      (/.constant def_name)
      (global_application extender expander analysis archive function_type function_analysis def_name functionC argsC+)

      _
      (/function.apply analysis argsC+ function_type function_analysis archive functionC))))

... TODO: Replace with an inline function.
(def apply_analysis
  (template (_ extender expander analysis archive functionC argsC+)
    ... (-> Extender Expander Phase Archive Code (List Code) (Operation Analysis))
    [(when functionC
       [_ {.#Symbol global}]
       (do //.monad
         [it (extension_application extender analysis archive global argsC+)]
         (when it
           {.#Some it}
           (in it)
           
           {.#None}
           (term_application extender expander analysis archive functionC argsC+)))

       _
       (term_application extender expander analysis archive functionC argsC+))]))

(def .public (phase extender expander)
  (-> Extender Expander Phase)
  (function (analysis archive code)
    (<| (let [[location code'] code])
        ... The location must be set in the state for the sake
        ... of having useful error messages.
        (/.with_location location)
        (when code
          (^.with_template [<tag> <analyser>]
            [[_ {<tag> value}]
             (<analyser> value)])
          ([.#Text /simple.text]
           [.#Nat  /simple.nat]
           [.#Bit  /simple.bit]
           [.#Frac /simple.frac]
           [.#Int  /simple.int]
           [.#Rev  /simple.rev])

          [[quoted_module @line @row] {.#Symbol value}]
          (/reference.reference quoted_module value)

          (^.` [(^.,* elems)])
          (/complex.record analysis archive elems)

          (^.` {(^., [_ {.#Symbol tag}]) (^.,* values)})
          (..variant_analysis analysis archive tag values)

          (^.` ({(^.,* branches)} (^., input)))
          (..when_analysis analysis archive input branches code)

          (^.` ([(^., [_ {.#Symbol ["" function_name]}]) (^., [_ {.#Symbol ["" arg_name]}])] (^., body)))
          (/function.function analysis function_name arg_name archive body)

          (^.` ((^., functionC) (^.,* argsC+)))
          (..apply_analysis extender expander analysis archive functionC argsC+)

          (^.` {(^., [_ {.#Nat lefts}]) (^., [_ {.#Bit right?}]) (^.,* values)})
          (..sum_analysis analysis archive lefts right? values)

          _
          (//.except ..invalid [code])))))
