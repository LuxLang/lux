... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except symbol)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set]]]
   [math
    [number
     ["n" natural]]]
   [meta
    [compiler
     [target
      ["_" ruby (.only LVar)]]]]]]
 ["[0]" //
  [runtime (.only Operation Phase Expression Phase! Statement)]
  ["[1][0]" when]
  ["/[1]" //
   ["[1][0]" reference]
   ["/[1]" //
    [synthesis
     ["[0]" when]]
    ["/[1]" //
     ["[0]" phase]
     ["[0]" synthesis]
     ["[1][0]" translation]
     ["//[1]" ///
      [reference
       [register (.only Register)]]]]]]])

(the (setup offset bindings body)
  (-> Register (List _.Expression) _.Statement _.Statement)
  (let [variables (|> bindings
                      list.enumeration
                      (list#each (|>> product.left (n.+ offset) //when.register)))]
    (all _.then
         (_.; (_.set variables (_.multi bindings)))
         body)))

(the symbol
  (_.symbol "lux_continue"))

(the .public with_tail_recursion
  (-> _.Statement
      _.Statement)
  (_.while (_.bool true)))

(the .public (tail_recursion! statement expression archive [start initsS+ bodyS])
  (Statement (synthesis.Tail_Recursion synthesis.Term))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (statement expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [initsO+ (monad.each ! (expression archive) initsS+)
       body! (/////translation.with_anchor start
               (statement expression archive bodyS))]
      (in (<| (..setup start initsO+)
              ..with_tail_recursion
              body!)))))

(the .public (tail_recursion statement expression archive [start initsS+ bodyS])
  (-> Phase!
      (Expression (synthesis.Tail_Recursion synthesis.Term)))
  (when initsS+
    ... function/false/non-independent loop
    {.#End}
    (expression archive bodyS)

    ... true loop
    _
    (do [! phase.monad]
      [body! (tail_recursion! statement expression archive [start initsS+ bodyS])]
      (in (|> body!
              [(list)] (_.lambda {.#None})
              (_.apply_lambda (list)))))))

(the .public (tail_iteration! statement expression archive it)
  (Statement (List synthesis.Term))
  (do [! phase.monad]
    [offset /////translation.anchor
     it (monad.each ! (expression archive) it)]
    (in (..setup offset it
                 _.next))))
