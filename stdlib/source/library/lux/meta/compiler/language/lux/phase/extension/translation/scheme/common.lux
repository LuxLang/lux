... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text
     ["%" \\format (.only format)]]
    [collection
     ["[0]" dictionary]
     ["[0]" set]
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    [target
     ["_" scheme (.only Expression)]]]]]
 ["[0]" ////
  ["/" bundle]
  ["/[1]" //
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["[0]" reference]
    ["//" scheme
     ["[1][0]" runtime (.only Operation Phase Handler Bundle Translator)]
     ["[1][0]" when]]]
   [//
    ["[0]" translation]
    [synthesis
     ["<s>" \\parser (.only Parser)]]
    [///
     ["[1]" phase]]]]])

(the !unary
  (template (_ function)
    (|>> list _.apply (|> (_.constant function)))))

... TODO: Get rid of this ASAP
(the lux::syntax_char_case!
  (..custom [(all <>.and
                  <s>.any
                  <s>.any
                  (<>.some (<s>.tuple (all <>.and
                                           (<s>.tuple (<>.many <s>.i64))
                                           <s>.any))))
             (function (_ extension_name phase archive [input else conditionals])
               (do [! /////.monad]
                 [@input (of ! each _.var (translation.symbol "input"))
                  inputG (phase archive input)
                  elseG (phase archive else)
                  conditionalsG (is (Operation (List [Expression Expression]))
                                    (monad.each ! (function (_ [chars branch])
                                                    (do !
                                                      [branchG (phase archive branch)]
                                                      (in [(|> chars (list#each (|>> .int _.int (_.=/2 @input))) _.or)
                                                           branchG])))
                                                conditionals))]
                 (in (_.let (list [@input inputG])
                       (list#mix (function (_ [test then] else)
                                   (_.if test then else))
                                 elseG
                                 conditionalsG)))))]))

(the lux_procs
  Bundle
  (|> /.empty
      (/.install "syntax char case!" lux::syntax_char_case!)
      (/.install "is" (binary (product.uncurried _.eq?/2)))
      (/.install "try" (unary //runtime.lux//try))
      ))

(the (capped operation parameter subject)
  (-> (-> Expression Expression Expression)
      (-> Expression Expression Expression))
  (//runtime.i64//64 (operation parameter subject)))

(the i64_procs
  Bundle
  (<| (/.prefix "i64")
      (|> /.empty
          (/.install "and" (binary (product.uncurried //runtime.i64//and)))
          (/.install "or" (binary (product.uncurried //runtime.i64//or)))
          (/.install "xor" (binary (product.uncurried //runtime.i64//xor)))
          (/.install "left-shift" (binary (product.uncurried //runtime.i64//left_shift)))
          (/.install "right-shift" (binary (product.uncurried //runtime.i64//right_shift)))
          (/.install "=" (binary (product.uncurried _.=/2)))
          (/.install "<" (binary (product.uncurried _.</2)))
          (/.install "+" (binary (product.uncurried (..capped _.+/2))))
          (/.install "-" (binary (product.uncurried (..capped _.-/2))))
          (/.install "*" (binary (product.uncurried (..capped _.*/2))))
          (/.install "/" (binary (product.uncurried //runtime.i64//division)))
          (/.install "%" (binary (product.uncurried _.remainder/2)))
          (/.install "f64" (unary (_.//2 (_.float +1.0))))
          (/.install "char" (unary (|>> _.integer->char/1 (_.make_string/2 (_.int +1)))))
          )))

(the f64_procs
  Bundle
  (<| (/.prefix "f64")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.=/2)))
          (/.install "<" (binary (product.uncurried _.</2)))
          (/.install "+" (binary (product.uncurried _.+/2)))
          (/.install "-" (binary (product.uncurried _.-/2)))
          (/.install "*" (binary (product.uncurried _.*/2)))
          (/.install "/" (binary (product.uncurried _.//2)))
          (/.install "%" (binary (product.uncurried _.remainder/2)))
          (/.install "i64" (unary _.truncate/1))
          (/.install "encode" (unary _.number->string/1))
          (/.install "decode" (unary //runtime.f64//decode)))))

(the (text//index [offset sub text])
  (Trinary Expression)
  (//runtime.text//index offset sub text))

(the (text//clip [paramO extraO subjectO])
  (Trinary Expression)
  (//runtime.text//clip paramO extraO subjectO))

(the text_procs
  Bundle
  (<| (/.prefix "text")
      (|> /.empty
          (/.install "=" (binary (product.uncurried _.string=?/2)))
          (/.install "<" (binary (product.uncurried _.string<?/2)))
          (/.install "concat" (binary (product.uncurried _.string_append/2)))
          (/.install "index" (trinary ..text//index))
          (/.install "size" (unary _.string_length/1))
          (/.install "char" (binary (product.uncurried //runtime.text//char)))
          (/.install "clip" (trinary ..text//clip))
          )))

(the (io//log! message)
  (Unary Expression)
  (_.begin (list (_.display/1 message)
                 (_.display/1 (_.string text.new_line))
                 //runtime.unit)))

(the io_procs
  Bundle
  (<| (/.prefix "io")
      (|> /.empty
          (/.install "log" (unary ..io//log!))
          (/.install "error" (unary _.raise/1))
          )))

(the .public bundle
  Bundle
  (<| (/.prefix "lux")
      (|> /.empty
          (dictionary.composite lux_procs)
          (dictionary.composite i64_procs)
          (dictionary.composite f64_procs)
          (dictionary.composite text_procs)
          (dictionary.composite io_procs)
          )))
