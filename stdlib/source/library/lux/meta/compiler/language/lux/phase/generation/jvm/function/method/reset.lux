(.require
 [library
  [lux (.except Type type)
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]]]
   [meta
    [target
     [jvm
      ["_" bytecode (.only Bytecode)]
      ["[0]" method (.only Method)]
      [constant
       [pool (.only Resource)]]
      ["[0]" type (.only Type)
       ["[0]" category (.only Class)]]]]]]]
 ["[0]" // (.only)
  ["[1][0]" new]
  ["/[1]" //
   [field
    [variable
     ["[1][0]" foreign]]]
   ["/[1]" //
    ["[1][0]" reference]
    [////
     [analysis (.only Environment)]
     [synthesis (.only Synthesis)]
     [///
      ["[0]" arity (.only Arity)]]]]]])

(def .public name "reset")

(def .public (type class)
  (-> (Type Class) (Type category.Method))
  (type.method [(list) (list) class (list)]))

(def (current_environment class)
  (-> (Type Class) (Environment Synthesis) (List (Bytecode Any)))
  (|>> list.size
       list.indices
       (list#each (///foreign.get class))))

(def .public (method class environment arity)
  (-> (Type Class) (Environment Synthesis) Arity (Resource Method))
  (method.method //.modifier ..name
                 false (..type class)
                 (list)
                 {.#Some (all _.composite
                              (if (arity.multiary? arity)
                                (//new.instance' (..current_environment class environment) class environment arity)
                                ////reference.this)
                              _.areturn)}))
