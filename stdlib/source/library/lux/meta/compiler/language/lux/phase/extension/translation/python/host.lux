(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" function]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" dictionary]
     ["[0]" list]]]
   [meta
    [target
     ["_" python (.only Expression SVar)]]]]]
 [//
  [common (.only custom)]
  [////
   ["[0]" extension]
   [translation
    [extension (.only Nullary Unary Binary Trinary
                      nullary unary binary trinary)]
    ["//" python
     ["[1][0]" runtime (.only Operation Phase Handler Bundle
                              with_vars)]]]
   [//
    ["[0]" translation]
    [synthesis
     ["<s>" \\parser (.only Parser)]]
    [///
     ["[0]" phase]]]]])

(def (array::new size)
  (Unary (Expression Any))
  (|> (list _.none)
      _.list
      (_.* size)))

(def array::length
  (Unary (Expression Any))
  (|>> _.len/1 //runtime.i64::64))

(def (array::read [indexG arrayG])
  (Binary (Expression Any))
  (_.item indexG arrayG))

(def (array::write [indexG valueG arrayG])
  (Trinary (Expression Any))
  (//runtime.array::write indexG valueG arrayG))

(def (array::delete [indexG arrayG])
  (Binary (Expression Any))
  (//runtime.array::write indexG _.none arrayG))

(def with_array_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "python_array_new#|translation" (unary array::new))
       (dictionary.has "python_array_length#|translation" (unary array::length))
       (dictionary.has "python_array_read#|translation" (binary array::read))
       (dictionary.has "python_array_write#|translation" (trinary array::write))
       (dictionary.has "python_array_delete#|translation" (binary array::delete))
       ))

(def object::get
  Handler
  (custom
   [(all <>.and <s>.text <s>.any)
    (function (_ phase archive [fieldS objectS])
      (do phase.monad
        [objectG (phase archive objectS)]
        (in (_.the fieldS objectG))))]))

(def object::do
  Handler
  (custom
   [(all <>.and <s>.text <s>.any (<>.some <s>.any))
    (function (_ phase archive [methodS objectS inputsS])
      (do [! phase.monad]
        [objectG (phase archive objectS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.do methodS inputsG objectG))))]))

(with_template [<!> <?> <unit>]
  [(def <!> (Nullary (Expression Any)) (function.constant <unit>))
   (def <?> (Unary (Expression Any)) (_.= <unit>))]

  [object::none object::none? _.none]
  )

(def with_object_extensions
  (-> Bundle Bundle)
  (|>> (dictionary.has "python_object_get#|translation" object::get)
       (dictionary.has "python_object_do#|translation" object::do)
       (dictionary.has "python_object_none#|translation" (nullary object::none))
       (dictionary.has "python_object_none?#|translation" (unary object::none?))
       ))

(def python::constant
  (custom
   [<s>.text
    (function (_ phase archive name)
      (do phase.monad
        []
        (in (_.var name))))]))

(def python::import
  (custom
   [<s>.text
    (function (_ phase archive module)
      (do phase.monad
        []
        (in (_.apply (list (_.string module)) (_.var "__import__")))))]))

(def python::apply
  (custom
   [(all <>.and <s>.any (<>.some <s>.any))
    (function (_ phase archive [abstractionS inputsS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         inputsG (monad.each ! (phase archive) inputsS)]
        (in (_.apply inputsG abstractionG))))]))

(def python::function
  (custom
   [(all <>.and <s>.i64 <s>.any)
    (function (_ phase archive [arity abstractionS])
      (do [! phase.monad]
        [abstractionG (phase archive abstractionS)
         .let [variable (is (-> Text (Operation SVar))
                            (|>> translation.symbol
                                 (of ! each _.var)))]
         g!inputs (monad.each ! (function (_ _) (variable "input"))
                              (list.repeated (.nat arity) []))]
        (in (_.lambda g!inputs
                      (when (.nat arity)
                        0 (_.apply (list //runtime.unit) abstractionG)
                        1 (_.apply g!inputs abstractionG)
                        _ (_.apply (list (_.list g!inputs)) abstractionG))))))]))

(def python::exec
  (custom
   [(all <>.and <s>.any <s>.any)
    (function (_ phase archive [codeS globalsS])
      (do [! phase.monad]
        [codeG (phase archive codeS)
         globalsG (phase archive globalsS)]
        (in (//runtime.lux::exec codeG globalsG))))]))

(def .public bundle
  Bundle
  (|> extension.empty
      with_array_extensions
      with_object_extensions

      (dictionary.has "python_constant#|translation" python::constant)
      (dictionary.has "python_import#|translation" python::import)
      (dictionary.has "python_apply#|translation" python::apply)
      (dictionary.has "python_function#|translation" python::function)
      (dictionary.has "python_exec#|translation" python::exec)
      ))
