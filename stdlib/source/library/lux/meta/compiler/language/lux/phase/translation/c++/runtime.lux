(.require
 [library
  [lux (.except)
   [data
    [text
     ["%" \\format]]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" code]
    [macro
     [syntax (.only syntax)]]
    [compiler
     [target
      ["_" c++]]]]]])

(def .public (host_value of it)
  (-> _.Type _.Expression
      _.Expression)
  (|> it
      (_.do "get" (list) (list))
      (_.as (_.* of))))

(def .public namespace
  _.Namespace
  "lux")

(def name
  (syntax (_ [])
    (|> meta.seed
        (meta#each (|>> %.nat
                        (%.format ..namespace)
                        code.text
                        list)))))

(with_expansions [<clean_up> (..name)]
  (def .public declaration
    _.Declaration
    (let [clean_up (let [of (_.type_name "Of")
                         it (_.local "it")]
                     (_.function (_.local <clean_up>)
                       (list of)
                       (list [(_.* of) it])
                       _.void
                       (_.delete it)))]
      (all _.then
           (_.include "memory")

           (<| (_.namespace ..namespace)
               (all _.then
                    clean_up
                    )))))

  (def .public clean_up
    (-> _.Type
        _.Expression)
    (|>> (list)
         (_.global [..namespace <clean_up>])))
  )

(def .public (lux_value of it)
  (-> _.Type _.Expression
      _.Expression)
  (_.on (list (_.new of (list it))
              (clean_up of))
        (_.global [_.standard "shared_ptr"] (list _.void))))
