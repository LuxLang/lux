(.require
 [library
  [lux (.except Tag Analysis)
   [abstract
... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]
    ["[0]" exception (.only Exception)]
    ["[0]" state]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" nat]]]
   ["[0]" meta (.only)
    ["[0]" symbol]
    ["[0]" code]
    ["[0]" type (.use "[1]#[0]" equivalence)
     ["[0]" check]]]]]
 ["[0]" //
  ["[1][0]" simple]
  [///
   ["[0]" phase (.use "[1]#[0]" monad)]
   ["/" analysis (.only Analysis Operation Phase)
    ["[1][0]" complex (.only Tag)]
    ["[1][0]" type]
    ["[1][0]" inference]]
   [///
    [meta
     [archive (.only Archive)]]]]])

(exception.def .public (not_a_quantified_type type)
  (Exception Type)
  (exception.report
   (list ["Type" (%.type type)])))

(with_template [<name>]
  [(exception.def .public (<name> [type members])
     (Exception [Type (List Code)])
     (exception.report
      (list ["Type" (%.type type)]
            ["Expression" (%.code (` [(,* members)]))])))]

  [invalid_tuple_type]
  [cannot_analyse_tuple]
  )

(with_template [<name>]
  [(exception.def .public (<name> [type lefts right? code])
     (Exception [Type Nat Bit Code])
     (exception.report
      (list ["Type" (%.type type)]
            ["Lefts" (%.nat lefts)]
            ["Right?" (%.bit right?)]
            ["Expression" (%.code code)])))]

  [invalid_variant_type]
  [cannot_analyse_sum]
  [cannot_infer_sum]
  )

(exception.def .public (cannot_analyse_variant [type tag code])
  (Exception [Type Symbol Code])
  (exception.report
   (list ["Type" (%.type type)]
         ["Tag" (%.symbol tag)]
         ["Expression" (%.code code)])))

(exception.def .public (cannot_order_record [@ code])
  (Exception [Code (List [Symbol Code])])
  (exception.report
   (list ["@" (%.code @)]
         ["Expression" (|> code
                           (list#each (function (_ [slot value])
                                        (list (code.symbol slot) value)))
                           list#conjoint
                           code.tuple
                           %.code)])))

(exception.def .public (cannot_repeat_slot [key record])
  (Exception [Symbol (List [Symbol Code])])
  (exception.report
   (list ["Slot" (%.code (code.symbol key))]
         ["Record" (%.code (code.tuple (|> record
                                           (list#each (function (_ [keyI valC])
                                                        (list (code.symbol keyI) valC)))
                                           list#conjoint)))])))

(exception.def .public (slot_does_not_belong_to_record [key type])
  (Exception [Symbol Type])
  (exception.report
   (list ["Slot" (%.code (code.symbol key))]
         ["Type" (%.type type)])))

(exception.def .public (record_size_mismatch [expected actual type record])
  (Exception [Nat Nat Type (List [Symbol Code])])
  (exception.report
   (list ["Expected" (%.nat expected)]
         ["Actual" (%.nat actual)]
         ["Type" (%.type type)]
         ["Expression" (%.code (|> record
                                   (list#each (function (_ [keyI valueC])
                                                (list (code.symbol keyI) valueC)))
                                   list#conjoint
                                   code.tuple))])))

(def .public (sum analyse lefts right? archive)
  (-> Phase Nat Bit Phase)
  (let [tag (/complex.tag right? lefts)]
    (function (again valueC)
      (do [! phase.monad]
        [expectedT meta.expected_type
         expectedT' (/type.check (check.clean (list) expectedT))
         @ meta.location]
        (/.with_exception ..cannot_analyse_sum [expectedT' lefts right? valueC]
          (when expectedT
            {.#Sum _}
            (|> (analyse archive valueC)
                (of ! each (|>> [lefts right?] (/.variant @)))
                (/type.expecting (|> expectedT
                                     type.flat_variant
                                     (list.item tag)
                                     (maybe.else .Nothing))))

            {.#Named name unnamedT}
            (<| (/type.expecting unnamedT)
                (again valueC))

            {.#Var id}
            (do !
              [?expectedT' (/type.check (check.peek id))]
              (when ?expectedT'
                {.#Some expectedT'}
                (<| (/type.expecting expectedT')
                    (again valueC))

                ... Cannot do inference when the tag is numeric.
                ... This is because there is no way of knowing how many
                ... cases the inferred sum type would have.
                _
                (/.except ..cannot_infer_sum [expectedT lefts right? valueC])))

            {.#UnivQ _}
            (do !
              [[@instance :instance:] (/type.check check.existential)]
              (<| (/type.expecting (maybe.trusted (type.applied (list :instance:) expectedT)))
                  (again valueC)))
            {.#ExQ _}
            (<| /type.with_var
                (function (_ [@instance :instance:]))
                (/type.expecting (maybe.trusted (type.applied (list :instance:) expectedT)))
                (again valueC))
            
            {.#Apply inputT funT}
            (when funT
              {.#Var funT_id}
              (do !
                [?funT' (/type.check (check.peek funT_id))]
                (when ?funT'
                  {.#Some funT'}
                  (<| (/type.expecting {.#Apply inputT funT'})
                      (again valueC))

                  _
                  (/.except ..invalid_variant_type [expectedT lefts right? valueC])))

              _
              (when (type.applied (list inputT) funT)
                {.#Some outputT}
                (<| (/type.expecting outputT)
                    (again valueC))

                {.#None}
                (/.except ..not_a_quantified_type [funT])))
            
            _
            (/.except ..invalid_variant_type [expectedT lefts right? valueC])))))))

(def .public (variant analyse tag archive valueC)
  (-> Phase Symbol Phase)
  (do [! phase.monad]
    [tag (meta.normal tag)
     [lefts,right? variantT] (meta.tag tag)
     [lefts right?] (when lefts,right?
                      {.#Some [lefts right? family]}
                      (in [lefts right?])

                      {.#None}
                      (in [0 false]))
     expectedT meta.expected_type]
    (when expectedT
      {.#Var _}
      (do !
        [inferenceT (/inference.variant lefts right? variantT)
         [inferredT valueA+] (/inference.general archive analyse inferenceT (list valueC))
         @ meta.location]
        (in (/.variant @ [lefts right? (|> valueA+ list.head maybe.trusted)])))

      _
      (/.with_exception ..cannot_analyse_variant [expectedT tag valueC]
        (..sum analyse lefts right? archive valueC)))))

(def (typed_product analyse expectedT archive members)
  (-> Phase Type Archive (List Code) (Operation Analysis))
  (<| (do [! phase.monad]
        [@ meta.location])
      (of ! each (|>> (/.tuple @)))
      (is (Operation (List Analysis)))
      (loop (again [membersT+ (type.flat_tuple expectedT)
                    membersC+ members])
        (when [membersT+ membersC+]
          [{.#Item memberT {.#End}} {.#Item memberC {.#End}}]
          (<| (of ! each (|>> list))
              (/type.expecting memberT)
              (analyse archive memberC))
          
          [{.#Item memberT {.#End}} _]
          (<| (/type.expecting memberT)
              (of ! each (|>> list) (analyse archive (code.tuple membersC+))))
          
          [_ {.#Item memberC {.#End}}]
          (<| (/type.expecting (type.tuple membersT+))
              (of ! each (|>> list) (analyse archive memberC)))
          
          [{.#Item memberT membersT+'} {.#Item memberC membersC+'}]
          (do !
            [memberA (<| (/type.expecting memberT)
                         (analyse archive memberC))
             memberA+ (again membersT+' membersC+')]
            (in {.#Item memberA memberA+}))
          
          _
          (/.except ..cannot_analyse_tuple [expectedT members])))))

(def .public (product analyse archive membersC)
  (-> Phase Archive (List Code) (Operation Analysis))
  (do [! phase.monad]
    [expectedT meta.expected_type]
    (/.with_exception ..cannot_analyse_tuple [expectedT membersC]
      (when expectedT
        {.#Product _}
        (..typed_product analyse expectedT archive membersC)

        {.#Named name unnamedT}
        (<| (/type.expecting unnamedT)
            (product analyse archive membersC))

        {.#Var id}
        (do !
          [?expectedT' (/type.check (check.peek id))]
          (when ?expectedT'
            {.#Some expectedT'}
            (<| (/type.expecting expectedT')
                (product analyse archive membersC))

            _
            ... Must infer...
            (do !
              [membersTA (monad.each ! (|>> (analyse archive) /type.inferring) membersC)
               _ (/type.check (check.check expectedT
                                           (type.tuple (list#each product.left membersTA))))
               @ meta.location]
              (in (/.tuple @ (list#each product.right membersTA))))))

        {.#UnivQ _}
        (do !
          [[@instance :instance:] (/type.check check.existential)]
          (<| (/type.expecting (maybe.trusted (type.applied (list :instance:) expectedT)))
              (product analyse archive membersC)))

        {.#ExQ _}
        (<| /type.with_var
            (function (_ [@instance :instance:]))
            (/type.expecting (maybe.trusted (type.applied (list :instance:) expectedT)))
            (product analyse archive membersC))

        {.#Apply inputT funT}
        (when funT
          {.#Var funT_id}
          (do !
            [?funT' (/type.check (check.peek funT_id))]
            (when ?funT'
              {.#Some funT'}
              (<| (/type.expecting {.#Apply inputT funT'})
                  (product analyse archive membersC))

              _
              (/.except ..invalid_tuple_type [expectedT membersC])))

          _
          (when (type.applied (list inputT) funT)
            {.#Some outputT}
            (<| (/type.expecting outputT)
                (product analyse archive membersC))

            {.#None}
            (/.except ..not_a_quantified_type funT)))
        
        _
        (/.except ..invalid_tuple_type [expectedT membersC])
        ))))

... There cannot be any ambiguity or improper syntax when analysing
... records, so they must be normalized for further analysis.
... Normalization just means that all the tags get resolved to their
... canonical form (with their corresponding module identified).
(def .public (normal pattern_matching? record)
  (-> Bit (List Code) (Operation (Maybe (List [Symbol Code]))))
  (loop (again [input record
                output (is (List [Symbol Code])
                           {.#End})])
    (when input
      (list.partial [_ {.#Symbol ["" slotH]}] valueH tail)
      (if pattern_matching?
        (phase#in {.#None})
        (do phase.monad
          [slotH (meta.normal ["" slotH])]
          (again tail {.#Item [slotH valueH] output})))
      
      (list.partial [_ {.#Symbol slotH}] valueH tail)
      (do phase.monad
        [slotH (meta.normal slotH)]
        (again tail {.#Item [slotH valueH] output}))

      {.#End}
      (phase#in {.#Some output})

      _
      (phase#in {.#None}))))

(def (local_binding? name)
  (-> Text (Meta Bit))
  (of meta.monad each
      (list.any? (list.any? (|>> product.left (text#= name))))
      meta.locals))

(def (slot it)
  (-> Symbol (Meta Label))
  (do meta.monad
    [it (meta.normal it)]
    (meta.slot it)))

(def (slot_type [[_ it] _])
  (-> [Label Code] Type)
  it)

(def (same_record? it)
  (-> (List [Label Code]) Bit)
  (when it
    (list.partial head tail)
    (let [expected (slot_type head)]
      (list.every? (|>> slot_type (type#= expected)) tail))
    
    (list)
    false))

(def (complete_record? it)
  (-> (List [Label Code]) Bit)
  (loop (again [expected_lefts 0
                remaining it])
    (when remaining
      {.#Item [[{.#Some [lefts .true family]} type] value] {.#End}}
      (n.= (-- expected_lefts) lefts)

      {.#Item [[{.#None} type] value] {.#End}}
      (n.= 0 expected_lefts)

      {.#Item [[{.#Some [lefts .false family]} type] value] tail}
      (and (n.= expected_lefts lefts)
           (again (++ expected_lefts) tail))

      _
      false)))

(def sorted_record
  (-> (List [Label Code]) (List [Label Code]))
  (list.sorted (function (_ left right)
                 (when [left right]
                   [[[{.#Some [leftsL right?L familyL]} typeL] valueL]
                    [[{.#Some [leftsR right?R familyR]} typeR] valueR]]
                   (if (n.= leftsL leftsR)
                     (not right?R)
                     (n.< leftsL leftsR))

                   _
                   false))))

... Lux already possesses the means to analyse tuples, so
... re-implementing the same functionality for records makes no sense.
... Records, thus, get transformed into tuples by ordering the elements.
(def (order' head_k original_record)
  (-> Symbol (List [Symbol Code]) (Operation (Maybe [Nat (List Code) Type])))
  (do [! phase.monad]
    [record (<| meta.try
                (monad.each ! (function (_ [slot value])
                                (do !
                                  [slot (..slot slot)]
                                  (in [slot value])))
                            original_record))]
    (when record
      {try.#Success record}
      (do !
        [.let [record (sorted_record record)]
         _ (phase.assertion ..cannot_order_record [(` same_record?) original_record]
                            (same_record? record))
         _ (phase.assertion ..cannot_order_record [(` complete_record?) original_record]
                            (complete_record? record))]
        (in (do maybe.monad
              [[[_ :record:] _] (list.head record)]
              (in [(list.size record)
                   (list#each product.right record)
                   :record:]))))

      {try.#Failure error}
      (in {.#None}))))

(def .public (order pattern_matching? record)
  (-> Bit (List [Symbol Code]) (Operation (Maybe [Nat (List Code) Type])))
  (when record
    ... empty_record = empty_tuple = unit/any = []
    {.#End}
    (phase#in {.#Some [0 (list) .Any]})

    {.#Item [head_k head_v] _}
    (when head_k
      ["" head_k']
      (if pattern_matching?
        (phase#in {.#None})
        (do phase.monad
          [local_binding? (..local_binding? head_k')]
          (if local_binding?
            (in {.#None})
            (order' head_k record))))
      
      _
      (order' head_k record))))

(def .public (record analyse archive members)
  (-> Phase Archive (List Code) (Operation Analysis))
  (when members
    (list)
    //simple.unit

    (list singletonC)
    (analyse archive singletonC)

    (list [_ {.#Symbol pseudo_slot}] singletonC)
    (do [! phase.monad]
      [head_k (meta.normal pseudo_slot)
       slot (meta.try (meta.slot head_k))]
      (when slot
        {try.#Success [lefts,right? recordT]}
        (when lefts,right?
          {.#None}
          (analyse archive singletonC)
          
          _
          (..product analyse archive members))

        _
        (..product analyse archive members)))

    _
    (do [! phase.monad]
      [?members (..normal false members)]
      (when ?members
        {.#None}
        (..product analyse archive members)

        {.#Some slots}
        (do !
          [record_size,membersC,recordT (..order false slots)]
          (when record_size,membersC,recordT
            {.#None}
            (..product analyse archive members)

            {.#Some [record_size membersC recordT]}
            (do !
              [expectedT meta.expected_type]
              (when expectedT
                {.#Var _}
                (do !
                  [inferenceT (/inference.record record_size recordT)
                   [inferredT membersA] (/inference.general archive analyse inferenceT membersC)
                   @ meta.location]
                  (in (/.tuple @ membersA)))

                _
                (..product analyse archive membersC)))))))))
