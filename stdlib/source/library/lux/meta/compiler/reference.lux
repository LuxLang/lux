... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except local)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" pipe]]
   [data
    [text
     ["%" \\injection (.only Injection)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    ["[0]" symbol]
    [macro
     ["^" pattern]
     ["[0]" template]]]]]
 ["[0]" /
  ["[1][0]" variable (.only Variable)]])

(every .public Constant
  Symbol)

(every .public Reference
  (Variant
   {#Variable Variable}
   {#Constant Constant}))

(the .public equivalence
  (Equivalence Reference)
  (implementation
   (the (= expected actual)
     (when [expected actual]
       (^.with_template [<tag> <equivalence>]
         [[{<tag> expected} {<tag> actual}]
          (of <equivalence> = expected actual)])
       ([#Variable /variable.equivalence]
        [#Constant symbol.equivalence])

       _
       false))))

(the .public hash
  (Hash Reference)
  (implementation
   (the equivalence
     ..equivalence)

   (the (hash value)
     (when value
       (^.with_template [<factor> <tag> <hash>]
         [{<tag> value}
          (|> value
              (of <hash> hash)
              (n.* <factor>))])
       ([2 #Variable /variable.hash]
        [3 #Constant symbol.hash])
       ))))

(template.with [<name> <family> <tag>]
  [(the .public <name>
     (template.macro (<name> content)
       [(<| {<family>}
            {<tag>}
            content)]))]

  [local   ..#Variable /variable.#Local]
  [foreign ..#Variable /variable.#Foreign]
  )

(template.with [<name> <tag>]
  [(the .public <name>
     (template.macro (<name> content)
       [(<| {<tag>}
            content)]))]

  [variable ..#Variable]
  [constant ..#Constant]
  )

(`` (the .public self
      (template.macro (self)
        [(..variable (,, (/variable.self)))])))

(the .public injection
  (Injection Reference)
  (|>> (pipe.when
         {#Variable variable}
         (/variable.injection variable)
         
         {#Constant constant}
         (%.symbol constant))))
