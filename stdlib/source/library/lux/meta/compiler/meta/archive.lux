... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Module
                #module
                has)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" binary (.only Binary)
     ["[0]" \\injection (.only Injection)]
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     [sequence (.only Sequence)]
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["n" natural]]]
   [meta
    ["[0]" configuration (.only Configuration)]
    [type
     ["[0]" nominal]]
    [macro
     ["[0]" template]]]]]
 [/
  ["[0]" artifact]
  ["[0]" registry (.only Registry)]
  ["[0]" signature (.only Signature)]
  ["[0]" key (.only Key)]
  ["[0]" module (.only Module)
   ["[0]" descriptor (.only Descriptor)]
   ["[0]" document (.only Document)]]
  [///
   [version (.only Version)]]])

(every .public Output
  (Sequence [artifact.ID (Maybe Text) Binary]))

(exception.the .public (unknown_document [module known_modules])
  (Exception [descriptor.Module (List descriptor.Module)])
  (exception.report
   (list ["Module" (%.text module)]
         ["Known Modules" (exception.listing %.text known_modules)])))

(exception.the .public (cannot_replace_document [module old new])
  (Exception [descriptor.Module (Document Any) (Document Any)])
  (exception.report
   (list ["Module" (%.text module)]
         ["Old key" (signature.description (document.signature old))]
         ["New key" (signature.description (document.signature new))])))

(template.with [<name>]
  [(exception.the .public (<name> it)
     (Exception descriptor.Module)
     (exception.report
      (list ["Module" (%.text it)])))]

  [module_has_already_been_reserved]
  [module_must_be_reserved_before_it_can_be_added]
  [module_is_only_reserved]
  )

(every .public (Entry a)
  (Record
   [#module (Module a)
    #output Output
    #registry Registry]))

(nominal.every .public Archive
  (Record
   [#next module.ID
    #resolver (Dictionary descriptor.Module [module.ID (Maybe (Entry Any))])])

  (the next
    (-> Archive module.ID)
    (|>> nominal.representation
         (its #next)))

  (the .public empty
    Archive
    (nominal.abstraction
     [#next 0
      #resolver (dictionary.empty text.hash)]))

  (the .public (id module archive)
    (-> descriptor.Module Archive (Try module.ID))
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success [id _]}
        {try.#Success id}
        
        failure
        (exception.except ..unknown_document [module
                                              (dictionary.keys /#resolver)]))))

  (the .public (reserve module archive)
    (-> descriptor.Module Archive (Try [module.ID Archive]))
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success _}
        (exception.except ..module_has_already_been_reserved [module])
        
        failure
        {try.#Success [/#next
                       (|> archive
                           nominal.representation
                           (revised #resolver (dictionary.has module [/#next (is (Maybe (Entry Any)) {.#None})]))
                           (revised #next ++)
                           nominal.abstraction)]})))

  (the .public (has module entry archive)
    (-> descriptor.Module (Entry Any) Archive (Try Archive))
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success [id {.#None}]}
        {try.#Success (|> archive
                          nominal.representation
                          (revised ..#resolver (dictionary.has module [id {.#Some entry}]))
                          nominal.abstraction)}
        
        {try.#Success [id {.#Some [existing_module existing_output existing_registry]}]}
        (if (same? (its module.#document existing_module)
                   (its [#module module.#document] entry))
          ... TODO: Find out why this code allows for the same module to be added more than once. It looks fishy...
          {try.#Success archive}
          (exception.except ..cannot_replace_document [module (its module.#document existing_module) (its [#module module.#document] entry)]))
        
        failure
        (exception.except ..module_must_be_reserved_before_it_can_be_added [module]))))

  ... TODO: Eliminate the need for this hack...
  (the .public (has! module entry archive)
    (-> descriptor.Module (Entry Any) Archive (Try Archive))
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success [id _]}
        {try.#Success (|> archive
                          nominal.representation
                          (revised ..#resolver (dictionary.has module [id {.#Some entry}]))
                          nominal.abstraction)}
        
        failure
        (exception.except ..module_must_be_reserved_before_it_can_be_added [module]))))

  (the .public entries
    (-> Archive (List [descriptor.Module [module.ID (Entry Any)]]))
    (|>> nominal.representation
         (its #resolver)
         dictionary.entries
         (list.all (function (_ [module [module_id entry]])
                     (by maybe.monad each (|>> [module_id] [module]) entry)))))

  (the .public (find module archive)
    (-> descriptor.Module Archive (Try (Entry Any)))
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success [id {.#Some entry}]}
        {try.#Success entry}

        {try.#Success [id {.#None}]}
        (exception.except ..module_is_only_reserved [module])
        
        failure
        (exception.except ..unknown_document [module (dictionary.keys /#resolver)]))))

  (the .public (archived? archive module)
    (-> Archive descriptor.Module Bit)
    (when (..find module archive)
      {try.#Success _}
      true

      {try.#Failure _}
      false))

  (the .public archived
    (-> Archive (List descriptor.Module))
    (|>> nominal.representation
         (its #resolver)
         dictionary.entries
         (list.all (function (_ [module [id descriptor+document]])
                     (when descriptor+document
                       {.#Some _} {.#Some module}
                       {.#None} {.#None})))))

  (the .public (reserved? archive module)
    (-> Archive descriptor.Module Bit)
    (let [(open "/[0]") (nominal.representation archive)]
      (when (dictionary.value module /#resolver)
        {try.#Success [id _]}
        true

        failure
        false)))

  (the .public reserved
    (-> Archive (List descriptor.Module))
    (|>> nominal.representation
         (its #resolver)
         dictionary.keys))

  (the .public reservations
    (-> Archive (List [descriptor.Module module.ID]))
    (|>> nominal.representation
         (its #resolver)
         dictionary.entries
         (list#each (function (_ [module [id _]])
                      [module id]))))

  (the .public (composite additions archive)
    (-> Archive Archive Archive)
    (let [[+next +resolver] (nominal.representation additions)]
      (|> archive
          nominal.representation
          (revised #next (n.max +next))
          (revised #resolver (function (_ resolver)
                               (list#mix (function (_ [module [id entry]] resolver)
                                           (when entry
                                             {.#Some _}
                                             (dictionary.has module [id entry] resolver)
                                             
                                             {.#None}
                                             resolver))
                                         resolver
                                         (dictionary.entries +resolver))))
          nominal.abstraction)))

  (every Reservation
    [descriptor.Module module.ID])

  (every Frozen
    [Version Configuration module.ID (List Reservation)])
  
  (the projection
    (Projection ..Frozen)
    (all <>.and
         <binary>.natural
         (<binary>.list (<>.and <binary>.text <binary>.text))
         <binary>.natural
         (<binary>.list (<>.and <binary>.text <binary>.natural))))

  (the injection
    (Injection ..Frozen)
    (all \\injection.and
         \\injection.natural
         (\\injection.list (\\injection.and \\injection.text \\injection.text))
         \\injection.natural
         (\\injection.list (\\injection.and \\injection.text \\injection.natural))))
  
  (the .public (export version configuration archive)
    (-> Version Configuration Archive Binary)
    (let [(open "/[0]") (nominal.representation archive)]
      (|> /#resolver
          dictionary.entries
          (list.all (function (_ [module [id descriptor+document]])
                      (when descriptor+document
                        {.#Some _} {.#Some [module id]}
                        {.#None} {.#None})))
          [version configuration /#next]
          (\\injection.value ..injection))))

  (exception.the .public (version_mismatch [expected actual])
    (Exception [Version Version])
    (exception.report
     (list ["Expected" (%.natural expected)]
           ["Actual" (%.natural actual)])))

  (exception.the .public (configuration_mismatch [expected actual])
    (Exception [Configuration Configuration])
    (exception.report
     (list ["Expected" (configuration.injection expected)]
           ["Actual" (configuration.injection actual)])))

  (the .public (import expected_version expected_configuration binary)
    (-> Version Configuration Binary (Try Archive))
    (do try.monad
      [[actual_version actual_configuration next reservations] (<binary>.value ..projection binary)
       _ (exception.assertion ..version_mismatch [expected_version actual_version]
                              (n.= expected_version actual_version))
       _ (exception.assertion ..configuration_mismatch [expected_configuration actual_configuration]
                              (by configuration.equivalence =
                                  expected_configuration
                                  actual_configuration))]
      (in (nominal.abstraction
           [#next next
            #resolver (list#mix (function (_ [module id] archive)
                                  (dictionary.has module [id (is (Maybe (Entry Any)) {.#None})] archive))
                                (its #resolver (nominal.representation ..empty))
                                reservations)]))))
  )
