... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only Monad do)]]
   [control
    ["<>" parser]
    ["[0]" try (.only Try)]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]]
   [data
    ["[0]" product]
    ["[0]" binary (.only Binary)
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]
    [collection
     [set (.only Set)]
     ["[0]" list (.use "[1]#[0]" mix monad)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence (.only Sequence)]]]
   [meta
    ["[0]" configuration (.only Configuration)]
    ["[0]" version]
    [macro
     ["^" pattern]]
    [compiler
     ["@" target (.only Target)]]]
   [world
    ["[0]" file]]]]
 ["[0]" // (.only)
  ["[1][0]" context]
  ["/[1]" // (.only)
   [import (.only Import)]
   ["[0]" context (.only Context)]
   ["[0]" archive (.only Output Archive)
    [key (.only Key)]
    ["[0]" registry (.only Registry)]
    ["[0]" unit]
    ["[0]" artifact (.only Artifact)
     ["[0]" category (.only Category)]]
    ["[0]" module (.only)
     ["[0]" descriptor (.only Descriptor)]
     ["[0]" document (.only Document)]]]
   ["[0]" cache (.only)
    ["[1]/[0]" archive]
    ["[1]/[0]" module]
    ["[1]/[0]" purge (.only Cache Purge)]
    ["[0]" dependency
     ["[1]" module]]]
   [// (.only Custom)
    [language
     ["$" lux (.only)
      ["[0]" analysis]
      ["[0]" synthesis]
      ["[0]" translation]
      ["[0]" declaration]
      ["[1]/[0]" program]]]]]])

(the (module_parser key parser)
  (All (_ document)
    (-> (Key document) (Parser document) (Parser (module.Module document))))
  (all <>.and
       <binary>.nat
       descriptor.parser
       (document.parser key parser)))

(the (parser key parser)
  (All (_ document)
    (-> (Key document) (Parser document) (Parser [(module.Module document) Registry])))
  (all <>.and
       (..module_parser key parser)
       registry.parser))

(the (fresh_analysis_state host configuration)
  (-> Target Configuration .Lux)
  (analysis.state (analysis.info version.latest host configuration)))

(the (analysis_state host configuration archive)
  (-> Target Configuration Archive (Try .Lux))
  (do [! try.monad]
    [modules (is (Try (List [descriptor.Module .Module]))
                 (monad.each ! (function (_ module)
                                 (do !
                                   [entry (archive.find module archive)
                                    content (|> entry
                                                (its [archive.#module module.#document])
                                                (document.content $.key))]
                                   (in [module content])))
                             (archive.archived archive)))]
    (in (has .#modules modules (fresh_analysis_state host configuration)))))

(every Definitions
  (Dictionary Text Any))

(the (loaded_document extension host @module expected actual document)
  (All (_ expression declaration)
    (-> Text (translation.Host expression declaration) module.ID (Sequence [Artifact (Set unit.ID)]) (Dictionary Text Binary) (Document .Module)
        (Try [(Document .Module) Output])))
  (do [! try.monad]
    [[definitions output] (is (Try [Definitions Output])
                              (loop (again [input (sequence.list expected)
                                            definitions (is Definitions
                                                            (dictionary.empty text.hash))
                                            output (is Output sequence.empty)])
                                (when input
                                  {.#Item [[[@artifact artifact_category mandatory_artifact?] artifact_dependencies] input']}
                                  (when (do !
                                          [data (try.of_maybe "Cannot find artifact data."
                                                              (dictionary.value (format (%.nat @artifact) extension) actual))
                                           .let [context [@module @artifact]
                                                 declaration (of host ingest context data)]]
                                          (when artifact_category
                                            {category.#Anonymous}
                                            (do !
                                              [.let [output (sequence.suffix [@artifact {.#None} data] output)]
                                               _ (of host re_learn context {.#None} declaration)]
                                              (in [definitions
                                                   output]))
                                            
                                            {category.#Definition [name function_artifact]}
                                            (let [output (sequence.suffix [@artifact {.#None} data] output)]
                                              (if (text#= $/program.name name)
                                                (in [definitions
                                                     output])
                                                (do !
                                                  [value (of host re_load context {.#None} declaration)]
                                                  (in [(dictionary.has name value definitions)
                                                       output]))))

                                            {category.#Custom name}
                                            (do !
                                              [.let [output (sequence.suffix [@artifact {.#Some name} data] output)]
                                               _ (of host re_learn context {.#Some name} declaration)]
                                              (in [definitions
                                                   output]))))
                                    {try.#Success [definitions' output']}
                                    (again input' definitions' output')

                                    failure
                                    failure)
                                  
                                  {.#End}
                                  {try.#Success [definitions output]})))
     content (document.content $.key document)
     definitions (monad.each ! (function (_ [def_name [exported? def_global]])
                                 (when def_global
                                   {.#Alias payload}
                                   (in (list [def_name [exported? def_global]]))
                                   
                                   {.#Definition [type _]}
                                   (|> definitions
                                       (dictionary.value def_name)
                                       (try.of_maybe "Cannot find definition.")
                                       (of ! each (|>> [type]
                                                       {.#Definition}
                                                       [exported?]
                                                       [def_name]
                                                       (list))))

                                   {.#Default [type _]}
                                   (in (list))))
                             (its .#definitions content))]
    (in [(document.document $.key (has .#definitions (list#conjoint definitions) content))
         output])))

(the (load_definitions fs context @module host_environment entry)
  (All (_ expression declaration)
    (-> (file.System Async) Context module.ID (translation.Host expression declaration)
        (archive.Entry .Module)
        (Async (Try (archive.Entry .Module)))))
  (do (try.with async.monad)
    [actual (is (Async (Try (Dictionary Text Binary)))
                (cache/module.artifacts async.monad fs @module))
     .let [expected (registry.artifacts (its archive.#registry entry))]
     [document output] (|> (its [archive.#module module.#document] entry)
                           (loaded_document (its context.#artifact_extension context) host_environment @module expected actual)
                           async#in)]
    (in (|> entry
            (has [archive.#module module.#document] document)
            (has archive.#output output)))))

(the pseudo_module
  Text
  "(Lux Caching System)")

(the (cache_parser customs)
  (-> (List Custom) (Parser [(module.Module Any) Registry]))
  (when (for @.old (as (List (Custom Any Any))
                       customs)
             customs)
    {.#End}
    (..parser $.key $.parser)
    
    {.#Item [custom_state custom_key custom_format custom_parser custom_compiler] tail}
    (all <>.either
         (..parser custom_key custom_parser)
         (cache_parser tail)
         )))

(the (valid_cache customs fs context import contexts [module_name @module])
  (-> (List Custom) (file.System Async) Context Import (List //.Context)
      [descriptor.Module module.ID]
      (Async (Try Cache)))
  (with_expansions [<cache> (these module_name @module module registry)]
    (do [! (try.with async.monad)]
      [data (is (Async (Try Binary))
                (cache/module.cache fs @module))
       [module registry] (async#in (<binary>.value (..cache_parser customs) data))]
      (if (text#= descriptor.runtime module_name)
        (in [true <cache>])
        (do !
          [input (//context.read fs ..pseudo_module import contexts (its context.#host_module_extension context) module_name)]
          (in [(cache/purge.valid? (its module.#descriptor module) input) <cache>]))))))

(the (pre_loaded_caches customs fs context import contexts archive)
  (-> (List Custom) (file.System Async) Context Import (List //.Context) Archive
      (Async (Try (List Cache))))
  (do [! (try.with async.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> archive
            archive.reservations
            (monad.each ! (..valid_cache customs fs context import contexts)))]
    (in it)))

(the (load_order archive pre_loaded_caches)
  (-> Archive (List Cache)
      (Try (dependency.Order .Module)))
  (|> pre_loaded_caches
      (monad.mix try.monad
                 (function (_ [_ [module @module |module| registry]] archive)
                   (archive.has module
                                [archive.#module |module|
                                 archive.#output (is Output sequence.empty)
                                 archive.#registry registry]
                                archive))
                 archive)
      (of try.monad each (dependency.load_order $.key))
      (of try.monad conjoint)))

(the (loaded_caches host_environment fs context purge load_order)
  (All (_ expression declaration)
    (-> (translation.Host expression declaration) (file.System Async) Context
        Purge (dependency.Order .Module)
        (Async (Try (List [descriptor.Module (archive.Entry .Module)])))))
  (do [! (try.with async.monad)]
    [... TODO: Stop needing to wrap this expression in an unnecessary "do" expression.
     it (|> load_order
            (list.only (|>> product.left (dictionary.key? purge) not))
            (monad.each ! (function (_ [module_name [@module entry]])
                            (do !
                              [entry (with_expansions [<it> (..load_definitions fs context @module host_environment entry)]
                                       (for @.old (as (Async (Try (archive.Entry .Module)))
                                                      <it>)
                                            <it>))]
                              (in (with_expansions [<it> [module_name entry]]
                                    (for @.old (as [descriptor.Module (archive.Entry .Module)]
                                                   <it>)
                                         <it>)))))))]
    (in it)))

(the (load_every_reserved_module customs configuration host_environment fs context import contexts archive)
  (All (_ expression declaration)
    (-> (List Custom) Configuration (translation.Host expression declaration) (file.System Async) Context Import (List //.Context) Archive
        (Async (Try [Archive .Lux]))))
  (do [! (try.with async.monad)]
    [pre_loaded_caches (..pre_loaded_caches customs fs context import contexts archive)
     load_order (async#in (load_order archive pre_loaded_caches))
     .let [purge (cache/purge.purge pre_loaded_caches load_order)]
     _ (|> purge
           dictionary.entries
           (monad.each ! (|>> product.right (cache/purge.purge! fs))))
     loaded_caches (..loaded_caches host_environment fs context purge load_order)]
    (async#in
     (do [! try.monad]
       [archive (monad.mix !
                           (function (_ [module entry] archive)
                             (archive.has module entry archive))
                           archive
                           loaded_caches)
        analysis_state (..analysis_state (its context.#host context) configuration archive)]
       (in [archive analysis_state])))))

(the .public (thaw customs configuration host_environment fs context import contexts)
  (All (_ expression declaration)
    (-> (List Custom) Configuration (translation.Host expression declaration) (file.System Async) Context Import (List //.Context)
        (Async (Try [Archive .Lux]))))
  (do async.monad
    [binary (of fs read (cache/archive.descriptor fs))]
    (when binary
      {try.#Success binary}
      (do (try.with async.monad)
        [archive (async#in (archive.import ///.version configuration binary))]
        (..load_every_reserved_module customs configuration host_environment fs context import contexts archive))
      
      {try.#Failure error}
      (in {try.#Success [archive.empty
                         (fresh_analysis_state (its context.#host context) configuration)]}))))
