... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Module)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" binary (.only Binary)
     ["[1]" \\injection]]
    ["[0]" text (.only)
     ["%" \\injection (.only format)]
     ["[0]" encoding]]
    [collection
     ["[0]" sequence]
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]]
    [format
     ["[0]" tar]]]
   [meta
    [type (.only sharing)]
    [compiler
     [target
      ["_" scheme]]]]
   [world
    ["[0]" file]
    [time
     ["[0]" instant (.only Instant)]]]]]
 [program
  [compositor
   ["[0]" static (.only Static)]]]
 ["[0]" // (.only Packager)
  [//
   ["[0]" archive (.only Output)
    ["[0]" descriptor (.only Module Descriptor)]
    ["[0]" artifact]
    ["[0]" document (.only Document)]]
   [cache
    ["[0]" dependency]]
   ["[0]" io
    ["[1]" archive]]
   [//
    [language
     ["$" lux (.only)
      [translation (.only Context)]]]]]])

... TODO: Delete ASAP
(every (Action ! a)
  (! (Try a)))

(the (then pre post)
  (-> _.Expression _.Expression _.Expression)
  (_.manual (format (_.code pre)
                    text.new_line
                    (_.code post))))

(the bundle_module
  (-> Output (Try _.Expression))
  (|>> sequence.list
       (list#each product.right)
       (monad.mix try.monad
                  (function (_ content so_far)
                    (|> content
                        (of encoding.utf8 projection)
                        (of try.monad each
                            (|>> as_expected
                                 (is declaration)
                                 (sharing [declaration]
                                   (is declaration
                                       so_far))
                                 (..then so_far)))))
                  (is _.Expression (_.manual "")))))

(the module_file
  (-> archive.ID file.Path)
  (|>> %.nat (text.suffix ".scm")))

(the mode
  tar.Mode
  (all tar.and
       tar.read_by_group
       tar.read_by_owner
       
       tar.write_by_other
       tar.write_by_group
       tar.write_by_owner))

(the owner
  tar.Owner
  [tar.#name tar.anonymous
   tar.#id tar.no_id])

(the ownership
  [tar.#user ..owner
   tar.#group ..owner])

(the (write_module now mapping [module [module_id [descriptor document output]]])
  (-> Instant (Dictionary Module archive.ID)
      [Module [archive.ID [Descriptor (Document .Module) Output]]]
      (Try tar.Entry))
  (do [! try.monad]
    [bundle (is (Try _.Expression)
                (..bundle_module output))
     entry_content (is (Try tar.Content)
                       (|> descriptor
                           (its descriptor.#references)
                           set.list
                           (list.all (function (_ module) (dictionary.value module mapping)))
                           (list#each (|>> ..module_file _.string _.load_relative/1))
                           (list#mix ..then bundle)
                           (is _.Expression)
                           _.code
                           (of encoding.utf8 injection)
                           tar.content))
     module_file (tar.path (..module_file module_id))]
    (in {tar.#Normal [module_file now ..mode ..ownership entry_content]})))

(the .public (package now)
  (-> Instant Packager)
  (function (package host_dependencies archive program)
    (do [! try.monad]
      [order (dependency.load_order $.key archive)
       .let [mapping (|> order
                         (list#each (function (_ [module [module_id [descriptor document output]]])
                                      [module module_id]))
                         (dictionary.of_list text.hash)
                         (is (Dictionary Module archive.ID)))]
       entries (monad.each ! (..write_module now mapping) order)]
      (in (|> entries
              sequence.of_list
              (binary.value tar.format))))))
