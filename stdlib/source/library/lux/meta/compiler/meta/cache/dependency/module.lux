... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except #module #imports)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try (.only Try)]
    ["[0]" state]
    [function
     ["[0]" memo (.only Memo)]]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set (.only Set)]]]]]
 [////
  ["[0]" archive (.only Output Archive)
   [key (.only Key)]
   ["[0]" module (.only)
    ["[0]" descriptor (.only Descriptor)]
    ["[0]" document (.only Document)]]]])

(every .public Ancestry
  (Set descriptor.Module))

(the .public fresh
  Ancestry
  (set.empty text.hash))

(every .public Graph
  (Dictionary descriptor.Module Ancestry))

(the .public empty
  Graph
  (dictionary.empty text.hash))

(the .public modules
  (-> Graph
      (List descriptor.Module))
  dictionary.keys)

(every .public Dependency
  (Record
   [#module descriptor.Module
    #imports Ancestry]))

(the .public graph
  (-> (List Dependency)
      Graph)
  (list#mix (function (_ [module imports] graph)
              (dictionary.has module imports graph))
            ..empty))

(the (ancestry archive)
  (-> Archive
      Graph)
  (let [memo (is (Memo descriptor.Module Ancestry)
                 (function (_ again module)
                   (do [! state.monad]
                     [.let [parents (when (archive.find module archive)
                                      {try.#Success [module output registry]}
                                      (its [module.#descriptor descriptor.#references] module)
                                      
                                      {try.#Failure error}
                                      ..fresh)]
                      ancestors (monad.each ! again (set.list parents))]
                     (in (list#mix set.union parents ancestors)))))
        ancestry (memo.open memo)]
    (list#mix (function (_ module memory)
                (if (dictionary.key? memory module)
                  memory
                  (let [[memory _] (ancestry [memory module])]
                    memory)))
              ..empty
              (archive.archived archive))))

(the (dependency? ancestry target source)
  (-> Graph descriptor.Module descriptor.Module
      Bit)
  (let [target_ancestry (|> ancestry
                            (dictionary.value target)
                            (try.else ..fresh))]
    (set.member? target_ancestry source)))

(every .public (Order of)
  (List [descriptor.Module [module.ID (archive.Entry of)]]))

(the .public (load_order key archive)
  (All (_ of)
    (-> (Key of) Archive
        (Try (Order of))))
  (let [ancestry (..ancestry archive)]
    (|> ancestry
        dictionary.keys
        (list.sorted (..dependency? ancestry))
        (monad.each try.monad
                    (function (_ module)
                      (do try.monad
                        [module_id (archive.id module archive)
                         entry (archive.find module archive)
                         document (document.marked? key (its [archive.#module module.#document] entry))]
                        (in [module [module_id (has [archive.#module module.#document] document entry)]])))))))
