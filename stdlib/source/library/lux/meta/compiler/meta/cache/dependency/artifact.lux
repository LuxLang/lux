... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Tree_shaking
(.require
 [library
  [lux (.except all)
   [abstract
    [hash (.only Hash)]
    ["[0]" monad (.only do)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" monoid mix monad)]
     ["[0]" set (.only Set)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" sequence]]]
   [math
    [number
     ["[0]" nat]]]
   [meta
    ["[0]" symbol]
    [macro
     ["^" pattern]]
    [compiler
     ["[0]" reference (.only Constant)]
     [language
      [lux
       ["[0]" phase]
       ["[0]" synthesis (.only Path)]
       ["[0]" translation (.only Operation)]
       ["[0]" analysis
        ["[1]/[0]" complex]]]]
     [meta
      ["[0]" archive (.only Archive)
       ["[0]" artifact]
       ["[0]" registry (.only Registry)]
       ["[0]" unit]]]]]]])

(def (path_references references)
  (-> (-> synthesis.Term (List Constant))
      (-> Path (List Constant)))
  (function (again path)
    (when path
      (^.or {synthesis.#Pop}
            {synthesis.#Access _}
            {synthesis.#Bind _})
      (list)

      (^.with_template [<tag>]
        [{<tag> left right}
         (.all list#composite
               (again left)
               (again right))])
      ([synthesis.#Alt]
       [synthesis.#Seq])
      
      {synthesis.#Bit_Fork test then else}
      (when else
        {.#Some else}
        (.all list#composite
              (again then)
              (again else))
        
        {.#None}
        (again then))

      (^.with_template [<tag>]
        [{<tag> fork}
         (|> {.#Item fork}
             (list#each (|>> product.right again))
             list#conjoint)])
      ([synthesis.#I64_Fork]
       [synthesis.#F64_Fork]
       [synthesis.#Text_Fork])
      
      {synthesis.#Then then}
      (references then))))

(def (references [_ value])
  (-> synthesis.Term
      (List Constant))
  (when value
    {synthesis.#Simple value}
    (list)
    
    {synthesis.#Structure value}
    (when value
      {analysis/complex.#Variant value}
      (|> value
          (the analysis/complex.#value)
          references)
      
      {analysis/complex.#Tuple value}
      (|> value
          (list#each references)
          list#conjoint))

    {synthesis.#Reference value}
    (when value
      {reference.#Variable _}
      (list)
      
      {reference.#Constant value}
      (list value))
    
    {synthesis.#Control value}
    (when value
      {synthesis.#Branch value}
      (when value
        {synthesis.#Exec this that}
        (.all list#composite
              (references this)
              (references that))
        
        {synthesis.#Let input _ body}
        (.all list#composite
              (references input)
              (references body))
        
        {synthesis.#If test then else}
        (.all list#composite
              (references test)
              (references then)
              (references else))
        
        {synthesis.#Get _ record}
        (references record)
        
        {synthesis.#When input path}
        (.all list#composite
              (references input)
              (path_references references path)))
      
      {synthesis.#Loop value}
      (when value
        {synthesis.#Scope value}
        (let [of_inits (|> value
                           (the synthesis.#inits)
                           (list#each references))
              of_iteration (|> value
                               (the synthesis.#iteration)
                               references)]
          (list#conjoint (list.partial of_iteration of_inits)))
        
        {synthesis.#Again value}
        (|> value
            (list#each references)
            list#conjoint))
      
      {synthesis.#Function value}
      (when value
        {synthesis.#Abstraction value}
        (|> value
            (the synthesis.#body)
            references)
        
        {synthesis.#Apply function arguments}
        (|> (list.partial function arguments)
            (list#each references)
            list#conjoint)))
    
    {synthesis.#Extension [name parameters]}
    (|> parameters
        (list#each references)
        list#conjoint)))

(def .public (dependencies archive value)
  (All (_ anchor expression declaration)
    (-> Archive synthesis.Term
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        ..references
        (set.of_list symbol.hash)
        set.list
        (monad.each ! (translation.remember archive))
        (of ! each (set.of_list unit.hash)))))

(def .public (path_dependencies archive value)
  (All (_ anchor expression declaration)
    (-> Archive Path
        (Operation anchor expression declaration (Set unit.ID))))
  (let [! phase.monad]
    (|> value
        (..path_references ..references)
        (set.of_list symbol.hash)
        set.list
        (monad.each ! (translation.remember archive))
        (of ! each (set.of_list unit.hash)))))

(def .public all
  (-> (List (Set unit.ID))
      (Set unit.ID))
  (list#mix set.union unit.none))

(def (immediate_dependencies archive)
  (-> Archive
      [(List unit.ID)
       (Dictionary unit.ID (Set unit.ID))])
  (|> archive
      archive.entries
      (list#each (function (_ [module [module_id [_module output registry]]])
                   (|> registry
                       registry.artifacts
                       sequence.list
                       (list#each (function (_ [artifact dependencies])
                                    [[module_id (the artifact.#id artifact)]
                                     (the artifact.#mandatory? artifact)
                                     dependencies])))))
      list.together
      (list#mix (function (_ [artifact_id mandatory? dependencies]
                             [mandatory_dependencies
                              all_dependencies])
                  [(if mandatory?
                     (list.partial artifact_id mandatory_dependencies)
                     mandatory_dependencies)
                   (dictionary.has artifact_id dependencies all_dependencies)])
                [(list)
                 (dictionary.empty unit.hash)])))

(def .public (necessary_dependencies archive)
  (-> Archive
      (Set unit.ID))
  (let [[mandatory immediate] (immediate_dependencies archive)]
    (loop (again [pending mandatory
                  minimum unit.none])
      (when pending
        {.#Item head tail}
        (if (set.member? minimum head)
          (again tail minimum)
          (again (when (dictionary.value head immediate)
                   {.#Some additional}
                   (list#composite (set.list additional) tail)

                   {.#None}
                   tail)
                 (set.has head minimum)))
        
        {.#End}
        minimum))))
