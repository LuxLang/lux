... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" pipe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [world
    ["[0]" file]]]]
 ["[0]" // (.only)
  [//
   [archive
    ["[0]" module]]]])

(exception.the .public (cannot_enable [archive @module error])
  (Exception [file.Path module.ID Text])
  (exception.report
   (list ["Archive" archive]
         ["Module ID" (%.nat @module)]
         ["Error" error])))

(the .public (path fs @module)
  (for_any (_ !)
    (-> (file.System !) module.ID
        file.Path))
  (let [/ (of fs separator)]
    (%.message //.path
               / (%.nat @module))))

(the .public (enabled? fs @module)
  (for_any (_ !)
    (-> (file.System !) module.ID
        (! Bit)))
  (of fs directory? (..path fs @module)))

(the .public (enable! ! fs @module)
  (for_any (_ !)
    (-> (Monad !) (file.System !) module.ID
        (! (Try Any))))
  (do !
    [.let [path (..path fs @module)]
     module_exists? (of fs directory? path)]
    (if module_exists?
      (in {try.#Success []})
      (with_expansions [<failure> (exception.except ..cannot_enable [//.path
                                                                     @module
                                                                     error])]
        (do !
          [? (//.enable! ! fs)]
          (when ?
            {try.#Failure error}
            (in <failure>)
            
            success
            (|> path
                (of fs make_directory)
                (of ! each (|>> (pipe.when
                                  {try.#Failure error}
                                  <failure>

                                  success
                                  success))))))))))

(the file
  file.Path
  "descriptor")

(the .public (descriptor fs @module)
  (for_any (_ !)
    (-> (file.System !) module.ID
        file.Path))
  (let [/ (of fs separator)]
    (%.message (..path fs @module)
               / ..file)))

(the .public (cache! fs @module content)
  (for_any (_ !)
    (-> (file.System !) module.ID Binary
        (! (Try Any))))
  (of fs write (..descriptor fs @module) content))

(the .public (cache fs @module)
  (for_any (_ !)
    (-> (file.System !) module.ID
        (! (Try Binary))))
  (of fs read (..descriptor fs @module)))

(the .public (artifacts ! fs @module)
  (for_any (_ !)
    (-> (Monad !) (file.System !) module.ID
        (! (Try (Dictionary Text Binary)))))
  (do [! (try.with !)]
    [files (of fs directory_files (..path fs @module))
     pairs (|> files
               (list#each (function (_ file)
                            [(file.name fs file) file]))
               (list.only (|>> product.left (text#= ..file) not))
               (monad.each ! (function (_ [name path])
                               (|> path
                                   (of fs read)
                                   (of ! each (|>> [name]))))))]
    (in (dictionary.of_list text.hash (for .old (as (List [Text Binary]) pairs)
                                           pairs)))))
