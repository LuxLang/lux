... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only Monad do)]]
   [control
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    [concurrency
     ["[0]" async (.only Async)]]
    [function
     [predicate (.only Predicate)]]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]]]
   [math
    [number
     ["n" nat]]]
   [world
    ["[0]" file]]]]
 ["[0]" //
  ["[1][0]" module]
  ["[0]" dependency
   ["[1]" module]]
  ["/[1]" //
   ["/[1]" // (.only Input)]
   ["[0]" archive (.only)
    [registry (.only Registry)]
    ["[0]" module (.only)
     ["[0]" descriptor (.only Descriptor)]]]]])

(every .public Cache
  [Bit descriptor.Module module.ID (module.Module Any) Registry])

(every .public Purge
  (Dictionary descriptor.Module module.ID))

... TODO: Make the monad parameterizable.
(def .public (purge! fs @module)
  (-> (file.System Async) module.ID
      (Async (Try Any)))
  (do [! (try.with async.monad)]
    [.let [cache (//module.path fs @module)]
     _ (|> cache
           (of fs directory_files)
           (of ! each (monad.each ! (of fs delete)))
           (of ! conjoint))]
    (of fs delete cache)))

(def .public (valid? expected actual)
  (-> Descriptor Input
      Bit)
  (and (text#= (its descriptor.#name expected)
               (its ////.#module actual))
       (text#= (its descriptor.#file expected)
               (its ////.#file actual))
       (n.= (its descriptor.#hash expected)
            (its ////.#hash actual))))

(def initial
  (-> (List Cache)
      Purge)
  (|>> (list.all (function (_ [valid? module_name @module _])
                   (if valid?
                     {.#None}
                     {.#Some [module_name @module]})))
       (dictionary.of_list text.hash)))

(def .public (purge caches load_order)
  (-> (List Cache) (dependency.Order Any)
      Purge)
  (list#mix (function (_ [module_name [@module entry]] purge)
              (let [purged? (is (Predicate descriptor.Module)
                                (dictionary.key? purge))]
                (if (purged? module_name)
                  purge
                  (if (|> entry
                          (its [archive.#module module.#descriptor descriptor.#references])
                          set.list
                          (list.any? purged?))
                    (dictionary.has module_name @module purge)
                    purge))))
            (..initial caches)
            load_order))
