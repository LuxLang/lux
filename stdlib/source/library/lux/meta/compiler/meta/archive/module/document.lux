... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    [collection
     ["[0]" dictionary (.only Dictionary)]]
    ["[0]" binary
     [\\parser (.only Parser)]
     ["[1]" \\format (.only Format)]]]
   [meta
    [type (.only sharing)
     ["[0]" nominal]]]]]
 [///
  ["[0]" signature (.only Signature) (.use "[1]#[0]" equivalence)]
  ["[0]" key (.only Key)]])

(exception.the .public (invalid_signature [expected actual])
  (Exception [Signature Signature])
  (exception.report
   (list ["Expected" (signature.description expected)]
         ["Actual" (signature.description actual)])))

(nominal.every .public (Document d)
  (Record
   [#signature Signature
    #content d])

  (the .public (content key document)
    (All (_ d) (-> (Key d) (Document Any) (Try d)))
    (let [[document//signature document//content] (nominal.representation document)]
      (if (of signature.equivalence =
              (key.signature key)
              document//signature)
        {try.#Success (sharing [e]
                        (is (Key e)
                            key)
                        (is e
                            (as_expected document//content)))}
        (exception.except ..invalid_signature [(key.signature key)
                                               document//signature]))))

  (the .public (document key content)
    (All (_ d) (-> (Key d) d (Document d)))
    (nominal.abstraction
     [#signature (key.signature key)
      #content content]))

  (the .public (marked? key document)
    (All (_ d) (-> (Key d) (Document Any) (Try (Document d))))
    (do try.monad
      [_ (..content key document)]
      (in (as_expected document))))

  (the .public signature
    (-> (Document Any) Signature)
    (|>> nominal.representation
         (its #signature)))

  (the .public (format content)
    (All (_ d) (-> (Format d) (Format (Document d))))
    (let [format (all binary.and
                      signature.format
                      content)]
      (|>> nominal.representation format)))

  (the .public (parser key it)
    (All (_ d) (-> (Key d) (Parser d) (Parser (Document d))))
    (do <>.monad
      [actual signature.parser
       .let [expected (key.signature key)]
       _ (if (signature#= expected actual)
           (in [])
           (<>.of_try (exception.except ..invalid_signature [expected actual])))
       it it]
      (in (nominal.abstraction
           [actual it]))))
  )
