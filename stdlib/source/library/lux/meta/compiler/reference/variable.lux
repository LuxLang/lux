... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except #Local)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]]
   [control
    ["[0]" pipe]
    [function
     [predicate (.only Predicate)]]]
   [data
    [text
     ["%" \\format (.only Format)]]]
   [math
    [number
     ["n" nat]
     ["i" int]]]
   [meta
    [macro
     ["^" pattern]]]]]
 [//
  ["[0]" register (.only Register)]])

(every .public Variable
  (Variant
   {#Local Register}
   {#Foreign Register}))

(def .public equivalence
  (Equivalence Variable)
  (implementation
   (def (= reference sample)
     (when [reference sample]
       (^.with_template [<tag>]
         [[{<tag> reference'} {<tag> sample'}]
          (n.= reference' sample')])
       ([#Local] [#Foreign])

       _
       false))))

(def .public hash
  (Hash Variable)
  (implementation
   (def equivalence
     ..equivalence)
   
   (def hash
     (|>> (pipe.when
            (^.with_template [<factor> <tag>]
              [{<tag> register}
               (|> register
                   (of n.hash hash)
                   (n.* <factor>))])
            ([2 #Local]
             [3 #Foreign]))))))

(def .public self
  (template (self)
    [{..#Local register.first}]))

(def .public self?
  (Predicate Variable)
  (|>> (pipe.when
         (..self)
         true

         _
         false)))

(def .public format
  (Format Variable)
  (|>> (pipe.when
         {#Local local}
         (%.format "+" (%.nat local))
         
         {#Foreign foreign}
         (%.format "-" (%.nat foreign)))))
