... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution local global name variant tuple with)
   [abstract
    [equality (.only Equality)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix)]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [meta
    ["[0]" provenance]
    ["[0]" name]]
   [compiler
    ["/" type]]]])

(the with_template (.in_module# .prelude with_template))

(every .public (Injection it)
  (-> it
      /.Code))

(with_template [<name> <type> <tag>]
  [(the .public <name>
     (Injection <type>)
     (|>> {<tag> provenance.dummy}))]
  
  [[bit /.Bit /.:Bit]
   [natural /.Natural /.:Natural]
   [integer /.Integer /.:Integer]
   [revolution /.Revolution /.:Revolution]
   [decimal /.Decimal /.:Decimal]
   [text /.Text /.:Text]
   [name /.Name /.:Name]])

(with_template [<name> <tag>]
  [(the .public <name>
     (Injection (/.List /.Code))
     (|>> {<tag> provenance.dummy}))]
  
  [[variant /.:Variant]
   [tuple /.:Tuple]
   [form /.:Form]])

(the .public local
  (Injection /.Text)
  (|>> [""]
       {/.:Name provenance.dummy}))

(`` (the .public equality
      (Equality /.Code)
      (implementation
       (the (= x y)
         (when [x y]
           (,, (with_template [<tag> <eq>]
                 [[{<tag> _ x} {<tag> _ y}]
                  (by <eq> = x y)]

                 [[/.:Bit bit.equality]
                  [/.:Natural natural.equality]
                  [/.:Integer integer.equality]
                  [/.:Revolution revolution.equality]
                  [/.:Decimal decimal.equality]
                  [/.:Text text.equality]
                  [/.:Name name.equality]]))

           (,, (with_template [<tag>]
                 [[{<tag> _ xs} {<tag> _ ys}]
                  (by (list.equality =) = xs ys)]

                 [[/.:Form]
                  [/.:Variant]
                  [/.:Tuple]]))
           
           _
           false)))))

(alias [=]
       ..equality)

(the .public (absolute it)
  (text.Injection /.Code)
  (`` (when it
        (,, (with_template [<tag> <struct>]
              [{<tag> _ value}
               (by <struct> as value)]

              [[/.:Bit bit.text]
               [/.:Natural natural.base_10]
               [/.:Integer integer.base_10]
               [/.:Revolution revolution.base_10]
               [/.:Decimal decimal.base_10]
               [/.:Name name.absolute]]))

        {/.:Text _ value}
        (text.as_text value)

        (,, (with_template [<open> <close> <tag>]
              [{<tag> _ members}
               (.text <open>
                      (list:mix (function (_ next prev)
                                  (let [next (absolute next)]
                                    (if (text.= "" prev)
                                        next
                                        (.text prev " " next))))
                                ""
                                members)
                      <close>)]

              [["(" ")" /.:Form]
               ["{" "}" /.:Variant]
               ["[" "]" /.:Tuple]]))
        )))

(the .public (relative module it)
  (-> Text
      (text.Injection /.Code))
  (`` (when it
        (,, (with_template [<tag> <struct>]
              [{<tag> _ value}
               (by <struct> as value)]

              [[/.:Bit bit.text]
               [/.:Natural natural.base_10]
               [/.:Integer integer.base_10]
               [/.:Revolution revolution.base_10]
               [/.:Decimal decimal.base_10]
               [/.:Name (name.relative module)]]))

        {/.:Text _ value}
        (text.as_text value)

        (,, (with_template [<open> <close> <tag>]
              [{<tag> _ members}
               (.text <open>
                      (list:mix (function (_ next prev)
                                  (let [next (relative module next)]
                                    (if (text.= "" prev)
                                        next
                                        (.text prev " " next))))
                                ""
                                members)
                      <close>)]

              [["(" ")" /.:Form]
               ["{" "}" /.:Variant]
               ["[" "]" /.:Tuple]]))
        )))

(`` (the .public (replaced original substitute)
      (-> /.Code /.Code
          (Change /.Code))
      (function (replaced it)
        (if (by ..equality = original it)
            substitute
            (when it
              (,, (with_template [<tag>]
                    [{<tag> provenance parts}
                     {<tag> provenance (list:each replaced parts)}]

                    [[/.:Form]
                     [/.:Variant]
                     [/.:Tuple]]))

              _
              it)))))

(alias [as_text]
       ..absolute)

(the .public (provenance it)
  (-> /.Code
      /.Provenance)
  (`` (when it
        (,, (with_template [,tag]
              [{,tag it _}
               it]

              [[/.:Bit]
               [/.:Natural]
               [/.:Integer]
               [/.:Revolution]
               [/.:Decimal]
               [/.:Text]
               [/.:Name]
               [/.:Form]
               [/.:Variant]
               [/.:Tuple]])))))

(the .public (with provenance it)
  (-> /.Provenance
      (Change /.Code))
  (`` (when it
        (,, (with_template [,tag]
              [{,tag _ it}
               {,tag provenance it}]

              [[/.:Bit]
               [/.:Natural]
               [/.:Integer]
               [/.:Revolution]
               [/.:Decimal]
               [/.:Text]
               [/.:Name]
               [/.:Form]
               [/.:Variant]
               [/.:Tuple]])))))
