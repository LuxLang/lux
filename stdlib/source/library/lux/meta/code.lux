... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except natural integer revolution local global symbol variant tuple)
   [abstract
    [equivalence (.only Equivalence)]]
   [data
    ["[0]" product]
    ["[0]" bit]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["[0]" natural]
     ["[0]" integer]
     ["[0]" revolution]
     ["[0]" decimal]]]
   [meta
    ["[0]" location]
    ["[0]" symbol]]]])

(the with_template' (.in_module# .prelude .with_template))

... (every (Code' w)
...   {.#Bit Bit}
...   {.#Natural Natural}
...   {.#Integer Integer}
...   {.#Revolution Revolution}
...   {.#Decimal Decimal}
...   {.#Text Text}
...   {.#Symbol Symbol}
...   {.#Form (List (w (Code' w)))}
...   {.#Variant (List (w (Code' w)))}
...   {.#Tuple (List (w (Code' w)))})

... (every Code
...   (Ann Location (Code' (Ann Location))))

(with_template' [<name> <type> <tag>]
  [(the .public (<name> x)
     (-> <type>
         Code)
     [location.dummy {<tag> x}])]
  
  [bit Bit .#Bit]
  [natural Natural .#Natural]
  [integer Integer .#Integer]
  [revolution Revolution .#Revolution]
  [decimal Decimal .#Decimal]
  [text Text .#Text]
  [symbol Symbol .#Symbol]
  [form (List Code) .#Form]
  [variant (List Code) .#Variant]
  [tuple (List Code) .#Tuple]
  )

(the .public (local name)
  (-> Text
      Code)
  [location.dummy {.#Symbol ["" name]}])

(`` (the .public equivalence
      (Equivalence Code)
      (implementation
       (the (= x y)
         (when [x y]
           (,, (with_template' [<tag> <eq>]
                 [[[_ {<tag> x'}] [_ {<tag> y'}]]
                  (by <eq> = x' y')]

                 [.#Bit bit.equivalence]
                 [.#Natural natural.equivalence]
                 [.#Integer integer.equivalence]
                 [.#Revolution revolution.equivalence]
                 [.#Decimal decimal.equivalence]
                 [.#Text text.equivalence]
                 [.#Symbol symbol.equivalence]))

           (,, (with_template' [<tag>]
                 [[[_ {<tag> xs'}] [_ {<tag> ys'}]]
                  (by (list.equivalence =) = xs' ys')]

                 [.#Form]
                 [.#Variant]
                 [.#Tuple]))
           
           _
           false)))))

(alias [=]
       ..equivalence)

(the .public (absolute it)
  (text.Injection Code)
  (`` (when it
        (,, (with_template' [<tag> <struct>]
              [[_ {<tag> value}]
               (by <struct> injection value)]

              [.#Bit bit.format]
              [.#Natural natural.base_10]
              [.#Integer integer.base_10]
              [.#Revolution revolution.base_10]
              [.#Decimal decimal.base_10]
              [.#Symbol symbol.absolute]))

        [_ {.#Text value}]
        (text.injection value)

        (,, (with_template' [<tag> <open> <close>]
              [[_ {<tag> members}]
               (all text#composite
                    <open>
                    (list#mix (function (_ next prev)
                                (let [next (absolute next)]
                                  (if (text.= "" prev)
                                    next
                                    (all text#composite prev " " next))))
                              ""
                              members)
                    <close>)]

              [.#Form  "(" ")"]
              [.#Variant "{" "}"]
              [.#Tuple "[" "]"]))
        )))

(the .public (relative module it)
  (-> Text
      (text.Injection Code))
  (`` (when it
        (,, (with_template' [<tag> <struct>]
              [[_ {<tag> value}]
               (by <struct> injection value)]

              [.#Bit bit.format]
              [.#Natural natural.base_10]
              [.#Integer integer.base_10]
              [.#Revolution revolution.base_10]
              [.#Decimal decimal.base_10]
              [.#Symbol (symbol.relative module)]))

        [_ {.#Text value}]
        (text.injection value)

        (,, (with_template' [<open> <close> <tag>]
              [[_ {<tag> members}]
               (all text#composite
                    <open>
                    (list#mix (function (_ next prev)
                                (let [next (relative module next)]
                                  (if (text.= "" prev)
                                    next
                                    (all text#composite prev " " next))))
                              ""
                              members)
                    <close>)]

              ["(" ")" .#Form]
              ["{" "}" .#Variant]
              ["[" "]" .#Tuple]))
        )))

(`` (the .public (replaced original substitute it)
      (-> Code Code Code
          Code)
      (if (by ..equivalence = original it)
        substitute
        (when it
          (,, (with_template' [<tag>]
                [[location {<tag> parts}]
                 [location {<tag> (list#each (replaced original substitute) parts)}]]

                [.#Form]
                [.#Variant]
                [.#Tuple]))

          _
          it))))

(alias [as_text]
       ..absolute)
