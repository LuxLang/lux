... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except type alias macro)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" text (.only \n)]
    [collection
     ["[0]" list (.use "[1]:[0]" monad)
      ["[0]" property]]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [compiler
    ["@[0]" type]]
   [function
    [predicate (.only Predicate)]]]]
 [/
  ["[0]" local]]
 ["[0]" // (.only)
  ["[0]" module]
  ["[0]" name (.use "[1]:[0]" absolute)]
  ["[0]" code]])

(the with_template (.in_module# .prelude with_template))
(the type_variable (.in_module# .prelude type_variable))

(the .public (normal name)
  (-> Name
      (Meta Name))
  (when name
    ["" name]
    (monad.let //.monad
      [module_name module.current_name]
      (pure [module_name name]))

    _
    (by //.monad pure name)))

(`` (the (clean_type type)
      (-> Type
          (Meta Type))
      (when type
        {.:Variable .general var}
        (function (_ lux)
          (when (|> lux
                    (its [.:type_context .:for_all])
                    (type_variable var))
            (,, (with_template [<pattern>]
                  [<pattern>
                   {try.:Success [lux type]}]

                  [[{.:None}]
                   [{.:Some {.:Variable .general _}}]]))

            {.:Some type'}
            {try.:Success [lux type']}))

        _
        (by //.monad pure type))))

(the without_lux_runtime
  (Change (List module.Name))
  ... The Lux runtime shows up as ""
  ... so I'm excluding it.
  (list.only (|>> (text.= module.runtime)
                  not)))

... https://en.wikipedia.org/wiki/Delimiter
(the listing_delimiter
  Text
  (text \n "                    "))

(the module_listing
  (-> (List module.Name)
      Text)
  (|>> ..without_lux_runtime
       (list.in_order text.<)
       (text.interposed ..listing_delimiter)))

(the (not_known lux name)
  (-> Lux Name
      Error)
  (let [name_of_current (|> lux
                            (its .:current_module)
                            (maybe.else "???"))
        every_known (|> lux
                        (its .:modules)
                        (list:each product.left)
                        ..module_listing)
        this_module (|> lux
                        (its .:modules)
                        (property.value name_of_current)
                        try.trusted)
        candidates (|> lux
                       (its .:modules)
                       (list:each (function (_ [module_name module])
                                    (|> module
                                        (its .:definitions)
                                        (list.all (function (_ [def_name [exported? global]])
                                                    (if (.and exported?
                                                              (text.= (name.proper name) def_name))
                                                        {.:Some (name:as [module_name def_name])}
                                                        {.:None}))))))
                       list:conjoint
                       (list.in_order text.<)
                       (text.interposed ..listing_delimiter))
        imports (|> this_module
                    (its .:imports)
                    ..module_listing)
        aliases (|> this_module
                    (its .:module_aliases)
                    (list:each (function (_ [alias real]) (text alias " => " real)))
                    (list.in_order text.<)
                    (text.interposed ..listing_delimiter))]
    (text "" " All known modules: " every_known
          \n "           Aliases: " aliases
          \n "           Imports: " imports
          \n "        Candidates: " candidates
          \n "    Current module: " name_of_current
          \n "Unknown definition: " (name:as name))))

(the name_of_default
  (.type_name# "default"))

(the (default? it)
  (Predicate Type)
  (when it
    {.:Nominal ..name_of_default (list [.co_variant type_of_default])}
    true

    else
    false))

(with_template [<name>]
  [(the .public (<name> name)
     (-> Name
         (Meta [Bit Global]))
     (monad.let //.monad
       [name (..normal name)
        .let [[normal_module normal_proper] name]]
       (function (_ lux)
         (when (is (Maybe [Bit Global])
                   (monad.let maybe.monad
                     [it (|> lux
                             (its .:modules)
                             (property.value normal_module))]
                     (|> it
                         (its .:definitions)
                         (property.value normal_proper))))
           {.:Some exported?,definition}
           {try.:Success [lux exported?,definition]}

           _
           {try.:Failure (..not_known lux name)}))))]

  [[definition]
   [default']
   [alias']])

(the .public (export name)
  (-> Name
      (Meta Definition))
  (monad.let [! //.monad]
    [name (..normal name)
     .let [[expected _] name]
     [exported? definition] (..definition name)
     actual module.current_name]
    (when definition
      {.:Definition it}
      (if (.or exported?
               (text.= expected actual))
          (if (default? (product.left it))
              (//.failure (text "Defaults are not considered exports: "
                                (name:as name)))
              (pure it))
          (//.failure (text "Definition is not an export: " (name:as name))))

      {.:Alias it}
      (if (.or exported?
               (text.= expected actual))
          (export it)
          (//.failure (text "Alias is not an export: " (name:as name)))))))

(the .public (default name)
  (-> Name
      (Meta Definition))
  (monad.let [! //.monad]
    [name (..normal name)
     [exported? definition] (..default' name)]
    (when definition
      {.:Definition it}
      (if (default? (product.left it))
          (if exported?
              (pure it)
              (monad.let !
                [.let [[expected _] name]
                 actual module.current_name]
                (if (text.= expected actual)
                    (pure it)
                    (//.failure (text "Default is not an export: " (name:as name))))))
          (//.failure (text "Definitions are not considered defaults: "
                            (name:as name))))

      {.:Alias de_aliased}
      (//.failure (text "Aliases are not considered defaults: "
                        (name:as name))))))

(the .public (alias name)
  (-> Name
      (Meta Name))
  (monad.let [! //.monad]
    [name (..normal name)
     [exported? it] (..alias' name)]
    (when it
      {.:Alias it}
      (pure it)

      _
      (undefined))))

(the .public (definition_type name)
  (-> Name
      (Meta Type))
  (monad.let //.monad
    [[exported? definition] (definition name)]
    (when definition
      {.:Alias de_aliased}
      (definition_type de_aliased)
      
      {.:Definition [def_type expression def_value]}
      (if (default? def_type)
          (//.failure (text "Defaults are not considered definitions: "
                            (name:as name)))
          (clean_type def_type)))))

(the .public (type name)
  (-> Name
      (Meta Type))
  (when name
    ["" _name]
    (//.either (local.type _name)
               (definition_type name))

    _
    (definition_type name)))

(the .public (type_definition name)
  (-> Name
      (Meta Type))
  (monad.let //.monad
    [[exported? definition] (definition name)]
    (when definition
      {.:Alias de_aliased}
      (type_definition de_aliased)
      
      {.:Definition [def_type expression def_value]}
      (if (default? def_type)
          (//.failure (text "Default is not a type: " (name:as name)))
          (let [type_code (.in_module# .prelude type_code)]
            (if (.or (identical? .Type def_type)
                     (by code.equivalence =
                         (type_code .Type)
                         (type_code def_type)))
                (pure (as (-> Any Type) def_value))
                (//.failure (text "Definition is not a type: " (name:as name)))))))))

(the .public (globals module)
  (-> module.Name
      (Meta (property.List [Bit Global])))
  (function (_ lux)
    (when (property.value module (its .:modules lux))
      {try.:Success module}
      {try.:Success [lux (its .:definitions module)]}

      failure
      {try.:Failure (text "Unknown module: " module)})))

(the .public (definitions module)
  (-> module.Name
      (Meta (property.List [Bit Definition])))
  (by //.monad each
      (list.all (function (_ [name [exported? global]])
                  (when global
                    {.:Definition definition}
                    {.:Some [name [exported? definition]]}

                    else
                    {.:None})))
      (..globals module)))

(error.the .public cannot_de-alias_a_default)

(the (real_definition lux de_aliased)
  (-> Lux Name
      (Try Definition))
  (when (..definition de_aliased lux)
    {try.:Success [_ [_ definition]]}
    (when definition
      {.:Alias it}
      (real_definition lux it)
      
      {.:Definition it}
      (if (default? (product.left it))
          {try.:Failure ..cannot_de-alias_a_default}
          {try.:Success it}))
    
    {try.:Failure error}
    {try.:Failure error}))

(the .public (resolved_globals module)
  (-> module.Name
      (Meta (property.List [Bit Definition])))
  (monad.let [! //.monad]
    [it (..globals module)]
    (function (_ lux)
      (|> (list.mix (function (_ [name exported? it])
                      (property.has name [exported? it]))
                    (is (property.List [Bit Definition])
                        property.empty)
                    (list.all (function (_ [name [exported? global]])
                                (when global
                                  {.:Alias de_aliased}
                                  (when (real_definition lux de_aliased)
                                    {try.:Success it}
                                    {.:Some [name exported? it]}

                                    else
                                    {.:None})
                                  
                                  {.:Definition it}
                                  (if (default? (product.left it))
                                      {.:None}
                                      {.:Some [name exported? it]})))
                              it))
          [lux]
          {try.:Success}))))

(the .public (exports module_name)
  (-> module.Name
      (Meta (property.List Definition)))
  (monad.let //.monad
    [constants (..definitions module_name)]
    (pure (monad.let list.monad
            [[name [exported? [def_type def_value]]] constants]
            (if exported?
                (pure [name [def_type def_value]])
                (list))))))

(the .public (de_aliased def_name)
  (-> Name
      (Meta Name))
  (monad.let //.monad
    [[exported? constant] (..definition def_name)]
    (pure (when constant
            {.:Alias real_def_name}
            real_def_name

            else
            def_name))))

(error.the .public not_a_macro)

(the type:= (.in_module# .prelude type:=))

(the .public (macro full_name)
  (-> Name
      (Meta @type.Macro))
  (monad.let //.monad
    [full_name (..normal full_name)]
    (is (Meta @type.Macro)
        (function (_ lux)
          (when (module.current_name lux)
            {try.:Success [_ this_module]}
            (let [modules (its .:modules lux)]
              (loop (macro [[module name] full_name])
                (monad.let try.monad
                  [$module (property.value module modules)
                   [exported? definition] (|> $module
                                              (is Module)
                                              (its .:definitions)
                                              (property.value name))]
                  (when definition
                    {.:Alias de_aliased}
                    (macro de_aliased)
                    
                    {.:Definition [def_type expression def_value]}
                    (if (default? def_type)
                        {try.:Failure ..not_a_macro}
                        (if (type:= @type.Macro def_type)
                            {try.:Success [lux (as (-> Any @type.Macro) def_value)]}
                            {try.:Failure ..not_a_macro}))))))

            {try.:Failure error}
            {try.:Failure error})))))
