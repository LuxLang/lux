(.require
 [library
  [lux (.except Location Code not or and list if int comment exec try the is def when)
   ["[0]" ffi]
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    ["[0]" enum]]
   [control
    ["[0]" pipe]]
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number
     ["n" nat]
     ["f" frac]]]
   [meta
    ["@" target]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]
     ["[0]" template]]
    [type
     ["[0]" nominal (.except def)]]]]])

(.def input_separator
  ", ")

(.def expression
  (-> Text Text)
  (text.enclosed ["(" ")"]))

(for @.old (these (ffi.import java/lang/CharSequence
                    "[1]::[0]")
                  
                  (ffi.import java/lang/String
                    "[1]::[0]"
                    (replace [java/lang/CharSequence java/lang/CharSequence] java/lang/String)))
     (these))

... Added the carriage return for better Windows compatibility.
(.def \n+
  Text
  (format text.carriage_return text.new_line))

(.def nested
  (-> Text Text)
  (.let [nested_new_line (format text.new_line text.tab)]
    (for @.old (|>> (format \n+)
                    (as java/lang/String)
                    (java/lang/String::replace (as java/lang/CharSequence text.new_line)
                                               (as java/lang/CharSequence nested_new_line)))
         (|>> (format \n+)
              (text.replaced text.new_line nested_new_line)))))

(nominal.def .public (Code brand)
  Text

  (.def .public equivalence
    (All (_ brand) (Equivalence (Code brand)))
    (implementation
     (.def (= reference subject)
       (at text.equivalence = (representation reference) (representation subject)))))

  (.def .public hash
    (All (_ brand) (Hash (Code brand)))
    (implementation
     (.def equivalence ..equivalence)
     (.def hash (|>> representation (at text.hash hash)))))

  (.def .public manual
    (-> Text Code)
    (|>> abstraction))

  (.def .public code
    (-> (Code Any) Text)
    (|>> representation))

  (with_template [<type> <super>]
    [(with_expansions [<brand> (template.symbol [<type> "'"])]
       (`` (nominal.def (<brand> brand) Any))
       (`` (type .public (<type> brand)
             (<super> (<brand> brand)))))]
    
    [Expression Code]
    [Computation Expression]
    [Location Computation]
    [Var Location]
    [Statement Code]
    )

  (with_template [<type> <super>]
    [(with_expansions [<brand> (template.symbol [<type> "'"])]
       (`` (nominal.def <brand> Any))
       (`` (type .public <type> (<super> <brand>))))]

    [Literal Computation]
    [Access Location]
    [Loop Statement]
    )

  (with_template [<var> <brand>]
    [(nominal.def .public <brand> Any)

     (type .public <var> (Var <brand>))]

    [SVar Single]
    [PVar Poly]
    [KVar Keyword]
    )

  (.def .public var
    (-> Text SVar)
    (|>> abstraction))

  (with_template [<name> <brand> <prefix>]
    [(.def .public <name>
       (-> SVar (Var <brand>))
       (|>> representation (format <prefix>) abstraction))]

    [poly    Poly    "*"]
    [keyword Keyword "**"]
    )

  (.def .public none
    Literal
    (abstraction "None"))

  (.def .public bool
    (-> Bit Literal)
    (|>> (pipe.when
           #0 "False"
           #1 "True")
         abstraction))

  (.def .public int
    (-> Int Literal)
    (|>> %.int abstraction))

  (.def .public (long value)
    (-> Int Literal)
    (abstraction (format (%.int value) "L")))

  (.def .public float
    (-> Frac Literal)
    (`` (|>> (pipe.cond (,, (with_template [<test> <python>]
                              [[<test>]
                               [(pipe.new (format "float(" text.double_quote <python> text.double_quote ")") [])]]

                              [(f.= f.positive_infinity) "inf"]
                              [(f.= f.negative_infinity) "-inf"]
                              [f.not_a_number? "nan"]
                              ))
                        
                        ... else
                        [%.frac])
             abstraction)))

  (.def safe
    (-> Text Text)
    (`` (|>> (,, (with_template [<find> <replace>]
                   [(text.replaced <find> <replace>)]

                   ["\" "\\"]
                   [text.tab "\t"]
                   [text.vertical_tab "\v"]
                   [text.null "\0"]
                   [text.back_space "\b"]
                   [text.form_feed "\f"]
                   [text.new_line "\n"]
                   [text.carriage_return "\r"]
                   [text.double_quote (format "\" text.double_quote)]
                   ))
             )))

  (.def .public string
    (-> Text Literal)
    (|>> ..safe
         (text.enclosed [text.double_quote text.double_quote])
         abstraction))

  (.def .public unicode
    (-> Text Literal)
    (|>> ..string
         representation
         (format "u")
         abstraction))

  (.def (composite_literal left_delimiter right_delimiter entry_serializer)
    (All (_ a)
      (-> Text Text (-> a Text)
          (-> (List a) Literal)))
    (function (_ entries)
      (<| abstraction
          ... ..expression
          (format left_delimiter
                  (|> entries
                      (list#each (|>> entry_serializer (text.suffix ..input_separator)))
                      text.together)
                  right_delimiter))))

  (with_template [<name> <pre> <post>]
    [(.def .public <name>
       (-> (List (Expression Any)) Literal)
       (composite_literal <pre> <post> ..code))]

    [tuple "(" ")"]
    [list  "[" "]"]
    )

  (.def .public (slice from to list)
    (-> (Expression Any) (Expression Any) (Expression Any) Access)
    (<| abstraction
        ... ..expression
        (format (representation list) "[" (representation from) ":" (representation to) "]")))

  (.def .public (slice_from from list)
    (-> (Expression Any) (Expression Any) Access)
    (<| abstraction
        ... ..expression
        (format (representation list) "[" (representation from) ":]")))

  (.def .public dict
    (-> (List [(Expression Any) (Expression Any)]) (Computation Any))
    (composite_literal "{" "}" (.function (_ [k v]) (format (representation k) " : " (representation v)))))

  (.def .public (apply args func)
    (-> (List (Expression Any)) (Expression Any) (Computation Any))
    (<| abstraction
        ... ..expression
        (format (representation func)
                "("
                (|> args (list#each ..code) (text.interposed ..input_separator))
                ")")))

  (with_template [<name> <brand> <prefix>]
    [(.def .public <name>
       (-> (Expression Any) (Expression Any))
       (|>> representation
            (format <prefix>)
            abstraction))]

    [splat_poly    Poly    "*"]
    [splat_keyword Keyword "**"]
    )

  (.def .public (the name object)
    (-> Text (Expression Any) Access)
    (abstraction (format (representation object) "." name)))

  (.def .public (do method args object)
    (-> Text (List (Expression Any)) (Expression Any) (Computation Any))
    (|> object
        (..the method)
        (..apply args)))

  (.def .public (item idx array)
    (-> (Expression Any) (Expression Any) Access)
    (abstraction (format (representation array) "[" (representation idx) "]")))

  (.def .public (? test then else)
    (-> (Expression Any) (Expression Any) (Expression Any) (Computation Any))
    (<| abstraction
        ..expression
        (format (representation then) " if " (representation test) " else " (representation else))))

  (with_template [<name> <op>]
    [(.def .public (<name> param subject)
       (-> (Expression Any) (Expression Any) (Computation Any))
       (<| abstraction
           ..expression
           (format (representation subject) " " <op> " " (representation param))))]

    [is      "is"]
    [=       "=="]
    [<       "<"]
    [<=      "<="]
    [>       ">"]
    [>=      ">="]
    [+       "+"]
    [-       "-"]
    [*       "*"]
    [/       "/"]
    [//      "//"]
    [%       "%"]
    [**      "**"]
    [bit_or  "|"]
    [bit_and "&"]
    [bit_xor "^"]
    [bit_shl "<<"]
    [bit_shr ">>"]

    [or      "or"]
    [and     "and"]

    [in?     "in"]
    )

  (with_template [<name> <unary>]
    [(.def .public (<name> subject)
       (-> (Expression Any) (Computation Any))
       (<| abstraction
           ... ..expression
           (format <unary> " " (representation subject))))]

    [not "not"]
    [opposite "-"]
    )

  (.def .public (lambda arguments body)
    (-> (List (Var Any)) (Expression Any) (Computation Any))
    (<| abstraction
        ..expression
        (format "lambda " (|> arguments (list#each ..code) (text.interposed ..input_separator))
                ": " (representation body))))

  (.def .public (set vars value)
    (-> (List (Location Any)) (Expression Any) (Statement Any))
    (abstraction
     (format (|> vars (list#each ..code) (text.interposed ..input_separator))
             " = "
             (representation value))))

  (.def .public multi
    (-> (List (Expression Any)) (Expression Any))
    (|>> (list#each ..code)
         (text.interposed ..input_separator)
         abstraction))

  (.def .public (delete where)
    (-> (Location Any) (Statement Any))
    (abstraction (format "del " (representation where))))

  (.def .public (if test then! else!)
    (-> (Expression Any) (Statement Any) (Statement Any) (Statement Any))
    (abstraction
     (format "if " (representation test) ":"
             (..nested (representation then!))
             \n+ "else:"
             (..nested (representation else!)))))

  (.def .public (when test then!)
    (-> (Expression Any) (Statement Any) (Statement Any))
    (abstraction
     (format "if " (representation test) ":"
             (..nested (representation then!)))))

  (.def .public (then pre! post!)
    (-> (Statement Any) (Statement Any) (Statement Any))
    (abstraction
     (format (representation pre!)
             \n+
             (representation post!))))

  (with_template [<keyword> <0>]
    [(.def .public <0>
       (Statement Any)
       (abstraction <keyword>))]

    ["break"    break]
    ["continue" continue]
    )

  (.def .public (while test body! else!)
    (-> (Expression Any) (Statement Any) (Maybe (Statement Any)) Loop)
    (abstraction
     (format "while " (representation test) ":"
             (..nested (representation body!))
             (.when else!
               {.#Some else!}
               (format \n+ "else:"
                       (..nested (representation else!)))
               
               {.#None}
               ""))))

  (.def .public (for_in var inputs body!)
    (-> SVar (Expression Any) (Statement Any) Loop)
    (abstraction
     (format "for " (representation var) " in " (representation inputs) ":"
             (..nested (representation body!)))))

  (.def .public statement
    (-> (Expression Any) (Statement Any))
    (|>> transmutation))

  (.def .public pass
    (Statement Any)
    (abstraction "pass"))

  (type .public Except
    (Record
     [#classes (List Text)
      #exception SVar
      #handler (Statement Any)]))
  
  (.def .public (try body! excepts)
    (-> (Statement Any) (List Except) (Statement Any))
    (abstraction
     (format "try:"
             (..nested (representation body!))
             (|> excepts
                 (list#each (function (_ [classes exception catch!])
                              (format \n+ "except (" (text.interposed ..input_separator classes)
                                      ") as " (representation exception) ":"
                                      (..nested (representation catch!)))))
                 text.together))))

  (with_template [<name> <keyword> <pre>]
    [(.def .public (<name> value)
       (-> (Expression Any) (Statement Any))
       (abstraction
        (format <keyword> (<pre> (representation value)))))]

    [raise  "raise "  |>]
    [return "return " |>]
    [print  "print"   ..expression]
    )

  (.def .public (exec globals code)
    (-> (Maybe (Expression Any)) (Expression Any) (Statement Any))
    (let [extra (.when globals
                  {.#Some globals}
                  (.list globals)

                  {.#None}
                  (.list))]
      (abstraction
       (format "exec" (representation (..tuple (list.partial code extra)))))))

  (.def .public (def name args body)
    (-> SVar (List (Ex (_ k) (Var k))) (Statement Any) (Statement Any))
    (abstraction
     (format "def " (representation name)
             "("
             (|> args (list#each ..code) (text.interposed ..input_separator))
             "):"
             (..nested (representation body)))))

  (.def .public (import module_name)
    (-> Text (Statement Any))
    (abstraction (format "import " module_name)))

  (.def .public (comment commentary on)
    (All (_ brand) (-> Text (Code brand) (Code brand)))
    (abstraction (format "# "  (text.replaced text.\n "\n" commentary) \n+
                         (representation on))))
  )

(.def arity_inputs
  (syntax (_ [arity <code>.nat])
    (in (.when arity
          0 (.list)
          _ (|> (-- arity)
                (enum.range n.enum 0)
                (list#each (|>> %.nat code.local)))))))

(.def arity_types
  (syntax (_ [arity <code>.nat])
    (in (list.repeated arity (` (Expression Any))))))

(with_template [<arity> <function>+]
  [(with_expansions [<inputs> (arity_inputs <arity>)
                     <definitions> (template.spliced <function>+)]
     (with_template [<function>]
       [(`` (.def .public ((,, (template.symbol [<function> "/" <arity>])) <inputs>)
              (-> (,, (arity_types <arity>)) (Computation Any))
              (..apply (.list <inputs>) (..var <function>))))]

       <definitions>))]

  [0
   [["locals"]
    ["globals"]]]

  [1
   [["str"]
    ["ord"]
    ["float"]
    ["int"]
    ["len"]
    ["chr"]
    ["unichr"]
    ["unicode"]
    ["repr"]
    ["__import__"]
    ["Exception"]]]

  [2
   []]

  [3
   []]
  )
