(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" equivalence (.only Equivalence)]]
   [control
    ["[0]" maybe]
    ["[0]" try (.only Try)]]
   [data
    [text
     ["%" \\format]]
    [binary
     [\\format (.only Format)]]]
   [meta
    [type
     ["[0]" primitive (.except def)]]]]]
 ["[0]" /////
  [encoding
   ["[1][0]" unsigned (.only U2)]]])

(primitive.def .public Stack
  U2

  (with_template [<frames> <name>]
    [(def .public <name>
       Stack
       (|> <frames> /////unsigned.u2 maybe.trusted abstraction))]

    [0 empty]
    [1 catch]
    )

  (def .public equivalence
    (Equivalence Stack)
    (at equivalence.functor each
        (|>> representation)
        /////unsigned.equivalence))

  (def .public format
    (Format Stack)
    (|>> representation /////unsigned.format/2))

  (def stack
    (-> U2 Stack)
    (|>> abstraction))

  (with_template [<op> <name>]
    [(def .public (<name> amount)
       (-> U2 (-> Stack (Try Stack)))
       (|>> representation
            (<op> amount)
            (at try.functor each ..stack)))]

    [/////unsigned.+/2 push]
    [/////unsigned.-/2 pop]
    )

  (def .public (max left right)
    (-> Stack Stack Stack)
    (abstraction
     (/////unsigned.max/2 (representation left)
                          (representation right))))

  (def .public text
    (%.Format Stack)
    (|>> representation /////unsigned.value %.nat))
  )

(def .public length
  /////unsigned.bytes/2)
