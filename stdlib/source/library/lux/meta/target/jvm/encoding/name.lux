(.require
 [library
  [lux (.except)
   [data
    ["[0]" text (.only)
     ["%" \\format (.only format)]]]
   [meta
    [type
     ["[0]" primitive (.except def)]]]]])

(def .public internal_separator "/")
(def .public external_separator ".")

(type .public External
  Text)

(primitive.def .public Internal
  Text

  (def .public internal
    (-> External Internal)
    (|>> (text.replaced ..external_separator
                        ..internal_separator)
         abstraction))

  (def .public read
    (-> Internal Text)
    (|>> representation))

  (def .public external
    (-> Internal External)
    (|>> representation
         (text.replaced ..internal_separator
                        ..external_separator))))

(def .public safe
  (-> Text External)
  (|>> ..internal ..external))

(def .public (qualify package class)
  (-> Text External External)
  (format (..safe package) ..external_separator class))
