(.require
 [library
  [lux (.except Tag)
   [abstract
    [equivalence (.only Equivalence)]]
   [control
    ["[0]" try]]
   [data
    [binary
     [\\format (.only Format)]]]
   [meta
    [type
     ["[0]" primitive (.except def)]]]]]
 ["[0]" ///
  [encoding
   ["[1][0]" unsigned (.only U1) (.use "u1//[0]" equivalence)]]])

(primitive.def .public Tag
  U1

  (def .public equivalence
    (Equivalence Tag)
    (implementation
     (def (= reference sample)
       (u1//= (representation reference)
              (representation sample)))))

  (with_template [<code> <name>]
    [(def .public <name>
       Tag
       (|> <code> ///unsigned.u1 try.trusted abstraction))]

    [01 utf8]
    [03 integer]
    [04 float]
    [05 long]
    [06 double]
    [07 class]
    [08 string]
    [09 field]
    [10 method]
    [11 interface_method]
    [12 name_and_type]
    [15 method_handle]
    [16 method_type]
    [18 invoke_dynamic]
    )

  (def .public format
    (Format Tag)
    (|>> representation ///unsigned.format/1))
  )
