... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list
      ["[1]" \\projection]]]]
   [macro (.only with_names)
    ["[0]" syntax]
    ["[0]" template]]
   [meta
    ["[0]" code (.only)
     ["<c>" \\projection (.only Projection)]]]
   ["[0]" target]
   [compiler
    [language
     [lux
      ["[0]" phase]
      ["[0]" analysis (.only)
       ["<a>" \\projection]]
      ["[0]" synthesis (.only)
       ["<s>" \\projection]]
      ["[0]" translation]
      ["[0]" declaration]]]]]])

(.`` (.using
      [library
       [lux
        [target
         (.,, (target.if target.jvm
                         [jvm
                          ["_" bytecode (.only Bytecode)]]

                         ... else
                         [/]))]
        [compiler
         [language
          [lux
           [phase
            [translation
             (.,, (target.if target.jvm
                             ["[0]" jvm
                              ["[1]" runtime]]

                             ... else
                             [/]))]]]]]]]))

(template.with [<name> <extension_type> <handler_type>]
  [(syntax.the .public (<name> [[handler phase archive inputs] (<c>.form (all <>.and
                                                                              <c>.local
                                                                              <c>.local
                                                                              <c>.local
                                                                              (<c>.tuple (<>.some list.any))))
                                body list.any])
     (let ['handler (code.local handler)
           'phase (code.local phase)
           'archive (code.local archive)]
       (with_names ['inputs 'error '_]
         (pure (list (` (<| (as (-> <handler_type>
                                    <extension_type>))
                            (.function ((, 'handler) (, 'phase) (, 'archive) (, 'inputs))
                              (.when (|> (monad.let <>.monad
                                           [(,* inputs)]
                                           (.by <>.monad (,' pure) (, body)))
                                         (list.value (, 'inputs)))
                                {.:Right (, '_)}
                                (, '_)

                                {.:Left (, 'error)}
                                (phase.failure (, 'error)))
                              ))))))))]

  [[analysis .Analysis analysis.Handler]
   [synthesis .Synthesis synthesis.Handler]
   [translation .Translation
    (target.if target.jvm (translation.Handler jvm.Anchor jvm.Value jvm.Declaration)
               target.js (translation.Handler js.Anchor js.Value js.Declaration)
               target.lua (translation.Handler lua.Anchor lua.Value lua.Declaration)
               target.python (translation.Handler python.Anchor python.Value python.Declaration)
               target.ruby (translation.Handler ruby.Anchor ruby.Value ruby.Declaration))]
   [declaration .Declaration
    (target.if target.jvm (declaration.Handler jvm.Anchor jvm.Value jvm.Declaration)
               target.js (declaration.Handler js.Anchor js.Value js.Declaration)
               target.lua (declaration.Handler lua.Anchor lua.Value lua.Declaration)
               target.python (declaration.Handler python.Anchor python.Value python.Declaration)
               target.ruby (declaration.Handler ruby.Anchor ruby.Value ruby.Declaration))]])
