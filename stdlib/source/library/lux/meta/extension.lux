... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.`` (.using
      [library
       [lux (.except)
        [abstract
         ["<>" projection (.use "[1]#[0]" monad)]
         ["[0]" monad]]
        [data
         ["[0]" product]
         [collection
          ["[0]" stack (.use "[1]#[0]" functor)]]]
        [macro (.only with_names)
         ["[0]" syntax]
         ["[0]" template]]
        [meta
         ["[0]" code (.only)
          ["<c>" \\projection (.only Projection)]]
         [compiler
          [target
           (.,, (.for .jvm
                      [jvm
                       ["_" bytecode (.only Bytecode)]]

                      ... else
                      [/]))]
          [language
           [lux
            ["[0]" phase]
            ["[0]" analysis (.only)
             ["<a>" \\projection]]
            ["[0]" synthesis (.only)
             ["<s>" \\projection]]
            ["[0]" translation]
            ["[0]" declaration]
            [phase
             [translation
              (.,, (.for .jvm
                         ["[0]" jvm
                          ["[1]" runtime]]

                         ... else
                         [/]))
              ["[0]" js
               ["[1]" runtime]]
              ["[0]" lua
               ["[1]" runtime]]
              ["[0]" python
               ["[1]" runtime]]
              ["[0]" ruby
               ["[1]" runtime]]]]]]]]]]))

(template.with [<any> <end> <and> <value> <name> <extension_type> <handler_type>]
  [(the .public <name>
     (syntax.macro (_ [[handler phase archive inputs] (<c>.form (all <>.and
                                                                     <c>.local
                                                                     <c>.local
                                                                     <c>.local
                                                                     (<c>.tuple (<>.some <c>.any))))
                       body <c>.any])
       (let ['handler (code.local handler)
             'phase (code.local phase)
             'archive (code.local archive)]
         (with_names ['inputs 'error '_]
           (in (stack (` (<| (as <extension_type>)
                             (is <handler_type>)
                             (.function ((, 'handler) (, 'phase) (, 'archive) (, 'inputs))
                               (.when (<value>
                                       (monad.do <>.monad
                                         [(,* inputs)
                                          (, '_) <end>]
                                         (.by <>.monad (,' in) (, body)))
                                       (, 'inputs))
                                 {.#Right (, '_)}
                                 (, '_)

                                 {.#Left (, 'error)}
                                 (phase.failure (, 'error)))
                               )))))))))]

  [<c>.any <c>.end <c>.and <c>.value analysis .Analysis analysis.Handler]
  [<a>.any <a>.end <a>.and <a>.value synthesis .Synthesis synthesis.Handler]
  [<s>.any <s>.end <s>.and <s>.value translation .Translation
   (for .jvm (translation.Handler jvm.Anchor jvm.Value jvm.Declaration)
        .js (translation.Handler js.Anchor js.Value js.Declaration)
        .lua (translation.Handler lua.Anchor lua.Value lua.Declaration)
        .python (translation.Handler python.Anchor python.Value python.Declaration)
        .ruby (translation.Handler ruby.Anchor ruby.Value ruby.Declaration))]
  [<c>.any <c>.end <c>.and <c>.value declaration .Declaration
   (for .jvm (declaration.Handler jvm.Anchor jvm.Value jvm.Declaration)
        .js (declaration.Handler js.Anchor js.Value js.Declaration)
        .lua (declaration.Handler lua.Anchor lua.Value lua.Declaration)
        .python (declaration.Handler python.Anchor python.Value python.Declaration)
        .ruby (declaration.Handler ruby.Anchor ruby.Value ruby.Declaration))]
  )
