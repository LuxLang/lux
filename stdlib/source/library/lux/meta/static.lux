... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution if when)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [data
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix)
      ["?[1]" \\projection]]]]
   [math
    ["[0]" number]
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.use "[1]:[0]" functor)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(template.with [<name> <type> <injection>]
  [(syntax.the .public (<name> [expression ?list.any])
     (by meta.monad each
         (|>> (as (-> Any <type>))
              <injection>
              list)
         (meta.eval <type> expression)))]

  [[bit .Bit code.bit]
   [natural .Natural code.natural]
   [integer .Integer code.integer]
   [revolution .Revolution code.revolution]
   [decimal .Decimal code.decimal]
   [text .Text code.text]])

(the pcg_32_magic_inc
  (number.base_16 "FEDCBA9876543210"))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          a])]
  (syntax.the .public (literal [injection ?list.any
                                expression ?list.any])
    (monad.let meta.monad
      [pair (meta.eval (type <type>)
                       (` [(, injection) (, expression)]))
       .let [[as_code expression] (as (-> Any <type>) pair)]]
      (pure (list (as_code expression))))))

(expansion.let [<type> (Meta (List Code))]
  (syntax.the .public (expansion [expression ?list.any])
    (monad.let meta.monad
      [expression (meta.eval (type <type>) expression)]
      (as (-> Any <type>) expression))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (List a)])]
  (syntax.the .public (literals [injection ?list.any
                                 expression ?list.any])
    (monad.let meta.monad
      [pair (meta.eval (type <type>)
                       (` [(, injection) (, expression)]))
       .let [[injection expression] (as (-> Any <type>) pair)]]
      (pure (list:each injection expression)))))

(syntax.the .public (seed [])
  (meta:each (|>> code.natural list)
             meta.seed))

(template.with [<name> <random> <injection>]
  [(syntax.the .public (<name> [])
     (monad.let meta.monad
       [seed meta.seed
        .let [[_ value] (random.value random.pcg_32
                                      [random.:increase ..pcg_32_magic_inc
                                       random.:seed seed]
                                      <random>)]]
       (pure (list (<injection> value)))))]

  [[random_bit random.bit code.bit]
   [random_natural random.natural code.natural]
   [random_integer random.integer code.integer]
   [random_revolution random.revolution code.revolution]
   [random_decimal random.decimal code.decimal]])

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random a)])]
  (syntax.the .public (random [injection ?list.any
                               random ?list.any])
    (monad.let meta.monad
      [pair (meta.eval (type <type>)
                       (` [(, injection) (, random)]))
       .let [[injection random] (as (-> Any <type>) pair)]
       seed meta.seed
       .let [[_ value] (random.value random.pcg_32
                                     [random.:increase ..pcg_32_magic_inc
                                      random.:seed seed]
                                     random)]]
      (pure (list (injection value))))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random (List a))])]
  (syntax.the .public (randoms [injection ?list.any
                                random ?list.any])
    (monad.let meta.monad
      [pair (meta.eval (type <type>)
                       (` [(, injection) (, random)]))
       .let [[injection random] (as (-> Any <type>) pair)]
       seed meta.seed
       .let [[_ value] (random.value random.pcg_32
                                     [random.:increase ..pcg_32_magic_inc
                                      random.:seed seed]
                                     random)]]
      (pure (list:each injection value)))))

(syntax.the .public (if [case (<>.or (all <>.and
                                          ?list.any
                                          ?list.any
                                          (<>.many ?list.any))
                                     ?list.any)])
  (.when case
    {.:Right else}
    (pure (list else))

    {.:Left [when then else]}
    (monad.let meta.monad
      [when (meta.eval .Bit when)]
      (pure (list (.if (as (-> Any .Bit) when)
                       then
                       (` (..if (,* else)))))))))

(syntax.the .public (when [test ?list.any
                           then ?list.any])
  (monad.let meta.monad
    [test (meta.eval .Bit test)]
    (pure (.if (as (-> Any .Bit) test)
               (list then)
               (list)))))
