... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except natural integer revolution if when)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [math
    [number (.only hex)]
    ["[0]" random (.only Random)]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" expansion]
     ["[0]" template]]]]])

(template.with [<name> <type> <injection>]
  [(the .public <name>
     (syntax.macro (_ [expression <code>.any])
       (of meta.monad each
           (|>> (as <type>) <injection> list)
           (meta.eval <type> expression))))]

  [bit .Bit code.bit]
  [natural .Natural code.natural]
  [integer .Integer code.integer]
  [revolution .Revolution code.revolution]
  [decimal .Decimal code.decimal]
  [text .Text code.text]
  )

(the pcg_32_magic_inc
  (hex "FEDCBA9876543210"))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          a])]
  (the .public literal
    (syntax.macro (_ [injection <code>.any
                      expression <code>.any])
      (do meta.monad
        [pair (meta.eval (type <type>)
                         (` [(, injection) (, expression)]))
         .let [[injection expression] (as <type> pair)]]
        (in (list (injection expression)))))))

(expansion.let [<type> (Meta (List Code))]
  (the .public expansion
    (syntax.macro (_ [expression <code>.any])
      (do meta.monad
        [expression (meta.eval (type <type>) expression)]
        (as <type> expression)))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (List a)])]
  (the .public literals
    (syntax.macro (_ [injection <code>.any
                      expression <code>.any])
      (do meta.monad
        [pair (meta.eval (type <type>)
                         (` [(, injection) (, expression)]))
         .let [[injection expression] (as <type> pair)]]
        (in (list#each injection expression))))))

(the .public seed
  (syntax.macro (_ [])
    (meta#each (|>> code.natural list) meta.seed)))

(template.with [<name> <random> <injection>]
  [(the .public <name>
     (syntax.macro (_ [])
       (do meta.monad
         [seed meta.seed
          .let [[_ value] (random.value random.pcg_32
                                        [random.#increase ..pcg_32_magic_inc
                                         random.#seed seed]
                                        <random>)]]
         (in (list (<injection> value))))))]

  [random_bit random.bit code.bit]
  [random_natural random.natural code.natural]
  [random_integer random.integer code.integer]
  [random_revolution random.revolution code.revolution]
  [random_decimal random.decimal code.decimal]
  )

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random a)])]
  (the .public random
    (syntax.macro (_ [injection <code>.any
                      random <code>.any])
      (do meta.monad
        [pair (meta.eval (type <type>)
                         (` [(, injection) (, random)]))
         .let [[injection random] (as <type> pair)]
         seed meta.seed
         .let [[_ value] (random.value random.pcg_32
                                       [random.#increase ..pcg_32_magic_inc
                                        random.#seed seed]
                                       random)]]
        (in (list (injection value)))))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random (List a))])]
  (the .public randoms
    (syntax.macro (_ [injection <code>.any
                      random <code>.any])
      (do meta.monad
        [pair (meta.eval (type <type>)
                         (` [(, injection) (, random)]))
         .let [[injection random] (as <type> pair)]
         seed meta.seed
         .let [[_ value] (random.value random.pcg_32
                                       [random.#increase ..pcg_32_magic_inc
                                        random.#seed seed]
                                       random)]]
        (in (list#each injection value))))))

(the .public if
  (syntax.macro (_ [case (<>.or (all <>.and
                                     <code>.any
                                     <code>.any
                                     (<>.many <code>.any))
                                <code>.any)])
    (.when case
      {.#Right else}
      (in (list else))

      {.#Left [when then else]}
      (do meta.monad
        [when (meta.eval .Bit when)]
        (in (list (.if (as .Bit when)
                    then
                    (` (..if (,* else))))))))))

(the .public when
  (syntax.macro (_ [test <code>.any
                    then <code>.any])
    (do meta.monad
      [test (meta.eval .Bit test)]
      (in (.if (as .Bit test)
            (list then)
            (list))))))
