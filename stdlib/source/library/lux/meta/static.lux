... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution if when)
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" stack (.use "[1]#[0]" functor mix)]]]
   [math
    [number (.only hex)]
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" syntax]
    ["[0]" expansion]
    ["[0]" template]]
   ["[0]" meta (.use "[1]#[0]" functor)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(template.with [<name> <type> <injection>]
  [(the .public <name>
     (syntax.old_macro (_ [expression <code>.any])
                       (by meta.monad each
                           (|>> (as <type>) <injection> stack)
                           (meta.eval <type> expression))))]

  [bit .Bit code.bit]
  [natural .Natural code.natural]
  [integer .Integer code.integer]
  [revolution .Revolution code.revolution]
  [decimal .Decimal code.decimal]
  [text .Text code.text]
  )

(the pcg_32_magic_inc
  (hex "FEDCBA9876543210"))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          a])]
  (the .public literal
    (syntax.old_macro (_ [injection <code>.any
                          expression <code>.any])
                      (do meta.monad
                        [pair (meta.eval (type <type>)
                                         (` [(, injection) (, expression)]))
                         .let [[as_code expression] (as <type> pair)]]
                        (in (stack (as_code expression)))))))

(expansion.let [<type> (Meta (Stack Code))]
  (the .public expansion
    (syntax.old_macro (_ [expression <code>.any])
                      (do meta.monad
                        [expression (meta.eval (type <type>) expression)]
                        (as <type> expression)))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Stack a)])]
  (the .public literals
    (syntax.old_macro (_ [injection <code>.any
                          expression <code>.any])
                      (do meta.monad
                        [pair (meta.eval (type <type>)
                                         (` [(, injection) (, expression)]))
                         .let [[injection expression] (as <type> pair)]]
                        (in (stack#each injection expression))))))

(the .public seed
  (syntax.old_macro (_ [])
                    (meta#each (|>> code.natural stack)
                               meta.seed)))

(template.with [<name> <random> <injection>]
  [(the .public <name>
     (syntax.old_macro (_ [])
                       (do meta.monad
                         [seed meta.seed
                          .let [[_ value] (random.value random.pcg_32
                                                        [random.#increase ..pcg_32_magic_inc
                                                         random.#seed seed]
                                                        <random>)]]
                         (in (stack (<injection> value))))))]

  [random_bit random.bit code.bit]
  [random_natural random.natural code.natural]
  [random_integer random.integer code.integer]
  [random_revolution random.revolution code.revolution]
  [random_decimal random.decimal code.decimal]
  )

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random a)])]
  (the .public random
    (syntax.old_macro (_ [injection <code>.any
                          random <code>.any])
                      (do meta.monad
                        [pair (meta.eval (type <type>)
                                         (` [(, injection) (, random)]))
                         .let [[injection random] (as <type> pair)]
                         seed meta.seed
                         .let [[_ value] (random.value random.pcg_32
                                                       [random.#increase ..pcg_32_magic_inc
                                                        random.#seed seed]
                                                       random)]]
                        (in (stack (injection value)))))))

(expansion.let [<type> (for_some (_ a)
                         [(-> a Code)
                          (Random (Stack a))])]
  (the .public randoms
    (syntax.old_macro (_ [injection <code>.any
                          random <code>.any])
                      (do meta.monad
                        [pair (meta.eval (type <type>)
                                         (` [(, injection) (, random)]))
                         .let [[injection random] (as <type> pair)]
                         seed meta.seed
                         .let [[_ value] (random.value random.pcg_32
                                                       [random.#increase ..pcg_32_magic_inc
                                                        random.#seed seed]
                                                       random)]]
                        (in (stack#each injection value))))))

(the .public if
  (syntax.old_macro (_ [case (<>.or (all <>.and
                                         <code>.any
                                         <code>.any
                                         (<>.many <code>.any))
                                    <code>.any)])
                    (.when case
                      {.#Right else}
                      (in (stack else))

                      {.#Left [when then else]}
                      (do meta.monad
                        [when (meta.eval .Bit when)]
                        (in (stack (.if (as .Bit when)
                                     then
                                     (` (..if (,* (list.as_stack else)))))))))))

(the .public when
  (syntax.old_macro (_ [test <code>.any
                        then <code>.any])
                    (do meta.monad
                      [test (meta.eval .Bit test)]
                      (in (.if (as .Bit test)
                            (stack then)
                            (stack))))))
