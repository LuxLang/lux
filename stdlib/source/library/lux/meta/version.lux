(.using
 [library
  [lux {"-" for}
   ["[0]" meta]
   [abstract
    [monad {"+" do}]]
   [control
    ["[0]" exception {"+" exception:}]
    ["<>" parser
     ["<[0]>" code]]]
   [data
    ["[0]" text ("[1]#[0]" equivalence)]
    [collection
     ["[0]" list ("[1]#[0]" mix)]]]
   [macro
    [syntax {"+" syntax:}]
    ["[0]" code]]
   [tool
    [compiler
     [version {"+" Version}]]]]])

(def: .public latest
  Version
  00,06,06)

(syntax: .public (current [])
  (do meta.monad
    [it meta.version]
    (in (list (code.text it)))))

(exception: .public invalid)

(syntax: .public (for [specializations (<>.some (<>.and <code>.text <code>.any))
                       default (<>.maybe <code>.any)])
  (do meta.monad
    [current meta.version]
    (case (list#mix (function (_ [when then] choice)
                      (if (text#= when current)
                        {.#Some then}
                        choice))
                    default
                    specializations)
      {.#Some it}
      (in (list it))
      
      {.#None}
      (meta.failure (exception.error ..invalid [])))))
