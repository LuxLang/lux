... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except type all)
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["n" natural]]]]]
 ["[0]" /// (.only)
  ["[0]" provenance]])

(the with_template' (.in_module# .prelude .with_template))

(the (type_variable idx bindings)
  (-> Natural (Stack [Natural (Maybe Type)])
      (Maybe Type))
  (when bindings
    {.#Empty}
    {.#None}
    
    {.#Top [var bound] bindings'}
    (if (n.= idx var)
      bound
      (type_variable idx bindings'))))

(`` (the (clean_type type)
      (-> Type
          (Meta Type))
      (when type
        {.#Variable var}
        (function (_ lux)
          (when (|> lux
                    (its [.#type_context .#var_bindings])
                    (type_variable var))
            (,, (with_template' [<pattern>]
                  [<pattern>
                   {try.#Success [lux type]}]

                  [{.#None}]
                  [{.#Some {.#Variable _}}]))
            

            {.#Some type'}
            {try.#Success [lux type']}))

        _
        (by ///.monad in type))))

(the (on_either f x1 x2)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) input input
        (Maybe output)))
  (when (f x1)
    {.#None}
    (f x2)
    
    some
    some))

(the .public (type name)
  (-> Text
      (Meta Type))
  (function (_ lux)
    (let [test (is (-> [Text [Type Any]] Bit)
                   (|>> product.left
                        (text.= name)))]
      (when (do maybe.monad
              [scope (stack.example (function (_ env)
                                      (.or (stack.any? test (is (Stack [Text [Type Any]])
                                                                (its [.#locals .#mappings] env)))
                                           (stack.any? test (is (Stack [Text [Type Any]])
                                                                (its [.#captured .#mappings] env)))))
                                    (its .#scopes lux))
               [_ [type _]] (on_either (stack.example test)
                                       (is (Stack [Text [Type Any]])
                                           (its [.#locals .#mappings] scope))
                                       (is (Stack [Text [Type Any]])
                                           (its [.#captured .#mappings] scope)))]
              (in type))
        {.#Some type}
        ((clean_type type) lux)

        {.#None}
        {try.#Failure (.all text#composite "Unknown variable: " name)}))))

(the .public no_environment
  Error
  (provenance.with (provenance.here)
    "No local environment."))

(the .public all
  (Meta (Stack (Stack [Text Type])))
  (function (_ lux)
    (when (stack.inits (its .#scopes lux))
      {try.#Success scopes}
      {try.#Success [lux
                     (stack#each (|>> (its [.#locals .#mappings])
                                      (stack#each (function (_ [name [type _]])
                                                    [name type])))
                                 scopes)]}

      {try.#Failure error}
      {try.#Failure ..no_environment})))
