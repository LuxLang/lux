... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name type all)
   [abstract
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property]]]]
   [math
    [number
     [/64
      ["n" natural]]]]]]
 ["[0]" ///])

(every .public Name
  Text)

(the with_template (.in_module# .prelude with_template))
(the type_variable (.in_module# .prelude type_variable))

(`` (the (clean_type type)
      (-> Type
          (Meta Type))
      (when type
        {.#Variable var}
        (function (_ lux)
          (when (|> lux
                    (its [.#type_context .#var_bindings])
                    (type_variable var))
            (,, (with_template [<pattern>]
                  [<pattern>
                   {try.#Success [lux type]}]

                  [[{.#None}]
                   [{.#Some {.#Variable _}}]]
                  ))
            

            {.#Some type'}
            {try.#Success [lux type']}))

        _
        (by ///.monad pure type))))

(the (on_either f x1 x2)
  (for_any (_ input output)
    (-> (-> input (Maybe output)) input input
        (Maybe output)))
  (when (f x1)
    {.#None}
    (f x2)
    
    some
    some))

(the .public (type name)
  (-> Name
      (Meta Type))
  (function (_ lux)
    (let [test (is (-> [Name [Type Any]] Bit)
                   (|>> product.left
                        (text.= name)))]
      (when (monad.let maybe.monad
              [scope (stack.example (function (_ env)
                                      (.or (list.any? test (is (property.List [Type Any])
                                                               (its [.#locals .#mappings] env)))
                                           (list.any? test (is (property.List [Type Any])
                                                               (its [.#captured .#mappings] env)))))
                                    (its .#scopes lux))
               [_ [type _]] (on_either (list.example test)
                                       (is (property.List [Type Any])
                                           (its [.#locals .#mappings] scope))
                                       (is (property.List [Type Any])
                                           (its [.#captured .#mappings] scope)))]
              (pure type))
        {.#Some type}
        ((clean_type type) lux)

        {.#None}
        {try.#Failure (text "Unknown variable: " name)}))))

(the .public all
  (Meta (Stack (property.List Type)))
  (function (_ lux)
    {try.#Success [lux
                   (|> lux
                       (its .#scopes)
                       (stack#each (|>> (its [.#locals .#mappings])
                                        (list#each (function (_ [name [type _]])
                                                     [name type])))))]}))
