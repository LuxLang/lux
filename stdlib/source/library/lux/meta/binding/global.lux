... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name with)
   [abstract
    [monad (.only do)]
    ["?" projection]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" product]
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]
      ["[0]" property]]]]
   ["[0]" macro (.only)
    ["[0]" syntax]]
   ["[0]" meta (.only)
    ["[0]" module]
    ["[0]" code (.only)
     ["?[1]" \\projection]]]]]
 [//
  ["[0]" local]])

(every .public Name
  [module.Name local.Name])

(the with_replacement
  (syntax.macro (_ [[module proper] ?code.global
                    local ?code.local
                    hidden ?code.local])
    (do meta.monad
      [[here _] module.current
       _ (is (Meta Any)
             (function (_ lux)
               {.#Right [(|> lux
                             (revised .#modules
                                      (is (Change (property.List .Module))
                                          (property.revised module (is (Change .Module)
                                                                       (function (_ module)
                                                                         (|> (do maybe.monad
                                                                               [global (property.value proper (its .#definitions module))]
                                                                               (pure (revised .#definitions
                                                                                              (|>> (property.has proper [false {.#Alias [here local]}])
                                                                                                   (property.has hidden global))
                                                                                              module)))
                                                                             (maybe.else module)))))))
                             (is Lux))
                         []]}))]
      (pure (list)))))

(the without_replacement
  (syntax.macro (_ [[module proper] ?code.global
                    hidden ?code.local])
    (do meta.monad
      [_ (is (Meta Any)
             (function (_ lux)
               {.#Right [(|> lux
                             (revised .#modules
                                      (is (Change (property.List .Module))
                                          (property.revised module (is (Change .Module)
                                                                       (function (_ module)
                                                                         (|> (do maybe.monad
                                                                               [global (property.value hidden (its .#definitions module))]
                                                                               (pure (revised .#definitions
                                                                                              (|>> (property.has proper global)
                                                                                                   (property.lacks hidden))
                                                                                              module)))
                                                                             (maybe.else module)))))))
                             (is Lux))
                         []]}))]
      (pure (list)))))

(the .public with
  (syntax.macro (_ [replacements (?code.tuple (?.some (?.and ?code.global ?list.any)))
                    declarations (?.some ?list.any)])
    (when (list.reversed replacements)
      (list)
      (pure declarations)

      (list [global value])
      (do [! meta.monad]
        ['local (macro.name "'local")
         'hidden (macro.name "'hidden")
         .let [[@ _] (name .._)]]
        (pure (list (` (the (, 'local)
                         (type_of (, (code.name global)))
                         (, value)))
                    (` ((.in_module# (, (code.text @)) ..with_replacement) (, (code.name global)) (, 'local) (, 'hidden)))
                    (` (these (,* declarations)))
                    (` ((.in_module# (, (code.text @)) ..without_replacement) (, (code.name global)) (, 'hidden))))))

      many
      (pure (list.mix (function (_ [global re_definition] body)
                        (list (` (..with [(, (code.name global)) (, re_definition)]
                                   (,* body)))))
                      declarations
                      many)))))
