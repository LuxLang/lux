(.require
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" parser]
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list]]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["</>" \\parser (.only Parser)]]]]]
 ["[0]" // (.only with_symbols)])

(def (self_documenting binding parser)
  (All (_ a) (-> Code (Parser a) (Parser a)))
  (function (_ tokens)
    (case (parser tokens)
      {try.#Failure error}
      {try.#Failure (all text#composite
                         "Failed to parse: " (code.format binding) text.new_line
                         error)}

      success
      success)))

(def (un_paired pairs)
  (All (_ a) (-> (List [a a]) (List a)))
  (case pairs
    {.#Item [x y] pairs'}
    (list.partial x y (un_paired pairs'))

    {.#End}
    {.#End}))

(def syntaxP
  (Parser [[Text (Maybe Text) (List Code)] Code])
  (all <>.and
       (</>.form (all <>.and
                      </>.local
                      (<>.maybe </>.local)
                      (</>.tuple (<>.some </>.any))))
       </>.any))

(def .public syntax
  (macro (_ tokens)
    (case (</>.result ..syntaxP tokens)
      {try.#Success [[name g!state args] body]}
      (with_symbols [g!tokens g!body g!error]
        (do [! meta.monad]
          [vars+parsers (case (list.pairs args)
                          {.#Some args}
                          (monad.each !
                                      (is (-> [Code Code] (Meta [Code Code]))
                                          (function (_ [var parser])
                                            (with_expansions [<default> (in [var
                                                                             (` ((,! ..self_documenting) (' (, var))
                                                                                 (, parser)))])]
                                              (case var
                                                [_ {.#Symbol ["" _]}]
                                                <default>

                                                [_ {.#Symbol _}]
                                                (in [var parser])

                                                _
                                                <default>))))
                                      args)

                          _
                          (meta.failure "Syntax pattern expects pairs of bindings and code-parsers."))
           g!state (case g!state
                     {.#Some g!state}
                     (in (code.local g!state))

                     {.#None}
                     (//.symbol "g!state"))
           this_module meta.current_module_name
           .let [g!name (code.symbol ["" name])]]
          (in (list (` (.macro ((, g!name) (, g!tokens) (, g!state))
                         (.case ((,! </>.result)
                                 (is ((,! </>.Parser) (Meta (List Code)))
                                     ((,! do) (,! <>.monad)
                                      [(,* (..un_paired vars+parsers))]
                                      (.at (,! <>.monad) (,' in)
                                           (is (Meta (List Code))
                                               (, body)))))
                                 (, g!tokens))
                           {try.#Success (, g!body)}
                           ((, g!body) (, g!state))

                           {try.#Failure (, g!error)}
                           {try.#Failure ((,! text.interposed) (,! text.new_line) (list "Invalid syntax:" (, g!error)))})))))))
      
      {try.#Failure error}
      (meta.failure (//.wrong_syntax_error (symbol ..syntax))))))
