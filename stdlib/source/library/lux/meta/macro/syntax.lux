... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except bindings_must_be_pairs)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" try]]
   [data
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" code (.only)
     ["</>" \\projection (.only Projection)]]]]]
 ["[0]" // (.only with_symbols)])

(the .public (self_documenting binding projection)
  (for_any (_ a)
    (-> Code (Projection a)
        (Projection a)))
  (function (_ tokens)
    (when (projection tokens)
      {try.#Failure error}
      {try.#Failure (all text#composite
                         "Failed to parse: " (code.absolute binding) text.new_line
                         error)}

      success
      success)))

(the (un_paired pairs)
  (for_any (_ a)
    (-> (List [a a])
        (List a)))
  (when pairs
    {.#Item [x y] pairs'}
    (list.partial x y (un_paired pairs'))

    {.#End}
    {.#End}))

(the syntaxP
  (Projection [[Text (Maybe Text) (List Code)] Code])
  (all <>.and
       (</>.form (all <>.and
                      </>.local
                      (<>.maybe </>.local)
                      (</>.tuple (<>.some </>.any))))
       </>.any))

(the .public bindings_must_be_pairs
  Error
  (location.with (location.here)
    .bindings_must_be_pairs))

(the .public syntax
  (macro (_ tokens)
    (when (</>.value ..syntaxP tokens)
      {try.#Success [[name g!state args] body]}
      (with_symbols [g!tokens g!body g!error]
        (do [! meta.monad]
          [vars+projections (when (list.pairs args)
                              {try.#Success args}
                              (monad.each !
                                          (is (-> [Code Code] (Meta [Code Code]))
                                              (function (_ [var projection])
                                                (with_expansions [<default> (in [var
                                                                                 (` (..self_documenting (' (, var))
                                                                                                        (, projection)))])]
                                                  (when var
                                                    [_ {.#Symbol ["" _]}]
                                                    <default>

                                                    [_ {.#Symbol _}]
                                                    (in [var projection])

                                                    _
                                                    <default>))))
                                          args)

                              _
                              (meta.failure ..bindings_must_be_pairs))
           g!state (when g!state
                     {.#Some g!state}
                     (in (code.local g!state))

                     {.#None}
                     (//.symbol "g!state"))
           this_module meta.current_module_name
           .let [g!name (code.symbol ["" name])]]
          (in (list (` (.macro ((, g!name) (, g!tokens) (, g!state))
                         (.when (</>.value
                                 (is (</>.Projection (Meta (List Code)))
                                     (do <>.monad
                                       [(,* (..un_paired vars+projections))]
                                       (.of <>.monad (,' in)
                                            (is (Meta (List Code))
                                                (, body)))))
                                 (, g!tokens))
                           {try.#Success (, g!body)}
                           ((, g!body) (, g!state))

                           {try.#Failure (, g!error)}
                           {try.#Failure (text.interposed text.new_line (list "Invalid syntax:" (, g!error)))})))))))
      
      {try.#Failure error}
      (meta.failure .wrong_syntax))))
