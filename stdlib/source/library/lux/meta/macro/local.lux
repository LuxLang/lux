... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except with let)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["[0]" property]]]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 ["[0]" // (.only)
  ["[0]" syntax]])

(the with_template' (.in_module# .prelude .with_template))

(exception.the .public (unknown_module module)
  (Exception Text)
  (exception.report
   (list ["Module" (text.injection module)])))

(with_template' [<name>]
  [(exception.the .public (<name> [module definition])
     (Exception [Text Text])
     (exception.report
      (list ["Module" (text.injection module)]
            ["Definition" (text.injection definition)])))]

  [cannot_shadow_definition]
  [unknown_definition]
  )

(the (with_module name body)
  (for_any (_ of)
    (-> Text (-> Module (Try [Module of]))
        (Meta of)))
  (function (_ compiler)
    (when (|> compiler
              (its .#modules)
              (property.value name))
      {try.#Success module}
      (when (body module)
        {try.#Success [module' output]}
        {try.#Success [(revised .#modules (property.has name module') compiler)
                       output]}
        
        {try.#Failure error}
        {try.#Failure error})

      failure
      (exception.except ..unknown_module [name]))))

(the (push_one [name macro])
  (-> [Symbol Macro]
      (Meta Any))
  (do meta.monad
    [[module_name definition_name] (binding.normal name)
     .let [definition (is Global {.#Definition [.Macro macro]})
           add_macro! (is (-> (property.List [Bit Global]) (property.List [Bit Global]))
                          (property.has definition_name [false definition]))]]
    (..with_module module_name
      (function (_ module)
        (when (|> module
                  (its .#definitions)
                  (property.value definition_name))
          {try.#Success _}
          (exception.except ..cannot_shadow_definition [module_name definition_name])

          failure
          {try.#Success [(revised .#definitions add_macro! module)
                         []]})))))

(the (pop_one name)
  (-> Symbol
      (Meta Any))
  (do meta.monad
    [[module_name definition_name] (binding.normal name)
     .let [lacks_macro! (is (-> (property.List [Bit Global]) (property.List [Bit Global]))
                            (property.lacks definition_name))]]
    (..with_module module_name
      (function (_ module)
        (when (|> module
                  (its .#definitions)
                  (property.value definition_name))
          {try.#Success _}
          {try.#Success [(revised .#definitions lacks_macro! module)
                         []]}

          failure
          (exception.except ..unknown_definition [module_name definition_name]))))))

(the (pop_all macros self)
  (-> (List Symbol) Symbol
      Macro)
  (//.macro
    (function (_ _)
      (do [! meta.monad]
        [_ (monad.each ! ..pop_one macros)
         _ (..pop_one self)
         compiler meta.compiler_state]
        (in (when (its .#expected compiler)
              {.#Some _}
              (list (' []))
              
              {.#None}
              (list)))))))

(the .public (push macros)
  (-> (List [Symbol Macro])
      (Meta Code))
  (do meta.monad
    [_ (monad.each meta.monad ..push_one macros)
     seed meta.seed
     g!pop (//.symbol "pop")
     _ (.let [g!pop (is Symbol
                        ["" (code.absolute g!pop)])]
         (..push_one [g!pop (..pop_all (list#each product.left macros) g!pop)]))]
    (in (` ((, g!pop))))))

(the .public (with macros expression? body)
  (-> (List [Symbol Macro]) Bit Code
      (Meta (List Code)))
  (do [! meta.monad]
    [g!pop (..push macros)]
    (.if expression?
      (//.with_symbols [g!body]
        (in (list (` (.let [(, g!body) (, body)]
                       (exec
                         (, g!pop)
                         (, g!body)))))))
      (in (list body
                g!pop)))))

(the .public let
  (syntax.macro (_ [locals (<code>.tuple (<>.some (<>.and <code>.local <code>.any)))
                    body <code>.any])
    (do [! meta.monad]
      [here meta.current_module_name
       locals (monad.each ! (function (_ [name value])
                              (|> value
                                  (meta.eval .Macro)
                                  (of ! each (|>> (as .Macro)
                                                  [[here name]]))))
                          locals)
       expression? (is (Meta Bit)
                       (function (_ lux)
                         {try.#Success [lux (when (its .#expected lux)
                                              {.#None}
                                              false

                                              {.#Some _}
                                              true)]}))]
      (..with locals expression? body))))
