... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Not everything is an expression](https://codewords.recurse.com/issues/two/not-everything-is-an-expression)
(.require
 [library
  [lux (.except local)
   [abstract
    [monad (.only do)]]
   [control
    ["?" projection (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]]]
 ["[0]" // (.only)
  [syntax (.only syntax)
   ["[0]" export]]
  ["/[1]" // (.only)
   ["[0]" code (.only)
    ["?[1]" \\projection (.only Projection)]]
   ["[0]" type (.only)
    ["[0]" nominal]]]])

(exception.the .public (invalid_type [expected actual])
  (Exception [Type Type])
  (exception.report
   (list ["Expected" (type.absolute_injection expected)]
         ["Actual" (type.absolute_injection actual)])))

(.the local
  (Projection [Code Code])
  (?code.tuple (export.with (?#each code.local ?code.local))))

(.the .public def
  (syntax (_ [[public|private@type type] ..local
              [public|private@micro micro] ..local
              [public|private@macro macro] ..local
              [public|private@by_name by_name] ..local])
    (//.with_symbols [g!_ g!type g!value]
      (in (list (` (nominal.every (, public|private@type) (, type)
                     Macro

                     (.the (, public|private@micro) (, micro)
                       (-> Macro (, type))
                       (|>> nominal.abstraction))

                     (.the (, public|private@macro) (, macro)
                       (-> (, type) Macro)
                       (|>> nominal.representation))))

                (` (.the (, public|private@by_name) ((, by_name) (, g!_))
                     (-> Symbol (Meta Macro))
                     (do ///.monad
                       [[(, g!type) (, g!value)] (///.export (, g!_))]
                       (if (of type.equivalence (,' =) (, type) (, g!type))
                         ((,' in) ((, macro) (as (, type) (, g!value))))
                         (///.failure (exception.error ..invalid_type [(, type) (, g!type)])))))))))))
