... [Not everything is an expression](https://codewords.recurse.com/issues/two/not-everything-is-an-expression)

(.require
 [library
  [lux (.except local)
   [abstract
    [monad (.only do)]]
   [control
    ["?" parser (.use "[1]#[0]" functor)]
    ["[0]" exception (.only exception)]]]]
 ["[0]" // (.only)
  [syntax (.only syntax)
   ["[0]" export]]
  ["/[1]" // (.only)
   ["[0]" code (.only)
    ["?[1]" \\parser (.only Parser)]]
   ["[0]" type (.only)
    [primitive (.except)]]]])

(exception .public (invalid_type [expected Type
                                  actual Type])
  (exception.report
   (list ["Expected" (type.format expected)]
         ["Actual" (type.format actual)])))

(def local
  (Parser [Code Code])
  (?code.tuple (export.parser (?#each code.local ?code.local))))

(def .public vocabulary
  (syntax (_ [[public|private@type type] ..local
              [public|private@micro micro] ..local
              [public|private@macro macro] ..local
              [public|private@by_name by_name] ..local])
    (//.with_symbols [g!_ g!type g!value]
      (in (list (` ((,! primitive) (, public|private@type) (, type)
                    Macro

                    (def (, public|private@micro) (, micro)
                      (-> Macro (, type))
                      (|>> ((,! abstraction))))

                    (def (, public|private@macro) (, macro)
                      (-> (, type) Macro)
                      (|>> ((,! representation))))))

                (` (def (, public|private@by_name) ((, by_name) (, g!_))
                     (-> Symbol (Meta Macro))
                     ((,! do) (,! ///.monad)
                      [[(, g!_) (, g!type) (, g!value)] ((,! ///.export) (, g!_))]
                      (if (at (,! type.equivalence) (,' =) (, type) (, g!type))
                        ((,' in) ((, macro) (as (, type) (, g!value))))
                        ((,! ///.failure) ((,! exception.error) ..invalid_type [(, type) (, g!type)])))))))))))
