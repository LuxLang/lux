... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except UnQuote unquote unquote_macro
                Spliced_UnQuote spliced_unquote spliced_unquote_macro
                or let |>
                ` , ,*)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["[0]" maybe]
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" monoid monad mix)]]]]]
 ["[0]" // (.only with_symbols)
  ["[0]" vocabulary]
  ["[0]" expansion]
  ["/[1]" // (.use "[1]#[0]" monad)]])

(the with_template' (.in_module# .prelude .with_template))

(the locally
  (macro (_ tokens lux)
    (.let [[prelude _] (symbol ._)]
      (when tokens
        (list [@ {.#Symbol ["" name]}])
        {.#Right [lux (list (.` (.in_module# (., [@ {.#Text prelude}])
                                             (., [@ {.#Symbol [prelude name]}]))))]}

        _
        {.#Left ""}))))

(with_template' [<name>]
  [(the <name> (..locally <name>))]

  [function#composite]

  [Replacement_Environment]
  [realized_template]
  [replacement_environment]

  [symbol_short]
  [tuple_list]

  [as_text]
  [type_definition]
  [record_slots]
  [text#composite]
  [type#injection]
  [module_alias]
  [zipped_2]

  [type_code]
  [expected_type]

  [as_local]

  [untemplated_list]
  [as_bit]
  [as_nat]
  [as_int]
  [as_rev]
  [as_dec]

  [one_expansion]
  )

(the .public or
  (pattern
   (macro (_ tokens)
     (when tokens
       (list.partial [_ {.#Form patterns}] body branches)
       (when patterns
         {.#End}
         (///.failure .wrong_syntax)

         _
         (.let [pairs (.|> patterns
                           (list#each (function (_ pattern) (list pattern body)))
                           list#conjoint)]
           (///#in (list#composite pairs branches))))
       _
       (///.failure .wrong_syntax)))))

(every Level
  [Code Code])

(the (level it)
  (-> Code (Meta Level))
  (///#in (when it
            [_ {.#Tuple (list expr binding)}]
            [expr binding]

            _
            [it (.` #1)])))

(every Multi
  [Code (List Level)])

(the .public empty_multi-level
  Error
  "Multi-level patterns cannot be empty.")

(the (multiP levels)
  (-> (List Code) (Meta Multi))
  (when levels
    {.#End}
    (///.failure ..empty_multi-level)

    {.#Item init extras}
    (do ///.monad
      [extras' (monad.each ///.monad ..level extras)]
      (in [init extras']))))

(the (multiG '_ [[init_pattern levels] body])
  (-> Code [Multi Code] (List Code))
  (.let [inner_pattern_body (list#mix (function (_ [calculation pattern] success)
                                        (.let [bind? (when pattern
                                                       [_ {.#Symbol _}]
                                                       true

                                                       _
                                                       false)]
                                          (.` (when (., calculation)
                                                (., pattern)
                                                (., success)

                                                (.,* (if bind?
                                                       (list)
                                                       (list '_ (.` {.#None}))))))))
                                      (.` {.#Some (., body)})
                                      (list.reversed levels))]
    (list init_pattern inner_pattern_body)))

(the .public multi
  (pattern
   (macro (_ tokens)
     (when tokens
       (list.partial [_meta {.#Form levels}] body next_branches)
       (with_symbols ['temp]
         (do ///.monad
           [mlc (multiP levels)
            .let [initial_bind? (when mlc
                                  [[_ {.#Symbol _}] _]
                                  true

                                  _
                                  false)]
            expected ..expected_type]
           (in (list 'temp
                     (.` (.when (.is# {.#Apply (., (type_code expected)) Maybe}
                                      (.when (., 'temp)
                                        (.,* (multiG 'temp [mlc body]))

                                        (.,* (if initial_bind?
                                               (list)
                                               (list 'temp (.` {.#None}))))))
                           {.#Some (., 'temp)}
                           (., 'temp)

                           {.#None}
                           (.when (., 'temp)
                             (.,* next_branches))))))))
       
       _
       (///.failure .wrong_syntax)))))

(the .public let
  (pattern
   (macro (_ tokens)
     (when tokens
       (list.partial [_meta {.#Form (list [_ {.#Symbol ["" name]}] pattern)}] body branches)
       (.let ['whole (as_local name)]
         (///#in (list.partial 'whole
                               (.` (when (., 'whole) (., pattern) (., body)))
                               branches)))
       
       _
       (///.failure .wrong_syntax)))))

(the .public |>
  (pattern
   (macro (_ tokens)
     (when tokens
       (list.partial [_meta {.#Form (list [_ {.#Symbol ["" name]}] [_ {.#Tuple steps}])}] body branches)
       (.let ['name (as_local name)]
         (///#in (list.partial 'name
                               (.` (.let [(., 'name) (.|> (., 'name) (.,* steps))]
                                     (., body)))
                               branches)))
       
       _
       (///.failure .wrong_syntax)))))

(the (name$ [module name])
  (-> Symbol Code)
  (.` [(., (as_text module)) (., (as_text name))]))

(the (untemplated_partial_list last inits)
  (-> Code (List Code) Code)
  (when inits
    {.#End}
    last

    {.#Item [init inits']}
    (.` {.#Item (., init) (., (untemplated_partial_list last inits'))})))

(vocabulary.def
 [.public Spliced_UnQuote]
 [.public spliced_unquote]
 [.public spliced_unquote_macro]
 [.private named_spliced_unquote])

(the (untemplated_composite <tag> 'meta untemplated_pattern elems)
  (-> Code Code (-> Code (Meta Code))
      (-> (List Code) (Meta Code)))
  (expansion.let [<default> (do ///.monad
                              [=elems (monad.each ///.monad untemplated_pattern elems)]
                              (in (.` [(., 'meta) {(., <tag>) (., (untemplated_list =elems))}])))]
    (when (list.reversed elems)
      {.#Item [_ {.#Form {.#Item [_ {.#Symbol global}] parameters}}]
              inits}
      (do ///.monad
        [micro (///.try (..named_spliced_unquote global))]
        (when micro
          {try.#Success micro}
          (do ///.monad
            [output (..one_expansion ((//.function micro) parameters))
             =inits (monad.each ///.monad untemplated_pattern (list.reversed inits))]
            (in (.` [(., 'meta) {(., <tag>) (., (untemplated_partial_list output =inits))}])))
          
          {try.#Failure error}
          <default>))

      _
      <default>)))

(the .public ,*
  (..spliced_unquote
   (macro (_ tokens)
     (.when# {{.#Item it {.#End}}
              (of ///.monad in (list it))

              _
              (///.failure .wrong_syntax)}
             tokens))))

(vocabulary.def
 [.public UnQuote]
 [.public unquote]
 [.public unquote_macro]
 [.private named_unquote])

(the (untemplated_pattern pattern)
  (-> Code (Meta Code))
  (with_symbols ['meta]
    (`` (when pattern
          (,, (with_template' [<tag> <gen>]
                [[_ {<tag> value}]
                 (///#in (.` [(., 'meta) {<tag> (., (<gen> value))}]))]

                [.#Bit    as_bit]
                [.#Nat    as_nat]
                [.#Int    as_int]
                [.#Rev    as_rev]
                [.#Dec    as_dec]
                [.#Text   as_text]
                [.#Symbol name$]))

          [@composite {.#Form {.#Item [@global {.#Symbol global}] parameters}}]
          (do [! ///.monad]
            [micro (///.try (..named_unquote global))]
            (when micro
              {try.#Success micro}
              (do !
                [[_ output] (..one_expansion ((//.function micro) parameters))]
                (in [@composite output]))
              
              {try.#Failure error}
              (untemplated_composite (.` .#Form) 'meta untemplated_pattern (list.partial [@global {.#Symbol global}] parameters))))

          (,, (with_template' [<tag>]
                [[_ {<tag> it}]
                 (untemplated_composite (.` <tag>) 'meta untemplated_pattern it)]

                [.#Form]
                [.#Variant]
                [.#Tuple]))
          ))))

(the .public `
  (pattern
   (macro (_ tokens)
     (when tokens
       (list.partial [_meta {.#Form (list template)}] body branches)
       (do ///.monad
         [pattern (untemplated_pattern template)]
         (in (list.partial pattern body branches)))

       (list template)
       (do ///.monad
         [pattern (untemplated_pattern template)]
         (in (list pattern)))

       _
       (///.failure .wrong_syntax)))))

(the .public ,
  UnQuote
  (..unquote
   (macro (_ tokens)
     (.when# {{.#Item it {.#End}}
              (of ///.monad in (list it))

              _
              (///.failure .wrong_syntax)}
             tokens))))
