(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" parser]]
   [meta
    ["[0]" code
     ["<[1]>" \\parser (.only Parser)]]]]])

(def .public default_policy
  Code
  (` .private))

(`` (def policy
      (Parser Code)
      (do [! <>.monad]
        [candidate <code>.next]
        (case candidate
          [_ {.#Symbol ["" _]}]
          (in default_policy)

          (,, (with_template [<pattern>]
                [<pattern>
                 (do !
                   [_ <code>.any]
                   (in candidate))]

                [[_ {.#Bit _}]]
                [[_ {.#Symbol _}]]))
          
          _
          (in default_policy)))))

(def .public parser
  (All (_ a) (-> (Parser a) (Parser [Code a])))
  (<>.and ..policy))
