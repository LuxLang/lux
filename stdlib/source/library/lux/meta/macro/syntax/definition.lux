... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Definition)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]
   ["[0]" meta (.only)
    ["[0]" location]
    [macro
     ["[0]" expansion]]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]]]]
 ["[0]" // (.only)
  ["[1][0]" check (.only Check)]])

(every .public Definition
  (Record
   [#name Text
    #value (Either Check
                   Code)
    #export? Bit]))

(the .public equivalence
  (Equivalence Definition)
  (all product.equivalence
       text.equivalence
       (all sum.equivalence
            //check.equivalence
            code.equivalence
            )
       bit.equivalence
       ))

(the extension
  (symbol .def#))

(the dummy
  Code
  (` [.#module (, (code.text (its .#module location.dummy)))
      .#line   (, (code.nat (its .#line location.dummy)))
      .#column (, (code.nat (its .#column location.dummy)))]))

(the .public (format (open "_[0]"))
  (-> Definition Code)
  (` ((, (code.symbol ..extension))
      (, (code.local _#name))
      (, (when _#value
           {.#Left check}
           (//check.format check)

           {.#Right value}
           value))
      (, (code.bit _#export?)))))

(the .public (projection compiler)
  (-> Lux (Projection Definition))
  (do [! <>.monad]
    [raw <code>.any
     me_raw (|> raw
                expansion.total
                (meta.value compiler)
                <>.of_try)]
    (<| (<code>.locally me_raw)
        <code>.form
        (<>.after (<code>.this_symbol ..extension))
        (all <>.and
             <code>.local
             (<>.or //check.projection
                    <code>.any)
             <code>.bit
             ))))

(exception.the .public (lacks_type definition)
  (Exception Definition)
  (exception.report
   (list ["Definition" (%.code (..format definition))])))

(the .public (typed compiler)
  (-> Lux (Projection Definition))
  (do <>.monad
    [definition (..projection compiler)
     _ (when (its #value definition)
         {.#Left _}
         (in [])

         {.#Right _}
         (<>.of_try (exception.except ..lacks_type [definition])))]
    (in definition)))
