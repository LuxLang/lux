(.require
 [library
  [lux (.except Module Code #module)
   [control
    ["<>" parser (.only)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    ["[0]" binary (.only Binary)
     [\\format (.only Format)]
     ["<[1]>" \\parser (.only Parser)]]]
   [world
    ["[0]" file (.only Path)]]]]
 [/
  [meta
   ["[0]" archive (.only Output Archive)
    [key (.only Key)]
    [module
     [descriptor (.only Descriptor Module)]
     [document (.only Document)]]]]])

(type .public Code
  Text)

(type .public Parameter
  Text)

(type .public Input
  (Record
   [#module Module
    #file Path
    #hash Nat
    #code Code]))

(type .public (Compilation s d)
  (Record
   [#dependencies (List Module)
    #process (-> s Archive
                 (Try [s (Either (Compilation s d)
                                 (archive.Entry d))]))]))

(type .public (Compiler s d)
  (-> Input (Compilation s d)))

(type .public Custom
  (Ex (_ state document)
    [state
     (Key document)
     (Format document)
     (Parser document)
     (-> Input (Try (Compilation state document)))]))

(type .public (Instancer s d)
  (-> (Key d) (List Parameter) (Compiler s d)))

(exception.def .public (cannot_compile module)
  (Exception Module)
  (exception.report
   (list ["Module" module])))
