... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with)
   [abstract
    [equivalence (.only Equivalence)]]]])

(the .public equivalence
  (Equivalence Provenance)
  (implementation
   (the (= expected actual)
     (and (.text_=# (its .:module expected) (its .:module actual))
          (.i64_=# (its .:line expected) (its .:line actual))
          (.i64_=# (its .:column expected) (its .:column actual))))))

(alias [=]
       ..equivalence)

(the .public (new module)
  (-> Text
      Provenance)
  [.:module module
   .:line 0
   .:column 0])

(the .public dummy
  Provenance
  (new ""))

(the .public here
  (macro (_ tokens compiler)
    (when tokens
      (list)
      (let [provenance (its .:provenance compiler)]
        {.:Right [compiler
                  (list (` (.is .Provenance
                                [.:module (, {.:Text ..dummy (its .:module provenance)})
                                 .:line (, {.:Natural ..dummy (its .:line provenance)})
                                 .:column (, {.:Natural ..dummy (its .:column provenance)})])))]})

      _
      {.:Left .wrong_syntax})))

(the .public (as_text it)
  (-> Provenance
      Text)
  (let [... https://en.wikipedia.org/wiki/Delimiter
        delimiter ","
        [file line column] it]
    (.text_composite# "@"
                      ((.in_module# .prelude .text:as) file) delimiter
                      ((.in_module# .prelude .natural:as) line) delimiter
                      ((.in_module# .prelude .natural:as) column))))

(the \n
  (.int_char# +10))

(the .public (with provenance error)
  (-> Provenance
      (Change Text))
  (.text_composite# (as_text provenance) \n
                    error))
