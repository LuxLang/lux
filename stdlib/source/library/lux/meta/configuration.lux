... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except for)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [monad (.only do)]
    ["<>" projection]]
   [control
    ["[0]" maybe (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)
      ["/" property]
      ["?[1]" \\projection]]]]
   [math
    [number (.only hex)]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]])

(every .public Configuration
  (/.List Text))

(the .public equivalence
  (Equivalence Configuration)
  (/.equivalence text.equivalence))

(alias [=]
       ..equivalence)

(the .public monoid
  (Monoid Configuration)
  /.monoid)

(the .public empty
  Configuration
  /.empty)

(template.with [<ascii> <name>]
  [(the <name>
     Text
     (text.of_character (hex <ascii>)))]

  ["02" start]
  ["03" end]
  )

(the as_text'
  (text.Injection Text)
  (text.enclosed [..start ..end]))

(the .public as_text
  (text.Injection Configuration)
  (|>> (list#each (function (_ [feature value])
                    (text (..as_text' feature) (..as_text' value))))
       text.together))

(the .public of_text
  (Projection Configuration)
  (let [of_text (is (Projection Text)
                    (<| (<>.after (<text>.this ..start))
                        (<>.before (<text>.this ..end))
                        (<text>.slice (<text>.some! (<text>.none_of! ..end)))))]
    (<>.some (<>.and of_text of_text))))

(exception.the .public invalid)

(the configuration
  (<code>.Projection Configuration)
  (<code>.tuple (<>.some (<>.and <code>.text <code>.text))))

(the (< expected actual)
  (-> Configuration
      (Predicate Configuration))
  (list.every? (function (_ [feature value])
                 (|> actual
                     (/.value feature)
                     (maybe#each (text.= value))
                     (maybe.else false)))
               expected))

(the .public for
  (syntax.macro (_ [branches (<>.some (<>.and ..configuration ?list.any))
                    default (<>.maybe ?list.any)])
    (do meta.monad
      [actual meta.configuration]
      (when (try.or (list.one (function (_ [expected then])
                                (if (< expected actual)
                                    {.#Some then}
                                    {.#None}))
                              branches)
                    (try.of_maybe "" default))
        {try.#Success it}
        (pure (list it))
        
        no_valid_branch!
        (meta.failure (exception.error ..invalid []))))))
