(.using
 [library
  [lux (.except for)
   ["[0]" meta]
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [monad (.only do)]]
   [control
    ["[0]" maybe (.open: "[1]#[0]" functor)]
    ["[0]" exception (.only exception:)]
    ["<>" parser (.only)
     ["<[0]>" text (.only Parser)]
     ["<[0]>" code]]]
   [data
    ["[0]" text (.open: "[1]#[0]" equivalence)
     ["%" format]]
    [collection
     ["[0]" list (.open: "[1]#[0]" functor mix)]
     [dictionary
      ["/" plist]]]]
   [macro
    [syntax (.only syntax)]
    ["[0]" code]]
   [math
    [number (.only hex)]]]])

(type: .public Configuration
  (/.PList Text))

(def: .public equivalence
  (Equivalence Configuration)
  (/.equivalence text.equivalence))

(def: .public monoid
  (Monoid Configuration)
  /.monoid)

(def: .public empty
  Configuration
  /.empty)

(with_template [<ascii> <name>]
  [(def: <name>
     Text
     (text.of_char (hex <ascii>)))]

  ["02" start]
  ["03" end]
  )

(def: format'
  (-> Text Text)
  (text.enclosed [..start ..end]))

(def: .public format
  (%.Format Configuration)
  (|>> (list#each (function (_ [feature value])
                    (%.format (..format' feature) (..format' value))))
       text.together))

(def: .public parser
  (Parser Configuration)
  (let [parser' (is (Parser Text)
                    (<| (<>.after (<text>.this ..start))
                        (<>.before (<text>.this ..end))
                        (<text>.slice (<text>.some! (<text>.none_of! ..end)))))]
    (<>.some (<>.and parser' parser'))))

(exception: .public invalid)

(def: configuration
  (<code>.Parser Configuration)
  (<code>.tuple (<>.some (<>.and <code>.text <code>.text))))

(def: (subsumes? actual expected)
  (-> Configuration Configuration Bit)
  (case expected
    {.#End}
    true

    {.#Item [feature value] tail}
    (and (|> actual
             (/.value feature)
             (maybe#each (text#= value))
             (maybe.else false))
         (subsumes? expected tail))))

(def: .public for
  (syntax (_ [specializations (<>.some (<>.and ..configuration <code>.any))
              default (<>.maybe <code>.any)])
    (do meta.monad
      [actual meta.configuration]
      (case (list#mix (function (_ [expected then] choice)
                        (if (subsumes? actual expected)
                          {.#Some then}
                          choice))
                      default
                      specializations)
        {.#Some it}
        (in (list it))
        
        {.#None}
        (meta.failure (exception.error ..invalid []))))))
