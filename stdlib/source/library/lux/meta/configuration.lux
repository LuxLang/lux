... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except for)
   [abstract
    [equivalence (.only Equivalence)]
    [monoid (.only Monoid)]
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\injection]
     ["<[1]>" \\projection (.only Projection)]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)
      ["/" property]]]]
   [math
    [number (.only hex)]]
   ["[0]" meta (.only)
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]])

(every .public Configuration
  (/.List Text))

(the .public equivalence
  (Equivalence Configuration)
  (/.equivalence text.equivalence))

(the .public monoid
  (Monoid Configuration)
  /.monoid)

(the .public empty
  Configuration
  /.empty)

(template.with [<ascii> <name>]
  [(the <name>
     Text
     (text.of_char (hex <ascii>)))]

  ["02" start]
  ["03" end]
  )

(the injection'
  (-> Text Text)
  (text.enclosed [..start ..end]))

(the .public injection
  (%.Injection Configuration)
  (|>> (list#each (function (_ [feature value])
                    (%.message (..injection' feature) (..injection' value))))
       text.together))

(the .public projection
  (Projection Configuration)
  (let [projection' (is (Projection Text)
                        (<| (<>.after (<text>.this ..start))
                            (<>.before (<text>.this ..end))
                            (<text>.slice (<text>.some! (<text>.none_of! ..end)))))]
    (<>.some (<>.and projection' projection'))))

(exception.the .public invalid)

(the configuration
  (<code>.Projection Configuration)
  (<code>.tuple (<>.some (<>.and <code>.text <code>.text))))

(the (subsumed? expected actual)
  (-> Configuration Configuration Bit)
  (when expected
    {.#End}
    true

    {.#Item [feature value] tail}
    (and (|> actual
             (/.value feature)
             (maybe#each (text#= value))
             (maybe.else false))
         (subsumed? expected tail))))

(the .public for
  (syntax.macro (_ [specializations (<>.some (<>.and ..configuration <code>.any))
                    default (<>.maybe <code>.any)])
    (do meta.monad
      [actual meta.configuration]
      (when (list#mix (function (_ [expected then] choice)
                        (if (subsumed? expected actual)
                          {.#Some then}
                          choice))
                      default
                      specializations)
        {.#Some it}
        (in (list it))
        
        {.#None}
        (meta.failure (exception.error ..invalid []))))))
