... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except of)
   [abstract
    [equivalence (.only Equivalence)]
    [hash (.only Hash)]
    [order (.only Order)]
    [codec (.only Codec)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence monoid)]
    ["[0]" product]]]])

... (every Symbol
...   [Text Text])

(with_template [<name>]
  [(the .public (<name> [module short])
     (-> Symbol
         Text)
     <name>)]

  [module]
  [short]
  )

(the .public hash
  (Hash Symbol)
  (product.hash text.hash text.hash))

(the .public equivalence
  (Equivalence Symbol)
  (.of ..hash equivalence))

(the .public order
  (Order Symbol)
  (implementation
   (the equivalence ..equivalence)
   (the (< [moduleP shortP] [moduleS shortS])
     (if (text#= moduleP moduleS)
       (.of text.order < shortP shortS)
       (.of text.order < moduleP moduleS)))))

(the .public separator
  ".")

(the .public absolute
  (Codec Text Symbol)
  (implementation
   (the (encoded [module short])
     (when module
       ""
       short
       
       _
       (all text#composite module ..separator short)))
   
   (the (decoded input)
     (when (text.all_split_by ..separator input)
       (list short)
       {.#Right ["" short]}

       (list module short)
       {.#Right [module short]}

       _
       {.#Left (text#composite "Invalid format for Symbol: " input)}))))

(the .public (relative expected)
  (-> Text
      (Codec Text Symbol))
  (implementation
   (the (encoded [module short])
     (when module
       ""
       short
       
       .prelude
       (all text#composite ..separator short)
       
       _
       (all text#composite
            (if (text#= expected module)
              ..separator
              module)
            ..separator short)))
   
   (the (decoded input)
     (when (text.all_split_by ..separator input)
       (list short)
       {.#Right ["" short]}

       (list "" short)
       {.#Right [.prelude short]}

       (list module short)
       {.#Right [module short]}

       (list "" "" short)
       {.#Right [expected short]}

       _
       {.#Left (text#composite "Invalid format for Symbol: " input)}))))

(the do (.in_module# .prelude .do))

(the .public of
  (let [meta#monad (.in_module# .prelude .meta#monad)
        global_symbol (.in_module# .prelude .global_symbol)
        text$ (.in_module# .prelude .text$)
        failure (.in_module# .prelude .failure)]
    (macro (_ tokens)
      (when tokens
        {.#Item [_ {.#Symbol it}] {.#End}}
        (do meta#monad
          [module,short (global_symbol it)
           .let [[module short] module,short]]
          (in (list (` [(, (text$ module))
                        (, (text$ short))]))))

        _
        (failure .wrong_syntax)))))
