(.using
  [library
   [lux "*"
    [abstract
     [equivalence {"+" Equivalence}]
     [hash {"+" Hash}]
     [order {"+" Order}]
     [codec {"+" Codec}]]
    [data
     ["[0]" text ("[1]#[0]" equivalence monoid)]
     ["[0]" product]]]])

... (type: Symbol
...   [Text Text])

(template [<name>]
  [(def: .public (<name> [module short])
     (-> Symbol Text)
     <name>)]

  [module]
  [short]
  )

(def: .public hash
  (Hash Symbol)
  (product.hash text.hash text.hash))

(def: .public equivalence
  (Equivalence Symbol)
  (# ..hash &equivalence))

(implementation: .public order
  (Order Symbol)
  
  (def: &equivalence ..equivalence)
  (def: (< [moduleP shortP] [moduleS shortS])
    (if (text#= moduleP moduleS)
      (# text.order < shortP shortS)
      (# text.order < moduleP moduleS))))

(def: .public separator
  ".")

(implementation: .public codec
  (Codec Text Symbol)
  
  (def: (encoded [module short])
    (case module
      "" short
      _ ($_ text#composite module ..separator short)))
  
  (def: (decoded input)
    (case (text.all_split_by ..separator input)
      (^ (list short))
      {.#Right ["" short]}

      (^ (list module short))
      {.#Right [module short]}

      _
      {.#Left (text#composite "Invalid format for Symbol: " input)})))
