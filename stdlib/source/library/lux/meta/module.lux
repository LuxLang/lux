... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name all)
   [abstract
    ["[0]" monad]]
   ["[0]" error (.only)
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.only)
      ["[0]" property]]]]]]
 ["[0]" //])

... https://en.wikipedia.org/wiki/Delimiter
(the .public delimiter
  "/")

(every .public Name
  Text)

(the .public runtime
  Name
  "")

(error.the .public not_known)

(the .public (by_name name)
  (-> Name
      (Meta Module))
  (function (_ lux)
    (when (property.value name (its .:modules lux))
      {try.:Success module}
      {try.:Success [lux module]}

      else
      {try.:Failure ..not_known})))

(error.the .public not_available)

(the .public current_name
  (Meta Name)
  (function (_ lux)
    (when (its .:current_module lux)
      {.:Some current_module}
      {try.:Success [lux current_module]}

      else
      {try.:Failure ..not_available})))

(the .public current
  (Meta [Name Module])
  (monad.let //.monad
    [name ..current_name
     module (..by_name name)]
    (pure [name module])))

(the .public (exists? module)
  (-> Name
      (Meta Bit))
  (function (_ lux)
    {try.:Success [lux (when (property.value module (its .:modules lux))
                         {try.:Success _}
                         true
                         
                         failure
                         false)]}))

(the .public all
  (Meta (property.List Module))
  (function (_ lux)
    (|> lux
        (its .:modules)
        [lux]
        {try.:Success})))

(the .public (imported_by? import module)
  (-> Name Name
      (Meta Bit))
  (by //.monad each
      (|>> (its .:imports)
           (list.any? (text.= import)))
      (..by_name module)))
