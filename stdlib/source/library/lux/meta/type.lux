... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except function as let)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only Monad do)]
    [codec (.only Codec)]]
   [control
    ["<>" parser]
    ["[0]" function]
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]#[0]" monoid equivalence)]
    [collection
     ["[0]" array]
     ["[0]" list (.use "[1]#[0]" monad monoid mix)]]]
   [math
    [number
     ["n" nat (.use "[1]#[0]" decimal)]]]
   ["[0]" meta (.only)
    ["[0]" location]
    ["[0]" symbol (.use "[1]#[0]" equivalence)]
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]
     ["[0]" expansion]]
    [compiler
     ["@" target]]]]])

(with_template [<name> <tag>]
  [(def .public (<name> type)
     (-> Type
         [Nat Type])
     (loop (again [num_args 0
                   type type])
       (when type
         {<tag> env sub_type}
         (again (++ num_args) sub_type)

         _
         [num_args type])))]

  [flat_univ_q .#UnivQ]
  [flat_ex_q   .#ExQ]
  )

(def .public (flat_function type)
  (-> Type
      [(List Type) Type])
  (when type
    {.#Function in out'}
    (.let [[ins out] (flat_function out')]
      [(list.partial in ins) out])

    _
    [(list) type]))

(def .public (flat_application type)
  (-> Type
      [Type (List Type)])
  (when type
    {.#Apply arg func'}
    (.let [[func args] (flat_application func')]
      [func (list#composite args (list arg))])

    _
    [type (list)]))

(with_template [<name> <tag>]
  [(def .public (<name> type)
     (-> Type
         (List Type))
     (when type
       {<tag> left right}
       (list.partial left (<name> right))

       _
       (list type)))]

  [flat_variant .#Sum]
  [flat_tuple   .#Product]
  )

(`` (def (format symbol_codec type)
      (-> (Codec Text Symbol) Type
          Text)
      (when type
        {.#Nominal name params}
        (all text#composite
             "(Nominal "
             (text.enclosed' text.double_quote name)
             (|> params
                 (list#each (|>> (format symbol_codec) (text#composite " ")))
                 (list#mix (function.flipped text#composite) ""))
             ")")

        (,, (with_template [<tag> <open> <close> <flat>]
              [{<tag> _}
               (all text#composite <open>
                    (|> (<flat> type)
                        (list#each (format symbol_codec))
                        list.reversed
                        (list.interposed " ")
                        (list#mix text#composite ""))
                    <close>)]

              [.#Sum  "(Or " ")" flat_variant]
              [.#Product "["   "]" flat_tuple]))

        {.#Function input output}
        (.let [[ins out] (flat_function type)]
          (all text#composite  "(-> "
               (|> ins
                   (list#each (format symbol_codec))
                   list.reversed
                   (list.interposed " ")
                   (list#mix text#composite ""))
               " " (format symbol_codec out) ")"))

        {.#Parameter idx}
        (n#encoded idx)

        {.#Var id}
        (all text#composite "-" (n#encoded id))

        {.#Ex id}
        (all text#composite "+" (n#encoded id))

        {.#Apply param fun}
        (.let [[type_func type_args] (flat_application type)]
          (all text#composite  "(" (format symbol_codec type_func) " " (|> type_args (list#each (format symbol_codec)) list.reversed (list.interposed " ") (list#mix text#composite "")) ")"))

        (,, (with_template [<tag> <desc>]
              [{<tag> env body}
               (all text#composite "(" <desc> " {" (|> env (list#each (format symbol_codec)) (text.interposed " ")) "} " (format symbol_codec body) ")")]

              [.#UnivQ "All"]
              [.#ExQ "Ex"]))

        {.#Named name type}
        (of symbol_codec encoded name)
        )))

(def .public absolute_format
  (-> Type
      Text)
  (..format symbol.absolute))

(def .public (relative_format module)
  (-> Text Type
      Text)
  (..format (symbol.relative module)))

... https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B2-reduction
(`` (def (reduced env type)
      (-> (List Type) Type
          Type)
      (when type
        {.#Nominal name params}
        {.#Nominal name (list#each (reduced env) params)}
        
        (,, (with_template [<tag>]
              [{<tag> left right}
               {<tag> (reduced env left) (reduced env right)}]

              [.#Sum]      [.#Product]
              [.#Function] [.#Apply]))
        
        (,, (with_template [<tag>]
              [{<tag> old_env def}
               (when old_env
                 {.#End}
                 {<tag> env def}

                 _
                 {<tag> (list#each (reduced env) old_env) def})]

              [.#UnivQ]
              [.#ExQ]))
        
        {.#Parameter idx}
        (maybe.else (panic! (all text#composite
                                 "Unknown type parameter" text.new_line
                                 "      Index: " (n#encoded idx) text.new_line
                                 "Environment: " (|> env
                                                     list.enumeration
                                                     (list#each (.function (_ [index type])
                                                                  (all text#composite
                                                                       (n#encoded index)
                                                                       " " (..absolute_format type))))
                                                     (text.interposed (text#composite text.new_line "             ")))))
                    (list.item idx env))
        
        _
        type
        )))

(`` (def .public equivalence
      (Equivalence Type)
      (implementation
       (def (= x y)
         (or (for @.php
                  ... TODO: Remove this once JPHP is gone.
                  false
                  (same? x y))
             (when [x y]
               [{.#Nominal xname xparams} {.#Nominal yname yparams}]
               (and (text#= xname yname)
                    (n.= (list.size yparams) (list.size xparams))
                    (list#mix (.function (_ [x y] prev) (and prev (= x y)))
                              true
                              (list.zipped_2 xparams yparams)))

               (,, (with_template [<tag>]
                     [[{<tag> xid} {<tag> yid}]
                      (n.= yid xid)]

                     [.#Var]
                     [.#Ex]
                     [.#Parameter]
                     ))

               (,, (with_template [<tag>]
                     [[{<tag> ll lr} {<tag> rl rr}]
                      (and (= ll rl)
                           (= lr rr))]

                     [.#Function]
                     [.#Apply]
                     [.#Sum]
                     [.#Product]
                     ))

               [{.#Named xname xtype} {.#Named yname ytype}]
               (and (symbol#= xname yname)
                    (= xtype ytype))

               (,, (with_template [<tag>]
                     [[{<tag> xenv xbody} {<tag> yenv ybody}]
                      (and (n.= (list.size yenv) (list.size xenv))
                           (= xbody ybody)
                           (list#mix (.function (_ [x y] prev) (and prev (= x y)))
                                     true
                                     (list.zipped_2 xenv yenv)))]

                     [.#UnivQ]
                     [.#ExQ]
                     ))

               _
               false
               ))))))

(`` (def .public (applied params func)
      (-> (List Type) Type
          (Maybe Type))
      (when params
        {.#End}
        {.#Some func}

        {.#Item param params'}
        (when func
          (,, (with_template [<tag>]
                [{<tag> env body}
                 (|> body
                     (reduced (list.partial func param env))
                     (applied params'))]

                [.#UnivQ]
                [.#ExQ]))

          {.#Apply A F}
          (applied (list.partial A params) F)

          {.#Named name unnamed}
          (applied params unnamed)
          
          _
          {.#None}))))

(`` (def .public (code type)
      (-> Type
          Code)
      (when type
        {.#Nominal name params}
        (` {.#Nominal (, (code.text name))
                      (.list (,* (list#each code params)))})

        (,, (with_template [<tag>]
              [{<tag> idx}
               (` {<tag> (, (code.nat idx))})]

              [.#Var]
              [.#Ex]
              [.#Parameter]))

        (,, (with_template [<tag>]
              [{<tag> left right}
               (` {<tag> (, (code left))
                         (, (code right))})]

              [.#Sum]
              [.#Product]
              [.#Function]
              [.#Apply]))

        {.#Named name sub_type}
        (code.symbol name)

        (,, (with_template [<tag>]
              [{<tag> env body}
               (` {<tag> (.list (,* (list#each code env)))
                         (, (code body))})]

              [.#UnivQ]
              [.#ExQ]))
        )))

(def .public (de_aliased type)
  (-> Type
      Type)
  (when type
    {.#Named _ {.#Named name type'}}
    (de_aliased {.#Named name type'})

    _
    type))

(def .public (anonymous type)
  (-> Type
      Type)
  (when type
    {.#Named name type'}
    (anonymous type')

    _
    type))

(with_template [<name> <base> <ctor>]
  [(def .public (<name> types)
     (-> (List Type)
         Type)
     (when types
       {.#End}
       <base>

       {.#Item type {.#End}}
       type

       {.#Item type types'}
       {<ctor> type (<name> types')}))]

  [variant Nothing .#Sum]
  [tuple   Any     .#Product]
  )

(def .public (function inputs output)
  (-> (List Type) Type
      Type)
  (when inputs
    {.#End}
    output

    {.#Item input inputs'}
    {.#Function input (function inputs' output)}))

(def .public (application params quant)
  (-> (List Type) Type
      Type)
  (when params
    {.#End}
    quant

    {.#Item param params'}
    (application params' {.#Apply param quant})))

(with_template [<name> <tag>]
  [(def .public (<name> size body)
     (-> Nat Type
         Type)
     (when size
       0 body
       _  (|> body (<name> (-- size)) {<tag> (list)})))]

  [univ_q .#UnivQ]
  [ex_q   .#ExQ]
  )

(`` (def .public (quantified? type)
      (-> Type
          Bit)
      (when type
        {.#Named [module name] _type}
        (quantified? _type)

        {.#Apply A F}
        (|> (..applied (list A) F)
            (of maybe.monad each quantified?)
            (maybe.else false))

        (,, (with_template [<pattern>]
              [<pattern>
               true]

              [{.#UnivQ _}]
              [{.#ExQ _}]))

        _
        false)))

(def .public (array depth element_type)
  (-> Nat Type
      Type)
  (when depth
    0 element_type
    _ (|> element_type
          (array (-- depth))
          (list)
          {.#Nominal array.nominal})))

(def .public (flat_array type)
  (-> Type
      [Nat Type])
  (with_expansions [<default> [0 type]]
    (when type
      {.#Nominal name (list element_type)}
      (if (text#= array.nominal name)
        (.let [[depth element_type] (flat_array element_type)]
          [(++ depth) element_type])
        <default>)

      _
      <default>)))

(def .public array?
  (-> Type
      Bit)
  (|>> ..flat_array
       product.left
       (n.> 0)))

(def new_secret_marker
  (syntax (_ [])
    (macro.with_symbols [g!_secret_marker_]
      (in (list g!_secret_marker_)))))

(def secret_marker
  (`` (symbol (,, (new_secret_marker)))))

(def .public log!
  (syntax (_ [input (<>.or (<>.and <code>.symbol
                                   (<>.maybe (<>.after (<code>.this_symbol ..secret_marker) <code>.any)))
                           <code>.any)])
    (when input
      {.#Left [valueN valueC]}
      (do meta.monad
        [location meta.location
         valueT (meta.type valueN)
         .let [[@ _ _] location
               _ (.log!# (all text#composite
                              (of symbol.absolute encoded (symbol ..log!)) " " (location.format location) text.new_line
                              "Expression: " (when valueC
                                               {.#Some valueC}
                                               (code.format valueC)
                                               
                                               {.#None}
                                               (of symbol.absolute encoded valueN))
                              text.new_line
                              "      Type: " (..relative_format @ valueT)))]]
        (in (list (code.symbol valueN))))
      
      {.#Right valueC}
      (macro.with_symbols [g!value]
        (in (list (` (.let [(, g!value) (, valueC)]
                       (..log! (, valueC) (, (code.symbol ..secret_marker)) (, g!value))))))))))

(def type_parameters
  (Parser (List Text))
  (<code>.tuple (<>.some <code>.local)))

(def .public as
  (syntax (_ [type_vars type_parameters
              input <code>.any
              output <code>.any
              value (<>.maybe <code>.any)])
    (macro.with_symbols [g!_]
      (.let [casterC (` (is (All ((, g!_) (,* (list#each code.local type_vars)))
                              (-> (, input) (, output)))
                            (|>> as_expected)))]
        (when value
          {.#None}
          (in (list casterC))
          
          {.#Some value}
          (in (list (` ((, casterC) (, value))))))))))

(type Typed
  (Record
   [#type Code
    #expression Code]))

(def (typed lux)
  (-> Lux
      (Parser Typed))
  (do <>.monad
    [it <code>.any
     type_check (<>.of_try (meta.result lux (expansion.complete it)))]
    (<| (<code>.locally type_check)
        <code>.form
        (<>.after (<code>.this (` .is#)))
        (<>.and <code>.any <code>.any))))

... TODO: Make sure the generated code always gets optimized away.
(def .public sharing
  (syntax (_ lux [type_vars ..type_parameters
                  exemplar (..typed lux)
                  computation (..typed lux)])
    (macro.with_symbols [g!_]
      (.let [typeC (` (All ((, g!_) (,* (list#each code.local type_vars)))
                        (-> (, (the #type exemplar))
                            (, (the #type computation)))))
             shareC (` (is (, typeC)
                           (.function ((, g!_) (, g!_))
                             (, (the #expression computation)))))]
        (in (list (` ((, shareC) (, (the #expression exemplar))))))))))

(def .public by_example
  (syntax (_ lux [type_vars ..type_parameters
                  exemplar (..typed lux)
                  extraction <code>.any])
    (in (list (` (.type_of (..sharing [(,* (list#each code.local type_vars))]
                             (is (, (the #type exemplar))
                                 (, (the #expression exemplar)))
                             (is (, extraction)
                                 ... The value of this expression will never be relevant, so it doesn't matter what it is.
                                 (.as .Nothing [])))))))))

(`` (def .public (replaced before after)
      (-> Type Type Type
          Type)
      (.function (again it)
        (if (of ..equivalence = before it)
          after
          (when it
            {.#Nominal name co_variant}
            {.#Nominal name (list#each again co_variant)}

            (,, (with_template [<tag>]
                  [{<tag> left right}
                   {<tag> (again left) (again right)}]

                  [.#Sum]
                  [.#Product]
                  [.#Function]
                  [.#Apply]))

            (,, (with_template [<tag>]
                  [{<tag> env body}
                   {<tag> (list#each again env) (again body)}]

                  [.#UnivQ]
                  [.#ExQ]))

            (,, (with_template [<pattern>]
                  [<pattern>
                   it]

                  [{.#Parameter _}]
                  [{.#Var _}]
                  [{.#Ex _}]
                  [{.#Named _}]))
            )))))

(def .public let
  (syntax (_ [bindings (<code>.tuple (<>.some (<>.and <code>.any <code>.any)))
              bodyT <code>.any])
    (in (list (` (..with_expansions [(,* (|> bindings
                                             (list#each (.function (_ [localT valueT])
                                                          (list localT (` (.these (, valueT))))))
                                             list#conjoint))]
                   (, bodyT)))))))

(def .public literal
  (syntax (_ [it <code>.any])
    (do meta.monad
      [it ((.in_module# .prelude .type#literal') it)]
      (in (list it)))))
