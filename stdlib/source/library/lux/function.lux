... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or and)
   [abstract
    [monoid (.only Monoid)]
    [functor
     ["[0]" pro]]]]])

(the .public identity
  (for_any (_ it)
    (-> it
        it))
  (|>>))

(the .public (composite after before)
  (for_any (_ premise lemma conclusion)
    (-> (-> lemma conclusion) (-> premise lemma)
        (-> premise conclusion)))
  (|>> before after))

(the .public monoid
  (for_any (_ it)
    (Monoid (-> it it)))
  (implementation
   (the identity ..identity)
   (the composite ..composite)))

(the .public (constant it)
  (for_any (_ it)
    (-> it
        (for_any (_ to_ignore)
          (-> to_ignore it))))
  (function (_ _)
    it))

(the .public (in_reverse it)
  (for_any (_ this that conclusion)
    (-> (-> this that conclusion)
        (-> that this conclusion)))
  (function (_ this that)
    (it that this)))

(the .public (of argument it)
  (for_any (_ premise conclusion)
    (-> premise (-> premise conclusion)
        conclusion))
  (it argument))

(the .public (or left right)
  (for_any (_ left right conclusion)
    (-> (-> left conclusion) (-> right conclusion)
        (-> (Or left right) conclusion)))
  (function (_ input)
    (when input
      {0b l} (left l)
      {1b r} (right r))))

(the .public (and left right)
  (for_any (_ premise left right)
    (-> (-> premise left) (-> premise right)
        (-> premise [left right])))
  (function (_ it)
    [(left it) (right it)]))

... https://en.wikipedia.org/wiki/Currying
(the .public (curried f)
  (for_any (_ left right it)
    (-> (-> [left right] it)
        (-> left right it)))
  (function (_ x y)
    (f [x y])))

(the .public (uncurried f)
  (for_any (_ left right it)
    (-> (-> left right it)
        (-> [left right] it)))
  (function (_ [x y])
    (f x y)))

(every .public (Function cause effect)
  (-> cause
      effect))

(the .public functor
  (pro.Functor Function)
  (implementation
   (the (each before after it)
     (|>> before it after))))

(the .public co_cartesian
  (pro.Co_Cartesian Function)
  (implementation
   (the (when_left it left|right)
     (when left|right
       {0b left} {0b (it left)}
       {1b right} {1b right}))
   (the (when_right it left|right)
     (when left|right
       {0b left} {0b left}
       {1b right} {1b (it right)}))))

(the .public cartesian
  (pro.Cartesian Function)
  (implementation
   (the (in_left it)
     (function (_ [cause extra])
       [(it cause) extra]))
   (the (in_right it)
     (function (_ [extra cause])
       [extra (it cause)]))))

(the .public monoidal
  (pro.Monoidal Function)
  (implementation
   (the (in_parallel on_left on_right [left right])
     [(on_left left)
      (on_right right)])
   (the empty
     ..identity)))
