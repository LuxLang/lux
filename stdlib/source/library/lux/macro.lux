... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local name function macro)
   [abstract
    ["[0]" monad (.only do)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["[0]" natural]]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" name (.use "[1]#[0]" absolute)]]]]
 ["[0]" /
  ["[1][0]" expansion]])

(the .public (name prefix)
  (-> Text
      (Meta Code))
  (do meta.monad
    [id meta.seed]
    (in (|> id
            (by natural.base_10 as)
            (text "__gensym__" prefix)
            [""] code.name))))

(the (local ast)
  (-> Code
      (Meta Text))
  (when ast
    [_ {.#Name ["" name]}]
    (by meta.monad in name)

    _
    (meta.failure (text "Code is not a local name: " (code.absolute ast)))))

(the .public with_names
  (.macro (_ tokens)
    (when tokens
      (stack [_ {.#Tuple names}] body)
      (do [! meta.monad]
        [name_names (monad.each ! ..local names)
         .let [name_defs (stack#conjoint (stack#each (is (-> Text (Stack Code))
                                                         (.function (_ name)
                                                           (stack (code.name ["" name])
                                                                  (` (..name (, (code.text name)))))))
                                                     name_names))]]
        (in (stack (` (do meta.monad
                        [(,* name_defs)]
                        (, body))))))

      _
      (meta.failure .wrong_syntax))))

(the .public times
  (.macro (_ tokens)
    (when tokens
      (stack.partial [_ {.#Natural times}] terms)
      (loop (again [times times
                    before terms])
        (when times
          0
          (by meta.monad in before)

          _
          (do [! meta.monad]
            [after (|> before
                       (monad.each ! /expansion.single)
                       (by ! each stack#conjoint))]
            (again (-- times) after))))

      _
      (meta.failure .wrong_syntax))))

(the .public final
  (.macro (_ it)
    (let [! meta.monad]
      (|> it
          (monad.each ! /expansion.complete)
          (by ! each stack#conjoint)))))

(the .public function
  (-> Macro
      Macro')
  (|>> (as Macro')))

(the .public macro
  (-> Macro'
      Macro)
  (|>> (as Macro)))
