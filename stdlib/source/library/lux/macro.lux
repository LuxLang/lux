... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local name function macro)
   [abstract
    ["[0]" monad]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monad)]]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" meta (.only)
    ["[0]" code]
    ["[0]" name (.use "[1]:[0]" absolute)]]]]
 ["[0]" /
  ["[1][0]" expansion]])

(the .public (name prefix)
  (-> Text
      (Meta Code))
  (monad.let meta.monad
    [id meta.seed]
    (pure (|> id
              (by natural.base_10 as)
              (text "__gensym__" prefix)
              [""] code.name))))

(the (local ast)
  (-> Code
      (Meta Text))
  (when ast
    {.#Name _ ["" name]}
    (by meta.monad pure name)

    _
    (meta.failure (text "Code is not a local name: " (code.absolute ast)))))

(the .public with_names
  (.macro (_ tokens)
    (when tokens
      (list {.#Tuple _ names} body)
      (monad.let [! meta.monad]
        [name_names (list.each' ! ..local names)
         .let [name_defs (list:conjoint (list:each (is (-> Text (List Code))
                                                       (.function (_ name)
                                                         (list (code.name ["" name])
                                                               (` (..name (, (code.text name)))))))
                                                   name_names))]]
        (pure (list (` (monad.let meta.monad
                         [(,* name_defs)]
                         (, body))))))

      _
      (meta.failure .wrong_syntax))))

(the with_template (.in_module# .prelude .with_template))

(with_template [,name]
  [(the ,name (.in_module# .prelude ,name))]

  [[?:value]
   [?:and]
   [?:rest]
   [?:natural]]
  )

(the .public times
  (.macro (_ tokens)
    (when (|> (?:and ?:natural ?:rest)
              (?:value tokens))
      {.#Some [times terms]}
      (loop (again [times times
                    before terms])
        (when times
          0
          (by meta.monad pure before)

          _
          (monad.let [! meta.monad]
            [after (|> before
                       (list.each' ! /expansion.single)
                       (by ! each list:conjoint))]
            (again (-- times) after))))

      else
      (meta.failure .wrong_syntax))))

(the .public final
  (.macro (_ it)
    (let [! meta.monad]
      (|> it
          (list.each' ! /expansion.complete)
          (by ! each list:conjoint)))))

(the .public function
  (-> Macro
      Macro')
  (|>> (as (-> Macro Macro'))))

(the .public macro
  (-> Macro'
      Macro)
  (|>> (as (-> Macro' Macro))))
