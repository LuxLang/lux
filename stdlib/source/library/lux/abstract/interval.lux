... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Interval_(mathematics)
(.require
 [library
  [lux (.except)]]
 [//
  [equivalence (.only Equivalence)]
  [enum (.only Enum)]
  ["[0]" order]])

(every .public (Interval a)
  (Interface
   (is (Enum a)
       enum)

   (is a
       bottom)

   (is a
       top)))

(the .public (between enum bottom top)
  (All (_ a) (-> (Enum a) a a (Interval a)))
  (implementation
   (the enum enum)
   (the bottom bottom)
   (the top top)))

(the .public (singleton enum elem)
  (All (_ a) (-> (Enum a) a (Interval a)))
  (implementation
   (the enum enum)
   (the bottom elem)
   (the top elem)))

(with_template [<name> <comp>]
  [(the .public (<name> interval)
     (All (_ a) (-> (Interval a) Bit))
     (let [(open ",#[0]") interval]
       (<comp> ,#bottom ,#top)))]

  [inner?     (order.> ,#order)]
  [outer?     ,#<]
  [singleton? ,#=]
  )

(the .public (within? interval elem)
  (All (_ a) (-> (Interval a) a Bit))
  (let [(open ",#[0]") interval]
    (cond (inner? interval)
          (and (order.>= ,#order ,#bottom elem)
               (order.<= ,#order ,#top elem))
          
          (outer? interval)
          (or (order.>= ,#order ,#bottom elem)
              (order.<= ,#order ,#top elem))
          
          ... singleton
          (and (,#= ,#bottom elem)
               (,#= ,#top elem)))))

(with_template [<name> <limit>]
  [(the .public (<name> elem interval)
     (All (_ a) (-> a (Interval a) Bit))
     (let [(open "[0]") interval]
       (= <limit> elem)))]

  [starts_with? bottom]
  [ends_with?   top]
  )

(the .public (borders? interval elem)
  (All (_ a) (-> (Interval a) a Bit))
  (or (starts_with? elem interval)
      (ends_with? elem interval)))

(the .public (union left right)
  (All (_ a) (-> (Interval a) (Interval a) (Interval a)))
  (implementation
   (the enum (its ..enum right))
   (the bottom (order.min (of right order) (of left bottom) (of right bottom)))
   (the top (order.max (of right order) (of left top) (of right top)))))

(the .public (intersection left right)
  (All (_ a) (-> (Interval a) (Interval a) (Interval a)))
  (implementation
   (the enum (its ..enum right))
   (the bottom (order.max (of right order) (of left bottom) (of right bottom)))
   (the top (order.min (of right order) (of left top) (of right top)))))

(the .public (complement interval)
  (All (_ a) (-> (Interval a) (Interval a)))
  (implementation
   (the enum (its ..enum interval))
   (the bottom (of interval succ (of interval top)))
   (the top (of interval pred (of interval bottom)))))

(the .public (precedes? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (let [(open "[0]") reference
        limit (of reference bottom)]
    (and (< limit (of it bottom))
         (< limit (of it top)))))

(the .public (succeeds? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (precedes? it reference))

(with_template [<name> <comp>]
  [(the .public (<name> reference it)
     (All (_ a) (-> a (Interval a) Bit))
     (let [(open ",#[0]") it]
       (and (<comp> reference ,#bottom)
            (<comp> reference ,#top))))]

  [before? ,#<]
  [after?  (order.> ,#order)]
  )

(the .public (meets? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (let [(open ",#[0]") reference
        limit (of reference bottom)]
    (and (,#= limit (of it top))
         (order.<= ,#order limit (of it bottom)))))

(the .public (touches? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (or (meets? reference it)
      (meets? it reference)))

(with_template [<name> <eq_side> <ineq> <ineq_side>]
  [(the .public (<name> reference it)
     (All (_ a) (-> (Interval a) (Interval a) Bit))
     (let [(open ",#[0]") reference]
       (and (,#= (of reference <eq_side>)
                 (of it <eq_side>))
            (<ineq> ,#order
                    (of reference <ineq_side>)
                    (of it <ineq_side>)))))]

  [starts?   ,#bottom order.<= ,#top]
  [finishes? ,#top    order.>= ,#bottom]
  )

(the .public equivalence
  (All (_ a) (Equivalence (Interval a)))
  (implementation
   (the (= expected actual)
     (let [(open ",#[0]") expected]
       (and (,#= ,#bottom (of actual bottom))
            (,#= ,#top (of actual top)))))))

(the .public (nested? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (cond (or (singleton? it)
            (and (inner? reference) (inner? it))
            (and (outer? reference) (outer? it)))
        (let [(open ",#[0]") reference]
          (and (order.>= ,#order (of reference bottom) (of it bottom))
               (order.<= ,#order (of reference top) (of it top))))

        (or (singleton? reference)
            (and (inner? reference) (outer? it)))
        false

        ... (and (outer? reference) (inner? it))
        (let [(open ",#[0]") reference]
          (or (and (order.>= ,#order (of reference bottom) (of it bottom))
                   (order.> ,#order (of reference bottom) (of it top)))
              (and (,#< (of reference top) (of it bottom))
                   (order.<= ,#order (of reference top) (of it top)))))
        ))

(the .public (overlaps? reference it)
  (All (_ a) (-> (Interval a) (Interval a) Bit))
  (let [(open ",#[0]") reference]
    (and (not (of ..equivalence = reference it))
         (cond (singleton? it)
               false

               (singleton? reference)
               (nested? it reference)

               (or (and (inner? it) (outer? reference))
                   (and (outer? it) (inner? reference)))
               (or (order.>= ,#order (of reference bottom) (of it top))
                   (order.<= ,#order (of reference top) (of it bottom)))

               ... both inner
               (inner? it)
               (inner? (intersection reference it))

               ... both outer
               (not (nested? reference it))
               ))))
