... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Interval_(mathematics)
(.using
 [library
  [lux (.except)
   [function
    [predicate (.only Predicate)]]]]
 [//
  [equivalence (.only Equivalence)]
  [enum (.only Enum)]
  ["[0]" order]])

(the with_template (.in_module# .prelude .with_template))

... https://en.wikipedia.org/wiki/Maximum_and_minimum
(every .public (Interval it)
  (Interface
   (is (Enum it)
       enum)

   (is it
       minimum)

   (is it
       maximum)))

(the .public (between enum minimum maximum)
  (for_any (_ it)
    (-> (Enum it) it it
        (Interval it)))
  (implementation
   (the enum enum)
   (the minimum minimum)
   (the maximum maximum)))

(the .public (singleton enum elem)
  (for_any (_ it)
    (-> (Enum it) it
        (Interval it)))
  (implementation
   (the enum enum)
   (the minimum elem)
   (the maximum elem)))

(with_template [<name> <comp>]
  [(the .public (<name> interval)
     (for_any (_ it)
       (Predicate (Interval it)))
     (let [(open ",:[0]") interval]
       (<comp> ,:minimum ,:maximum)))]

  [[inner?     (order.> ,:order)]
   [outer?     ,:<]
   [singleton? ,:=]]
  )

(the .public (within? interval elem)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate it)))
  (let [(open ",:[0]") interval]
    (if (inner? interval)
        (and (order.>= ,:order ,:minimum elem)
             (order.<= ,:order ,:maximum elem))
        
        (outer? interval)
        (or (order.>= ,:order ,:minimum elem)
            (order.<= ,:order ,:maximum elem))
        
        ... singleton
        (and (,:= ,:minimum elem)
             (,:= ,:maximum elem)))))

(with_template [<name> <limit>]
  [(the .public (<name> elem interval)
     (for_any (_ it)
       (-> it
           (Predicate (Interval it))))
     (let [(open "[0]") interval]
       (= <limit> elem)))]

  [[starts_with? minimum]
   [ends_with?   maximum]]
  )

(the .public (borders? interval elem)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate it)))
  (or (starts_with? elem interval)
      (ends_with? elem interval)))

(the .public (union left right)
  (for_any (_ it)
    (-> (Interval it) (Interval it)
        (Interval it)))
  (implementation
   (the enum (its ..enum right))
   (the minimum (order.minor (by right order) (by left minimum) (by right minimum)))
   (the maximum (order.major (by right order) (by left maximum) (by right maximum)))))

(the .public (intersection left right)
  (for_any (_ it)
    (-> (Interval it) (Interval it)
        (Interval it)))
  (implementation
   (the enum (its ..enum right))
   (the minimum (order.major (by right order) (by left minimum) (by right minimum)))
   (the maximum (order.minor (by right order) (by left maximum) (by right maximum)))))

(the .public (complement interval)
  (for_any (_ it)
    (-> (Interval it)
        (Interval it)))
  (implementation
   (the enum (its ..enum interval))
   (the minimum (by interval succ (by interval maximum)))
   (the maximum (by interval pred (by interval minimum)))))

(the .public (precedes? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (let [(open "[0]") reference
        limit (by reference minimum)]
    (and (< limit (by it minimum))
         (< limit (by it maximum)))))

(the .public (succeeds? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (precedes? it reference))

(with_template [<name> <comp>]
  [(the .public (<name> reference it)
     (for_any (_ it)
       (-> it
           (Predicate (Interval it))))
     (let [(open ",:[0]") it]
       (and (<comp> reference ,:minimum)
            (<comp> reference ,:maximum))))]

  [[before? ,:<]
   [after?  (order.> ,:order)]]
  )

(the .public (meets? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (let [(open ",:[0]") reference
        limit (by reference minimum)]
    (and (,:= limit (by it maximum))
         (order.<= ,:order limit (by it minimum)))))

(the .public (touches? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (or (meets? reference it)
      (meets? it reference)))

(with_template [<name> <eq_side> <ineq> <ineq_side>]
  [(the .public (<name> reference it)
     (for_any (_ it)
       (-> (Interval it)
           (Predicate (Interval it))))
     (let [(open ",:[0]") reference]
       (and (,:= (by reference <eq_side>)
                 (by it <eq_side>))
            (<ineq> ,:order
                    (by reference <ineq_side>)
                    (by it <ineq_side>)))))]

  [[starts?   ,:minimum order.<= ,:maximum]
   [finishes? ,:maximum    order.>= ,:minimum]]
  )

(the .public equivalence
  (for_any (_ it)
    (Equivalence (Interval it)))
  (implementation
   (the (= expected actual)
     (let [(open ",:[0]") expected]
       (and (,:= ,:minimum (by actual minimum))
            (,:= ,:maximum (by actual maximum)))))))

(alias [=]
       ..equivalence)

(the .public (nested? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (if (or (singleton? it)
          (and (inner? reference) (inner? it))
          (and (outer? reference) (outer? it)))
      (let [(open ",:[0]") reference]
        (and (order.>= ,:order (by reference minimum) (by it minimum))
             (order.<= ,:order (by reference maximum) (by it maximum))))

      (or (singleton? reference)
          (and (inner? reference) (outer? it)))
      false

      ... (and (outer? reference) (inner? it))
      (let [(open ",:[0]") reference]
        (or (and (order.>= ,:order (by reference minimum) (by it minimum))
                 (order.> ,:order (by reference minimum) (by it maximum)))
            (and (,:< (by reference maximum) (by it minimum))
                 (order.<= ,:order (by reference maximum) (by it maximum)))))
      ))

(the .public (overlaps? reference it)
  (for_any (_ it)
    (-> (Interval it)
        (Predicate (Interval it))))
  (let [(open ",:[0]") reference]
    (and (not (by ..equivalence = reference it))
         (if (singleton? it)
             false

             (singleton? reference)
             (nested? it reference)

             (or (and (inner? it) (outer? reference))
                 (and (outer? it) (inner? reference)))
             (or (order.>= ,:order (by reference minimum) (by it maximum))
                 (order.<= ,:order (by reference maximum) (by it minimum)))

             ... both inner
             (inner? it)
             (inner? (intersection reference it))

             ... both outer
             (not (nested? reference it))
             ))))
