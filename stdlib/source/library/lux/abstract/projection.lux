... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except or and not only when)
   [abstract
    [functor (.only Functor)]
    [format (.only Format)]
    ["[0]" monad (.only Monad)]]
   [control
    ["[0]" state]]
   ["[0]" error (.only)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]]]
   [macro
    ["[0]" expansion]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [function
    [predicate (.only Predicate)]]]])

(every .public (Projection state it)
  (state.With state Try it))

(the .public functor
  (for_any (_ state)
    (Functor (Projection state)))
  (implementation
   (the (each f ma)
     (function (_ input)
       (.when (ma input)
         {try.#Success [input' a]}
         {try.#Success [input' (f a)]}
         
         failure
         (as_expected failure))))))

(the .public monad
  (for_any (_ state)
    (Monad (Projection state)))
  (implementation
   (the functor ..functor)

   (the (pure x)
     (function (_ input)
       {try.#Success [input x]}))

   (the (conjoint mma)
     (function (_ input)
       (.when (mma input)
         {try.#Success [input' ma]}
         (ma input')

         failure
         (as_expected failure))))))

(the .public (assertion message test)
  (for_any (_ state)
    (-> Text Bit
        (Projection state Any)))
  (function (_ input)
    (if test
        {try.#Success [input []]}
        {try.#Failure message})))

(the .public (maybe projection)
  (for_any (_ state it)
    (-> (Projection state it)
        (Projection state (Maybe it))))
  (function (_ input)
    (.when (projection input)
      {try.#Success [input' x]}
      {try.#Success [input' {.#Some x}]}

      {try.#Failure _}
      {try.#Success [input {.#None}]})))

(the .public (value input projection)
  (for_any (_ state it)
    (-> state (Projection state it)
        (Try [state it])))
  (projection input))

(the .public (either this that)
  (for_any (_ state it)
    (-> (Projection state it) (Projection state it)
        (Projection state it)))
  (function (_ tokens)
    (.when (this tokens)
      {try.#Failure _}
      (that tokens)
      
      success
      success)))

(expansion.let [<failure> {try.#Failure error}
                <handle_failure!> (these <failure>
                                         <failure>)]
  (these (the .public (and left right)
           (for_any (_ state left right)
             (-> (Projection state left) (Projection state right)
                 (Projection state (And left right))))
           (function (_ state)
             (.when (left state)
               {try.#Success [state left]}
               (.when (right state)
                 {try.#Success [state right]}
                 {try.#Success [state [left right]]}
                 

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (or left right)
           (for_any (_ state left right)
             (-> (Projection state left) (Projection state right)
                 (Projection state (Or left right))))
           (function (_ tokens)
             (.when (left tokens)
               {try.#Success [tokens' output]}
               {try.#Success [tokens' {0b output}]}
               
               {try.#Failure _}
               (.when (right tokens)
                 {try.#Success [tokens' output]}
                 {try.#Success [tokens' {1b output}]}
                 
                 <handle_failure!>))))

         (the .public (some it)
           (for_any (_ state it)
             (-> (Projection state it)
                 (Projection state (List it))))
           (|>> (list.dynamic it)
                {try.#Success}))

         (the .public (many projection)
           (for_any (_ state it)
             (-> (Projection state it)
                 (Projection state (List it))))
           (function (_ state)
             (.when (projection state)
               {try.#Success [state head]}
               (.when (..some projection state)
                 {try.#Success [state tail]}
                 {try.#Success [state (list#composite (list head) tail)]}

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (after parameter it)
           (for_any (_ state _ it)
             (-> (Projection state _) (Projection state it)
                 (Projection state it)))
           (function (_ state)
             (.when (parameter state)
               {try.#Success [state _]}
               (.when (it state)
                 <handle_failure!>

                 success
                 success)

               <handle_failure!>)))

         (the .public (before parameter it)
           (for_any (_ state _ it)
             (-> (Projection state _) (Projection state it)
                 (Projection state it)))
           (function (_ state)
             (.when (it state)
               {try.#Success [state it]}
               (.when (parameter state)
                 {try.#Success [state _]}
                 {try.#Success [state it]}

                 <handle_failure!>)

               <handle_failure!>)))

         (the .public (of_try operation)
           (for_any (_ state it)
             (-> (Try it)
                 (Projection state it)))
           (function (_ input)
             (.when operation
               {try.#Success output}
               {try.#Success [input output]}
               
               <handle_failure!>)))

         (the .public (parses projection)
           (for_any (_ state it)
             (-> (Projection state it)
                 (Projection state Any)))
           (function (_ input)
             (.when (projection input)
               {try.#Success [input' _]}
               {try.#Success [input' []]}

               <handle_failure!>)))

         (the .public (of format projection)
           (for_any (_ state medium it)
             (-> (Format medium it) (Projection state medium)
                 (Projection state it)))
           (function (_ input)
             (.when (projection input)
               {try.#Success [input' to_decode]}
               (.when (by format of to_decode)
                 {try.#Success value}
                 {try.#Success [input' value]}

                 <handle_failure!>)

               <handle_failure!>))))
  )

(the .public (at_most amount projection)
  (for_any (_ state it)
    (-> Natural (Projection state it)
        (Projection state (List it))))
  (function (_ state)
    (let [[[_ state] it] (list.dynamic (function (_ [amount state])
                                         (.when amount
                                           0 {.#None}
                                           _ (.when (projection state)
                                               {try.#Success [state item]}
                                               {.#Some [[(-- amount) state] item]}

                                               {try.#Failure _}
                                               {.#None})))
                                       [amount state])]
      {try.#Success [state it]})))

(error.the .public does_not_meet_condition)

(the .public (when condition next)
  (for_any (_ state it)
    (-> Bit (Projection state it)
        (Projection state it)))
  (function (_ state)
    (if condition
        (next state)
        {try.#Failure ..does_not_meet_condition})))

(the .public (exactly amount projection)
  (for_any (_ state it)
    (-> Natural (Projection state it)
        (Projection state (List it))))
  (monad.let ..monad
    [it (at_most amount projection)
     ..when (n.= amount (list.size it))]
    (pure it)))

(the .public (at_least amount projection)
  (for_any (_ state it)
    (-> Natural (Projection state it)
        (Projection state (List it))))
  (monad.let [! ..monad]
    [minimum (..exactly amount projection)]
    (by ! each (list#composite minimum)
        (..some projection))))

(the .public (between minimum additional projection)
  (for_any (_ state it)
    (-> Natural Natural (Projection state it)
        (Projection state (List it))))
  (monad.let [! ..monad]
    [minimum (..exactly minimum projection)]
    (.when additional
      0 (pure minimum)
      _ (by ! each (list#composite minimum)
            (..at_most additional projection)))))

(the .public (else value projection)
  (for_any (_ state it)
    (-> it (Projection state it)
        (Projection state it)))
  (function (_ input)
    (.when (projection input)
      {try.#Failure error}
      {try.#Success [input value]}

      success
      success)))

(the .public (delimited_by delimiter projection)
  (for_any (_ state delimiter it)
    (-> (Projection state delimiter) (Projection state it)
        (Projection state (List it))))
  (|> projection
      (..after delimiter)
      ..some
      (..and projection)
      (by ..functor each (function (_ [head tail])
                           (list#composite (list head) tail)))
      (else (list))))

(error.the .public did_not_fail)

(the .public (not projection)
  (for_any (_ state it)
    (-> (Projection state it)
        (Projection state Any)))
  (function (_ input)
    (.when (projection input)
      {try.#Failure msg}
      {try.#Success [input []]}
      
      _
      {try.#Failure ..did_not_fail})))

(the .public (failure message)
  (for_any (_ state)
    (-> Error
        (Projection state)))
  (function (_ input)
    {try.#Failure message}))

(the .public remaining
  (for_any (_ state)
    (Projection state state))
  (function (_ inputs)
    {try.#Success [inputs inputs]}))

(the .public (rec projection)
  (for_any (_ state it)
    (-> (-> (Projection state it)
            (Projection state it))
        (Projection state it)))
  (function (with_recursion inputs)
    (|> with_recursion
        projection
        (..value inputs))))

(the .public (only test projection)
  (for_any (_ state it)
    (-> (Predicate it)
        (Change (Projection state it))))
  (monad.let ..monad
    [output projection
     _ (..assertion "Constraint failed." (test output))]
    (pure output)))

(the .public (parses? projection)
  (for_any (_ state it)
    (-> (Projection state it)
        (Projection state Bit)))
  (function (_ input)
    (.when (projection input)
      {try.#Success [input' _]}
      {try.#Success [input' true]}

      {try.#Failure error}
      {try.#Success [input false]})))

(the .public (speculative projection)
  (for_any (_ state it)
    (-> (Projection state it)
        (Projection state it)))
  (function (_ input)
    (.when (projection input)
      {try.#Success [_ output]}
      {try.#Success [input output]}

      failure
      failure)))
