(.require
 [library
  [lux (.except)]]
 [///
  [functor (.only Functor)]
  [apply (.only Apply)]
  [monad (.only Monad)]])

(type .public (Free F a)
  (Variant
   {#Pure a}
   {#Effect (F (Free F a))}))

(def .public (functor dsl)
  (All (_ F) (-> (Functor F) (Functor (Free F))))
  (implementation
   (def (each f ea)
     (when ea
       {#Pure a}
       {#Pure (f a)}
       
       {#Effect value}
       {#Effect (at dsl each (each f) value)}))))

(def .public (apply dsl)
  (All (_ F) (-> (Functor F) (Apply (Free F))))
  (implementation
   (def functor
     (..functor dsl))

   (def (on ea ef)
     (when [ef ea]
       [{#Pure f} {#Pure a}]
       {#Pure (f a)}

       [{#Pure f} {#Effect fa}]
       {#Effect (at dsl each
                    (at (..functor dsl) each f)
                    fa)}

       [{#Effect ff} _]
       {#Effect (at dsl each (on ea) ff)}
       ))))

(def .public (monad dsl)
  (All (_ F) (-> (Functor F) (Monad (Free F))))
  (implementation
   (def functor (..functor dsl))

   (def (in a)
     {#Pure a})

   (def (conjoint efefa)
     (when efefa
       {#Pure efa}
       (when efa
         {#Pure a}
         {#Pure a}

         {#Effect fa}
         {#Effect fa})
       
       {#Effect fefa}
       {#Effect (at dsl each
                    (at (monad dsl) conjoint)
                    fefa)}
       ))))
