(.module:
  [library
   [lux "*"]]
  [///
   [functor {"+" [Functor]}]
   [apply {"+" [Apply]}]
   [monad {"+" [Monad]}]])

(type: .public (Free F a)
  (Variant
   {#Pure a}
   {#Effect (F (Free F a))}))

(implementation: .public (functor dsl)
  (All (_ F) (-> (Functor F) (Functor (Free F))))
  
  (def: (each f ea)
    (case ea
      {#Pure a}
      {#Pure (f a)}
      
      {#Effect value}
      {#Effect (# dsl each (each f) value)})))

(implementation: .public (apply dsl)
  (All (_ F) (-> (Functor F) (Apply (Free F))))
  
  (def: &functor
    (..functor dsl))

  (def: (on ea ef)
    (case [ef ea]
      [{#Pure f} {#Pure a}]
      {#Pure (f a)}

      [{#Pure f} {#Effect fa}]
      {#Effect (# dsl each
                  (# (..functor dsl) each f)
                  fa)}

      [{#Effect ff} _]
      {#Effect (# dsl each (on ea) ff)}
      )))

(implementation: .public (monad dsl)
  (All (_ F) (-> (Functor F) (Monad (Free F))))

  (def: &functor (..functor dsl))

  (def: (in a)
    {#Pure a})

  (def: (conjoint efefa)
    (case efefa
      {#Pure efa}
      (case efa
        {#Pure a}
        {#Pure a}

        {#Effect fa}
        {#Effect fa})
      
      {#Effect fefa}
      {#Effect (# dsl each
                  (# (monad dsl) conjoint)
                  fefa)}
      )))
