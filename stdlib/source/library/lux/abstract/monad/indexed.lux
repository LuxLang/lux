... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global let)
   [abstract
    ["?" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)
      ["?[1]" \\projection]]]]
   ["[0]" macro (.only)
    ["[0]" syntax]]
   [meta
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]]]]
 ["[0]" //])

(every .public (Monad !)
  (Interface
   (is (for_any (_ condition value)
         (-> value
             (! condition condition value)))
       pure)

   (is (for_any (_ pre interim post input output)
         (-> (-> input
                 (! interim post output))
             (-> (! pre interim input)
                 (! pre post output))))
       then)))

(every Binding
  [Code Code])

(the binding
  (Projection Binding)
  (?.and ?list.any
         ?list.any))

(every Context
  (Variant
   {#Macro Name Code}
   {#Binding Binding}))

(the global
  (Projection Name)
  (//.let ?.monad
    [[module proper] ?code.name
     _ (?.assertion "" (when module "" false _ true))]
    (pure [module proper])))

(the context
  (Projection Context)
  (?.or (?.and ..global
               ?list.any)
        binding))

(the named_monad
  (Projection [(Maybe Text) Code])
  (?.either (?code.tuple (?.and (by ?.monad each (|>> {.#Some})
                                    ?code.local)
                                ?list.any))
            (by ?.monad each (|>> [{.#None}])
                ?list.any)))

(the .public let
  (syntax.macro (_ [[?name monad] ..named_monad
                    context (?code.tuple (?.some context))
                    expression ?list.any])
    (macro.with_names ['_ 'then]
      (.let [body (list#mix (function (_ context next)
                              (when context
                                {#Macro macro parameter}
                                (` ((, (code.name macro))
                                    (, parameter)
                                    (, next)))
                                
                                {#Binding [binding value]}
                                (` ((, 'then)
                                    (.function ((, '_) (, binding))
                                      (, next))
                                    (, value)))))
                            expression
                            (list.reversed context))]
        (pure (list (when ?name
                      {.#Some name}
                      (.let [name (code.local name)]
                        (` (.let [(, name) (, monad)
                                  [..pure (,' pure) ..then (, 'then)] (, name)]
                             (, body))))

                      {.#None}
                      (` (.let [[..pure (,' pure) ..then (, 'then)] (, monad)]
                           (, body))))))))))
