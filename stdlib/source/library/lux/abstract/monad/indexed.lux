... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except global)
   [control
    ["<>" parser]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    ["[0]" code (.only)
     ["<[1]>" \\parser (.only Parser)]]
    ["[0]" macro (.only)
     [syntax (.only syntax)]]]]]
 ["[0]" //])

(every .public (Monad !)
  (Interface
   (is (All (_ condition value)
         (-> value (! condition condition value)))
       in)

   (is (All (_ pre interim post input output)
         (-> (-> input (! interim post output))
             (-> (! pre interim input)
                 (! pre post output))))
       then)))

(every Binding
  [Code Code])

(def binding
  (Parser Binding)
  (<>.and <code>.any <code>.any))

(every Context
  (Variant
   {#Macro Symbol Code}
   {#Binding Binding}))

(def global
  (Parser Symbol)
  (//.do <>.monad
    [[module short] <code>.symbol
     _ (<>.assertion "" (when module "" false _ true))]
    (in [module short])))

(def context
  (Parser Context)
  (<>.or (<>.and ..global
                 <code>.any)
         binding))

(def (pair_list [binding value])
  (All (_ a) (-> [a a] (List a)))
  (list binding value))

(def named_monad
  (Parser [(Maybe Text) Code])
  (<>.either (<code>.tuple (<>.and (of <>.monad each (|>> {.#Some})
                                       <code>.local)
                                   <code>.any))
             (of <>.monad each (|>> [{.#None}])
                 <code>.any)))

(def .public do
  (syntax (_ [[?name monad] ..named_monad
              context (<code>.tuple (<>.some context))
              expression <code>.any])
    (macro.with_symbols [g!_ g!then]
      (let [body (list#mix (function (_ context next)
                             (when context
                               {#Macro macro parameter}
                               (` ((, (code.symbol macro))
                                   (, parameter)
                                   (, next)))
                               
                               {#Binding [binding value]}
                               (` ((, g!then)
                                   (.function ((, g!_) (, binding))
                                     (, next))
                                   (, value)))))
                           expression
                           (list.reversed context))]
        (in (list (when ?name
                    {.#Some name}
                    (let [name (code.local name)]
                      (` (let [(, name) (, monad)
                               [..in (,' in) ..then (, g!then)] (, name)]
                           (, body))))

                    {.#None}
                    (` (let [[..in (,' in) ..then (, g!then)] (, monad)]
                         (, body))))))))))
