... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except global)
   [control
    ["?" projection]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]]]
   [meta
    ["[0]" code (.only)
     ["?[1]" \\projection (.only Projection)]]
    ["[0]" macro (.only)
     ["[0]" syntax]]]]]
 ["[0]" //])

(every .public (Monad !)
  (Interface
   (is (for_any (_ condition value)
         (-> value
             (! condition condition value)))
       in)

   (is (for_any (_ pre interim post input output)
         (-> (-> input
                 (! interim post output))
             (-> (! pre interim input)
                 (! pre post output))))
       then)))

(every Binding
  [Code Code])

(the binding
  (Projection Binding)
  (?.and ?code.any
         ?code.any))

(every Context
  (Variant
   {#Macro Symbol Code}
   {#Binding Binding}))

(the global
  (Projection Symbol)
  (//.do ?.monad
    [[module short] ?code.symbol
     _ (?.assertion "" (when module "" false _ true))]
    (in [module short])))

(the context
  (Projection Context)
  (?.or (?.and ..global
               ?code.any)
        binding))

(the (pair_list [binding value])
  (for_any (_ of)
    (-> [of of]
        (List of)))
  (list binding value))

(the named_monad
  (Projection [(Maybe Text) Code])
  (?.either (?code.tuple (?.and (by ?.monad each (|>> {.#Some})
                                    ?code.local)
                                ?code.any))
            (by ?.monad each (|>> [{.#None}])
                ?code.any)))

(the .public do
  (syntax.macro (_ [[?name monad] ..named_monad
                    context (?code.tuple (?.some context))
                    expression ?code.any])
    (macro.with_symbols [g!_ g!then]
      (let [body (list#mix (function (_ context next)
                             (when context
                               {#Macro macro parameter}
                               (` ((, (code.symbol macro))
                                   (, parameter)
                                   (, next)))
                               
                               {#Binding [binding value]}
                               (` ((, g!then)
                                   (.function ((, g!_) (, binding))
                                     (, next))
                                   (, value)))))
                           expression
                           (list.reversed context))]
        (in (list (when ?name
                    {.#Some name}
                    (let [name (code.local name)]
                      (` (let [(, name) (, monad)
                               [..in (,' in) ..then (, g!then)] (, name)]
                           (, body))))

                    {.#None}
                    (` (let [[..in (,' in) ..then (, g!then)] (, monad)]
                         (, body))))))))))
