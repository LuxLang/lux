(.require
 [library
  [lux (.except)
   [meta
    ["@" target]]]]
 [//
  [monad (.only Monad do)]
  ["[0]" functor (.only Functor)]])

(type .public (Apply f)
  (Interface
   (is (Functor f)
       functor)
   (is (All (_ a b)
         (-> (f a) (f (-> a b)) (f b)))
       on)))

(def .public (composite f_monad f_apply g_apply)
  (All (_ F G)
    (-> (Monad F) (Apply F) (Apply G)
        ... TODO: Replace (All (_ a) (F (G a))) with (functor.Then F G)
        (Apply (All (_ a) (F (G a))))))
  (implementation
   (def functor
     (functor.composite (the functor f_apply)
                        (the functor g_apply)))
   (def (on fgx fgf)
     ... TODO: Switch from this version to the one below (in comments) ASAP.
     (for @.old (let [fgf' (at f_apply on
                               fgf
                               (at f_monad in (function (_ gf gx) (at g_apply on gx gf))))]
                  (as_expected (at f_apply on (as_expected fgx) (as_expected fgf'))))
          (let [fgf' (at f_apply on
                         fgf
                         (at f_monad in (function (_ gf gx) (at g_apply on gx gf))))]
            (at f_apply on fgx fgf')))
     ... (let [applyF (at f_apply on)
     ...       applyG (at g_apply on)]
     ...   (all applyF
     ...       fgf
     ...       (at f_monad in applyG)
     ...       fgx))
     )))
