... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)]]
 [//
  [monad (.only Monad
                do)]
  ["[0]" functor (.only Functor)]])

(every .public (Apply !)
  (Interface
   (is (Functor !)
       functor)
   (is (All (_ @0 @1)
         (-> (! @0) (! (-> @0 @1))
             (! @1)))
       on)))

(the .public (composite outer_monad outer_apply inner_apply)
  (All (_ outer inner)
    (-> (Monad outer) (Apply outer) (Apply inner)
        ... TODO: Replace (All (_ of) (outer (inner of))) with (functor.Then outer inner)
        (Apply (All (_ of) (outer (inner of))))))
  (implementation
   (the functor
     (functor.composite (its ..functor outer_apply)
                        (its ..functor inner_apply)))
   (the (on oix oif)
     ... TODO: Switch from this version to the one below (in comments) ASAP.
     (for .old (let [oif' (of outer_apply on
                              oif
                              (of outer_monad in (function (_ if ix) (of inner_apply on ix if))))]
                 (as_expected (of outer_apply on (as_expected oix) (as_expected oif'))))
          (let [oif' (of outer_apply on
                         oif
                         (of outer_monad in (function (_ if ix) (of inner_apply on ix if))))]
            (of outer_apply on oix oif')))
     ... (let [outer_apply (of outer_apply on)
     ...       inner_apply (of inner_apply on)]
     ...   (all outer_apply
     ...       oif
     ...       (of outer_monad in inner_apply)
     ...       oix))
     )))
