... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except left right
                function)]])

(every .public (Functor !)
  (Interface
   (is (All (_ input output)
         (-> (-> input
                 output)
             (-> (! input)
                 (! output))))
       each)))

(every .public (Constant of _)
  of)

(the .public constant
  (All (_ of _)
    (Functor (Constant of)))
  (implementation
   (the (each $ it)
     it)))

(every .public (Variable of)
  of)

(the .public variable
  (Functor Variable)
  (implementation
   (the (each $ !it)
     ($ !it))))

(every .public (Sum left right)
  (All (_ of)
    (Or (left of)
        (right of))))

(the .public (sum left right)
  (All (_ left right)
    (-> (Functor left) (Functor right)
        (Functor (Sum left right))))
  (implementation
   (the (each f fa|ga)
     (when fa|ga
       {.#Left fa}
       {.#Left (left f fa)}
       
       {.#Right ga}
       {.#Right (right f ga)}))))

(every .public (Product left right)
  (All (_ of)
    (And (left of)
         (right of))))

(the .public (product left right)
  (All (_ left right)
    (-> (Functor left) (Functor right)
        (Functor (Product left right))))
  (implementation
   (the (each f [fa ga])
     [(left f fa)
      (right f ga)])))

(every .public (Function input output)
  (All (_ of)
    (-> input
        (output of))))

(the .public (function it)
  (All (_ input output)
    (-> (Functor output)
        (Functor (Function input output))))
  (implementation
   (the (each $ !it)
     (|>> !it
          ((it $))))))

(for .old
     (these)
     
     (these (every .public (Recursive it)
              (All (self of)
                (it self of)))

            (the .public (recursive it)
              (All (_ of)
                (-> (-> (Functor of)
                        (Functor of))
                    (Functor of)))
              (implementation
               (the (each $ !it)
                 ((it each) $ !it))))))

(every .public (Then outer inner)
  (All (_ of)
    (outer (inner of))))

(the .public (composite outer inner)
  (All (_ outer inner)
    (-> (Functor outer) (Functor inner)
        (Functor (Then outer inner))))
  (implementation
   (the (each f fga)
     (outer (inner f) fga))))
