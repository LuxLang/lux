... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except left right
                function)
   ["//" algorithm]]])

(every .public (Functor !)
  (Interface
   (is (All (_ input output)
         (-> (-> input
                 output)
             (-> (! input)
                 (! output))))
       each)))

(the .public constant
  (All (_ of _)
    (Functor (//.Constant of)))
  (implementation
   (the (each value it)
     it)))

(the .public variable
  (Functor //.Variable)
  (implementation
   (the (each value it)
     (value it))))

(the .public (sum left right)
  (All (_ left right)
    (-> (Functor left) (Functor right)
        (Functor (//.Sum left right))))
  (implementation
   (the (each value it)
     (when it
       {.#Left it}
       {.#Left (left value it)}
       
       {.#Right it}
       {.#Right (right value it)}))))

(the .public (product left right)
  (All (_ left right)
    (-> (Functor left) (Functor right)
        (Functor (//.Product left right))))
  (implementation
   (the (each value [left_it right_it])
     [(left value left_it)
      (right value right_it)])))

(every .public (Function input output)
  (All (_ of)
    (-> input
        (output of))))

(the .public (function output)
  (All (_ input output)
    (-> (Functor output)
        (Functor (Function input output))))
  (implementation
   (the (each value it)
     (|>> it
          ((output value))))))

(for .old
     (these)
     
     (the .public (recursive body)
       (All (_ of)
         (-> (-> (Functor of)
                 (Functor of))
             (Functor of)))
       (implementation
        (the (each value it)
          ((body each) value it)))))

(every .public (Then outer inner)
  (All (_ of)
    (outer (inner of))))

(the .public (composite outer inner)
  (All (_ outer inner)
    (-> (Functor outer) (Functor inner)
        (Functor (Then outer inner))))
  (implementation
   (the (each value it)
     (outer (inner value) it))))
