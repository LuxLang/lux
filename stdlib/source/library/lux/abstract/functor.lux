(.require
 [library
  [lux (.except Or And)]])

(type .public (Functor f)
  (Interface
   (is (All (_ a b)
         (-> (-> a b)
             (-> (f a) (f b))))
       each)))

(type .public (Or f g)
  (All (_ a) (.Or (f a) (g a))))

(def .public (sum (open "f#[0]") (open "g#[0]"))
  (All (_ F G) (-> (Functor F) (Functor G) (Functor (..Or F G))))
  (implementation
   (def (each f fa|ga)
     (when fa|ga
       {.#Left fa}
       {.#Left (f#each f fa)}
       
       {.#Right ga}
       {.#Right (g#each f ga)}))))

(type .public (And f g)
  (All (_ a) (.And (f a) (g a))))

(def .public (product (open "f#[0]") (open "g#[0]"))
  (All (_ F G) (-> (Functor F) (Functor G) (Functor (..And F G))))
  (implementation
   (def (each f [fa ga])
     [(f#each f fa)
      (g#each f ga)])))

(type .public (Then f g)
  (All (_ a) (f (g a))))

(def .public (composite (open "f#[0]") (open "g#[0]"))
  (All (_ F G) (-> (Functor F) (Functor G) (Functor (..Then F G))))
  (implementation
   (def (each f fga)
     (f#each (g#each f) fga))))
