(.require
 [library
  [lux (.except and)]])

(type .public (Monoid a)
  (Interface
   (is a
       identity)
   (is (-> a a a)
       composite)))

(def .public (and left right)
  (All (_ left right)
    (-> (Monoid left) (Monoid right)
        (Monoid [left right])))
  (implementation
   (def identity
     [(of left identity)
      (of right identity)])
   
   (def (composite [lL rL] [lR rR])
     [(of left composite lL lR)
      (of right composite rL rR)])))
