(.require
 [library
  [lux (.except and)]])

(type .public (Monoid a)
  (Interface
   (is a
       identity)
   (is (-> a a a)
       composite)))

(def .public (and left right)
  (All (_ l r) (-> (Monoid l) (Monoid r) (Monoid [l r])))
  (implementation
   (def identity
     [(at left identity)
      (at right identity)])
   
   (def (composite [lL rL] [lR rR])
     [(at left composite lL lR)
      (at right composite rL rR)])))
