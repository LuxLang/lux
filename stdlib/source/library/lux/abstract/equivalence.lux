(.require
 [library
  [lux (.except)]]
 [//
  [functor
   ["[0]" contravariant]]])

(type .public (Equivalence a)
  (Interface
   (is (-> a a Bit)
       =)))

(def .public (rec sub)
  (All (_ a)
    (-> (-> (Equivalence a) (Equivalence a)) (Equivalence a)))
  (implementation
   (def (= left right)
     (sub = left right))))

(def .public functor
  (contravariant.Functor Equivalence)
  (implementation
   (def (each f equivalence)
     (implementation
      (def (= reference sample)
        (at equivalence = (f reference) (f sample)))))))
