... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [function
    [predicate (.only Predicate)]]]]
 [//
  [functor
   ["[0]" contravariant]]])

(every .public (Equivalence it)
  (Interface
   (is (-> it it
           Bit)
       =)))

(the .public (class = it)
  (for_any (_ it)
    (-> (Equivalence it) it
        (Predicate it)))
  (= it))

(the .public functor
  (contravariant.Functor Equivalence)
  (implementation
   (the (each value it)
     (implementation
      (the (= expected actual)
        (by it = (value expected) (value actual)))))))

(the .public (sum left right)
  (for_any (_ left right)
    (-> (Equivalence left) (Equivalence right)
        (Equivalence (Or left right))))
  (implementation
   (the (= expected actual)
     (when [expected actual]
       [{.#Left expected} {.#Left actual}]
       (by left = expected actual)
       
       [{.#Right expected} {.#Right actual}]
       (by right = expected actual)

       _
       false))))

(the .public (product left right)
  (for_any (_ left right)
    (-> (Equivalence left) (Equivalence right)
        (Equivalence (And left right))))
  (implementation
   (the (= [leftE rightE] [leftA rightA])
     (and (by left = leftE leftA)
          (by right = rightE rightA)))))

(the .public (recursive sub)
  (for_any (_ it)
    (-> (Change (Equivalence it))
        (Equivalence it)))
  (implementation
   (the (= left right)
     (sub = left right))))
