(.using
 [library
  [lux (.except)]]
 [// (.only CoMonad)
  [//
   [functor (.only Functor)]]])

(type: .public (Free F a)
  [a (F (Free F a))])

(def: .public (functor dsl)
  (All (_ F) (-> (Functor F) (Functor (Free F))))
  (implementation
   (def: (each f [head tail])
     [(f head) (at dsl each (each f) tail)])))

(def: .public (comonad dsl)
  (All (_ F) (-> (Functor F) (CoMonad (Free F))))
  (implementation
   (def: functor (..functor dsl))

   (def: (out [head tail])
     head)

   (def: (disjoint [head tail])
     [[head tail]
      (at dsl each disjoint tail)])))
