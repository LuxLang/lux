(.module:
  [library
   [lux #*]]
  [// (#+ CoMonad)
   [//
    [functor (#+ Functor)]]])

(type: #export (CoFree F a)
  {#.doc (doc "The CoFree CoMonad.")}
  [a (F (CoFree F a))])

(implementation: #export (functor dsl)
  (All [F] (-> (Functor F) (Functor (CoFree F))))
  
  (def: (map f [head tail])
    [(f head) (\ dsl map (map f) tail)]))

(implementation: #export (comonad dsl)
  (All [F] (-> (Functor F) (CoMonad (CoFree F))))

  (def: &functor (..functor dsl))

  (def: (out [head tail])
    head)

  (def: (split [head tail])
    [[head tail]
     (\ dsl map split tail)]))
