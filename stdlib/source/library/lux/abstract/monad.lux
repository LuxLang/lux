(.module:
  [library
   [lux #*
    [meta
     ["." location]]]]
  [//
   [functor (#+ Functor)]])

(def: (list\fold f init xs)
  (All [a b]
    (-> (-> b a a) a (List b) a)) 
  (case xs
    #.End
    init

    (#.Item x xs')
    (list\fold f (f x init) xs')))

(def: (list\size xs)
  (All [a] (-> (List a) Nat))
  (loop [counter 0
         xs xs]
    (case xs
      #.End
      counter

      (#.Item _ xs')
      (recur (inc counter) xs'))))

(def: (reversed xs)
  (All [a]
    (-> (List a) (List a)))
  (list\fold (function (_ head tail) (#.Item head tail))
             #.End
             xs))

(def: (pairs xs)
  (All [a] (-> (List a) (List [a a])))
  (case xs
    (#.Item x1 (#.Item x2 xs'))
    (#.Item [x1 x2] (pairs xs'))

    _
    #.End))

(interface: #export (Monad m)
  {#.doc (doc "A monad is a monoid in the category of endofunctors."
              "What's the problem?")}

  (: (Functor m)
     &functor)
  (: (All [a]
       (-> a (m a)))
     in)
  (: (All [a]
       (-> (m (m a)) (m a)))
     join))

(macro: #export (do tokens state)
  {#.doc (doc "Macro for easy concatenation of monadic operations."
              (do monad
                [y (f1 x)
                 z (f2 z)]
                (in (f3 z))))}
  (case (: (Maybe [(Maybe Text) Code (List Code) Code])
           (case tokens
             (^ (list [_ (#.Record (list [[_ (#.Identifier ["" name])] monad]))] [_ (#.Tuple bindings)] body))
             (#.Some [(#.Some name) monad bindings body])
             
             (^ (list monad [_ (#.Tuple bindings)] body))
             (#.Some [#.None monad bindings body])

             _
             #.None))
    (#.Some [?name monad bindings body])
    (if (|> bindings list\size .int ("lux i64 %" +2) ("lux i64 =" +0))
      (let [[module short] (name_of ..do)
            gensym (: (-> Text Code)
                      (|>> ($_ "lux text concat" module " " short " ") [""] #.Identifier [location.dummy]))
            g!_ (gensym "_")
            g!map (gensym "map")
            g!join (gensym "join")
            body' (list\fold (: (-> [Code Code] Code Code)
                                (function (_ binding body')
                                  (let [[var value] binding]
                                    (case var
                                      [_ (#.Tag ["" "let"])]
                                      (` (let (~ value) (~ body')))

                                      _
                                      (` (|> (~ value) ((~ g!map) (function ((~ g!_) (~ var)) (~ body'))) (~ g!join)))
                                      ))))
                             body
                             (reversed (pairs bindings)))]
        (#.Right [state (list (case ?name
                                (#.Some name)
                                (let [name [location.dummy (#.Identifier ["" name])]]
                                  (` ({(~ name)
                                       ({[(~ g!map) (~' in) (~ g!join)]
                                         (~ body')}
                                        (~ name))}
                                      (~ monad))))
                                
                                #.None
                                (` ({[(~ g!map) (~' in) (~ g!join)]
                                     (~ body')}
                                    (~ monad)))))]))
      (#.Left "'do' bindings must have an even number of parts."))

    #.None
    (#.Left "Wrong syntax for 'do'")))

(def: #export (bind monad f)
  {#.doc (doc "Apply a function with monadic effects to a monadic value and yield a new monadic value.")}
  (All [! a b]
    (-> (Monad !) (-> a (! b))
        (-> (! a) (! b))))
  (|>> (\ monad map f)
       (\ monad join)))

(def: #export (seq monad)
  {#.doc "Run all the monadic values in the list and produce a list of the base values."}
  (All [M a]
    (-> (Monad M) (List (M a))
        (M (List a))))
  (let [(^open "!\.") monad]
    (function (recur xs)
      (case xs
        #.End
        (!\in #.End)
        
        (#.Item x xs')
        (|> x
            (!\map (function (_ _x)
                     (!\map (|>> (#.Item _x)) (recur xs'))))
            !\join)))))

(def: #export (map monad f)
  {#.doc "Apply a monadic function to all values in a list."}
  (All [M a b]
    (-> (Monad M) (-> a (M b)) (List a)
        (M (List b))))
  (let [(^open "!\.") monad]
    (function (recur xs)
      (case xs
        #.End
        (!\in #.End)
        
        (#.Item x xs')
        (|> (f x)
            (!\map (function (_ _x)
                     (!\map (|>> (#.Item _x)) (recur xs'))))
            !\join)))))

(def: #export (only monad f)
  {#.doc "Filter the values in a list with a monadic function."}
  (All [! a b]
    (-> (Monad !) (-> a (! Bit)) (List a)
        (! (List a))))
  (let [(^open "!\.") monad]
    (function (recur xs)
      (case xs
        #.End
        (!\in #.End)
        
        (#.Item head xs')
        (|> (f head)
            (!\map (function (_ verdict)
                     (!\map (function (_ tail)
                              (if verdict
                                (#.Item head tail)
                                tail))
                            (recur xs'))))
            !\join)))))

(def: #export (fold monad f init xs)
  {#.doc "Fold a list with a monadic function."}
  (All [M a b]
    (-> (Monad M) (-> b a (M a)) a (List b)
        (M a)))
  (case xs
    #.End
    (\ monad in init)

    (#.Item x xs')
    (do monad
      [init' (f x init)]
      (fold monad f init' xs'))))
