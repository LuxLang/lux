... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except let)
   [meta
    ["[0]" provenance]]]]
 [//
  [functor (.only Functor)]])

(every .public (Monad !)
  (Interface
   (is (Functor !)
       functor)
   (is (for_any (_ it)
         (-> it
             (! it)))
       pure)
   (is (for_any (_ it)
         (-> (! (! it))
             (! it)))
       conjoint)))

(the with_monad (.in_module# .prelude with_monad))
(the _generated_name (.in_module# .prelude generated_name))
(the _meta:monad (.in_module# .prelude meta:monad))
(the _failure (.in_module# .prelude failure))
(the _expansion:let (.in_module# .prelude expansion:let))
(the list:in_reverse (.in_module# .prelude list:in_reverse))
(the list:mix (.in_module# .prelude list:mix))

(the ?:value (.in_module# .prelude ?:value))
(the ?:each (.in_module# .prelude ?:each))
(the ?:pure (.in_module# .prelude ?:pure))
(the ?:any (.in_module# .prelude ?:any))
(the ?:local (.in_module# .prelude ?:local))
(the ?:tuple (.in_module# .prelude ?:tuple))
(the ?:either (.in_module# .prelude ?:either))
(the ?:and (.in_module# .prelude ?:and))
(the ?:some (.in_module# .prelude ?:some))
(the ?:rest (.in_module# .prelude ?:rest))

(the .public let
  (macro (_ tokens)
    (when (|> (all ?:and
                   (?:either (?:tuple (?:and (?:each (|>> {.:Some}) ?:local) ?:any))
                             (?:and (?:pure {.:None}) ?:any))
                   (?:tuple (?:some (?:and ?:any ?:any)))
                   ?:any)
              (?:value tokens))
      {.:Some [[?name monad] bindings body]}
      (with_monad _meta:monad
        ['_ (_generated_name "'_")
         'each (_generated_name "'each")
         'conjoint (_generated_name "'conjoint")]
        (.let [[module proper] (name ..let)
               name (is (-> Text Code)
                        (|>> (.text_composite# module " " proper " ")
                             [""]
                             [provenance.dummy]
                             {.:Name}))
               body' (list:mix (is (-> [Code Code] Code Code)
                                   (function (_ binding body')
                                     (<| (_expansion:let [<default> (` (|> (, value)
                                                                           ((, 'each) (function ((, '_) (, var))
                                                                                        (, body')))
                                                                           (, 'conjoint)))])
                                         (.let [[var value] binding]
                                           (when var
                                             {.:Name _ ["" _]}
                                             <default>

                                             {.:Name _ _}
                                             (` ((, var) (, value) (, body')))

                                             _
                                             <default>)))))
                               body
                               (list:in_reverse bindings))]
          (pure (list (when ?name
                        {.:Some name}
                        (.let [name {.:Name provenance.dummy ["" name]}]
                          (` (.when (, monad)
                               (, name)
                               (.when (, name)
                                 [(, 'each) (,' pure) (, 'conjoint)]
                                 (, body')))))
                        
                        {.:None}
                        (` (.when (, monad)
                             [(, 'each) (,' pure) (, 'conjoint)]
                             (, body'))))))))

      {.:None}
      (_failure .wrong_syntax))))

(the .public (then monad f)
  (for_any (_ ! before after)
    (-> (Monad !) (-> before (! after))
        (-> (! before) (! after))))
  (|>> (by monad each f)
       (by monad conjoint)))

(the .public deferred
  (macro (_ tokens)
    (when tokens
      (list {.:Tuple _ (list ! after)}
            before)
      (with_monad _meta:monad
        ['_ (_generated_name "'_")
         'it (_generated_name "'it")]
        (pure (list (` (..let (, !)
                         [(, 'it) (, before)
                          (, '_) (, after)]
                         ((,' pure) (, 'it)))))))

      _
      (_failure .wrong_syntax))))
