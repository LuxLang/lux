... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except all only bindings_must_be_pairs)
   [meta
    ["[0]" location]]]]
 [//
  [functor (.only Functor)]])

(the (list#mix f init xs)
  (All (_ part whole)
    (-> (-> part whole whole) whole (List part)
        whole)) 
  (when xs
    {.#End}
    init

    {.#Item x xs'}
    (list#mix f (f x init) xs')))

(the (list#size xs)
  (All (_ of)
    (-> (List of)
        Nat))
  (loop (again [counter 0
                xs xs])
    (when xs
      {.#End}
      counter

      {.#Item _ xs'}
      (again (++ counter) xs'))))

(the (reversed xs)
  (All (_ of)
    (-> (List of)
        (List of)))
  (list#mix (function (_ head tail) {.#Item head tail})
            {.#End}
            xs))

(the (pairs xs)
  (All (_ of)
    (-> (List of)
        (List [of of])))
  (when xs
    {.#Item x1 {.#Item x2 xs'}}
    {.#Item [x1 x2] (pairs xs')}

    _
    {.#End}))

(every .public (Monad !)
  (Interface
   (is (Functor !)
       functor)
   (is (All (_ of)
         (-> of
             (! of)))
       in)
   (is (All (_ of)
         (-> (! (! of))
             (! of)))
       conjoint)))

(the .public bindings_must_be_pairs
  Error
  (location.with (location.here)
    .bindings_must_be_pairs))

(the _do (.in_module# .prelude .do))
(the _generated_symbol (.in_module# .prelude .generated_symbol))
(the _meta#monad (.in_module# .prelude .meta#monad))
(the _failure (.in_module# .prelude .failure))

(the .public do
  (macro (_ tokens)
    (when (is (Maybe [(Maybe Text) Code (List Code) Code])
              (when tokens
                (list [_ {.#Tuple (list [_ {.#Symbol ["" name]}] monad)}] [_ {.#Tuple bindings}] body)
                {.#Some [{.#Some name} monad bindings body]}
                
                (list monad [_ {.#Tuple bindings}] body)
                {.#Some [{.#None} monad bindings body]}

                _
                {.#None}))
      {.#Some [?name monad bindings body]}
      (if (|> bindings list#size .int (.int_%# +2) (.i64_=# +0))
        (_do _meta#monad
             ['_ (_generated_symbol "'_")
              'each (_generated_symbol "'each")
              'conjoint (_generated_symbol "'conjoint")]
             (let [[module short] (symbol ..do)
                   symbol (is (-> Text Code)
                              (|>> (.text_composite# module " " short " ") [""] {.#Symbol} [location.dummy]))
                   body' (list#mix (is (-> [Code Code] Code Code)
                                       (function (_ binding body')
                                         (with_expansions [<default> (` (|> (, value)
                                                                            ((, 'each) (function ((, '_) (, var))
                                                                                         (, body')))
                                                                            (, 'conjoint)))]
                                           (let [[var value] binding]
                                             (when var
                                               [_ {.#Symbol ["" _]}]
                                               <default>

                                               [_ {.#Symbol _}]
                                               (` ((, var) (, value) (, body')))

                                               _
                                               <default>)))))
                                   body
                                   (reversed (pairs bindings)))]
               (in (list (when ?name
                           {.#Some name}
                           (let [name [location.dummy {.#Symbol ["" name]}]]
                             (` (.when (, monad)
                                  (, name)
                                  (.when (, name)
                                    [(, 'each) (,' in) (, 'conjoint)]
                                    (, body')))))
                           
                           {.#None}
                           (` (.when (, monad)
                                [(, 'each) (,' in) (, 'conjoint)]
                                (, body'))))))))
        (_failure ..bindings_must_be_pairs))

      {.#None}
      (_failure .wrong_syntax))))

(the .public (then monad f)
  (All (_ ! before after)
    (-> (Monad !) (-> before (! after))
        (-> (! before) (! after))))
  (|>> (of monad each f)
       (of monad conjoint)))

(the .public (all monad)
  (All (_ ! of)
    (-> (Monad !) (List (! of))
        (! (List of))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item x xs'}
        (|> x
            (/#each (function (_ _x)
                      (/#each (|>> {.#Item _x}) (again xs'))))
            /#conjoint)))))

(the .public (each monad f)
  (All (_ ! before after)
    (-> (Monad !) (-> before (! after)) (List before)
        (! (List after))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item x xs'}
        (|> (f x)
            (/#each (function (_ _x)
                      (/#each (|>> {.#Item _x}) (again xs'))))
            /#conjoint)))))

(the .public (only monad f)
  (All (_ ! of)
    (-> (Monad !) (-> of (! Bit)) (List of)
        (! (List of))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item head xs'}
        (|> (f head)
            (/#each (function (_ verdict)
                      (/#each (function (_ tail)
                                (if verdict
                                  {.#Item head tail}
                                  tail))
                              (again xs'))))
            /#conjoint)))))

(the .public (mix monad f init xs)
  (All (_ ! part whole)
    (-> (Monad !) (-> part whole (! whole)) whole (List part)
        (! whole)))
  (when xs
    {.#End}
    (of monad in init)

    {.#Item x xs'}
    (do monad
      [init' (f x init)]
      (mix monad f init' xs'))))

(the .public deferred
  (macro (_ tokens)
    (when tokens
      (list [_ {.#Tuple (list ! after)}]
            before)
      (_do _meta#monad
           ['_ (_generated_symbol "'_")
            'it (_generated_symbol "'it")]
           (in (list (` (..do (, !)
                          [(, 'it) (, before)
                           (, '_) (, after)]
                          ((,' in) (, 'it)))))))

      _
      (_failure .wrong_syntax))))
