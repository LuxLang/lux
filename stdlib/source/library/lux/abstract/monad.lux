... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except all only bindings_must_be_pairs)
   [meta
    ["[0]" location]]]]
 [//
  [functor (.only Functor)]])

(the (list#mix f init xs)
  (All (_ a b)
    (-> (-> b a a) a (List b) a)) 
  (when xs
    {.#End}
    init

    {.#Item x xs'}
    (list#mix f (f x init) xs')))

(the (list#size xs)
  (All (_ a) (-> (List a) Nat))
  (loop (again [counter 0
                xs xs])
    (when xs
      {.#End}
      counter

      {.#Item _ xs'}
      (again (++ counter) xs'))))

(the (reversed xs)
  (All (_ a)
    (-> (List a) (List a)))
  (list#mix (function (_ head tail) {.#Item head tail})
            {.#End}
            xs))

(the (pairs xs)
  (All (_ a) (-> (List a) (List [a a])))
  (when xs
    {.#Item x1 {.#Item x2 xs'}}
    {.#Item [x1 x2] (pairs xs')}

    _
    {.#End}))

(every .public (Monad m)
  (Interface
   (is (Functor m)
       functor)
   (is (All (_ a)
         (-> a (m a)))
       in)
   (is (All (_ a)
         (-> (m (m a)) (m a)))
       conjoint)))

(the .public bindings_must_be_pairs
  Error
  (location.with (location.here)
    .bindings_must_be_pairs))

(the .public do
  (macro (_ tokens state)
    (when (is (Maybe [(Maybe Text) Code (List Code) Code])
              (when tokens
                (list [_ {.#Tuple (list [_ {.#Symbol ["" name]}] monad)}] [_ {.#Tuple bindings}] body)
                {.#Some [{.#Some name} monad bindings body]}
                
                (list monad [_ {.#Tuple bindings}] body)
                {.#Some [{.#None} monad bindings body]}

                _
                {.#None}))
      {.#Some [?name monad bindings body]}
      (if (|> bindings list#size .int (.int_%# +2) (.i64_=# +0))
        (let [[module short] (symbol ..do)
              symbol (is (-> Text Code)
                         (|>> (.text_composite# module " " short " ") [""] {.#Symbol} [location.dummy]))
              g!_ (symbol "_")
              g!each (symbol "each")
              g!conjoint (symbol "conjoint")
              body' (list#mix (is (-> [Code Code] Code Code)
                                  (function (_ binding body')
                                    (with_expansions [<default> (` (|> (, value) ((, g!each) (function ((, g!_) (, var)) (, body'))) (, g!conjoint)))]
                                      (let [[var value] binding]
                                        (when var
                                          [_ {.#Symbol ["" _]}]
                                          <default>

                                          [_ {.#Symbol _}]
                                          (` ((, var) (, value) (, body')))

                                          _
                                          <default>)))))
                              body
                              (reversed (pairs bindings)))]
          {.#Right [state (list (when ?name
                                  {.#Some name}
                                  (let [name [location.dummy {.#Symbol ["" name]}]]
                                    (` (.when (, monad)
                                         (, name)
                                         (.when (, name)
                                           [(, g!each) (,' in) (, g!conjoint)]
                                           (, body')))))
                                  
                                  {.#None}
                                  (` (.when (, monad)
                                       [(, g!each) (,' in) (, g!conjoint)]
                                       (, body')))))]})
        {.#Left ..bindings_must_be_pairs})

      {.#None}
      {.#Left .wrong_syntax})))

(the .public (then monad f)
  (All (_ ! a b)
    (-> (Monad !) (-> a (! b))
        (-> (! a) (! b))))
  (|>> (of monad each f)
       (of monad conjoint)))

(the .public (all monad)
  (All (_ ! a)
    (-> (Monad !) (List (! a))
        (! (List a))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item x xs'}
        (|> x
            (/#each (function (_ _x)
                      (/#each (|>> {.#Item _x}) (again xs'))))
            /#conjoint)))))

(the .public (each monad f)
  (All (_ M a b)
    (-> (Monad M) (-> a (M b)) (List a)
        (M (List b))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item x xs'}
        (|> (f x)
            (/#each (function (_ _x)
                      (/#each (|>> {.#Item _x}) (again xs'))))
            /#conjoint)))))

(the .public (only monad f)
  (All (_ ! a b)
    (-> (Monad !) (-> a (! Bit)) (List a)
        (! (List a))))
  (let [(open "/#[0]") monad]
    (function (again xs)
      (when xs
        {.#End}
        (/#in {.#End})
        
        {.#Item head xs'}
        (|> (f head)
            (/#each (function (_ verdict)
                      (/#each (function (_ tail)
                                (if verdict
                                  {.#Item head tail}
                                  tail))
                              (again xs'))))
            /#conjoint)))))

(the .public (mix monad f init xs)
  (All (_ M a b)
    (-> (Monad M) (-> b a (M a)) a (List b)
        (M a)))
  (when xs
    {.#End}
    (of monad in init)

    {.#Item x xs'}
    (do monad
      [init' (f x init)]
      (mix monad f init' xs'))))
