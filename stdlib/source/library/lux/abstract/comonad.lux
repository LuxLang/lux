... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except bindings_must_be_pairs)
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    ["[0]" location]
    [macro
     ["[0]" expansion]]]]]
 [//
  [functor (.only Functor)]])

(every .public (CoMonad !)
  (Interface
   (is (Functor !)
       functor)
   (is (for_any (_ of)
         (-> (! of)
             of))
       out)
   (is (for_any (_ of)
         (-> (! of)
             (! (! of))))
       disjoint)))

(the .public bindings_must_be_pairs
  Error
  (location.with (location.here)
    .bindings_must_be_pairs))

(the do (.in_module# .prelude .do))
(the generated_symbol (.in_module# .prelude .generated_symbol))
(the meta#monad (.in_module# .prelude .meta#monad))
(the failure (.in_module# .prelude .failure))

(the .public be
  (macro (_ tokens)
    (when (is (Maybe [(Maybe Text) Code (List Code) Code])
              (when tokens
                (list [_ {.#Tuple (list [_ {.#Symbol ["" name]}] comonad)}] [_ {.#Tuple bindings}] body)
                {.#Some [{.#Some name} comonad bindings body]}
                
                (list comonad [_ {.#Tuple bindings}] body)
                {.#Some [{.#None} comonad bindings body]}

                _
                {.#None}))
      {.#Some [?name comonad bindings body]}
      (when (list.pairs bindings)
        {try.#Success bindings}
        (do meta#monad
          ['_ (generated_symbol "_")
           'each (generated_symbol "each")
           'disjoint (generated_symbol "disjoint")]
          (let [body' (list#mix (is (-> [Code Code] Code Code)
                                    (function (_ binding body')
                                      (expansion.let [<default> (` (|> (, value) (, 'disjoint) ((, 'each) (function ((, '_) (, var)) (, body')))))]
                                        (let [[var value] binding]
                                          (when var
                                            [_ {.#Symbol ["" _]}]
                                            <default>

                                            [_ {.#Symbol _}]
                                            (` ((, var) (, value) (, body')))

                                            _
                                            <default>)))))
                                body
                                (list.reversed bindings))]
            (in (list (when ?name
                        {.#Some name}
                        (let [name [location.dummy {.#Symbol ["" name]}]]
                          (` (.when (, comonad)
                               (, name)
                               (.when (, name)
                                 [(, 'each) (,' out) (, 'disjoint)]
                                 (, body')))))

                        {.#None}
                        (` (.when (, comonad)
                             [(, 'each) (,' out) (, 'disjoint)]
                             (, body'))))))))
        
        {try.#Failure _}
        (..failure ..bindings_must_be_pairs))

      {.#None}
      (..failure .wrong_syntax))))
