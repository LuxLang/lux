... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [control
    ["[0]" try]]
   [data
    [collection
     ["[0]" stack (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" natural]]]
   [macro
    ["[0]" expansion]]
   [meta
    ["[0]" provenance]]]]
 [//
  [functor (.only Functor)]])

(every .public (CoMonad !)
  (Interface
   (is (Functor !)
       functor)
   (is (for_any (_ of)
         (-> (! of)
             of))
       out)
   (is (for_any (_ of)
         (-> (! of)
             (! (! of))))
       disjoint)))

(the do (.in_module# .prelude .do))
(the generated_name (.in_module# .prelude .generated_name))
(the meta#monad (.in_module# .prelude .meta#monad))
(the failure (.in_module# .prelude .failure))

(the .public be
  (macro (_ tokens)
    (when (is (Maybe [(Maybe Text) Code (Stack Code) Code])
              (when tokens
                (stack [_ {.#Tuple (stack [_ {.#Name ["" name]}] comonad)}] [_ {.#Tuple bindings}] body)
                {.#Some [{.#Some name} comonad bindings body]}
                
                (stack comonad [_ {.#Tuple bindings}] body)
                {.#Some [{.#None} comonad bindings body]}

                _
                {.#None}))
      {.#Some [?name comonad bindings body]}
      (when (stack.pairs bindings)
        {try.#Success bindings}
        (do meta#monad
          ['_ (generated_name "_")
           'each (generated_name "each")
           'disjoint (generated_name "disjoint")]
          (let [body' (stack#mix (is (-> [Code Code] Code Code)
                                     (function (_ binding body')
                                       (expansion.let [<default> (` (|> (, value) (, 'disjoint) ((, 'each) (function ((, '_) (, var)) (, body')))))]
                                         (let [[var value] binding]
                                           (when var
                                             [_ {.#Name ["" _]}]
                                             <default>

                                             [_ {.#Name _}]
                                             (` ((, var) (, value) (, body')))

                                             _
                                             <default>)))))
                                 body
                                 (stack.reversed bindings))]
            (in (stack (when ?name
                         {.#Some name}
                         (let [name [provenance.dummy {.#Name ["" name]}]]
                           (` (.when (, comonad)
                                (, name)
                                (.when (, name)
                                  [(, 'each) (,' out) (, 'disjoint)]
                                  (, body')))))

                         {.#None}
                         (` (.when (, comonad)
                              [(, 'each) (,' out) (, 'disjoint)]
                              (, body'))))))))
        
        {try.#Failure _}
        (..failure .bindings_must_be_pairs))

      {.#None}
      (..failure .wrong_syntax))))
