... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [data
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat]]]
   [meta
    ["[0]" location]]]]
 [//
  [functor (.only Functor)]])

(every .public (CoMonad w)
  (Interface
   (is (Functor w)
       functor)
   (is (All (_ a)
         (-> (w a) a))
       out)
   (is (All (_ a)
         (-> (w a) (w (w a))))
       disjoint)))

(the .public be
  (macro (_ tokens state)
    (when (is (Maybe [(Maybe Text) Code (List Code) Code])
              (when tokens
                (list [_ {.#Tuple (list [_ {.#Symbol ["" name]}] comonad)}] [_ {.#Tuple bindings}] body)
                {.#Some [{.#Some name} comonad bindings body]}
                
                (list comonad [_ {.#Tuple bindings}] body)
                {.#Some [{.#None} comonad bindings body]}

                _
                {.#None}))
      {.#Some [?name comonad bindings body]}
      (when (list.pairs bindings)
        {.#Some bindings}
        (let [[module short] (symbol ..be)
              symbol (is (-> Text Code)
                         (|>> (.text_composite# module " " short " ") [""] {.#Symbol} [location.dummy]))
              g!_ (symbol "_")
              g!each (symbol "each")
              g!disjoint (symbol "disjoint")
              body' (list#mix (is (-> [Code Code] Code Code)
                                  (function (_ binding body')
                                    (with_expansions [<default> (` (|> (, value) (, g!disjoint) ((, g!each) (function ((, g!_) (, var)) (, body')))))]
                                      (let [[var value] binding]
                                        (when var
                                          [_ {.#Symbol ["" _]}]
                                          <default>

                                          [_ {.#Symbol _}]
                                          (` ((, var) (, value) (, body')))

                                          _
                                          <default>)))))
                              body
                              (list.reversed bindings))]
          {.#Right [state (list (when ?name
                                  {.#Some name}
                                  (let [name [location.dummy {.#Symbol ["" name]}]]
                                    (` (.when (, comonad)
                                         (, name)
                                         (.when (, name)
                                           [(, g!each) (,' out) (, g!disjoint)]
                                           (, body')))))

                                  {.#None}
                                  (` (.when (, comonad)
                                       [(, g!each) (,' out) (, g!disjoint)]
                                       (, body')))))]})
        
        {.#None}
        {.#Left "'be' bindings must have an even number of parts."})

      {.#None}
      {.#Left "Wrong syntax for 'be'"})))
