... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [error
    ["[0]" try]]
   [data
    [collection
     ["[0]" list]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" expansion]]
   [meta
    ["[0]" provenance]]]]
 [//
  [functor (.only Functor)]])

(every .public (CoMonad !)
  (Interface
   (is (Functor !)
       functor)
   (is (for_any (_ it)
         (-> (! it)
             it))
       this)
   (is (for_any (_ it)
         (-> (! it)
             (! (! it))))
       disjoint)))

(the do (.in_module# .prelude .do))
(the generated_name (.in_module# .prelude .generated_name))
(the meta#monad (.in_module# .prelude .meta#monad))
(the failure (.in_module# .prelude .failure))

(the ?#value (.in_module# .prelude .?#value))
(the ?#each (.in_module# .prelude .?#each))
(the ?#pure (.in_module# .prelude .?#pure))
(the ?#any (.in_module# .prelude .?#any))
(the ?#local (.in_module# .prelude .?#local))
(the ?#tuple (.in_module# .prelude .?#tuple))
(the ?#either (.in_module# .prelude .?#either))
(the ?#and (.in_module# .prelude .?#and))
(the ?#some (.in_module# .prelude .?#some))
(the ?#rest (.in_module# .prelude .?#rest))

(the .public be
  (macro (_ tokens)
    (when (|> (all ?#and
                   (?#either (?#tuple (?#and (?#each (|>> {.#Some}) ?#local) ?#any))
                             (?#and (?#pure {.#None}) ?#any))
                   (?#tuple (?#some (?#and ?#any ?#any)))
                   ?#any)
              (?#value tokens))
      {.#Some [[?name comonad] bindings body]}
      (do meta#monad
        ['_ (generated_name "_")
         'each (generated_name "each")
         'disjoint (generated_name "disjoint")]
        (let [body' (list.mix (is (-> [Code Code] Code Code)
                                  (function (_ binding body')
                                    (expansion.let [<default> (` (|> (, value)
                                                                     (, 'disjoint)
                                                                     ((, 'each) (function ((, '_) (, var)) (, body')))))]
                                      (let [[var value] binding]
                                        (when var
                                          {.#Name _ ["" _]}
                                          <default>

                                          {.#Name _ _}
                                          (` ((, var) (, value) (, body')))

                                          _
                                          <default>)))))
                              body
                              (list.reversed bindings))]
          (pure (list (when ?name
                        {.#Some name}
                        (let [name {.#Name provenance.dummy ["" name]}]
                          (` (.when (, comonad)
                               (, name)
                               (.when (, name)
                                 [(, 'each) (,' this) (, 'disjoint)]
                                 (, body')))))

                        {.#None}
                        (` (.when (, comonad)
                             [(, 'each) (,' this) (, 'disjoint)]
                             (, body'))))))))

      else
      (..failure .wrong_syntax))))
