(.module:
  [library
   [lux #*
    [control
     ["." try (#+ Try)]]]]
  [//
   [monad (#+ do)]
   ["." functor]])

(interface: .public (Codec m a)
  {#.doc "A way to move back-and-forth between a type and an alternative representation for it."}
  (: (-> a m)
     encode)
  (: (-> m (Try a))
     decode))

(implementation: .public (compose cb_codec ba_codec)
  {#.doc "Codec composition."}
  (All [a b c]
    (-> (Codec c b) (Codec b a)
        (Codec c a)))
  (def: encode
    (|>> (\ ba_codec encode)
         (\ cb_codec encode)))

  (def: (decode cy)
    (do try.monad
      [by (\ cb_codec decode cy)]
      (\ ba_codec decode by))))
