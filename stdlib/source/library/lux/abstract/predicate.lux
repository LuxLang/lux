(.module:
  [library
   [lux (#- or and)
    [control
     ["." function]]]]
  [//
   [monoid (#+ Monoid)]
   [functor
    ["." contravariant]]])

(type: .public (Predicate a)
  (-> a Bit))

(template [<identity_name> <identity_value> <composition_name> <composition>]
  [(def: .public <identity_name>
     Predicate
     (function.constant <identity_value>))

   (def: .public (<composition_name> left right)
     (All [a] (-> (Predicate a) (Predicate a) (Predicate a)))
     (function (_ value)
       (<composition> (left value)
                      (right value))))]

  [none #0 or .or]
  [all  #1 and .and]
  )

(template [<name> <identity> <composition>]
  [(implementation: .public <name>
     (All [a] (Monoid (Predicate a)))
     
     (def: identity <identity>)
     (def: composite <composition>))]

  [union        ..none ..or]
  [intersection ..all  ..and]
  )

(def: .public (complement predicate)
  (All [a] (-> (Predicate a) (Predicate a)))
  (|>> predicate not))

(def: .public (difference sub base)
  (All [a] (-> (Predicate a) (Predicate a) (Predicate a)))
  (function (_ value)
    (.and (base value)
          (not (sub value)))))

(def: .public (rec predicate)
  (All [a]
    (-> (-> (Predicate a) (Predicate a))
        (Predicate a)))
  (function (recur input)
    (predicate recur input)))

(implementation: .public functor
  (contravariant.Functor Predicate)
  
  (def: (each f fb)
    (|>> f fb)))
