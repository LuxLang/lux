... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [function
    [predicate (.only Predicate)]]]]
 [//
  ["[0]" equality (.only Equality)]
  [functor
   ["[0]" contravariant]]])

(every .public (Order it)
  (Interface
   (is (Equality it)
       equality)

   (is (-> it it
           Bit)
       <)))

(the .public (boundary order it)
  (for_any (_ it)
    (-> (Order it) it
        (Predicate it)))
  (by order < it))

(every .public (Comparison it)
  (-> (Order it) it it
      Bit))

(the .public (<= order parameter subject)
  Comparison
  (or (by order < parameter subject)
      (by order = parameter subject)))

(the .public (> order parameter subject)
  Comparison
  (by order < subject parameter))

(the .public (>= order parameter subject)
  Comparison
  (or (by order < subject parameter)
      (by order = subject parameter)))

(every .public (Choice it)
  (-> (Order it) it it
      it))

(the .public (minor order x y)
  Choice
  (if (by order < y x) x y))

(the .public (major order x y)
  Choice
  (if (by order < y x) y x))

(the .public functor
  (contravariant.Functor Order)
  (implementation
   (the (each value order)
     (implementation
      (the equality
        (by equality.functor each value (by order equality)))
      
      (the (< reference it)
        (by order < (value reference) (value it)))))))

(these (the with_monad (.in_module# .prelude with_monad))
       (the meta:monad (.in_module# .prelude meta:monad))
       (the failure (.in_module# .prelude failure))
       (the generated_name (.in_module# .prelude generated_name))

       (the .public for
         (macro (_ code)
           (when code
             (list {.:Tuple _ '*type_parameters}
                   'type
                   'order)
             (with_monad meta:monad
               ['_ (generated_name "'_")
                'reference (generated_name "'reference")
                'it (generated_name "'it")
                .let [order_type (` (for_any ((, '_) (,* '*type_parameters))
                                      (-> (, 'type) (, 'type)
                                          .Bit)))
                      choice_type (` (for_any ((, '_) (,* '*type_parameters))
                                       (-> (, 'type) (, 'type)
                                           (, 'type))))]]
               (pure (list (` (the .public ((,' <) (, 'reference) (, 'it))
                                (, order_type)
                                (by (, 'order) (,' <) (, 'reference) (, 'it))))
                           (` (the .public ((,' >) (, 'reference) (, 'it))
                                (, order_type)
                                (by (, 'order) (,' <) (, 'it) (, 'reference))))
                           (` (the .public ((,' <=) (, 'reference) (, 'it))
                                (, order_type)
                                (or (by (, 'order) (,' <) (, 'reference) (, 'it))
                                    (by (, 'order) (,' =) (, 'reference) (, 'it)))))
                           (` (the .public ((,' >=) (, 'reference) (, 'it))
                                (, order_type)
                                (or (by (, 'order) (,' <) (, 'it) (, 'reference))
                                    (by (, 'order) (,' =) (, 'reference) (, 'it)))))
                           (` (the .public ((,' minor) (, 'reference) (, 'it))
                                (, choice_type)
                                (if (by (, 'order) (,' <) (, 'reference) (, 'it))
                                    (, 'it)
                                    (, 'reference))))
                           (` (the .public ((,' major) (, 'reference) (, 'it))
                                (, choice_type)
                                (if (by (, 'order) (,' <) (, 'reference) (, 'it))
                                    (, 'reference)
                                    (, 'it)))))))

             _
             (failure .wrong_syntax)))))
