(.using
 [library
  [lux "*"
   [control
    ["[0]" function]]]]
 [//
  ["[0]" equivalence (.only Equivalence)]
  [functor
   ["[0]" contravariant]]])

(type: .public (Order a)
  (Interface
   (is (Equivalence a)
       equivalence)

   (is (-> a a Bit)
       <)))

(type: .public (Comparison a)
  (-> (Order a) a a Bit))

(def: .public (<= order parameter subject)
  Comparison
  (or (# order < parameter subject)
      (# order = parameter subject)))

(def: .public (> order parameter subject)
  Comparison
  (# order < subject parameter))

(def: .public (>= order parameter subject)
  Comparison
  (or (# order < subject parameter)
      (# order = subject parameter)))

(type: .public (Choice a)
  (-> (Order a) a a a))

(def: .public (min order x y)
  Choice
  (if (# order < y x) x y))

(def: .public (max order x y)
  Choice
  (if (# order < y x) y x))

(implementation: .public functor
  (contravariant.Functor Order)
  
  (def: (each f order)
    (implementation
     (def: equivalence
       (# equivalence.functor each f (# order equivalence)))
     
     (def: (< reference sample)
       (# order < (f reference) (f sample))))))
