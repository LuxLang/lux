(.module:
  [library
   [lux #*
    [control
     ["." function]]]]
  [//
   ["." equivalence (#+ Equivalence)]
   [functor
    ["." contravariant]]])

(interface: #export (Order a)
  {#.doc "A signature for types that possess some sense of ordering among their elements."}
  
  (: (Equivalence a)
     &equivalence)

  (: (-> a a Bit)
     <)
  )

(type: #export (Comparison a)
  {#.doc (doc "An arbitrary comparison between two values, with the knowledge of how to order them.")}
  (-> (Order a) a a Bit))

(def: #export (<= order parameter subject)
  {#.doc (doc "Less than or equal.")}
  Comparison
  (or (\ order < parameter subject)
      (\ order = parameter subject)))

(def: #export (> order parameter subject)
  {#.doc (doc "Greater than.")}
  Comparison
  (\ order < subject parameter))

(def: #export (>= order parameter subject)
  {#.doc (doc "Greater than or equal.")}
  Comparison
  (or (\ order < subject parameter)
      (\ order = subject parameter)))

(type: #export (Choice a)
  {#.doc (doc "A choice comparison between two values, with the knowledge of how to order them.")}
  (-> (Order a) a a a))

(def: #export (min order x y)
  {#.doc (doc "Minimum.")}
  Choice
  (if (\ order < y x) x y))

(def: #export (max order x y)
  {#.doc (doc "Maximum.")}
  Choice
  (if (\ order < y x) y x))

(implementation: #export functor
  (contravariant.Functor Order)
  
  (def: (map f order)
    (implementation
     (def: &equivalence
       (\ equivalence.functor map f (\ order &equivalence)))
     
     (def: (< reference sample)
       (\ order < (f reference) (f sample))))))
