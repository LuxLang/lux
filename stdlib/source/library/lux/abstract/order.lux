... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except for)
   ["[0]" function]]]
 [//
  ["[0]" equivalence (.only Equivalence)]
  [functor
   ["[0]" contravariant]]])

(every .public (Order of)
  (Interface
   (is (Equivalence of)
       equivalence)

   (is (-> of of
           Bit)
       <)))

(every .public (Comparison of)
  (-> (Order of) of of
      Bit))

(the .public (<= order parameter subject)
  Comparison
  (or (by order < parameter subject)
      (by order = parameter subject)))

(the .public (> order parameter subject)
  Comparison
  (by order < subject parameter))

(the .public (>= order parameter subject)
  Comparison
  (or (by order < subject parameter)
      (by order = subject parameter)))

(every .public (Choice of)
  (-> (Order of) of of
      of))

(the .public (minor order x y)
  Choice
  (if (by order < y x) x y))

(the .public (major order x y)
  Choice
  (if (by order < y x) y x))

(the .public functor
  (contravariant.Functor Order)
  (implementation
   (the (each value order)
     (implementation
      (the equivalence
        (by equivalence.functor each value (by order equivalence)))
      
      (the (< reference it)
        (by order < (value reference) (value it)))))))

(these (the do (.in_module# .prelude .do))
       (the meta#monad (.in_module# .prelude .meta#monad))
       (the failure (.in_module# .prelude .failure))
       (the generated_name (.in_module# .prelude .generated_name))

       (the .public for
         (macro (_ code)
           (when code
             (list [_ {.#Tuple '*type_parameters}] 'type 'order)
             (do meta#monad
               ['_ (generated_name "'_")
                'reference (generated_name "'reference")
                'it (generated_name "'it")
                .let [order_type (` (for_any ((, '_) (,* '*type_parameters))
                                      (-> (, 'type) (, 'type)
                                          .Bit)))
                      choice_type (` (for_any ((, '_) (,* '*type_parameters))
                                       (-> (, 'type) (, 'type)
                                           (, 'type))))]]
               (in (list (` (the .public ((,' <) (, 'reference) (, 'it))
                              (, order_type)
                              (by (, 'order) (,' <) (, 'reference) (, 'it))))
                         (` (the .public ((,' >) (, 'reference) (, 'it))
                              (, order_type)
                              (by (, 'order) (,' <) (, 'it) (, 'reference))))
                         (` (the .public ((,' <=) (, 'reference) (, 'it))
                              (, order_type)
                              (or (by (, 'order) (,' <) (, 'reference) (, 'it))
                                  (by (, 'order) (,' =) (, 'reference) (, 'it)))))
                         (` (the .public ((,' >=) (, 'reference) (, 'it))
                              (, order_type)
                              (or (by (, 'order) (,' <) (, 'it) (, 'reference))
                                  (by (, 'order) (,' =) (, 'reference) (, 'it)))))
                         (` (the .public ((,' minor) (, 'reference) (, 'it))
                              (, choice_type)
                              (if (by (, 'order) (,' <) (, 'reference) (, 'it))
                                (, 'it)
                                (, 'reference))))
                         (` (the .public ((,' major) (, 'reference) (, 'it))
                              (, choice_type)
                              (if (by (, 'order) (,' <) (, 'reference) (, 'it))
                                (, 'reference)
                                (, 'it)))))))

             _
             (failure .wrong_syntax)))))
