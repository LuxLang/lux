... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and for)
   ["[0]" debug]
   [abstract
    [monad (.only do)]
    ["<>" projection]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [control
    ["[0]" io]]
   [color
    ["[0]" terminal]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number (.only hex)]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" name]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]]]
 [//
  ["[0]" coverage (.only Coverage)]
  ["[0]" tally (.only Tally)]])

(every .public Test
  (Future [Tally Text]))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter
  text.new_line)

(the .public (and left right)
  (-> Test Test Test)
  (let [[read! write!] (is [(Future [Tally Text])
                            (future.Resolver [Tally Text])]
                           (future.future []))
        _ (|> left
              (future.upon! (function (_ [l_tally l_documentation])
                              (future.upon! (function (_ [r_tally r_documentation])
                                              (write! [(tally.and l_tally r_tally)
                                                       (text l_documentation ..delimiter r_documentation)]))
                                            right)))
              io.value)]
    read!))

(the (context' description)
  (-> Text Test Test)
  (future#each (function (_ [tally documentation])
                 [tally (|> documentation
                            (text.all_split_by ..delimiter)
                            (list#each (|>> (text text.tab)))
                            (text.interposed ..delimiter)
                            (text description ..delimiter))])))

(the .public context
  (-> Text Test Test)
  (|>> %.text context'))

(template.with [<prefix> <tally> <raw> <quoted> <foreground>]
  [(the <raw>
     (-> Text Test)
     (|>> (text "["
                (terminal.with <foreground>
                  <prefix>)
                "] ")
          [<tally>]
          future#in))

   (the .public <quoted>
     (-> Text Test)
     (|>> %.text <raw>))]

  ["Failure" tally.failure failure' failure terminal.red_foreground]
  ["Success" tally.success success' success terminal.green_foreground]
  )

(the (test' message condition)
  (-> Text Bit Test)
  (if condition
    (success' message)
    (failure' message)))

(the .public (test message condition)
  (-> Text Bit Test)
  (test' (%.text message) condition))

... https://en.wikipedia.org/wiki/Delimiter
(the definition_delimiter " & ")

(the clean_up_marker (text.of_character (hex "05")))

(the coverage_text
  (text.Injection Name)
  (|>> name.as_text
       (text ..clean_up_marker)))

(the (with_coverage coverage condition)
  (-> (List Name) Bit Test)
  (let [message (|> coverage
                    (list#each ..coverage_text)
                    (text.interposed ..definition_delimiter))
        coverage (set.of_list name.hash coverage)]
    (|> (..test' message condition)
        (future#each (function (_ [tally documentation])
                       [(revised tally.#actual (set.union coverage) tally)
                        documentation])))))

(the .public coverage
  (syntax.macro (_ [coverage (<code>.tuple (<>.many <code>.any))
                    condition <code>.any])
    (let [coverage (list#each (function (_ definition)
                                (` (coverage.of (, definition))))
                              coverage)]
      (in (list (` ((debug.private ..with_coverage)
                    (is (.List .Name)
                        (.list (,* coverage)))
                    (, condition))))))))

(the (for' coverage test)
  (-> (List Name) Test Test)
  (let [context (|> coverage
                    (list#each ..coverage_text)
                    (text.interposed ..definition_delimiter))
        coverage (set.of_list name.hash coverage)]
    (future#each (function (_ [tally documentation])
                   [(revised tally.#actual (set.union coverage) tally)
                    documentation])
                 (..context' context test))))

(the .public for
  (syntax.macro (_ [coverage (<code>.tuple (<>.many <code>.any))
                    test <code>.any])
    (let [coverage (list#each (function (_ definition)
                                (` (coverage.of (, definition))))
                              coverage)]
      (in (list (` ((debug.private ..for')
                    (is (.List .Name)
                        (.list (,* coverage)))
                    (, test))))))))

(the (covering' module coverage test)
  (-> Text Text Test Test)
  (let [coverage (coverage.of_text module coverage)]
    (|> (..context' module test)
        (future#each (function (_ [tally documentation])
                       [(revised tally.#expected (set.union coverage) tally)
                        (|> documentation
                            (text.replaced (text ..clean_up_marker module name.delimiter) "")
                            (text.replaced ..clean_up_marker ""))])))))

(the .public covering
  (syntax.macro (_ [module <code>.name
                    test <code>.any])
    (do meta.monad
      [.let [module (name.module module)]
       definitions (binding.resolved_globals module)
       .let [coverage (|> definitions
                          (list#mix (function (_ [proper [exported? _]] aggregate)
                                      (if exported?
                                        {.#Item proper aggregate}
                                        aggregate))
                                    {.#End})
                          coverage.as_text)]]
      (in (list (` ((debug.private ..covering')
                    (, (code.text module))
                    (, (code.text coverage))
                    (, test))))))))
