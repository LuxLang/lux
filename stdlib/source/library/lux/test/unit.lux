... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and)
   ["[0]" debug]
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]:[0]" monad)]]
   [control
    ["[0]" io]]
   [color
    ["[0]" terminal]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor mix monoid)
      ["?[1]" \\projection]]
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" number]]
   [macro
    ["[0]" syntax]
    ["[0]" template]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" name]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]]
   [theorem
    ["[0]" proposition]]
   [compiler
    [language
     [lux
      ["[0]" analysis]]]]]]
 [//
  ["[0]" coverage (.only Coverage)]
  ["[0]" tally (.only Tally)]])

(every .public Test
  (Future [Tally Text]))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter
  text.\n)

(the .public (and left right)
  (-> Test Test
      Test)
  (let [[read! write!] (is [(Future [Tally Text])
                            (future.Resolver [Tally Text])]
                           (future.future []))
        _ (|> left
              (future.upon! (function (_ [l_tally l_documentation])
                              (future.upon! (function (_ [r_tally r_documentation])
                                              (write! [(tally.and l_tally r_tally)
                                                       (text l_documentation ..delimiter r_documentation)]))
                                            right)))
              io.value)]
    read!))

(the (context' description)
  (-> Text Test
      Test)
  (future:each (function (_ [tally documentation])
                 [tally (|> documentation
                            (text.all_split_by ..delimiter)
                            (list:each (|>> (text text.tab)))
                            (text.interposed ..delimiter)
                            (text description ..delimiter))])))

(the .public context
  (-> Text Test
      Test)
  (|>> %.text
       context'))

(the color_of_proposition
  terminal.cyan_foreground)

(template.with [<prefix> <tally> <raw> <foreground>]
  [(the <raw>
     (-> Text
         Test)
     (|>> (text "["
                (terminal.with <foreground>
                  <prefix>)
                "] ")
          [<tally>]
          future:pure))]

  [["Failure" tally.failure failure' terminal.red_foreground]
   ["Success" tally.success success' terminal.green_foreground]
   ["ByProof" tally.success by_proof' ..color_of_proposition]])

(template.with [<raw> <quoted>]
  [(the .public <quoted>
     (-> Text
         Test)
     (|>> %.text
          <raw>))]

  [[failure' failure]
   [success' success]])

(the (test' message condition)
  (-> Text Bit
      Test)
  (if condition
      (success' message)
      (failure' message)))

(the .public (test message condition)
  (-> Text Bit
      Test)
  (test' (terminal.with terminal.yellow_foreground message) condition))

... https://en.wikipedia.org/wiki/Delimiter
(the delimiter_of_definition " & ")
(the delimiter_of_proof (text text.\n text.\t))

(the clean_up_marker (text.of_character (number.base_16 "05")))

(the text_of_coverage
  (text.Injection Name)
  (|>> name.as_text
       (text ..clean_up_marker)
       (terminal.with terminal.blue_foreground)))

(the text_of_identity
  (text.Injection proposition.Identity)
  (let [\= (text ..delimiter_of_proof text.\t text.\t "= ")]
    (function (_ it)
      (text \= (analysis.as_text (its proposition.:slow it))
            \= (analysis.as_text (its proposition.:fast it))))))

(the (text_of_proposition' as_text [name it])
  (for_any (_ it)
    (-> (text.Injection it)
        (text.Injection [Name it])))
  (text text.\t (|> name
                    name.as_text
                    (text ..clean_up_marker)
                    (terminal.with ..color_of_proposition))
        (as_text it)))

(the (text_of_entailment text_of_proposition [premise conclusion])
  (-> (text.Injection proposition.Proposition)
      (text.Injection proposition.Entailment))
  (text (text_of_proposition premise)
        (text.replaced text.\n ..delimiter_of_proof (text_of_proposition conclusion))))

(the (text_of_proposition it)
  (text.Injection proposition.Proposition)
  (when it
    {proposition.:Identity it}
    (text_of_identity it)
    
    {proposition.:Entailment it}
    (text_of_entailment text_of_proposition it)))

(the text_of_model
  (text.Injection proposition.Model)
  (let [prefix (text ..delimiter_of_proof text.\t)]
    (|>> (list:each ..text_of_proposition)
         (text.interposed (text prefix text.\t "--------------------------------------------------------"))
         (text prefix "[Model]"))))

(the (with_coverage coverage condition)
  (-> (List Name) Bit
      Test)
  (let [message (|> coverage
                    (list:each ..text_of_coverage)
                    (text.interposed ..delimiter_of_definition))
        coverage (set.of_list name.hash coverage)]
    (|> (..test' message condition)
        (future:each (function (_ [tally documentation])
                       [(revised tally.:actual (set.union coverage) tally)
                        documentation])))))

(syntax.the .public (coverage [coverage (<code>.tuple (<>.many ?list.any))
                               condition ?list.any])
  (let [coverage (list:each (function (_ definition)
                              (` (coverage.of (, definition))))
                            coverage)]
    (pure (list (` ((debug.private ..with_coverage)
                    (is (.List .Name)
                        (.list (,* coverage)))
                    (, condition)))))))

(the (with_proof coverage every_proof condition)
  (-> (List Name) (List Text) Bit
      Test)
  (let [message (text (|> coverage
                          (list:each ..text_of_coverage)
                          (text.interposed ..delimiter_of_definition))
                      (|> every_proof
                          (list:each (|>> (text text.\n)))
                          text.together))
        coverage (set.of_list name.hash coverage)]
    (|> (if condition
            (..by_proof' message)
            (..failure' message))
        (future:each (function (_ [tally documentation])
                       [(revised tally.:actual (set.union coverage) tally)
                        documentation])))))

(template.with [,name ,type ,text]
  [(template.the .public (,name ,it)
     [(..text_of_proposition' ,text
                              (is [.Name ,type]
                                  [(coverage.of ,it)
                                   ,it]))])]

  [[proposition proposition.Proposition ..text_of_proposition]
   [model proposition.Model ..text_of_model]])

(syntax.the .public (by_proof [[reference_coverage additional_coverage] (<code>.tuple (<>.and ?list.any (<>.some ?list.any)))
                               'every_proof ?list.any])
  (let [coverage (list:each (function (_ definition)
                              (` (coverage.of (, definition))))
                            (list:composite (list reference_coverage)
                                            additional_coverage))]
    (pure (list (` ((debug.private ..with_proof)
                    (is (.List .Name)
                        (.list (,* coverage)))
                    (, 'every_proof)
                    (.and (,* (list:each (function (_ it)
                                           (` (identical? (, reference_coverage) (, it))))
                                         additional_coverage)))))))))

(the (for' coverage test)
  (-> (List Name) Test
      Test)
  (let [context (|> coverage
                    (list:each ..text_of_coverage)
                    (text.interposed ..delimiter_of_definition))
        coverage (set.of_list name.hash coverage)]
    (future:each (function (_ [tally documentation])
                   [(revised tally.:actual (set.union coverage) tally)
                    documentation])
                 (..context' context test))))

(syntax.the .public (for [coverage (<code>.tuple (<>.many ?list.any))
                          test ?list.any])
  (let [coverage (list:each (function (_ definition)
                              (` (coverage.of (, definition))))
                            coverage)]
    (pure (list (` ((debug.private ..for')
                    (is (.List .Name)
                        (.list (,* coverage)))
                    (, test)))))))

(the (covering' module coverage test)
  (-> Text Text Test
      Test)
  (let [coverage (coverage.of_text module coverage)]
    (|> (..context' module test)
        (future:each (function (_ [tally documentation])
                       [(revised tally.:expected (set.union coverage) tally)
                        (|> documentation
                            (text.replaced (text ..clean_up_marker module name.delimiter) "")
                            (text.replaced ..clean_up_marker ""))])))))

(syntax.the .public (covering [module <code>.name
                               test ?list.any])
  (monad.let meta.monad
    [.let [module (name.module module)]
     definitions (binding.resolved_globals module)
     .let [coverage (|> definitions
                        (list.all (function (_ [proper [exported? _]])
                                    (if exported?
                                        {.:Some proper}
                                        {.:None})))
                        coverage.as_text)]]
    (pure (list (` ((debug.private ..covering')
                    (, (code.text module))
                    (, (code.text coverage))
                    (, test)))))))
