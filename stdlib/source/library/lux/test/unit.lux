... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and for)
   ["[0]" debug]
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" io]
    [concurrency
     ["[0]" async (.only Async) (.use "[1]#[0]" monad)]]]
   [data
    [color
     ["[0]" terminal]]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor mix)]
     ["[0]" set (.only Set)]]]
   [math
    [number (.only hex)]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" symbol]
    ["[0]" code (.only)
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]]
 [//
  ["[0]" coverage (.only Coverage)]
  ["[0]" tally (.only Tally)]])

(every .public Test
  (Async [Tally Text]))

(the separator
  text.new_line)

(the .public (and left right)
  (-> Test Test Test)
  (let [[read! write!] (is [(Async [Tally Text])
                            (async.Resolver [Tally Text])]
                           (async.async []))
        _ (|> left
              (async.upon! (function (_ [l_tally l_documentation])
                             (async.upon! (function (_ [r_tally r_documentation])
                                            (write! [(tally.and l_tally r_tally)
                                                     (%.message l_documentation ..separator r_documentation)]))
                                          right)))
              io.value)]
    read!))

(the (context' description)
  (-> Text Test Test)
  (async#each (function (_ [tally documentation])
                [tally (|> documentation
                           (text.all_split_by ..separator)
                           (list#each (|>> (%.message text.tab)))
                           (text.interposed ..separator)
                           (%.message description ..separator))])))

(the .public context
  (-> Text Test Test)
  (|>> %.text context'))

(template.with [<prefix> <tally> <raw> <quoted> <foreground>]
  [(the <raw>
     (-> Text Test)
     (|>> (%.message "["
                     (terminal.with <foreground>
                       <prefix>)
                     "] ")
          [<tally>]
          async#in))

   (the .public <quoted>
     (-> Text Test)
     (|>> %.text <raw>))]

  ["Failure" tally.failure failure' failure terminal.red_foreground]
  ["Success" tally.success success' success terminal.green_foreground]
  )

(the (test' message condition)
  (-> Text Bit Test)
  (if condition
    (success' message)
    (failure' message)))

(the .public (test message condition)
  (-> Text Bit Test)
  (test' (%.text message) condition))

(the definition_separator " & ")

(the clean_up_marker (text.of_character (hex "05")))

(the coverage_injection
  (text.Injection Symbol)
  (|>> symbol.as_text
       (%.message ..clean_up_marker)))

(the (with_coverage coverage condition)
  (-> (List Symbol) Bit Test)
  (let [message (|> coverage
                    (list#each ..coverage_injection)
                    (text.interposed ..definition_separator))
        coverage (set.of_list symbol.hash coverage)]
    (|> (..test' message condition)
        (async#each (function (_ [tally documentation])
                      [(revised tally.#actual (set.union coverage) tally)
                       documentation])))))

(the .public coverage
  (syntax.macro (_ [coverage (<code>.tuple (<>.many <code>.any))
                    condition <code>.any])
    (let [coverage (list#each (function (_ definition)
                                (` (coverage.of (, definition))))
                              coverage)]
      (in (list (` ((debug.private ..with_coverage)
                    (is (.List .Symbol)
                        (.list (,* coverage)))
                    (, condition))))))))

(the (for' coverage test)
  (-> (List Symbol) Test Test)
  (let [context (|> coverage
                    (list#each ..coverage_injection)
                    (text.interposed ..definition_separator))
        coverage (set.of_list symbol.hash coverage)]
    (async#each (function (_ [tally documentation])
                  [(revised tally.#actual (set.union coverage) tally)
                   documentation])
                (..context' context test))))

(the .public for
  (syntax.macro (_ [coverage (<code>.tuple (<>.many <code>.any))
                    test <code>.any])
    (let [coverage (list#each (function (_ definition)
                                (` (coverage.of (, definition))))
                              coverage)]
      (in (list (` ((debug.private ..for')
                    (is (.List .Symbol)
                        (.list (,* coverage)))
                    (, test))))))))

(the (covering' module coverage test)
  (-> Text Text Test Test)
  (let [coverage (coverage.projection module coverage)]
    (|> (..context' module test)
        (async#each (function (_ [tally documentation])
                      [(revised tally.#expected (set.union coverage) tally)
                       (|> documentation
                           (text.replaced (%.message ..clean_up_marker module symbol.separator) "")
                           (text.replaced ..clean_up_marker ""))])))))

(the .public covering
  (syntax.macro (_ [module <code>.symbol
                    test <code>.any])
    (do meta.monad
      [.let [module (symbol.module module)]
       definitions (binding.resolved_globals module)
       .let [coverage (|> definitions
                          (list#mix (function (_ [short [exported? _]] aggregate)
                                      (if exported?
                                        {.#Item short aggregate}
                                        aggregate))
                                    {.#End})
                          coverage.injection)]]
      (in (list (` ((debug.private ..covering')
                    (, (code.text module))
                    (, (code.text coverage))
                    (, test))))))))
