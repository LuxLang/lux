(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" text (.only)
     ["%" \\format]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix functor)]
     ["[0]" set (.only Set)]]]
   ["[0]" meta (.only)
    ["[0]" symbol]
    ["[0]" code (.only)
     ["<[1]>" \\parser]]
    [macro
     [syntax (.only syntax)]]]]])

(type .public Coverage
  (Set Symbol))

(def .public of
  (let [symbol (is (-> Symbol Code)
                   (function (_ symbol)
                     (` (is Symbol
                            [(, (code.text (symbol.module symbol)))
                             (, (code.text (symbol.short symbol)))]))))]
    (syntax (_ [name <code>.symbol])
      (do meta.monad
        [_ (meta.export name)]
        (in (list (symbol name)))))))

(def separator
  Text
  (text.of_char 31))

(def .public encoded
  (-> (List Text) Text)
  (text.interposed ..separator))

(def .public (decoded module encoding)
  (-> Text Text Coverage)
  (|> encoding
      (text.all_split_by ..separator)
      (list#each (|>> [module]))
      (set.of_list symbol.hash)))
