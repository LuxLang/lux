... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except Double
                is as type)
   [abstract
    ["[0]" monad (.only Monad do)]
    ["[0]" enum]]
   [control
    ["<>" projection]
    ["[0]" function]
    ["[0]" io]
    ["[0]" maybe]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" product]
    ["[0]" bit (.use "[1]#[0]" format)]
    ["[0]" text (.use "[1]#[0]" equivalence monoid)
     ["%" \\injection]]
    [collection
     ["[0]" array (.only Array)]
     ["[0]" list (.use "[1]#[0]" monad mix monoid)]]]
   ["[0]" meta (.only)
    ["[0]" type (.use "[1]#[0]" equivalence)]
    ["[0]" code (.only)
     ["<[1]>" \\projection (.only Projection)]]
    ["[0]" macro (.only with_symbols)
     [syntax (.only syntax)]
     ["^" pattern]
     ["[0]" template]]]]])

(with_template [<name> <op> <from> <to>]
  [(the .public (<name> value)
     (-> (Nominal <from>) (Nominal <to>))
     (<op> value))]

  [byte_to_long "jvm convert byte-to-long" "java.lang.Byte"      "java.lang.Long"]

  [short_to_long "jvm convert short-to-long" "java.lang.Short"     "java.lang.Long"]
  
  [double_to_int "jvm convert double-to-int" "java.lang.Double"    "java.lang.Integer"]
  [double_to_long "jvm convert double-to-long" "java.lang.Double"    "java.lang.Long"]
  [double_to_float "jvm convert double-to-float" "java.lang.Double"    "java.lang.Float"]

  [float_to_int "jvm convert float-to-int" "java.lang.Float"     "java.lang.Integer"]
  [float_to_long "jvm convert float-to-long" "java.lang.Float"     "java.lang.Long"]
  [float_to_double "jvm convert float-to-double" "java.lang.Float"     "java.lang.Double"]
  
  [int_to_byte "jvm convert int-to-byte" "java.lang.Integer"   "java.lang.Byte"]
  [int_to_short "jvm convert int-to-short" "java.lang.Integer"   "java.lang.Short"]
  [int_to_long "jvm convert int-to-long" "java.lang.Integer"   "java.lang.Long"]
  [int_to_float "jvm convert int-to-float" "java.lang.Integer"   "java.lang.Float"]
  [int_to_double "jvm convert int-to-double" "java.lang.Integer"   "java.lang.Double"]
  [int_to_char "jvm convert int-to-char" "java.lang.Integer"   "java.lang.Character"]

  [long_to_byte "jvm convert long-to-byte" "java.lang.Long"      "java.lang.Byte"]
  [long_to_short "jvm convert long-to-short" "java.lang.Long"      "java.lang.Short"]
  [long_to_int "jvm convert long-to-int" "java.lang.Long"      "java.lang.Integer"]
  [long_to_float "jvm convert long-to-float" "java.lang.Long"      "java.lang.Float"]
  [long_to_double "jvm convert long-to-double" "java.lang.Long"      "java.lang.Double"]

  [char_to_byte "jvm convert char-to-byte" "java.lang.Character" "java.lang.Byte"]
  [char_to_short "jvm convert char-to-short" "java.lang.Character" "java.lang.Short"]
  [char_to_int "jvm convert char-to-int" "java.lang.Character" "java.lang.Integer"]
  [char_to_long "jvm convert char-to-long" "java.lang.Character" "java.lang.Long"]
  )

(with_template [<forward> <from> <to> <backward>]
  [(the .public <forward>
     (template (<forward> it)
       [(|> it (.is <from>) (.as (Nominal <to>)))]))

   (the .public <backward>
     (template (<backward> it)
       [(|> it (.is (Nominal <to>)) (.as <from>))]))]

  [as_boolean .Bit "java.lang.Boolean" of_boolean]
  [as_long .Int "java.lang.Long" of_long]
  [as_double .Dec "java.lang.Double" of_double]
  [as_string .Text "java.lang.String" of_string]
  )

(with_template [<forward> <from> <$> <mid> <$'> <to> <backward>]
  [(the .public <forward>
     (template (<forward> it)
       [(|> it (.is <from>) (.as (Nominal <mid>)) <$> (.is (Nominal <to>)))]))

   (the .public <backward>
     (template (<backward> it)
       [(|> it (.is (Nominal <to>)) <$'> (.is (Nominal <mid>)) (.as <from>))]))]

  [as_byte .Int ..long_to_byte "java.lang.Long" ..byte_to_long "java.lang.Byte" of_byte]
  [as_short .Int ..long_to_short "java.lang.Long" ..short_to_long "java.lang.Short" of_short]
  [as_int .Int ..long_to_int "java.lang.Long" ..int_to_long "java.lang.Integer" of_int]
  [as_float .Dec ..double_to_float "java.lang.Double" ..float_to_double "java.lang.Float" of_float]
  )

... [Utils]
(the constructor_method_name "<init>")
(the member_separator "::")

... Types
(.every JVM_Code
  Text)

(.every BoundKind
  (Variant
   {#UpperBound}
   {#LowerBound}))

(.every GenericType
  (Rec GenericType
    (Variant
     {#GenericTypeVar Text}
     {#GenericClass [Text (List GenericType)]}
     {#GenericArray GenericType}
     {#GenericWildcard (Maybe [BoundKind GenericType])})))

(.every Type_Parameter
  [Text (List GenericType)])

(.every Primitive_Mode
  (Variant
   {#ManualPrM}
   {#AutoPrM}))

(.every .public Privacy
  (Variant
   {#PublicP}
   {#PrivateP}
   {#ProtectedP}
   {#DefaultP}))

(.every .public State
  (Variant
   {#VolatileS}
   {#FinalS}
   {#DefaultS}))

(.every .public Inheritance
  (Variant
   {#FinalI}
   {#AbstractI}
   {#DefaultI}))

(.every Class_Kind
  (Variant
   {#Class}
   {#Interface}))

(.every Class_Declaration
  (Record
   [#class_name   Text
    #class_params (List Type_Parameter)]))

(.every StackFrame
  (Nominal "java/lang/StackTraceElement"))

(.every StackTrace
  (Array StackFrame))

(.every Super_Class_Decl
  (Record
   [#super_class_name   Text
    #super_class_params (List GenericType)]))

(.every AnnotationParam
  [Text Code])

(.every Annotation
  (Record
   [#ann_name   Text
    #ann_params (List AnnotationParam)]))

(.every Member_Declaration
  (Record
   [#member_name Text
    #member_privacy Privacy
    #member_anns (List Annotation)]))

(.every FieldDecl
  (Variant
   {#ConstantField GenericType Code}
   {#VariableField State GenericType}))

(.every MethodDecl
  (Record
   [#method_tvars  (List Type_Parameter)
    #method_inputs (List GenericType)
    #method_output GenericType
    #method_exs    (List GenericType)]))

(.every ArgDecl
  (Record
   [#arg_name Text
    #arg_type GenericType]))

(.every ConstructorArg
  [GenericType Code])

(.every Method_Definition
  (Variant
   {#ConstructorMethod [Bit
                        (List Type_Parameter)
                        (List ArgDecl)
                        (List ConstructorArg)
                        Code
                        (List GenericType)]}
   {#VirtualMethod [Bit
                    Bit
                    (List Type_Parameter)
                    Text
                    (List ArgDecl)
                    GenericType
                    Code
                    (List GenericType)]}
   {#OverridenMethod [Bit
                      Class_Declaration
                      (List Type_Parameter)
                      Text
                      (List ArgDecl)
                      GenericType
                      Code
                      (List GenericType)]}
   {#StaticMethod [Bit
                   (List Type_Parameter)
                   (List ArgDecl)
                   GenericType
                   Code
                   (List GenericType)]}
   {#AbstractMethod [(List Type_Parameter)
                     (List ArgDecl)
                     GenericType
                     (List GenericType)]}
   {#NativeMethod [(List Type_Parameter)
                   (List ArgDecl)
                   GenericType
                   (List GenericType)]}))

(.every Partial_Call
  (Record
   [#pc_method Symbol
    #pc_args   (List Code)]))

(.every ImportMethodKind
  (Variant
   {#StaticIMK}
   {#VirtualIMK}))

(.every ImportMethodCommons
  (Record
   [#import_member_mode   Primitive_Mode
    #import_member_alias  Text
    #import_member_kind   ImportMethodKind
    #import_member_tvars  (List Type_Parameter)
    #import_member_args   (List [Bit GenericType])
    #import_member_maybe? Bit
    #import_member_try?   Bit
    #import_member_io?    Bit]))

(.every ImportConstructorDecl
  (Record
   []))

(.every ImportMethodDecl
  (Record
   [#import_method_name    Text
    #import_method_return  GenericType]))

(.every ImportFieldDecl
  (Record
   [#import_field_mode    Primitive_Mode
    #import_field_name    Text
    #import_field_static? Bit
    #import_field_maybe?  Bit
    #import_field_setter? Bit
    #import_field_type    GenericType]))

(.every Import_Member_Declaration
  (Variant
   {#EnumDecl        (List Text)}
   {#ConstructorDecl [ImportMethodCommons ImportConstructorDecl]}
   {#MethodDecl      [ImportMethodCommons ImportMethodDecl]}
   {#FieldAccessDecl ImportFieldDecl}))

... Utils
(the (manual_primitive_type class)
  (-> Text (Maybe Code))
  (when class
    (^.with_template [<prim> <type>]
      [<prim>
       {.#Some (' <type>)}])
    (["boolean" (Nominal "java.lang.Boolean")]
     ["byte"    (Nominal "java.lang.Byte")]
     ["short"   (Nominal "java.lang.Short")]
     ["int"     (Nominal "java.lang.Integer")]
     ["long"    (Nominal "java.lang.Long")]
     ["float"   (Nominal "java.lang.Float")]
     ["double"  (Nominal "java.lang.Double")]
     ["char"    (Nominal "java.lang.Character")]
     ["void"    .Any])

    _
    {.#None}))

(the (auto_primitive_type class)
  (-> Text (Maybe Code))
  (when class
    (^.with_template [<prim> <type>]
      [<prim>
       {.#Some (' <type>)}])
    (["boolean" .Bit]
     ["byte"    .Int]
     ["short"   .Int]
     ["int"     .Int]
     ["long"    .Int]
     ["float"   .Dec]
     ["double"  .Dec]
     ["void"    .Any])

    _
    {.#None}))

(the safe
  (-> Text Text)
  (text.replaced "/" "."))

(the (generic_class_type' mode type_params in_array? name+params
                          class_type')
  (-> Primitive_Mode (List Type_Parameter) Bit [Text (List GenericType)]
      (-> Primitive_Mode (List Type_Parameter) Bit GenericType Code)
      Code)
  (when [name+params mode in_array?]
    (^.multi [[prim {.#End}] {#ManualPrM} .false]
             [(manual_primitive_type prim)
              {.#Some output}])
    output

    (^.multi [[prim {.#End}] {#AutoPrM} .false]
             [(auto_primitive_type prim)
              {.#Some output}])
    output
    
    [[name params] _ _]
    (let [name (safe name)
          =params (list#each (class_type' mode type_params in_array?) params)]
      (` (Nominal (, (code.text name)) [(,* =params)])))))

(the (class_type' mode type_params in_array? class)
  (-> Primitive_Mode (List Type_Parameter) Bit GenericType Code)
  (when class
    {#GenericTypeVar name}
    (when (list.example (function (_ [pname pbounds])
                          (and (text#= name pname)
                               (not (list.empty? pbounds))))
                        type_params)
      {try.#Failure _}
      (code.symbol ["" name])

      {try.#Success [pname pbounds]}
      (class_type' mode type_params in_array? (maybe.trusted (list.head pbounds))))
    
    {#GenericClass name+params}
    (generic_class_type' mode type_params in_array? name+params
                         class_type')

    {#GenericArray param}
    (let [=param (class_type' mode type_params true param)]
      (` (array.Array (, =param))))

    (^.or {#GenericWildcard {.#None}}
          {#GenericWildcard {.#Some [{#LowerBound} _]}})
    (` .Any)

    {#GenericWildcard {.#Some [{#UpperBound} upper_bound]}}
    (class_type' mode type_params in_array? upper_bound)
    ))

(the (class_type mode type_params class)
  (-> Primitive_Mode (List Type_Parameter) GenericType Code)
  (class_type' mode type_params false class))

(the (type_param_type$ [name bounds])
  (-> Type_Parameter Code)
  (code.symbol ["" name]))

(the (class_decl_type$ (open "[0]"))
  (-> Class_Declaration Code)
  (let [=params (list#each (.is (-> Type_Parameter Code)
                                (function (_ [pname pbounds])
                                  (when pbounds
                                    {.#End}
                                    (code.symbol ["" pname])

                                    {.#Item bound1 _}
                                    (class_type {#ManualPrM} #class_params bound1))))
                           #class_params)]
    (` (Nominal (, (code.text (safe #class_name)))
                [(,* =params)]))))

(the type_var_class Text "java.lang.Object")

(the (simple_class$ env class)
  (-> (List Type_Parameter) GenericType Text)
  (when class
    {#GenericTypeVar name}
    (when (list.example (function (_ [pname pbounds])
                          (and (text#= name pname)
                               (not (list.empty? pbounds))))
                        env)
      {try.#Failure _}
      type_var_class

      {try.#Success [pname pbounds]}
      (simple_class$ env (maybe.trusted (list.head pbounds))))

    (^.or {#GenericWildcard {.#None}}
          {#GenericWildcard {.#Some [{#LowerBound} _]}})
    type_var_class
    
    {#GenericWildcard {.#Some [{#UpperBound} upper_bound]}}
    (simple_class$ env upper_bound)
    
    {#GenericClass name env}
    (safe name)

    {#GenericArray param'}
    (when param'
      {#GenericArray param}
      (%.message "[" (simple_class$ env param))
      
      (^.with_template [<prim> <class>]
        [{#GenericClass <prim> {.#End}}
         <class>])
      (["boolean" "[Z"]
       ["byte"    "[B"]
       ["short"   "[S"]
       ["int"     "[I"]
       ["long"    "[J"]
       ["float"   "[F"]
       ["double"  "[D"]
       ["char"    "[C"])
      
      param
      (%.message "[L" (simple_class$ env param) ";"))
    ))

(the (get_const_projection class_name field_name)
  (-> Text Text (Projection Code))
  (do <>.monad
    [.let [dotted_name (%.message "::" field_name)]
     _ (<code>.this (code.symbol ["" dotted_name]))]
    (in (`' ((, (code.text (%.message "jvm getstatic" ":" class_name ":" field_name))))))))

(the (get_var_projection class_name field_name)
  (-> Text Text (Projection Code))
  (do <>.monad
    [.let [dotted_name (%.message "::" field_name)]
     _ (<code>.this (code.symbol ["" dotted_name]))]
    (in (`' ((, (code.text (%.message "jvm getfield" ":" class_name ":" field_name))) _jvm_this)))))

(the (put_var_projection class_name field_name)
  (-> Text Text (Projection Code))
  (do <>.monad
    [.let [dotted_name (%.message "::" field_name)]
     [_ _ value] (.is (Projection [Any Any Code])
                      (<code>.form (all <>.and (<code>.this (' :=)) (<code>.this (code.symbol ["" dotted_name])) <code>.any)))]
    (in (`' ((, (code.text (%.message "jvm putfield" ":" class_name ":" field_name))) _jvm_this (, value))))))

(the (pre_walk_replace f input)
  (-> (-> Code Code) Code Code)
  (when (f input)
    (^.with_template [<tag>]
      [[meta {<tag> parts}]
       [meta {<tag> (list#each (pre_walk_replace f) parts)}]])
    ([.#Form]
     [.#Variant]
     [.#Tuple])
    
    ast'
    ast'))

(the (projection_replacer p ast)
  (-> (Projection Code) (-> Code Code))
  (when (<>.value p (list ast))
    {.#Right [{.#End} ast']}
    ast'

    _
    ast
    ))

(the (field_projection class_name [[field_name _ _] field])
  (-> Text [Member_Declaration FieldDecl] (Projection Code))
  (when field
    {#ConstantField _}
    (get_const_projection class_name field_name)
    
    {#VariableField _}
    (<>.either (get_var_projection class_name field_name)
               (put_var_projection class_name field_name))))

(the (constructor_projection params class_name arg_decls)
  (-> (List Type_Parameter) Text (List ArgDecl) (Projection Code))
  (do <>.monad
    [args (.is (Projection (List Code))
               (<code>.form (<>.after (<code>.this (' ::new!))
                                      (<code>.tuple (<>.exactly (list.size arg_decls) <code>.any)))))
     .let [arg_decls' (.is (List Text) (list#each (|>> product.right (simple_class$ params)) arg_decls))]]
    (in (` ((, (code.text (%.message "jvm new" ":" class_name ":" (text.interposed "," arg_decls'))))
            (,* args))))))

(the (static_method_projection params class_name method_name arg_decls)
  (-> (List Type_Parameter) Text Text (List ArgDecl) (Projection Code))
  (do <>.monad
    [.let [dotted_name (%.message "::" method_name "!")]
     args (.is (Projection (List Code))
               (<code>.form (<>.after (<code>.this (code.symbol ["" dotted_name]))
                                      (<code>.tuple (<>.exactly (list.size arg_decls) <code>.any)))))
     .let [arg_decls' (.is (List Text) (list#each (|>> product.right (simple_class$ params)) arg_decls))]]
    (in (`' ((, (code.text (%.message "jvm invokestatic" ":" class_name ":" method_name ":" (text.interposed "," arg_decls'))))
             (,* args))))))

(with_template [<name> <jvm_op>]
  [(the (<name> params class_name method_name arg_decls)
     (-> (List Type_Parameter) Text Text (List ArgDecl) (Projection Code))
     (do <>.monad
       [.let [dotted_name (%.message "::" method_name "!")]
        args (.is (Projection (List Code))
                  (<code>.form (<>.after (<code>.this (code.symbol ["" dotted_name]))
                                         (<code>.tuple (<>.exactly (list.size arg_decls) <code>.any)))))
        .let [arg_decls' (.is (List Text) (list#each (|>> product.right (simple_class$ params)) arg_decls))]]
       (in (`' ((, (code.text (%.message <jvm_op> ":" class_name ":" method_name ":" (text.interposed "," arg_decls'))))
                (,' _jvm_this) (,* args))))))]

  [special_method_projection "jvm invokespecial"]
  [virtual_method_projection "jvm invokevirtual"]
  )

(the (method_projection params class_name [[method_name _ _] meth_def])
  (-> (List Type_Parameter) Text [Member_Declaration Method_Definition] (Projection Code))
  (when meth_def
    {#ConstructorMethod strict? type_vars args constructor_args return_expr exs}
    (constructor_projection params class_name args)
    
    {#StaticMethod strict? type_vars args return_type return_expr exs}
    (static_method_projection params class_name method_name args)
    
    (^.or {#VirtualMethod final? strict? type_vars self_name args return_type return_expr exs}
          {#OverridenMethod strict? owner_class type_vars self_name args return_type return_expr exs})
    (special_method_projection params class_name method_name args)

    {#AbstractMethod type_vars args return_type exs}
    (virtual_method_projection params class_name method_name args)

    {#NativeMethod type_vars args return_type exs}
    (virtual_method_projection params class_name method_name args)))

... Projections
(the privacy_modifier^
  (Projection Privacy)
  (let [(open "[0]") <>.monad]
    (all <>.or
         (<code>.this (' "public"))
         (<code>.this (' "private"))
         (<code>.this (' "protected"))
         (in []))))

(the inheritance_modifier^
  (Projection Inheritance)
  (let [(open "[0]") <>.monad]
    (all <>.or
         (<code>.this (' "final"))
         (<code>.this (' "abstract"))
         (in []))))

(the bound_kind^
  (Projection BoundKind)
  (<>.or (<code>.this (' <))
         (<code>.this (' >))))

(the (no_periods_assertion name)
  (-> Text (Projection Any))
  (<>.assertion "Names in class declarations cannot contain periods."
                (not (text.contains? "." name))))

(the (generic_type^ type_vars)
  (-> (List Type_Parameter) (Projection GenericType))
  (<>.rec
   (function (_ again^)
     (all <>.either
          (do <>.monad
            [_ (<code>.this (' ?))]
            (in {#GenericWildcard {.#None}}))
          (<code>.tuple (do <>.monad
                          [_ (<code>.this (' ?))
                           bound_kind bound_kind^
                           bound again^]
                          (in {#GenericWildcard {.#Some [bound_kind bound]}})))
          (do <>.monad
            [name <code>.local
             _ (no_periods_assertion name)]
            (if (list.member? text.equivalence (list#each product.left type_vars) name)
              (in {#GenericTypeVar name})
              (in {#GenericClass name (list)})))
          (<code>.tuple (do <>.monad
                          [component again^]
                          (when component
                            (^.with_template [<class> <name>]
                              [{#GenericClass <name> {.#End}}
                               (in {#GenericClass <class> (list)})])
                            (["[Z" "boolean"]
                             ["[B" "byte"]
                             ["[S" "short"]
                             ["[I" "int"]
                             ["[J" "long"]
                             ["[F" "float"]
                             ["[D" "double"]
                             ["[C" "char"])

                            _
                            (in {#GenericArray component}))))
          (<code>.form (do <>.monad
                         [name <code>.local
                          _ (no_periods_assertion name)
                          params (<>.some again^)
                          _ (<>.assertion (%.message name " cannot be a type-parameter!")
                                          (not (list.member? text.equivalence (list#each product.left type_vars) name)))]
                         (in {#GenericClass name params})))
          ))))

(the type_param^
  (Projection Type_Parameter)
  (<>.either (do <>.monad
               [param_name <code>.local]
               (in [param_name (list)]))
             (<code>.tuple (do <>.monad
                             [param_name <code>.local
                              _ (<code>.this (' <))
                              bounds (<>.many (..generic_type^ (list)))]
                             (in [param_name bounds])))))

(the type_params^
  (Projection (List Type_Parameter))
  (|> ..type_param^
      <>.some
      <code>.tuple
      (<>.else (list))))

(the class_decl^
  (Projection Class_Declaration)
  (<>.either (do <>.monad
               [name <code>.local
                _ (no_periods_assertion name)]
               (in [name (list)]))
             (<code>.form (do <>.monad
                            [name <code>.local
                             _ (no_periods_assertion name)
                             params (<>.some ..type_param^)]
                            (in [name params])))
             ))

(the (super_class_decl^ type_vars)
  (-> (List Type_Parameter) (Projection Super_Class_Decl))
  (<>.either (do <>.monad
               [name <code>.local
                _ (no_periods_assertion name)]
               (in [name (list)]))
             (<code>.form (do <>.monad
                            [name <code>.local
                             _ (no_periods_assertion name)
                             params (<>.some (..generic_type^ type_vars))]
                            (in [name params])))))

(the annotation_params^
  (Projection (List AnnotationParam))
  (<code>.tuple (<>.some (<>.and <code>.text <code>.any))))

(the annotation^
  (Projection Annotation)
  (<>.either (do <>.monad
               [ann_name <code>.local]
               (in [ann_name (list)]))
             (<code>.form (<>.and <code>.local
                                  annotation_params^))))

(the annotations^'
  (Projection (List Annotation))
  (do <>.monad
    [_ (<code>.this (' "ann"))]
    (<code>.tuple (<>.some ..annotation^))))

(the annotations^
  (Projection (List Annotation))
  (do <>.monad
    [anns?? (<>.maybe ..annotations^')]
    (in (maybe.else (list) anns??))))

(the (throws_decl'^ type_vars)
  (-> (List Type_Parameter) (Projection (List GenericType)))
  (do <>.monad
    [_ (<code>.this (' "throws"))]
    (<code>.tuple (<>.some (..generic_type^ type_vars)))))

(the (throws_decl^ type_vars)
  (-> (List Type_Parameter) (Projection (List GenericType)))
  (do <>.monad
    [exs? (<>.maybe (throws_decl'^ type_vars))]
    (in (maybe.else (list) exs?))))

(the (method_decl^ type_vars)
  (-> (List Type_Parameter) (Projection [Member_Declaration MethodDecl]))
  (<code>.form (do <>.monad
                 [tvars ..type_params^
                  name <code>.local
                  anns ..annotations^
                  inputs (<code>.tuple (<>.some (..generic_type^ type_vars)))
                  output (..generic_type^ type_vars)
                  exs (..throws_decl^ type_vars)]
                 (in [[name {#PublicP} anns] [#method_tvars tvars
                                              #method_inputs inputs
                                              #method_output output
                                              #method_exs    exs]]))))

(the state_modifier^
  (Projection State)
  (all <>.or
       (<code>.this (' "volatile"))
       (<code>.this (' "final"))
       (of <>.monad in [])))

(the (field_decl^ type_vars)
  (-> (List Type_Parameter) (Projection [Member_Declaration FieldDecl]))
  (<>.either (<code>.form (do <>.monad
                            [_ (<code>.this (' "const"))
                             name <code>.local
                             anns ..annotations^
                             type (..generic_type^ type_vars)
                             body <code>.any]
                            (in [[name {#PublicP} anns] {#ConstantField [type body]}])))
             (<code>.form (do <>.monad
                            [pm privacy_modifier^
                             sm state_modifier^
                             name <code>.local
                             anns ..annotations^
                             type (..generic_type^ type_vars)]
                            (in [[name pm anns] {#VariableField [sm type]}])))))

(the (arg_decl^ type_vars)
  (-> (List Type_Parameter) (Projection ArgDecl))
  (<>.and <code>.local
          (..generic_type^ type_vars)))

(the (arg_decls^ type_vars)
  (-> (List Type_Parameter) (Projection (List ArgDecl)))
  (<code>.tuple (<>.some (arg_decl^ type_vars))))

(the (constructor_arg^ type_vars)
  (-> (List Type_Parameter) (Projection ConstructorArg))
  (<>.and (..generic_type^ type_vars) <code>.any))

(the (constructor_args^ type_vars)
  (-> (List Type_Parameter) (Projection (List ConstructorArg)))
  (<code>.tuple (<>.some (constructor_arg^ type_vars))))

(the (constructor_method^ class_vars)
  (-> (List Type_Parameter) (Projection [Member_Declaration Method_Definition]))
  (<code>.form (do <>.monad
                 [pm privacy_modifier^
                  strict_fp? (<>.parses? (<code>.this (' "strict")))
                  method_vars ..type_params^
                  .let [total_vars (list#composite class_vars method_vars)]
                  [_ arg_decls] (<code>.form (<>.and (<code>.this (' new))
                                                     (..arg_decls^ total_vars)))
                  constructor_args (..constructor_args^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^
                  body <code>.any]
                 (in [[#member_name constructor_method_name
                       #member_privacy pm
                       #member_anns annotations]
                      {#ConstructorMethod strict_fp? method_vars arg_decls constructor_args body exs}]))))

(the (virtual_method_def^ class_vars)
  (-> (List Type_Parameter) (Projection [Member_Declaration Method_Definition]))
  (<code>.form (do <>.monad
                 [pm privacy_modifier^
                  strict_fp? (<>.parses? (<code>.this (' "strict")))
                  final? (<>.parses? (<code>.this (' "final")))
                  method_vars ..type_params^
                  .let [total_vars (list#composite class_vars method_vars)]
                  [name this_name arg_decls] (<code>.form (all <>.and
                                                               <code>.local
                                                               <code>.local
                                                               (..arg_decls^ total_vars)))
                  return_type (..generic_type^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^
                  body <code>.any]
                 (in [[#member_name name
                       #member_privacy pm
                       #member_anns annotations]
                      {#VirtualMethod final? strict_fp?
                                      method_vars
                                      this_name arg_decls return_type
                                      body exs}]))))

(the overriden_method_def^
  (Projection [Member_Declaration Method_Definition])
  (<code>.form (do <>.monad
                 [strict_fp? (<>.parses? (<code>.this (' "strict")))
                  owner_class ..class_decl^
                  method_vars ..type_params^
                  .let [total_vars (list#composite (product.right owner_class) method_vars)]
                  [name this_name arg_decls] (<code>.form (all <>.and
                                                               <code>.local
                                                               <code>.local
                                                               (..arg_decls^ total_vars)))
                  return_type (..generic_type^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^
                  body <code>.any]
                 (in [[#member_name name
                       #member_privacy {#PublicP}
                       #member_anns annotations]
                      {#OverridenMethod strict_fp?
                                        owner_class method_vars
                                        this_name arg_decls return_type
                                        body exs}]))))

(the static_method_def^
  (Projection [Member_Declaration Method_Definition])
  (<code>.form (do <>.monad
                 [pm privacy_modifier^
                  strict_fp? (<>.parses? (<code>.this (' "strict")))
                  _ (<code>.this (' "static"))
                  method_vars ..type_params^
                  .let [total_vars method_vars]
                  [name arg_decls] (<code>.form (<>.and <code>.local
                                                        (..arg_decls^ total_vars)))
                  return_type (..generic_type^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^
                  body <code>.any]
                 (in [[#member_name name
                       #member_privacy pm
                       #member_anns annotations]
                      {#StaticMethod strict_fp? method_vars arg_decls return_type body exs}]))))

(the abstract_method_def^
  (Projection [Member_Declaration Method_Definition])
  (<code>.form (do <>.monad
                 [pm privacy_modifier^
                  _ (<code>.this (' "abstract"))
                  method_vars ..type_params^
                  .let [total_vars method_vars]
                  [name arg_decls] (<code>.form (<>.and <code>.local
                                                        (..arg_decls^ total_vars)))
                  return_type (..generic_type^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^]
                 (in [[#member_name name
                       #member_privacy pm
                       #member_anns annotations]
                      {#AbstractMethod method_vars arg_decls return_type exs}]))))

(the native_method_def^
  (Projection [Member_Declaration Method_Definition])
  (<code>.form (do <>.monad
                 [pm privacy_modifier^
                  _ (<code>.this (' "native"))
                  method_vars ..type_params^
                  .let [total_vars method_vars]
                  [name arg_decls] (<code>.form (<>.and <code>.local
                                                        (..arg_decls^ total_vars)))
                  return_type (..generic_type^ total_vars)
                  exs (..throws_decl^ total_vars)
                  annotations ..annotations^]
                 (in [[#member_name name
                       #member_privacy pm
                       #member_anns annotations]
                      {#NativeMethod method_vars arg_decls return_type exs}]))))

(the (method_def^ class_vars)
  (-> (List Type_Parameter) (Projection [Member_Declaration Method_Definition]))
  (all <>.either
       (..constructor_method^ class_vars)
       (..virtual_method_def^ class_vars)
       ..overriden_method_def^
       ..static_method_def^
       ..abstract_method_def^
       ..native_method_def^))

(the partial_call^
  (Projection Partial_Call)
  (<code>.form (<>.and <code>.symbol (<code>.tuple (<>.some <code>.any)))))

(the import_member_alias^
  (Projection (Maybe Text))
  (<>.maybe (do <>.monad
              [_ (<code>.this (' "as"))]
              <code>.local)))

(the (import_member_args^ type_vars)
  (-> (List Type_Parameter) (Projection (List [Bit GenericType])))
  (<code>.tuple (<>.some (<>.and (<>.parses? (<code>.this (' "?"))) (..generic_type^ type_vars)))))

(the import_member_return_flags^
  (Projection [Bit Bit Bit])
  (all <>.and (<>.parses? (<code>.this (' "io"))) (<>.parses? (<code>.this (' "try"))) (<>.parses? (<code>.this (' "?")))))

(the primitive_mode^
  (Projection Primitive_Mode)
  (<>.or (<code>.this (' "manual"))
         (<code>.this (' "auto"))))

(the (import_member_decl^ owner_vars)
  (-> (List Type_Parameter) (Projection Import_Member_Declaration))
  (all <>.either
       (<code>.form (do <>.monad
                      [_ (<code>.this (' "enum"))
                       enum_members (<>.some <code>.local)]
                      (in {#EnumDecl enum_members})))
       (<code>.form (do <>.monad
                      [tvars ..type_params^
                       _ (<code>.this (' new))
                       ?alias import_member_alias^
                       .let [total_vars (list#composite owner_vars tvars)]
                       ?prim_mode (<>.maybe primitive_mode^)
                       args (..import_member_args^ total_vars)
                       [io? try? maybe?] import_member_return_flags^]
                      (in {#ConstructorDecl [[#import_member_mode    (maybe.else {#AutoPrM} ?prim_mode)
                                              #import_member_alias   (maybe.else "new" ?alias)
                                              #import_member_kind    {#VirtualIMK}
                                              #import_member_tvars   tvars
                                              #import_member_args    args
                                              #import_member_maybe?  maybe?
                                              #import_member_try?    try?
                                              #import_member_io?     io?]
                                             []]})))
       (<code>.form (do <>.monad
                      [kind (.is (Projection ImportMethodKind)
                                 (<>.or (<code>.this (' "static"))
                                        (in [])))
                       tvars ..type_params^
                       name <code>.local
                       ?alias import_member_alias^
                       .let [total_vars (list#composite owner_vars tvars)]
                       ?prim_mode (<>.maybe primitive_mode^)
                       args (..import_member_args^ total_vars)
                       [io? try? maybe?] import_member_return_flags^
                       return (..generic_type^ total_vars)]
                      (in {#MethodDecl [[#import_member_mode    (maybe.else {#AutoPrM} ?prim_mode)
                                         #import_member_alias   (maybe.else name ?alias)
                                         #import_member_kind    kind
                                         #import_member_tvars   tvars
                                         #import_member_args    args
                                         #import_member_maybe?  maybe?
                                         #import_member_try?    try?
                                         #import_member_io?     io?]
                                        [#import_method_name    name
                                         #import_method_return  return]]})))
       (<code>.form (do <>.monad
                      [read_only? (<>.parses? (<code>.this (' "read_only")))
                       static? (<>.parses? (<code>.this (' "static")))
                       name <code>.local
                       ?prim_mode (<>.maybe primitive_mode^)
                       gtype (..generic_type^ owner_vars)
                       maybe? (<>.parses? (<code>.this (' "?")))]
                      (in {#FieldAccessDecl [#import_field_mode    (maybe.else {#AutoPrM} ?prim_mode)
                                             #import_field_name    name
                                             #import_field_static? static?
                                             #import_field_maybe?  maybe?
                                             #import_field_setter? (not read_only?)
                                             #import_field_type    gtype]})))
       ))

... Generators
(the with_parens
  (-> JVM_Code JVM_Code)
  (text.enclosed ["(" ")"]))

(the with_brackets
  (-> JVM_Code JVM_Code)
  (text.enclosed ["[" "]"]))

(the spaced
  (-> (List JVM_Code) JVM_Code)
  (text.interposed " "))

(the (privacy_modifier$ pm)
  (-> Privacy JVM_Code)
  (when pm
    {#PublicP}    "public"
    {#PrivateP}   "private"
    {#ProtectedP} "protected"
    {#DefaultP}   "default"))

(the (inheritance_modifier$ im)
  (-> Inheritance JVM_Code)
  (when im
    {#FinalI}    "final"
    {#AbstractI} "abstract"
    {#DefaultI}  "default"))

(the (annotation_param$ [name value])
  (-> AnnotationParam JVM_Code)
  (%.message name "=" (code.absolute value)))

(the (annotation$ [name params])
  (-> Annotation JVM_Code)
  (%.message "(" name " " "{" (text.interposed text.tab (list#each annotation_param$ params)) "}" ")"))

(the (bound_kind$ kind)
  (-> BoundKind JVM_Code)
  (when kind
    {#UpperBound} "<"
    {#LowerBound} ">"))

(the (generic_type$ gtype)
  (-> GenericType JVM_Code)
  (when gtype
    {#GenericTypeVar name}
    name

    {#GenericClass name params}
    (%.message "(" (safe name) " " (spaced (list#each generic_type$ params)) ")")
    
    {#GenericArray param}
    (%.message "(" array.nominal " " (generic_type$ param) ")")
    
    {#GenericWildcard {.#None}}
    "?"

    {#GenericWildcard {.#Some [bound_kind bound]}}
    (%.message (bound_kind$ bound_kind) (generic_type$ bound))))

(the (type_param$ [name bounds])
  (-> Type_Parameter JVM_Code)
  (%.message "(" name " " (spaced (list#each generic_type$ bounds)) ")"))

(the (class_decl$ (open "[0]"))
  (-> Class_Declaration JVM_Code)
  (%.message "(" (safe #class_name) " " (spaced (list#each type_param$ #class_params)) ")"))

(the (super_class_decl$ (open "[0]"))
  (-> Super_Class_Decl JVM_Code)
  (%.message "(" (safe #super_class_name)
             " " (spaced (list#each generic_type$ #super_class_params))
             ")"))

(the (method_decl$ [[name pm anns] method_decl])
  (-> [Member_Declaration MethodDecl] JVM_Code)
  (let [(open "[0]") method_decl]
    (with_parens
      (spaced (list name
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ #method_tvars)))
                    (with_brackets (spaced (list#each generic_type$ #method_exs)))
                    (with_brackets (spaced (list#each generic_type$ #method_inputs)))
                    (generic_type$ #method_output))
              ))))

(the (state_modifier$ sm)
  (-> State JVM_Code)
  (when sm
    {#VolatileS} "volatile"
    {#FinalS}    "final"
    {#DefaultS}  "default"))

(the (field_decl$ [[name pm anns] field])
  (-> [Member_Declaration FieldDecl] JVM_Code)
  (when field
    {#ConstantField class value}
    (with_parens
      (spaced (list "constant" name
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (generic_type$ class)
                    (code.absolute value))
              ))

    {#VariableField sm class}
    (with_parens
      (spaced (list "variable" name
                    (privacy_modifier$ pm)
                    (state_modifier$ sm)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (generic_type$ class))
              ))
    ))

(the (arg_decl$ [name type])
  (-> ArgDecl JVM_Code)
  (with_parens
    (spaced (list name (generic_type$ type)))))

(the (constructor_arg$ [class term])
  (-> ConstructorArg JVM_Code)
  (with_brackets
    (spaced (list (generic_type$ class) (code.absolute term)))))

(the (method_def$ replacer super_class [[name pm anns] method_def])
  (-> (-> Code Code) Super_Class_Decl [Member_Declaration Method_Definition] JVM_Code)
  (when method_def
    {#ConstructorMethod strict_fp? type_vars arg_decls constructor_args body exs}
    (with_parens
      (spaced (list "init"
                    (privacy_modifier$ pm)
                    (bit#injection strict_fp?)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ type_vars)))
                    (with_brackets (spaced (list#each generic_type$ exs)))
                    (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                    (with_brackets (spaced (list#each constructor_arg$ constructor_args)))
                    (code.absolute (pre_walk_replace replacer body))
                    )))
    
    {#VirtualMethod final? strict_fp? type_vars this_name arg_decls return_type body exs}
    (with_parens
      (spaced (list "virtual"
                    name
                    (privacy_modifier$ pm)
                    (bit#injection final?)
                    (bit#injection strict_fp?)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ type_vars)))
                    (with_brackets (spaced (list#each generic_type$ exs)))
                    (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                    (generic_type$ return_type)
                    (code.absolute (pre_walk_replace replacer (` (let [(, (code.local this_name)) (,' _jvm_this)]
                                                                   (, body))))))))
    
    {#OverridenMethod strict_fp? class_decl type_vars this_name arg_decls return_type body exs}
    (let [super_replacer (projection_replacer (<code>.form (do <>.monad
                                                             [_ (<code>.this (' ::super!))
                                                              args (<code>.tuple (<>.exactly (list.size arg_decls) <code>.any))
                                                              .let [arg_decls' (.is (List Text) (list#each (|>> product.right (simple_class$ (list)))
                                                                                                           arg_decls))]]
                                                             (in (`' ((, (code.text (%.message "jvm invokespecial"
                                                                                               ":" (its #super_class_name super_class)
                                                                                               ":" name
                                                                                               ":" (text.interposed "," arg_decls'))))
                                                                      (,' _jvm_this) (,* args)))))))]
      (with_parens
        (spaced (list "override"
                      (class_decl$ class_decl)
                      name
                      (bit#injection strict_fp?)
                      (with_brackets (spaced (list#each annotation$ anns)))
                      (with_brackets (spaced (list#each type_param$ type_vars)))
                      (with_brackets (spaced (list#each generic_type$ exs)))
                      (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                      (generic_type$ return_type)
                      (|> (` (let [(, (code.local this_name)) (,' _jvm_this)]
                               (, body)))
                          (pre_walk_replace replacer)
                          (pre_walk_replace super_replacer)
                          code.absolute)
                      ))))

    {#StaticMethod strict_fp? type_vars arg_decls return_type body exs}
    (with_parens
      (spaced (list "static"
                    name
                    (privacy_modifier$ pm)
                    (bit#injection strict_fp?)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ type_vars)))
                    (with_brackets (spaced (list#each generic_type$ exs)))
                    (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                    (generic_type$ return_type)
                    (code.absolute (pre_walk_replace replacer body)))))

    {#AbstractMethod type_vars arg_decls return_type exs}
    (with_parens
      (spaced (list "abstract"
                    name
                    (privacy_modifier$ pm)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ type_vars)))
                    (with_brackets (spaced (list#each generic_type$ exs)))
                    (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                    (generic_type$ return_type))))

    {#NativeMethod type_vars arg_decls return_type exs}
    (with_parens
      (spaced (list "native"
                    name
                    (privacy_modifier$ pm)
                    (with_brackets (spaced (list#each annotation$ anns)))
                    (with_brackets (spaced (list#each type_param$ type_vars)))
                    (with_brackets (spaced (list#each generic_type$ exs)))
                    (with_brackets (spaced (list#each arg_decl$ arg_decls)))
                    (generic_type$ return_type))))
    ))

(the (complete_call$ g!obj [method args])
  (-> Code Partial_Call Code)
  (` ((, (code.symbol method)) [(,* args)] (, g!obj))))

... [Syntax]
(the object_super_class
  Super_Class_Decl
  [#super_class_name   "java/lang/Object"
   #super_class_params (list)])

(the .public class
  (syntax (_ [im inheritance_modifier^
              class_decl ..class_decl^
              .let [full_class_name (product.left class_decl)]
              .let [class_vars (product.right class_decl)]
              super (<>.else object_super_class
                             (..super_class_decl^ class_vars))
              interfaces (<>.else (list)
                                  (<code>.tuple (<>.some (..super_class_decl^ class_vars))))
              annotations ..annotations^
              fields (<>.some (..field_decl^ class_vars))
              methods (<>.some (..method_def^ class_vars))])
    (do meta.monad
      [current_module meta.current_module_name
       .let [fully_qualified_class_name (%.message (safe current_module) "." full_class_name)
             field_projections (list#each (field_projection fully_qualified_class_name) fields)
             method_projections (list#each (method_projection (product.right class_decl) fully_qualified_class_name) methods)
             replacer (projection_replacer (list#mix <>.either
                                                     (<>.failure "")
                                                     (list#composite field_projections method_projections)))
             def_code (%.message "jvm class:"
                                 (spaced (list (class_decl$ class_decl)
                                               (super_class_decl$ super)
                                               (with_brackets (spaced (list#each super_class_decl$ interfaces)))
                                               (inheritance_modifier$ im)
                                               (with_brackets (spaced (list#each annotation$ annotations)))
                                               (with_brackets (spaced (list#each field_decl$ fields)))
                                               (with_brackets (spaced (list#each (method_def$ replacer super) methods))))))]]
      (in (list (` ((, (code.text def_code)))))))))

(the .public interface
  (syntax (_ [class_decl ..class_decl^
              .let [class_vars (product.right class_decl)]
              supers (<>.else (list)
                              (<code>.tuple (<>.some (..super_class_decl^ class_vars))))
              annotations ..annotations^
              members (<>.some (..method_decl^ class_vars))])
    (let [def_code (%.message "jvm interface:"
                              (spaced (list (class_decl$ class_decl)
                                            (with_brackets (spaced (list#each super_class_decl$ supers)))
                                            (with_brackets (spaced (list#each annotation$ annotations)))
                                            (spaced (list#each method_decl$ members)))))]
      (in (list (` ((, (code.text def_code)))))))))

(the .public object
  (syntax (_ [class_vars (<code>.tuple (<>.some ..type_param^))
              super (<>.else object_super_class
                             (..super_class_decl^ class_vars))
              interfaces (<>.else (list)
                                  (<code>.tuple (<>.some (..super_class_decl^ class_vars))))
              constructor_args (..constructor_args^ class_vars)
              methods (<>.some ..overriden_method_def^)])
    (let [def_code (%.message "jvm anon-class:"
                              (spaced (list (super_class_decl$ super)
                                            (with_brackets (spaced (list#each super_class_decl$ interfaces)))
                                            (with_brackets (spaced (list#each constructor_arg$ constructor_args)))
                                            (with_brackets (spaced (list#each (method_def$ function.identity super) methods))))))]
      (in (list (` ((, (code.text def_code)))))))))

(the .public null
  (syntax (_ [])
    (in (list (` ("jvm object null"))))))

(the .public (null? obj)
  (-> (Nominal "java.lang.Object") Bit)
  ("jvm object null?" obj))

(the .public ???
  (syntax (_ [expr <code>.any])
    (with_symbols [g!temp]
      (in (list (` (let [(, g!temp) (, expr)]
                     (if ("jvm object null?" (, g!temp))
                       {.#None}
                       {.#Some (, g!temp)}))))))))

(the .public !!!
  (syntax (_ [expr <code>.any])
    (with_symbols [g!value]
      (in (list (` (.when (, expr)
                     {.#Some (, g!value)}
                     (, g!value)

                     {.#None}
                     ("jvm object null"))))))))

(the .public as
  (syntax (_ [class (..generic_type^ (list))
              unchecked (<>.maybe <code>.any)])
    (with_symbols [g!_ g!unchecked]
      (let [class_name (simple_class$ (list) class)
            class_type (` (.Nominal (, (code.text class_name))))
            check_type (` (.Maybe (, class_type)))
            check_code (` (if ((, (code.text (%.message "jvm instanceof" ":" class_name))) (, g!unchecked))
                            {.#Some (.as (, class_type)
                                         (, g!unchecked))}
                            {.#None}))]
        (when unchecked
          {.#Some unchecked}
          (in (list (` (.is (, check_type)
                            (let [(, g!unchecked) (, unchecked)]
                              (, check_code))))))

          {.#None}
          (in (list (` (.is (-> (Nominal "java.lang.Object") (, check_type))
                            (function ((, g!_) (, g!unchecked))
                              (, check_code))))))
          )))))

(the .public synchronized
  (syntax (_ [lock <code>.any
              body <code>.any])
    (in (list (` ("jvm object synchronized" (, lock) (, body)))))))

(the .public to
  (syntax (_ [obj <code>.any
              methods (<>.some partial_call^)])
    (with_symbols [g!obj]
      (in (list (` (let [(, g!obj) (, obj)]
                     (exec
                       (,* (list#each (complete_call$ g!obj) methods))
                       (, g!obj)))))))))

(the (class_import$ [full_name params])
  (-> Class_Declaration Code)
  (let [params' (list#each (|>> product.left code.local) params)]
    (template.with_locals [g!_]
      (` (the (, (code.symbol ["" full_name]))
           Type
           (for_any ((, (' g!_)) (,* params'))
             (Nominal (, (code.text (safe full_name)))
                      [(,* params')])))))))

(the (member_type_vars class_tvars member)
  (-> (List Type_Parameter) Import_Member_Declaration (List Type_Parameter))
  (when member
    {#ConstructorDecl [commons _]}
    (list#composite class_tvars (its #import_member_tvars commons))

    {#MethodDecl [commons _]}
    (when (its #import_member_kind commons)
      {#StaticIMK}
      (its #import_member_tvars commons)

      _
      (list#composite class_tvars (its #import_member_tvars commons)))

    _
    class_tvars))

(the (member_def_arg_bindings type_params class member)
  (-> (List Type_Parameter) Class_Declaration Import_Member_Declaration (Meta [(List [Bit Code]) (List Text) (List Code)]))
  (when member
    (^.or {#ConstructorDecl [commons _]} {#MethodDecl [commons _]})
    (let [(open "[0]") commons]
      (do [! meta.monad]
        [arg_inputs (monad.each !
                                (.is (-> [Bit GenericType] (Meta [Bit Code]))
                                     (function (_ [maybe? _])
                                       (with_symbols [arg_name]
                                         (in [maybe? arg_name]))))
                                #import_member_args)
         .let [arg_classes (.is (List Text)
                                (list#each (|>> product.right (simple_class$ (list#composite type_params #import_member_tvars)))
                                           #import_member_args))
               arg_types (list#each (.is (-> [Bit GenericType] Code)
                                         (function (_ [maybe? arg])
                                           (let [arg_type (class_type (its #import_member_mode commons) type_params arg)]
                                             (if maybe?
                                               (` (Maybe (, arg_type)))
                                               arg_type))))
                                    #import_member_args)]]
        (in [arg_inputs arg_classes arg_types])))

    _
    (of meta.monad in [(list) (list) (list)])))

(the (decorate_return_maybe class member return_term)
  (-> Class_Declaration Import_Member_Declaration Code Code)
  (when member
    (^.or {#ConstructorDecl [commons _]} {#MethodDecl [commons _]})
    (if (its #import_member_maybe? commons)
      (` (??? (, return_term)))
      (let [g!temp (` ((,' ,') (, (code.symbol ["" " Ω "]))))]
        (` (let [(, g!temp) (, return_term)]
             (if (not (..null? (.as (Nominal "java.lang.Object")
                                    (, g!temp))))
               (, g!temp)
               (panic! (, (code.text (%.message "Cannot produce null references from method calls @ "
                                                (its #class_name class)
                                                "." (its #import_member_alias commons))))))))))

    _
    return_term))

(with_template [<name> <tag> <term_trans>]
  [(the (<name> member return_term)
     (-> Import_Member_Declaration Code Code)
     (when member
       (^.or {#ConstructorDecl [commons _]} {#MethodDecl [commons _]})
       (if (its <tag> commons)
         <term_trans>
         return_term)

       _
       return_term))]

  [decorate_return_try #import_member_try? (` (.try (, return_term)))]
  [decorate_return_io  #import_member_io?  (` (io.io (, return_term)))]
  )

(the (free_type_param? [name bounds])
  (-> Type_Parameter Bit)
  (when bounds
    {.#End}
    true
    
    _
    false))

(the (lux_type_parameter [name _])
  (-> Type_Parameter Code)
  (code.symbol ["" name]))

(with_template [<name> <byte> <short> <int> <float>]
  [(the (<name> mode [class expression])
     (-> Primitive_Mode [Text Code] Code)
     (when mode
       {#ManualPrM}
       expression
       
       {#AutoPrM}
       expression))]

  [auto_convert_input  long_to_byte long_to_short long_to_int double_to_float]
  [auto_convert_output byte_to_long short_to_long int_to_long float_to_double]
  )

(the (un_quote quoted)
  (-> Code Code)
  (` ((,' ,) (, quoted))))

(the (jvm_extension_inputs mode classes inputs)
  (-> Primitive_Mode (List Text) (List [Bit Code]) (List Code))
  (|> inputs
      (list#each (function (_ [maybe? input])
                   (if maybe?
                     (` (!!! (, (un_quote input))))
                     (un_quote input))))
      (list.zipped_2 classes)
      (list#each (auto_convert_input mode))))

(the (import_name format class member)
  (-> Text Text Text Text)
  (|> format
      (text.replaced "[1]" class)
      (text.replaced "[0]" member)))

(the (syntax_inputs it)
  (-> (List Code)
      (List Code))
  (list (` [(,* it)])
        (` (<code>.tuple (, (when it
                              (list)
                              (` <code>.end)

                              _
                              (` (all <>.and (,* (list.repeated (list.size it) (` <code>.any)))))))))))

(the (member_def_interop type_params kind class [arg_function_inputs arg_classes arg_types] member method_prefix import_format)
  (-> (List Type_Parameter) Class_Kind Class_Declaration [(List [Bit Code]) (List Text) (List Code)] Import_Member_Declaration Text Text (Meta (List Code)))
  (let [[full_name class_tvars] class
        full_name (safe full_name)
        all_params (|> (member_type_vars class_tvars member)
                       (list.only free_type_param?)
                       (list#each lux_type_parameter))]
    (when member
      {#EnumDecl enum_members}
      (macro.with_symbols [g!_]
        (do [! meta.monad]
          [.let [enum_type (.is Code
                                (when class_tvars
                                  {.#End}
                                  (` (Nominal (, (code.text full_name))))

                                  _
                                  (let [=class_tvars (|> class_tvars
                                                         (list.only free_type_param?)
                                                         (list#each lux_type_parameter))]
                                    (` (for_any ((, g!_) (,* =class_tvars)) (Nominal (, (code.text full_name)) [(,* =class_tvars)]))))))
                 getter_interop (.is (-> Text Code)
                                     (function (_ name)
                                       (let [getter_name (code.symbol ["" (..import_name import_format method_prefix name)])]
                                         (` (the (, getter_name)
                                              (, enum_type)
                                              ((, (code.text (%.message "jvm getstatic" ":" full_name ":" name)))))))))]]
          (in (list#each getter_interop enum_members))))
      
      {#ConstructorDecl [commons _]}
      (do meta.monad
        [.let [def_name (code.symbol ["" (..import_name import_format method_prefix (its #import_member_alias commons))])
               jvm_extension (code.text (%.message "jvm new" ":" full_name ":" (text.interposed "," arg_classes)))
               jvm_interop (|> (` ((, jvm_extension)
                                   (,* (jvm_extension_inputs (its #import_member_mode commons) arg_classes arg_function_inputs))))
                               (decorate_return_maybe class member)
                               (decorate_return_try member)
                               (decorate_return_io member))]]
        (in (list (` (the (, def_name)
                       (syntax ((, def_name) [(,* (syntax_inputs (list#each product.right arg_function_inputs)))])
                         ((,' in) (.list (.` (, jvm_interop))))))))))

      {#MethodDecl [commons method]}
      (with_symbols [g!obj]
        (do meta.monad
          [.let [def_name (code.symbol ["" (..import_name import_format method_prefix (its #import_member_alias commons))])
                 (open "[0]") commons
                 (open "[0]") method
                 [jvm_op object_ast] (.is [Text (List Code)]
                                          (when #import_member_kind
                                            {#StaticIMK}
                                            ["invokestatic"
                                             (list)]

                                            {#VirtualIMK}
                                            (when kind
                                              {#Class}
                                              ["invokevirtual"
                                               (list g!obj)]
                                              
                                              {#Interface}
                                              ["invokeinterface"
                                               (list g!obj)]
                                              )))
                 jvm_extension (code.text (%.message "jvm " jvm_op ":" full_name ":" #import_method_name ":" (text.interposed "," arg_classes)))
                 jvm_interop (|> [(simple_class$ (list) (its #import_method_return method))
                                  (` ((, jvm_extension) (,* (list#each un_quote object_ast))
                                      (,* (jvm_extension_inputs (its #import_member_mode commons) arg_classes arg_function_inputs))))]
                                 (auto_convert_output (its #import_member_mode commons))
                                 (decorate_return_maybe class member)
                                 (decorate_return_try member)
                                 (decorate_return_io member))]]
          (in (list (` (the (, def_name)
                         (syntax ((, def_name) [(,* (syntax_inputs (list#each product.right arg_function_inputs)))
                                                (,* (when object_ast
                                                      (list)
                                                      (list)

                                                      _
                                                      (list#composite object_ast
                                                                      (list (` <code>.any)))))])
                           ((,' in) (.list (.` (, jvm_interop)))))))))))

      {#FieldAccessDecl fad}
      (do meta.monad
        [.let [(open "[0]") fad
               base_gtype (class_type #import_field_mode type_params #import_field_type)
               classC (class_decl_type$ class)
               typeC (if #import_field_maybe?
                       (` (Maybe (, base_gtype)))
                       base_gtype)
               tvar_asts (.is (List Code)
                              (|> class_tvars
                                  (list.only free_type_param?)
                                  (list#each lux_type_parameter)))
               getter_name (code.symbol ["" (..import_name import_format method_prefix #import_field_name)])
               setter_name (code.symbol ["" (..import_name import_format method_prefix (%.message #import_field_name "!"))])]
         getter_interop (with_symbols [g!obj]
                          (let [getter_call (if #import_field_static?
                                              (` ((, getter_name) []))
                                              (` ((, getter_name) [(, g!obj) <code>.any])))
                                getter_body (<| (auto_convert_output #import_field_mode)
                                                [(simple_class$ (list) #import_field_type)
                                                 (if #import_field_static?
                                                   (let [jvm_extension (code.text (%.message "jvm getstatic" ":" full_name ":" #import_field_name))]
                                                     (` ((, jvm_extension))))
                                                   (let [jvm_extension (code.text (%.message "jvm getfield" ":" full_name ":" #import_field_name))]
                                                     (` ((, jvm_extension) (, (un_quote g!obj))))))])
                                getter_body (if #import_field_maybe?
                                              (` (??? (, getter_body)))
                                              getter_body)
                                getter_body (if #import_field_setter?
                                              (` (io.io (, getter_body)))
                                              getter_body)]
                            (in (` (the (, getter_name)
                                     (syntax (, getter_call)
                                       ((,' in) (.list (.` (, getter_body))))))))))
         setter_interop (.is (Meta (List Code))
                             (if #import_field_setter?
                               (with_symbols [g!obj g!value]
                                 (let [setter_call (if #import_field_static?
                                                     (` ((, setter_name) [(, g!value) <code>.any]))
                                                     (` ((, setter_name) [(, g!value) <code>.any
                                                                          (, g!obj) <code>.any])))
                                       setter_value (auto_convert_input #import_field_mode
                                                                        [(simple_class$ (list) #import_field_type) (un_quote g!value)])
                                       setter_value (if #import_field_maybe?
                                                      (` (!!! (, setter_value)))
                                                      setter_value)
                                       setter_command (%.message (if #import_field_static? "jvm putstatic" "jvm putfield")
                                                                 ":" full_name ":" #import_field_name)
                                       g!obj+ (.is (List Code)
                                                   (if #import_field_static?
                                                     (list)
                                                     (list (un_quote g!obj))))]
                                   (in (list (` (the (, setter_name)
                                                  (syntax (, setter_call)
                                                    ((,' in) (.list (.` (io.io ((, (code.text setter_command)) (,* g!obj+) (, setter_value)))))))))))))
                               (in (list))))]
        (in (list.partial getter_interop setter_interop)))
      )))

(the (member_import$ type_params kind class [import_format member])
  (-> (List Type_Parameter) Class_Kind Class_Declaration [Text Import_Member_Declaration] (Meta (List Code)))
  (let [[method_prefix _] class]
    (do meta.monad
      [=args (member_def_arg_bindings type_params class member)]
      (member_def_interop type_params kind class =args member method_prefix import_format))))

(.every (java/lang/Class a)
  (Nominal "java.lang.Class" [a]))

(the interface?
  (for_any (_ a)
    (-> (java/lang/Class a)
        Bit))
  (|>> "jvm invokevirtual:java.lang.Class:isInterface:"))

(the (load_class class_name)
  (-> Text (Try (java/lang/Class Any)))
  (try ("jvm invokestatic:java.lang.Class:forName:java.lang.String" class_name)))

(the (class_kind [class_name _])
  (-> Class_Declaration (Meta Class_Kind))
  (let [class_name (..safe class_name)]
    (when (..load_class class_name)
      {try.#Success class}
      (of meta.monad in (if (interface? class)
                          {#Interface}
                          {#Class}))

      {try.#Failure error}
      (meta.failure (%.message "Cannot load class: " class_name text.new_line
                               error)))))

(the .public import
  (syntax (_ [class_decl ..class_decl^
              import_format <code>.text
              members (<>.some (..import_member_decl^ (product.right class_decl)))])
    (do [! meta.monad]
      [kind (class_kind class_decl)
       =members (|> members
                    (list#each (|>> [import_format]))
                    (monad.each ! (member_import$ (product.right class_decl) kind class_decl)))]
      (in (list.partial (class_import$ class_decl) (list#conjoint =members))))))

(the .public array
  (syntax (_ [type (..generic_type^ (list))
              size <code>.any])
    (when type
      (^.with_template [<type> <array_op>]
        [{#GenericClass <type> (list)}
         (in (list (` (<array_op> (, size)))))])
      (["boolean" "jvm znewarray"]
       ["byte"    "jvm bnewarray"]
       ["short"   "jvm snewarray"]
       ["int"     "jvm inewarray"]
       ["long"    "jvm lnewarray"]
       ["float"   "jvm fnewarray"]
       ["double"  "jvm dnewarray"]
       ["char"    "jvm cnewarray"])

      _
      (in (list (` ("jvm anewarray" (, (code.text (generic_type$ type))) (, size))))))))

(the .public length
  (syntax (_ [array <code>.any])
    (in (list (` ("jvm arraylength" (, array)))))))

(the (type_class_name type)
  (-> Type (Meta Text))
  (if (type#= Any type)
    (of meta.monad in "java.lang.Object")
    (when type
      {.#Nominal name params}
      (of meta.monad in name)

      {.#Apply A F}
      (when (type.applied (list A) F)
        {.#None}
        (meta.failure (%.message "Cannot apply type: " (%.type F) " to " (%.type A)))

        {.#Some type'}
        (type_class_name type'))
      
      {.#Named _ type'}
      (type_class_name type')

      _
      (meta.failure (%.message "Cannot convert to JvmType: " (%.type type))))))

(the .public read!
  (syntax (_ [idx <code>.any
              array <code>.any])
    (when array
      [_ {.#Symbol array_name}]
      (do meta.monad
        [array_type (meta.type array_name)
         array_jvm_type (type_class_name array_type)]
        (when array_jvm_type
          (^.with_template [<type> <array_op>]
            [<type>
             (in (list (` (<array_op> (, array) (, idx)))))])
          (["[Z" "jvm zaload"]
           ["[B" "jvm baload"]
           ["[S" "jvm saload"]
           ["[I" "jvm iaload"]
           ["[J" "jvm jaload"]
           ["[F" "jvm faload"]
           ["[D" "jvm daload"]
           ["[C" "jvm caload"])

          _
          (in (list (` ("jvm aaload" (, array) (, idx)))))))

      _
      (with_symbols [g!array]
        (in (list (` (let [(, g!array) (, array)]
                       (..read! (, idx) (, g!array))))))))))

(the .public write!
  (syntax (_ [idx <code>.any
              value <code>.any
              array <code>.any])
    (when array
      [_ {.#Symbol array_name}]
      (do meta.monad
        [array_type (meta.type array_name)
         array_jvm_type (type_class_name array_type)]
        (when array_jvm_type
          (^.with_template [<type> <array_op>]
            [<type>
             (in (list (` (<array_op> (, array) (, idx) (, value)))))])
          (["[Z" "jvm zastore"]
           ["[B" "jvm bastore"]
           ["[S" "jvm sastore"]
           ["[I" "jvm iastore"]
           ["[J" "jvm jastore"]
           ["[F" "jvm fastore"]
           ["[D" "jvm dastore"]
           ["[C" "jvm castore"])

          _
          (in (list (` ("jvm aastore" (, array) (, idx) (, value)))))))

      _
      (with_symbols [g!array]
        (in (list (` (let [(, g!array) (, array)]
                       (..write! (, idx) (, value) (, g!array))))))))))

(the .public class_for
  (syntax (_ [type (..generic_type^ (list))])
    (in (list (` ("jvm object class" (, (code.text (simple_class$ (list) type)))))))))

(the .public type
  (syntax (_ [type (..generic_type^ (list))])
    (in (list (..class_type {#ManualPrM} (list) type)))))

(the .public is
  (template (is type term)
    [(.as type term)]))
