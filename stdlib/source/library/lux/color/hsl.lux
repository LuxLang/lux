... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["i" integer]
     ["d" decimal]]]
   [macro
    ["[0]" template]]]]
 [//
  ["[0]" rgb (.only RGB)]])

(the maximum
  (-- rgb.limit))

(the rgb_factor
  (|> ..maximum
      .integer
      i.decimal))

(the down
  (-> Natural
      Decimal)
  (|>> .integer i.decimal (d./ rgb_factor)))

(the up
  (-> Decimal
      Natural)
  (|>> (d.* rgb_factor) d.round d.integer .natural))

(every .public Value
  Decimal)

(template.with [<value> <name>]
  [(the .public <name>
     Value
     <value>)]

  [+0.0 least]
  [+1.0 most]
  )

(the .public (value? it)
  (Predicate Decimal)
  (not (or (d.< ..least it)
           (d.> ..most it))))

(the .public value
  (-> Decimal
      Value)
  (|>> (d.major ..least)
       (d.minor ..most)))

(every .public HSL
  (Record
   [#hue Value
    #saturation Value
    #luminance Value]))

(the .public equivalence
  (Equivalence HSL)
  (implementation
   (the (= left right)
     (`` (and (,, (template.with [<slot>]
                    [(d.= (its <slot> left)
                          (its <slot> right))]

                    [#hue]
                    [#saturation]
                    [#luminance]
                    )))))))

(alias [=]
       ..equivalence)

(the .public (hsl hue saturation luminance)
  (-> Decimal Decimal Decimal
      HSL)
  [#hue (..value hue)
   #saturation (..value saturation)
   #luminance (..value luminance)])

(the .public (of_rgb it)
  (-> RGB
      HSL)
  (let [red (..down (rgb.red it))
        green (..down (rgb.green it))
        blue (..down (rgb.blue it))

        major (all d.major red green blue)
        minor (all d.minor red green blue)
        luminance (|> (d.+ major minor) (d./ +2.0))]
    (if (d.= major minor)
      ... Achromatic
      [#hue ..least
       #saturation ..least
       #luminance luminance]
      ... Chromatic
      (let [diff (|> major (d.- minor))
            saturation (|> diff
                           (d./ (if (d.> +0.5 luminance)
                                  (|> +2.0 (d.- major) (d.- minor))
                                  (|> major (d.+ minor)))))
            hue' (if (d.= red major)
                   (|> green (d.- blue) (d./ diff)
                       (d.+ (if (d.< blue green) +6.0 +0.0)))
                   
                   (d.= green major)
                   (|> blue (d.- red) (d./ diff)
                       (d.+ +2.0))
                   
                   ... (d.= blue major)
                   (|> red (d.- green) (d./ diff)
                       (d.+ +4.0)))]
        [#hue (|> hue' (d./ +6.0))
         #saturation saturation
         #luminance luminance]))))

(the (hue_rgb p q t)
  (-> Decimal Decimal Decimal
      Natural)
  (let [t (if (d.< +0.0 t) (d.+ +1.0 t)
            (d.> +1.0 t) (d.- +1.0 t)
            ... else
            t)
        f2/3 (d./ +3.0 +2.0)]
    (..up (if (d.< (d./ +6.0 +1.0) t)
            (|> q (d.- p) (d.* +6.0) (d.* t) (d.+ p))
            
            (d.< (d./ +2.0 +1.0) t)
            q
            
            (d.< f2/3 t)
            (|> q (d.- p) (d.* (|> f2/3 (d.- t))) (d.* +6.0) (d.+ p))
            
            ... else
            p))))

(the .public (rgb (open "/[0]"))
  (-> HSL
      RGB)
  (if (d.= ..least /#saturation)
    ... Achromatic
    (let [intensity (..up /#luminance)]
      (rgb.rgb intensity intensity intensity))
    ... Chromatic
    (let [q (if (d.< +0.5 /#luminance)
              (|> /#saturation (d.+ +1.0) (d.* /#luminance))
              (|> /#luminance (d.+ /#saturation) (d.- (d.* /#saturation /#luminance))))
          p (|> /#luminance (d.* +2.0) (d.- q))
          third (|> +1.0 (d./ +3.0))]
      (rgb.rgb (|> /#hue (d.+ third) (hue_rgb p q))
               (|> /#hue (hue_rgb p q))
               (|> /#hue (d.- third) (hue_rgb p q))))))

(the (ratio it)
  (-> Decimal
      Decimal)
  (if (d.> +1.0 it)
    (d.% +1.0 it)

    (d.< +0.0 it)
    (|> it (d.% +1.0) (d.+ +1.0))

    ... else
    it))

(template.with [<op> <name>]
  [(the .public (<name> ratio (open "/[0]"))
     (-> Decimal HSL
         HSL)
     (..hsl /#hue
            (|> /#saturation
                (d.* (|> +1.0 (<op> (..ratio ratio))))
                (d.minor +1.0))
            /#luminance))]

  [d.+ saturated]
  [d.- un_saturated]
  )

(the .public gray_scale
  (-> HSL
      HSL)
  (|>> (its #luminance)
       (..hsl +0.0
              +0.0)))

(the .public (as_text it)
  (text.Injection HSL)
  (text "hsl("
        (%.natural (d.natural (d.as_degree (its #hue it))))
        ", " (%.natural (d.natural (d.as_per_cent (its #saturation it)))) "%"
        ", " (%.natural (d.natural (d.as_per_cent (its #luminance it)))) "%"
        ")"))
