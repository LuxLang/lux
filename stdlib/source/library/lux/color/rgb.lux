... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monoid (.only Monoid)]
    [equality (.only Equality)]
    [hash (.only Hash)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["n" natural]
      ["i" integer]
      ["d" decimal]]]]
   [macro
    ["[0]" template]]]])

(the mask
  /64.Mask
  (/64.mask 8))

(the .public limit
  Natural
  (++ (natural ..mask)))

(every .public Value
  Natural)

(template.with [<name> <value>]
  [(the .public <name>
     Value
     <value>)]

  [[least 0]
   [most (-- limit)]])

(the .public (value? it)
  (Predicate Natural)
  (not (or (n.< ..least it)
           (n.> ..most it))))

(the .public value
  (-> Natural
      Value)
  (/64.and ..mask))

(every .public RGB
  Natural)

(template.with [<section> <name>]
  [(the .public <name>
     (-> RGB
         Value)
     (let [shift (n.x 8 <section>)]
       (|>> (/64.>> shift)
            (/64.and ..mask))))]

  [[2 red]
   [1 green]
   [0 blue]])

(the .public (rgb red green blue)
  (-> Natural Natural Natural
      RGB)
  (`` (all /64.or
           (,, (template.with [<section> <name>]
                 [(/64.<< (n.x 8 <section>) (value <name>))]

                 [[2 red]
                  [1 green]
                  [0 blue]]))
           )))

(the .public hash
  (Hash RGB)
  n.hash)

(the .public equality
  (Equality RGB)
  (by ..hash equality))

(alias [=]
       ..equality)

(the (opposite_intensity value)
  (-> Value
      Value)
  (|> ..most
      (n.- value)))

(the .public (complement it)
  (-> RGB
      RGB)
  (`` (rgb (,, (template.with [<slot>]
                 [(|> it
                      <slot>
                      opposite_intensity)]

                 [[red]
                  [green]
                  [blue]])))))

(template.with [<color> <value>]
  [(the .public <color>
     RGB
     (rgb <value> <value> <value>))]

  [[black ..least]
   [white ..most]])

(template.with [<identity> <composite> <monoid>]
  [(the .public <monoid>
     (Monoid RGB)
     (implementation
      (the identity
        <identity>)

      (the (composite left right)
        (`` (rgb (,, (template.with [<slot>]
                       [(<composite> (<slot> left)
                                     (<slot> right))]

                       [[red]
                        [green]
                        [blue]])))))))]

  [[..black n.major addition]
   [..white n.minor subtraction]])

(the (ratio it)
  (-> Decimal
      Decimal)
  (if (d.> +1.0 it)
      (d.% +1.0 it)

      (d.< +0.0 it)
      (|> it (d.% +1.0) (d.+ +1.0))

      ... else
      it))

(the .public (interpolated end ratio start)
  (-> RGB Decimal RGB
      RGB)
  (let [dS (..ratio ratio)
        dE (|> +1.0 (d.- dS))
        interpolated' (is (-> Natural Natural
                              Natural)
                          (function (_ end start)
                            (|> (|> start .integer i.decimal (d.x dS))
                                (d.+ (|> end .integer i.decimal (d.x dE)))
                                d.integer
                                .natural)))]
    (..rgb (interpolated' (red end) (red start))
           (interpolated' (green end) (green start))
           (interpolated' (blue end) (blue start)))))

(template.with [<name> <target>]
  [(the .public <name>
     (-> Decimal RGB
         RGB)
     (..interpolated <target>))]

  [[darker   ..black]
   [brighter ..white]])

(the .public (as_text it)
  (text.Injection RGB)
  (text "rgb"
        "(" (%.natural (red it))
        "," (%.natural (green it))
        "," (%.natural (blue it))
        ")"))
