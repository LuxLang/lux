... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equality (.only Equality)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [math
    [number
     [/64
      ["d" decimal]
      ["[0]" natural]
      ["[0]" integer]]]]
   ["[0]" macro
    ["[1]" local]
    ["[0]" template]]
   [type
    ["[0]" nominal]]]]
 [//
  ["[0]" rgb (.only RGB)]])

(every .public Value
  Decimal)

(template.with [<value> <name>]
  [(the .public <name>
     Value
     <value>)]

  [[+0.0 least]
   [+1.0 most]]
  )

(the .public (value? it)
  (Predicate Decimal)
  (not (or (d.< ..least it)
           (d.> ..most it))))

(the .public value
  (-> Decimal
      Value)
  (|>> (d.major ..least)
       (d.minor ..most)))

(nominal.every .public HSB
  (Record
   [:hue Value
    :saturation Value
    :brightness Value])

  (the .public equality
    (Equality HSB)
    (implementation
     (the (= left right)
       (`` (and (,, (template.with [<slot>]
                      [(d.= (its <slot> (nominal.as left))
                            (its <slot> (nominal.as right)))]

                      [[:hue]
                       [:saturation]
                       [:brightness]]
                      )))))))

  (alias [=]
         ..equality)

  (template.with [<name> <slot>]
    [(the .public <name>
       (-> HSB
           Value)
       (|>> nominal.as
            (its <slot>)))]

    [[hue :hue]
     [saturation :saturation]
     [brightness :brightness]]
    )

  (the .public (hsb hue saturation brightness)
    (-> Decimal Decimal Decimal
        HSB)
    (nominal.of
     [:hue (..value hue)
      :saturation (..value saturation)
      :brightness (..value brightness)]))

  (the maximum
    (-- rgb.limit))

  (the rgb_factor
    (|> ..maximum
        .integer
        integer.decimal))

  (the down
    (-> Natural
        Decimal)
    (|>> natural.decimal (d./ rgb_factor)))

  (the up
    (-> Decimal
        Natural)
    (|>> (d.x rgb_factor) d.round d.integer .natural))

  (the .public (of_rgb it)
    (-> RGB
        HSB)
    (let [red (..down (rgb.red it))
          green (..down (rgb.green it))
          blue (..down (rgb.blue it))

          brightness (all d.major red green blue)
          range (all d.minor red green blue)

          chroma (|> brightness (d.- range))
          saturation (if (d.= +0.0 brightness)
                         +0.0
                         (|> chroma (d./ brightness)))]
      (macro.let [hue_of (template.macro (_ <base> <shift> <adjustment>)
                           [(|> <base> (d.- <shift>)
                                (d./ chroma)
                                <adjustment>
                                (d./ +6.0))])]
        (nominal.of
         [:hue (if (d.= +0.0 chroma)
                   ... Achromatic
                   +0.0
                   ... Chromatic
                   (d.= brightness red)
                   (hue_of green blue (d.modulo +6.0))

                   (d.= brightness green)
                   (hue_of blue red (d.+ +2.0))

                   ... (d.= brightness blue)
                   (hue_of red green (d.+ +4.0)))
          :saturation saturation
          :brightness brightness]))))

  (the .public (rgb it)
    (-> HSB
        RGB)
    (let [[hue saturation brightness] (nominal.as it)
          hue (|> hue (d.x +6.0))
          
          i (d.floor hue)
          f (|> hue (d.- i))
          p (|> +1.0 (d.- saturation) (d.x brightness))
          q (|> +1.0 (d.- (d.x f saturation)) (d.x brightness))
          t (|> +1.0 (d.- (|> +1.0 (d.- f) (d.x saturation))) (d.x brightness))
          v brightness
          modulo (|> i (d.% +6.0) d.integer .natural)
          
          red (when modulo 0 v 1 q 2 p 3 p 4 t 5 v _ (undefined))
          green (when modulo 0 t 1 v 2 v 3 q 4 p 5 p _ (undefined))
          blue (when modulo 0 p 1 p 2 t 3 v 4 v 5 q _ (undefined))]
      (rgb.rgb (..up red)
               (..up green)
               (..up blue))))

  (the .public (as_text it)
    (text.Injection HSB)
    (let [it (nominal.as it)]
      (text "hsb("
            (%.natural (d.natural (d.as_degree (its :hue it))))
            ", " (%.natural (d.natural (d.as_per_cent (its :saturation it)))) "%"
            ", " (%.natural (d.natural (d.as_per_cent (its :brightness it)))) "%"
            ")")))
  )
