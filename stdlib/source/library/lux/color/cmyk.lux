... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [equivalence (.only Equivalence)]]
   [function
    [predicate (.only Predicate)]]
   [data
    ["[0]" product]]
   [math
    [number
     [/64
      ["d" decimal]
      ["[0]" integer]]]]
   [macro
    ["[0]" template]]]]
 [//
  ["[0]" rgb (.only RGB)]])

(every .public Value
  Decimal)

(template.with [<value> <name>]
  [(the .public <name>
     Value
     <value>)]

  [[+0.0 least]
   [+1.0 most]]
  )

(the .public (value? it)
  (Predicate Decimal)
  (not (or (d.< ..least it)
           (d.> ..most it))))

(the .public value
  (-> Decimal
      Value)
  (|>> (d.major ..least)
       (d.minor ..most)))

(every .public CMYK
  (Record
   [#cyan Value
    #magenta Value
    #yellow Value
    #key Value]))

(the .public equivalence
  (Equivalence CMYK)
  (all product.equivalence
       d.equivalence
       d.equivalence
       d.equivalence
       d.equivalence
       ))

(alias [=]
       ..equivalence)

(the maximum
  (-- rgb.limit))

(the rgb_factor
  (|> ..maximum
      .integer
      integer.decimal))

(the down
  (-> Natural
      Decimal)
  (|>> .integer integer.decimal (d./ rgb_factor)))

(the up
  (-> Decimal
      Natural)
  (|>> (d.x rgb_factor) d.round d.integer .natural))

(the (opposite it)
  (-> Decimal
      Decimal)
  (d.- it ..most))

(the .public (of_rgb it)
  (-> RGB
      CMYK)
  (let [red (..down (rgb.red it))
        green (..down (rgb.green it))
        blue (..down (rgb.blue it))
        key (opposite (all d.major red green blue))
        f (if (d.< ..most key)
              (d./ (opposite key)
                   ..most)
              ..least)]
    [#cyan (|> ..most (d.- red) (d.- key) (d.x f))
     #magenta (|> ..most (d.- green) (d.- key) (d.x f))
     #yellow (|> ..most (d.- blue) (d.- key) (d.x f))
     #key key]))

(the .public (rgb it)
  (-> CMYK
      RGB)
  (when (its #key it)
    ..most
    rgb.black
    
    key
    (let [~key (opposite key)]
      (rgb.rgb (..up (d.x ~key (opposite (its #cyan it))))
               (..up (d.x ~key (opposite (its #magenta it))))
               (..up (d.x ~key (opposite (its #yellow it))))))))
