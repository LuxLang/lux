... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Profunctor Optics: Modular Data Accessors](https://arxiv.org/abs/1703.10857)
(.using
 [library
  [lux (.except macro
                when)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]
   [data
    ["[0]" sum]]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the with_template
  (<| (.in_module# .prelude)
      .with_template))

(the When'
  (macro (_ context context'
            case case')
    [(-> context
         (Or context' case))]))

(the Some'
  (macro (_ context context'
            case case')
    [(-> case'
         context')]))

(every (Case' context context'
              case case')
  (Record
   [#when (When' context context' case case')
    #some (Some' context context' case case')]))

(the When
  (macro (_ context case)
    [(When' context context
            case case)]))

(the Some
  (macro (_ context case)
    [(Some' context context
            case case)]))

(every .public (Case context case)
  (Case' context context
         case case))

(the .public (case when some)
  (for_any (_ context case)
    (-> (When context case) (Some context case)
        (Case context case)))
  [#when when
   #some some])

(the .public identity
  (for_any (_ it)
    (Case it it))
  (case sum.right
        function.identity))

(with_template [,name ,type ,tag]
  [(the .public ,name
     (for_any (_ context case)
       (-> (Case context case)
           (,type context case)))
     (.its ,tag))]

  [[when When #when]
   [some Some #some]]
  )

(every .public (Aspect context context' case case')
  (for_any (_ =>)
    (-> [(pro.Functor =>) (pro.Co_Cartesian =>)]
        (//.Aspect => context context' case case'))))

(the functor
  (for_any (_ case case')
    (pro.Functor (for_any (_ context context')
                   (Case' context context'
                          case case'))))
  (implementation
   (the (each before after [/#when /#some])
     [#when (|>> before /#when (sum.then after function.identity))
      #some (|>> /#some after)])))

(the co_cartesian
  (for_any (_ case case')
    (pro.Co_Cartesian (for_any (_ context context')
                        (Case' context context'
                               case case'))))
  (implementation
   (the (when_left [/#when /#some])
     [#when (sum.either (|>> /#when (sum.then sum.left function.identity))
                        (|>> sum.right sum.left))
      #some (|>> /#some sum.left)])
   (the (when_right [/#when /#some])
     [#when (sum.either (|>> sum.left sum.left)
                        (|>> /#when (sum.then sum.right function.identity)))
      #some (|>> /#some sum.right)])))

(the .public (as_aspect [/#when /#some]
                        [pro_functor co_cartesian])
  (for_any (_ context context' case case')
    (-> (Case' context context' case case')
        (Aspect context context' case case')))
  (<| (with pro_functor)
      (with co_cartesian)
      (|>> when_right
           (each /#when (sum.either function.identity /#some)))))

(the .public (of_aspect =>)
  (for_any (_ context context' case case')
    (-> (Aspect context context' case case' (for_any (_ context context')
                                              (Case' context context'
                                                     case case')))
        (Case' context context' case case')))
  (=> [..functor ..co_cartesian]
      [#when sum.right
       #some function.identity]))
