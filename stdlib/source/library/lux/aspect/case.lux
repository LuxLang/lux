... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Profunctor Optics: Modular Data Accessors](https://arxiv.org/abs/1703.10857)
(.using
 [library
  [lux (.except macro if when)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the with_template
  (<| (.in_module# .prelude)
      .with_template))

... Inlined the following functions in order to get around a circular dependency.
(these (with_template [<right?> <name>]
         [(the <name>
            (for_any (_ sum#left sum#right)
              (-> <name>
                  (Or sum#left sum#right)))
            (|>> {<right?>}))]

         [[0b sum#left]
          [1b sum#right]])

       (the (sum#either on_left on_right)
         (for_any (_ a b c)
           (-> (-> a c) (-> b c)
               (-> (Or a b) c)))
         (function (_ input)
           (.when input
             {0b l} (on_left l)
             {1b r} (on_right r))))

       (the (sum#then on_left on_right)
         (for_any (_ l l' r r')
           (-> (-> l l') (-> r r')
               (-> (Or l r) (Or l' r'))))
         (function (_ input)
           (.when input
             {0b l} {0b (on_left l)}
             {1b r} {1b (on_right r)}))))

(the If'
  (macro (_ context context'
            case case')
    [(-> context
         (Or context' case))]))

(the Some'
  (macro (_ context context'
            case case')
    [(-> case'
         context')]))

(every (Case' context context'
              case case')
  (Record
   [#if (If' context context' case case')
    #some (Some' context context' case case')]))

(the If
  (macro (_ context case)
    [(If' context context
          case case)]))

(the Some
  (macro (_ context case)
    [(Some' context context
            case case)]))

(every .public (Case context case)
  (Case' context context
         case case))

(the .public (new if some)
  (for_any (_ context case)
    (-> (If context case) (Some context case)
        (Case context case)))
  [#if if
   #some some])

(the .public identity
  (for_any (_ it)
    (Case it it))
  (new sum#right
       function.identity))

(with_template [,name ,type ,tag]
  [(the .public ,name
     (for_any (_ context case)
       (-> (Case context case)
           (,type context case)))
     (.its ,tag))]

  [[if If #if]
   [some Some #some]]
  )

(every .public (Aspect context context' case case')
  (for_any (_ =>)
    (-> [(pro.Functor =>) (pro.Co_Cartesian =>)]
        (//.Aspect => context context' case case'))))

(the functor
  (for_any (_ case case')
    (pro.Functor (for_any (_ context context')
                   (Case' context context'
                          case case'))))
  (implementation
   (the (each before after [/#if /#some])
     [#if (|>> before /#if (sum#then after function.identity))
      #some (|>> /#some after)])))

(the co_cartesian
  (for_any (_ case case')
    (pro.Co_Cartesian (for_any (_ context context')
                        (Case' context context'
                               case case'))))
  (implementation
   (the (when_left [/#if /#some])
     [#if (sum#either (|>> /#if (sum#then sum#left function.identity))
                      (|>> sum#right sum#left))
      #some (|>> /#some sum#left)])
   (the (when_right [/#if /#some])
     [#if (sum#either (|>> sum#left sum#left)
                      (|>> /#if (sum#then sum#right function.identity)))
      #some (|>> /#some sum#right)])))

(the .public (as_aspect [/#if /#some]
                        [pro_functor co_cartesian])
  (for_any (_ context context' case case')
    (-> (Case' context context' case case')
        (Aspect context context' case case')))
  (<| (with pro_functor)
      (with co_cartesian)
      (|>> when_right
           (each /#if (sum#either function.identity /#some)))))

(the .public (of_aspect =>)
  (for_any (_ context context' case case')
    (-> (Aspect context context' case case' (for_any (_ context context')
                                              (Case' context context'
                                                     case case')))
        (Case' context context' case case')))
  (=> [..functor ..co_cartesian]
      [#if sum#right
       #some function.identity]))

(with_template [,name]
  [(the ,name
     (<| (.in_module# .prelude)
         ,name))]

  [[?#value]
   [?#and]
   [?#any]
   [?#variant]
   [?#some]
   [?#local]
   [code#local]
   [failure]
   [list#each]
   [list#mix]
   [do]
   [meta#monad]
   [generated_name]])

(the .public when
  (.macro (_ tokens)
    (.when (<| (?#value tokens)
               (all ?#and
                    ?#any
                    (?#some (?#and (?#variant (?#and ?#any (?#some ?#any)))
                                   ?#any))
                    (?#and ?#local
                           ?#any)))
      {.#Some [input cases [else_binding else_branch]]}
      (do meta#monad
        ['else (generated_name "'else")
         'input (generated_name "'input")]
        (pure (list (` (.let [(, 'input) (, input)]
                         (, (list#mix (function (_ [[case bindings] then] else)
                                        (` (.when (..if (, case) (, 'input))
                                             {.#Right [(,* bindings)]}
                                             (, then)
                                             
                                             (, 'else)
                                             (, else))))
                                      (` (.let [(, (code#local else_binding)) (, 'input)]
                                           (, else_branch)))
                                      cases)))))))
      
      {.#None}
      (failure ..wrong_syntax))))
