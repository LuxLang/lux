... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro
                its revised has)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]
   [data
    ["[0]" product]]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the Its'
  (macro (_ context context'
            focus focus')
    [(-> context
         focus)]))

(the Has'
  (macro (_ context context'
            focus focus')
    [(-> [focus' context]
         context')]))

(every (Property' context context'
                  focus focus')
  (Record
   [#its (Its' context context'
               focus focus')
    #has (Has' context context'
               focus focus')]))

(the Its
  (macro (_ context focus)
    [(Its' context context
           focus focus)]))

(the Has
  (macro (_ context focus)
    [(Has' context context
           focus focus)]))

(every .public (Property context focus)
  (Property' context context
             focus focus))

(the .public (property its has)
  (for_any (_ context focus)
    (-> (Its context focus) (Has context focus)
        (Property context focus)))
  [#its its
   #has has])

(the .public identity
  (for_any (_ it)
    (Property it it))
  (property function.identity product.left))

(the .public its
  (for_any (_ context focus)
    (-> (Property context focus)
        (Its context focus)))
  (.its #its))

(the .public (has property value context)
  (for_any (_ context focus)
    (-> (Property context focus)
        (-> focus
            (Change context))))
  (by property #has [value context]))

(the .public (revised property change context)
  (for_any (_ context focus)
    (-> (Property context focus)
        (-> (Change focus)
            (Change context))))
  (by property #has [(change (its property context)) context]))

(the .public (composite outer inner)
  (for_any (_ focus middle context)
    (-> (Property context middle) (Property middle focus)
        (Property context focus)))
  [#its (|>> (its outer)
             (its inner))
   #has (function (_ [focus context])
          (revised outer (has inner focus) context))])

(comment
  (every .public (Aspect external_cause external_effect internal_cause internal_effect)
    (for_any (_ it)
      (-> [(pro.Functor it) (pro.Cartesian it)]
          (//.Aspect it external_cause external_effect internal_cause internal_effect))))

  (the functor
    (for_any (_ internal_cause internal_effect)
      (pro.Functor (Property' internal_cause internal_effect)))
    (implementation
     (the (each before after [/#its /#has])
       (..property' (|>> before
                         /#its)
                    (|>> (product.then function.identity before)
                         /#has
                         after)))))

  (the cartesian
    (for_any (_ internal_cause internal_effect)
      (pro.Cartesian (Property' internal_cause internal_effect)))
    (implementation
     (the (in_left [/#its /#has])
       (..property' (|>> product.left
                         /#its)
                    (product.forked (|>> (product.then function.identity product.left)
                                         /#has)
                                    (|>> product.right
                                         product.right))))
     (the (in_right [/#its /#has])
       (..property' (|>> product.right
                         /#its)
                    (product.forked (|>> product.right
                                         product.left)
                                    (|>> (product.then function.identity product.right)
                                         /#has))))))

  (the .public (as_property [/#its /#has]
                            [pro_functor cartesian])
    (for_any (_ internal_cause internal_effect external_cause external_effect)
      (-> (Property' internal_cause internal_effect external_cause external_effect)
          (Aspect internal_cause internal_effect external_cause external_effect)))
    (<| (.with pro_functor)
        (.with cartesian)
        (|>> in_left
             (each (product.forked /#its function.identity) /#has))))

  (the .public (as_property' it)
    (for_any (_ internal_cause internal_effect external_cause external_effect)
      (-> (Aspect internal_cause internal_effect external_cause external_effect (Property' internal_cause internal_effect))
          (Property' internal_cause internal_effect external_cause external_effect)))
    (it [..functor ..cartesian]
        ..identity))
  )
