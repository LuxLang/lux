... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... [Profunctor Optics: Modular Data Accessors](https://arxiv.org/abs/1703.10857)
(.using
 [library
  [lux (.except macro
                its revised has)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]
   [data
    ["[0]" product]]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the Its'
  (macro (_ context context'
            focus focus')
    [(-> context
         focus)]))

(the Has'
  (macro (_ context context'
            focus focus')
    [(-> [focus' context]
         context')]))

(every (Property' context context'
                  focus focus')
  (Record
   [#its (Its' context context'
               focus focus')
    #has (Has' context context'
               focus focus')]))

(the Its
  (macro (_ context focus)
    [(Its' context context
           focus focus)]))

(the Has
  (macro (_ context focus)
    [(Has' context context
           focus focus)]))

(every .public (Property context focus)
  (Property' context context
             focus focus))

(the .public (property its has)
  (for_any (_ context focus)
    (-> (Its context focus) (Has context focus)
        (Property context focus)))
  [#its its
   #has has])

(the .public identity
  (for_any (_ it)
    (Property it it))
  (property function.identity product.left))

(the .public its
  (for_any (_ context focus)
    (-> (Property context focus)
        (Its context focus)))
  (.its #its))

(the .public (has property value context)
  (for_any (_ context focus)
    (-> (Property context focus)
        (-> focus
            (Change context))))
  (by property #has [value context]))

(the .public (revised property change context)
  (for_any (_ context focus)
    (-> (Property context focus)
        (-> (Change focus)
            (Change context))))
  (by property #has [(change (its property context)) context]))

(the .public (composite outer inner)
  (for_any (_ focus middle context)
    (-> (Property context middle) (Property middle focus)
        (Property context focus)))
  [#its (|>> (its outer)
             (its inner))
   #has (function (_ [focus context])
          (revised outer (has inner focus) context))])

(every .public (Aspect context context' focus focus')
  (for_any (_ =>)
    (-> [(pro.Functor =>) (pro.Cartesian =>)]
        (//.Aspect => context context' focus focus'))))

(the functor
  (for_any (_ focus focus')
    (pro.Functor (for_any (_ context context')
                   (Property' context context'
                              focus focus'))))
  (implementation
   (the (each before after [/#its /#has])
     [#its (|>> before
                /#its)
      #has (|>> (product.then function.identity before)
                /#has
                after)])))

(the cartesian
  (for_any (_ focus focus')
    (pro.Cartesian (for_any (_ context context')
                     (Property' context context'
                                focus focus'))))
  (implementation
   (the (in_left [/#its /#has])
     [#its (|>> product.left
                /#its)
      #has (product.forked (|>> (product.then function.identity product.left)
                                /#has)
                           (|>> product.right
                                product.right))])
   (the (in_right [/#its /#has])
     [#its (|>> product.right
                /#its)
      #has (product.forked (|>> product.right
                                product.left)
                           (|>> (product.then function.identity product.right)
                                /#has))])))

(the .public (as_aspect [/#its /#has]
                        [pro_functor cartesian])
  (for_any (_ context context' focus focus')
    (-> (Property' context context' focus focus')
        (Aspect context context' focus focus')))
  (<| (with pro_functor)
      (with cartesian)
      (|>> in_left
           (each (product.forked /#its function.identity) /#has))))

(the .public (of_aspect =>)
  (for_any (_ context context' focus focus')
    (-> (Aspect context context' focus focus' (for_any (_ context context')
                                                (Property' context context' focus focus')))
        (Property' context context' focus focus')))
  (=> [..functor ..cartesian]
      [#its function.identity
       #has product.left]))
