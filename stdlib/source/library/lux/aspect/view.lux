... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro
                as)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the with_template
  (<| (.in_module# .prelude)
      .with_template))

(the As'
  (macro (_ context context'
            analogy analogy')
    [(-> context
         analogy)]))

(the Of'
  (macro (_ context context'
            analogy analogy')
    [(-> analogy'
         context')]))

(every (View' context context'
              analogy analogy')
  (Record
   [#as (As' context context'
             analogy analogy')
    #of (Of' context context'
             analogy analogy')]))

(the As
  (macro (_ context analogy)
    [(As' context context
          analogy analogy)]))

(the Of
  (macro (_ context analogy)
    [(Of' context context
          analogy analogy)]))

(every .public (View context analogy)
  (View' context context
         analogy analogy))

(the .public (view as of)
  (for_any (_ context analogy)
    (-> (As context analogy) (Of context analogy)
        (View context analogy)))
  [#as as
   #of of])

(with_template [,name ,type ,tag]
  [(the .public ,name
     (for_any (_ context analogy)
       (-> (View context analogy)
           (,type context analogy)))
     (.its ,tag))]

  [[as As #as]
   [of Of #of]]
  )

(the .public identity
  (for_any (_ it)
    (View it it))
  (..view function.identity function.identity))

(every .public (Aspect context context' analogy analogy')
  (for_any (_ it)
    (-> (pro.Functor it)
        (//.Aspect it context context' analogy analogy'))))

(the functor
  (for_any (_ analogy analogy')
    (pro.Functor (for_any (_ context context')
                   (View' context context'
                          analogy analogy'))))
  (implementation
   (the (each before after [/#as /#of])
     [#as (|>> before /#as)
      #of (|>> /#of after)])))

(the .public (as_aspect [/#as /#of]
                        [pro_functor])
  (for_any (_ context context' analogy analogy')
    (-> (View' context context' analogy analogy')
        (Aspect context context' analogy analogy')))
  (<| (with pro_functor)
      (each /#as /#of)))

(the .public (of_aspect it)
  (for_any (_ context context' analogy analogy')
    (-> (Aspect context context' analogy analogy' (for_any (_ context context')
                                                    (View' context context' analogy analogy')))
        (View' context context' analogy analogy')))
  (it [..functor]
      [#as function.identity
       #of function.identity]))
