... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except macro
                as)
   [abstract
    [functor
     ["[0]" pro]]]
   ["[0]" function]]]
 ["[0]" //])

(the macro
  (<| (.in_module# .prelude)
      .template#macro))

(the with_template
  (<| (.in_module# .prelude)
      .with_template))

(the As'
  (macro (_ it it'
            analogy analogy')
    [(-> it'
         analogy')]))

(the Of'
  (macro (_ it it'
            analogy analogy')
    [(-> analogy
         it)]))

(every (View' it it'
              analogy analogy')
  (Record
   [#as (As' it it'
             analogy analogy')
    #of (Of' it it'
             analogy analogy')]))

(the As
  (macro (_ it analogy)
    [(As' it it
          analogy analogy)]))

(the Of
  (macro (_ it analogy)
    [(Of' it it
          analogy analogy)]))

(every .public (View it analogy)
  (View' it it
         analogy analogy))

(the .public (view as of)
  (for_any (_ it analogy)
    (-> (As it analogy) (Of it analogy)
        (View it analogy)))
  [#as as
   #of of])

(with_template [,name ,type ,tag]
  [(the .public ,name
     (for_any (_ it analogy)
       (-> (View it analogy)
           (,type it analogy)))
     (.its ,tag))]

  [as As #as]
  [of Of #of]
  )

(the .public identity
  (for_any (_ it)
    (View it it))
  (..view function.identity function.identity))

(comment
  (every .public (Aspect it it' analogy analogy')
    (for_any (_ it)
      (-> (pro.Functor it)
          (//.Aspect it it it' analogy analogy'))))

  (the (as_aspect [/#as /#of]
                  [pro_functor])
    (for_any (_ it it' analogy analogy')
      (-> (View' it it' analogy analogy')
          (Aspect it it' analogy analogy')))
    (<| (.with pro_functor)
        (each /#of /#as)))

  (the functor
    (for_any (_ it it')
      (pro.Functor (View' it it')))
    (implementation
     (the (each before after [/#as /#of])
       [#as (|>> /#as after)
        #of (|>> before /#of)])))

  (the .public identity'
    (for_any (_ it)
      (Aspect it it
              it it))
    (..as_aspect ..identity))

  (the (of_aspect it)
    (for_any (_ it it' analogy analogy')
      (-> (Aspect it it' analogy analogy' (View' it it'))
          (View' it it' analogy analogy')))
    (it [..functor]
        ..identity))
  )
