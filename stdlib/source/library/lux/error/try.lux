... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except with when or as)
   [abstract
    [equivalence (.only Equivalence)]
    [functor (.only Functor)]
    ["[0]" monad (.only Monad)]]
   [function
    [predicate (.only Predicate)]]]])

(the template#macro (.in_module# .prelude .template#macro))

(every .public (Try it)
  (Variant
   {#Failure Error}
   {#Success it}))

(the .public functor
  (Functor Try)
  (implementation
   (the (each f ma)
     (.when ma
       {#Success datum}
       {#Success (f datum)}

       failure
       (as_expected failure)))))

(the .public monad
  (Monad Try)
  (implementation
   (the functor ..functor)

   (the (pure a)
     {#Success a})

   (the (conjoint mma)
     (.when mma
       {#Success ma}
       ma
       
       failure
       (as_expected failure)))))

(every .public (With ! it)
  (! (Try it)))

(the .public (with monad)
  (for_any (_ !)
    (-> (Monad !)
        (Monad (With !))))
  (implementation
   (the (functor it)
     (|> it
         (by ..functor each)
         (by monad each)))

   (the pure
     (|>> (by ..monad pure)
          (by monad pure)))
   
   (the (conjoint it)
     (monad.let monad
       [it it]
       (.when it
         {#Success it}
         it
         
         failure
         (pure (as_expected failure)))))))

(the .public (lifted monad)
  (for_any (_ ! it)
    (-> (Monad !)
        (-> (! it)
            (! (Try it)))))
  (by monad each (by ..monad pure)))

(the .public (equivalence (open "/#[0]"))
  (for_any (_ it)
    (-> (Equivalence it)
        (Equivalence (Try it))))
  (implementation
   (the (= expected actual)
     (.when [expected actual]
       [{#Success expected} {#Success actual}]
       (/#= expected actual)

       [{#Failure expected} {#Failure actual}]
       (.text_=# expected actual)

       _
       false
       ))))

(the .public (trusted try)
  (for_any (_ it)
    (-> (Try it)
        it))
  (.when try
    {#Success value}
    value

    {#Failure message}
    (halt! message)))

(the .public (maybe try)
  (for_any (_ it)
    (-> (Try it)
        (Maybe it)))
  (.when try
    {#Success value}
    {.#Some value}

    failure
    {.#None}))

(the .public (of_maybe error maybe)
  (for_any (_ it)
    (-> Error (Maybe it)
        (Try it)))
  (.when maybe
    {.#Some value}
    {#Success value}

    {.#None}
    {#Failure error}))

(the generated_name
  (macro (_ tokens compiler)
    (.when tokens
      (list {.#Text _ prefix})
      (let [generated_name (.in_module# .prelude .generated_name)]
        (.when (generated_name prefix compiler)
          {#Success [compiler 'it]}
          {#Success [compiler (list 'it)]}

          {#Failure error}
          {#Failure error}))

      _
      (undefined))))

(the _expansion#let (.in_module# .prelude .expansion#let))

(the .public else
  (<| (_expansion#let ['then (generated_name "'then")
                       'failure (generated_name "'failure")])
      (template#macro
       (_ <else> <try>)
       [(.when <try>
          {..#Success 'then}
          'then

          'failure
          <else>)])))

(the .public when
  (template#macro
   (_ <test> <then>)
   [(.if <test>
         <then>
         {..#Failure (let [name#as (.in_module# .prelude .name#as)]
                       (.text_composite# "[" (name#as (name ..when)) "]"
                                         " " "Invalid condition!"))})]))

(the .public or
  (<| (_expansion#let ['success (generated_name "'success")
                       'error (generated_name "'error")])
      (template#macro
       (_ ,left ,right)
       [(.when ,left
          {..#Failure 'error}
          ,right

          'success
          'success)])))

(the .public (as error it)
  (for_any (_ it)
    (-> Error (Try it)
        (Try it)))
  (.when it
    {..#Failure _}
    {..#Failure error}
    
    success
    success))

(the .public (is? expected it)
  (for_any (_ it)
    (-> Error
        (Predicate (Try it))))
  (.when it
    {..#Failure actual}
    (.text_=# expected actual)

    else
    false))
