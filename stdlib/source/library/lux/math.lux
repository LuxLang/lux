... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["<>" projection]
    ["[0]" monad]]
   [error
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)
      ["?[1]" \\projection]]
     ["[0]" stack]]]
   [macro
    ["[0]" template]
    ["[0]" expansion]]
   ["[0]" type (.only)
    ["[0]" check]]
   [meta
    [extension (.only analysis)]
    ["[0]" provenance]
    ["[0]" code
     ["<[1]>" \\projection]]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" phase (.use "[1]#[0]" monad)]
      ["[0]" analysis (.only Operation Phase)
       ["[0]A" type]]]]
    [meta
     [archive (.only Archive)]]]
   [aspect
    ["[0]" view]]]]
 [/
  ["[0]" random]
  [number
   [/64
    ["[0]" natural]
    ["[0]" integer]
    ["[0]" revolution]
    ["[0]" decimal]
    ["[0]" fraction]
    ["[0]" rational]
    ["[0]" complex]]]])

(exception.the (no_arithmetic_for type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(the (composite phase archive <+> last prevs)
  (-> Phase Archive Code analysis.Term (List analysis.Term)
      (Operation analysis.Term))
  (when <+>
    {.#Name _ [.prelude $]}
    (phase#pure (list#mix (function (_ left right)
                            {@type.#Extension provenance.dummy [.prelude $] (list left right)})
                          last
                          prevs))
    
    _
    (monad.let phase.monad
      [[_ $] (typeA.inferring
              (phase archive <+>))]
      (pure (list#mix (function (_ left right)
                        (analysis.reified [$ (list left right)]))
                      last
                      prevs)))))

(template.with [<name> <scenarios>']
  [(the .public <name>
     .Analysis
     (analysis (_ phase archive [left ?list.any
                                 right ?list.any])
       (<| typeA.with_var
           (function (_ [$it :it:]))
           (monad.let [! phase.monad]
             [left (typeA.with :it: (phase archive left))
              right (typeA.with :it: (phase archive right))
              _ (typeA.inference .Bit)
              :it: (typeA.check (check.identity (list) $it))]
             (`` (if (check.< .I64 :it:)
                     (phase.except ..no_arithmetic_for [:it:])

                     (,, (template.with [<type> <+>]
                           [(check.< <type> :it:)
                            (..composite phase archive (` <+>) right (list left))]

                           <scenarios>'))

                     ... else
                     (phase.except ..no_arithmetic_for [:it:])))))))]

  [[= [[.Natural .synthesis_of_i64_=#]
       [.Integer .synthesis_of_i64_=#]
       [.Revolution .synthesis_of_i64_=#]
       [.Decimal .synthesis_of_f64_=#]
       [fraction.Number fraction.=]
       [rational.Number rational.=]
       [complex.Number complex.=]]]
   [< [[.Natural natural.<]
       [.Integer .synthesis_of_int_<#]
       [.Revolution revolution.<]
       [.Decimal .synthesis_of_f64_<#]
       [fraction.Number fraction.<]
       [rational.Number rational.<]]]
   [> [[.Natural natural.>]
       [.Integer integer.>]
       [.Revolution revolution.>]
       [.Decimal decimal.>]
       [fraction.Number fraction.>]
       [rational.Number rational.>]]]
   [<= [[.Natural natural.<=]
        [.Integer integer.<=]
        [.Revolution revolution.<=]
        [.Decimal decimal.<=]
        [fraction.Number fraction.<=]
        [rational.Number rational.<=]]]
   [>= [[.Natural natural.>=]
        [.Integer integer.>=]
        [.Revolution revolution.>=]
        [.Decimal decimal.>=]
        [fraction.Number fraction.>=]
        [rational.Number rational.>=]]]])

(template.with [<name> <scenarios>']
  [(the .public <name>
     .Analysis
     (analysis (_ phase archive [operands (<>.some ?list.any)])
       (<| typeA.with_var
           (function (_ [$it :it:]))
           (monad.let [! phase.monad]
             [operands (list.each' ! (|>> (phase archive) (typeA.with :it:))
                                   operands)
              _ (typeA.inference :it:)
              :it: (typeA.check (check.identity (list) $it))]
             (when (view.as list.stack (list.in_reverse operands))
               (stack single)
               (pure single)

               (stack)
               (`` (if (check.< .I64 :it:)
                       (phase.except ..no_arithmetic_for [:it:])
                       
                       (,, (template.with [<type> <0> <+>]
                             [(check.< <type> :it:)
                              <0>]

                             <scenarios>'))

                       ... else
                       (phase.except ..no_arithmetic_for [:it:])))
               
               (stack.partial last prevs)
               (`` (if (check.< .I64 :it:)
                       (phase.except ..no_arithmetic_for [:it:])

                       (,, (template.with [<type> <0> <+>]
                             [(check.< <type> :it:)
                              (..composite phase archive (` <+>) last (view.of list.stack prevs))]

                             <scenarios>'))

                       ... else
                       (phase.except ..no_arithmetic_for [:it:]))))))))]

  [[+ [[.Natural (pure (analysis.natural provenance.dummy 0)) .synthesis_of_i64_+#]
       [.Integer (pure (analysis.integer provenance.dummy +0)) .synthesis_of_i64_+#]
       [.Revolution (pure (analysis.revolution provenance.dummy .0)) .synthesis_of_i64_+#]
       [.Decimal (pure (analysis.decimal provenance.dummy +0.0)) .synthesis_of_f64_+#]
       [fraction.Number (typeA.with fraction.Number (phase archive (` fraction.zero))) fraction.+]
       [rational.Number (typeA.with rational.Number (phase archive (` rational.zero))) rational.+]
       [complex.Number (typeA.with complex.Number (phase archive (` complex.zero))) complex.+]]]
   [- [[.Natural (pure (analysis.natural provenance.dummy 0)) .synthesis_of_i64_-#]
       [.Integer (pure (analysis.integer provenance.dummy -0)) .synthesis_of_i64_-#]
       [.Revolution (pure (analysis.revolution provenance.dummy .0)) .synthesis_of_i64_-#]
       [.Decimal (pure (analysis.decimal provenance.dummy -0.0)) .synthesis_of_f64_-#]
       [fraction.Number (typeA.with fraction.Number (phase archive (` fraction.zero))) fraction.-]
       [rational.Number (typeA.with rational.Number (phase archive (` rational.zero))) rational.-]
       [complex.Number (typeA.with complex.Number (phase archive (` complex.zero))) complex.-]]]
   [x [[.Natural (pure (analysis.natural provenance.dummy 1)) natural.x]
       [.Integer (pure (analysis.integer provenance.dummy +1)) .synthesis_of_int_x#]
       [.Revolution (pure (analysis.revolution provenance.dummy revolution./1)) revolution.x]
       [.Decimal (pure (analysis.decimal provenance.dummy +1.0)) .synthesis_of_f64_x#]
       [fraction.Number (typeA.with fraction.Number (phase archive (` fraction.one))) fraction.x]
       [rational.Number (typeA.with rational.Number (phase archive (` rational.one))) rational.x]
       [complex.Number (typeA.with complex.Number (phase archive (` complex.one))) complex.x]]]
   [/ [[.Natural (pure (analysis.natural provenance.dummy 1)) natural./]
       [.Integer (pure (analysis.integer provenance.dummy +1)) .synthesis_of_int_/#]
       [.Revolution (pure (analysis.revolution provenance.dummy revolution./1)) revolution./]
       [.Decimal (pure (analysis.decimal provenance.dummy +1.0)) .synthesis_of_f64_/#]
       [fraction.Number (typeA.with fraction.Number (phase archive (` fraction.one))) fraction./]
       [rational.Number (typeA.with rational.Number (phase archive (` rational.one))) rational./]
       [complex.Number (typeA.with complex.Number (phase archive (` complex.one))) complex./]]]])

(template.with [<name> <scenarios>']
  [(the .public <name>
     .Analysis
     (analysis (_ phase archive [left ?list.any
                                 right ?list.any])
       (<| typeA.with_var
           (function (_ [$it :it:]))
           (monad.let [! phase.monad]
             [left (typeA.with :it: (phase archive left))
              right (typeA.with :it: (phase archive right))
              _ (typeA.inference :it:)
              :it: (typeA.check (check.identity (list) $it))]
             (`` (if (check.< .I64 :it:)
                     (phase.except ..no_arithmetic_for [:it:])

                     (,, (template.with [<type> <+>]
                           [(check.< <type> :it:)
                            (..composite phase archive (` <+>) right (list left))]

                           <scenarios>'))

                     ... else
                     (phase.except ..no_arithmetic_for [:it:])))))))]

  [[% [[.Natural natural.%]
       [.Integer .synthesis_of_int_%#]
       [.Revolution revolution.%]
       [.Decimal .synthesis_of_f64_%#]
       [fraction.Number fraction.%]
       [rational.Number rational.%]
       [complex.Number complex.%]]]])
