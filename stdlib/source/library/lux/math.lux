... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [meta
    [extension (.only analysis)]
    ["[0]" location]
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro
     ["[0]" template]
     ["[0]" expansion]]
    ["[0]" type (.only)
     ["[0]" check]]
    [compiler
     [language
      [lux
       ["[0]" phase (.use "[1]#[0]" monad)]
       ["[0]" analysis (.only Operation Phase)
        ["[0]A" type]]]]
     [meta
      [archive (.only Archive)]]]]]]
 [/
  ["[0]" random]
  [number
   ["[0]" natural]
   ["[0]" integer]
   ["[0]" revolution]
   ["[0]" decimal]
   ["[0]" fraction (.only Fraction)]
   ["[0]" complex (.only Complex)]]])

(exception.the (no_arithmetic_for type)
  (Exception Type)
  (exception.report
   (list ["Type" (type.as_text type)])))

(the (composite phase archive <+> last prevs)
  (-> Phase Archive Code analysis.Term (List analysis.Term)
      (Operation analysis.Term))
  (when <+>
    [_ {.#Symbol [.prelude $]}]
    (phase#in (list#mix (function (_ left right)
                          [location.dummy {analysis.#Extension [.prelude $] (list left right)}])
                        last
                        prevs))
    
    _
    (do phase.monad
      [[_ $] (typeA.inferring
              (phase archive <+>))]
      (in (list#mix (function (_ left right)
                      (analysis.reified [$ (list left right)]))
                    last
                    prevs)))))

(expansion.let [<fraction/0> [fraction.#numerator 0 fraction.#denominator 1]
                <fraction/1> [fraction.#numerator 1 fraction.#denominator 1]
                <complex/0> [complex.#real +0.0 complex.#imaginary +0.0]
                <complex/1> [complex.#real +1.0 complex.#imaginary +0.0]]
  (these (template.with [<name> <scenarios>']
           [(expansion.let [<scenarios> (template.spliced <scenarios>')]
              (these (the .public <name>
                       .Analysis
                       (analysis (_ phase archive [operands (<>.some <code>.any)])
                         (<| typeA.with_var
                             (function (_ [$it :it:]))
                             (do [! phase.monad]
                               [operands (monad.each ! (|>> (phase archive) (typeA.expecting :it:))
                                                     operands)
                                _ (typeA.inference :it:)
                                :it: (typeA.check (check.identity (list) $it))]
                               (when (list.reversed operands)
                                 (list single)
                                 (in single)

                                 (list)
                                 (`` (if (check.subsumed? .I64 :it:)
                                       (phase.except ..no_arithmetic_for [:it:])
                                       
                                       (,, (template.with [<type> <0> <+>]
                                             [(check.subsumed? <type> :it:)
                                              <0>]

                                             <scenarios>))

                                       ... else
                                       (phase.except ..no_arithmetic_for [:it:])))
                                 
                                 (list.partial last prevs)
                                 (`` (if (check.subsumed? .I64 :it:)
                                       (phase.except ..no_arithmetic_for [:it:])

                                       (,, (template.with [<type> <0> <+>]
                                             [(check.subsumed? <type> :it:)
                                              (..composite phase archive (` <+>) last prevs)]

                                             <scenarios>))

                                       ... else
                                       (phase.except ..no_arithmetic_for [:it:]))))))))))]

           [+ [[.Natural (in (analysis.natural location.dummy 0)) .i64_+#|translation]
               [.Integer (in (analysis.integer location.dummy +0)) .i64_+#|translation]
               [.Revolution (in (analysis.revolution location.dummy .0)) .i64_+#|translation]
               [.Decimal (in (analysis.decimal location.dummy +0.0)) .f64_+#|translation]
               [Fraction (typeA.expecting Fraction (phase archive (` <fraction/0>))) fraction.+]
               [Complex (typeA.expecting Complex (phase archive (` <complex/0>))) complex.+]]]
           [- [[.Natural (in (analysis.natural location.dummy 0)) .i64_-#|translation]
               [.Integer (in (analysis.integer location.dummy -0)) .i64_-#|translation]
               [.Revolution (in (analysis.revolution location.dummy .0)) .i64_-#|translation]
               [.Decimal (in (analysis.decimal location.dummy -0.0)) .f64_-#|translation]
               [Fraction (typeA.expecting Fraction (phase archive (` <fraction/0>))) fraction.-]
               [Complex (typeA.expecting Complex (phase archive (` <complex/0>))) complex.-]]]
           [* [[.Natural (in (analysis.natural location.dummy 1)) natural.*]
               [.Integer (in (analysis.integer location.dummy +1)) .int_*#|translation]
               [.Revolution (in (analysis.revolution location.dummy revolution./1)) revolution.*]
               [.Decimal (in (analysis.decimal location.dummy +1.0)) .f64_*#|translation]
               [Fraction (typeA.expecting Fraction (phase archive (` <fraction/1>))) fraction.*]
               [Complex (typeA.expecting Complex (phase archive (` <complex/1>))) complex.*]]]
           [/ [[.Natural (in (analysis.natural location.dummy 1)) natural./]
               [.Integer (in (analysis.integer location.dummy +1)) .int_/#|translation]
               [.Revolution (in (analysis.revolution location.dummy revolution./1)) revolution./]
               [.Decimal (in (analysis.decimal location.dummy +1.0)) .f64_/#|translation]
               [Fraction (typeA.expecting Fraction (phase archive (` <fraction/1>))) fraction./]
               [Complex (typeA.expecting Complex (phase archive (` <complex/1>))) complex./]]]
           )
         (template.with [<name> <scenarios>']
           [(expansion.let [<scenarios> (template.spliced <scenarios>')]
              (these (the .public <name>
                       .Analysis
                       (analysis (_ phase archive [left <code>.any
                                                   right <code>.any])
                         (<| typeA.with_var
                             (function (_ [$it :it:]))
                             (do [! phase.monad]
                               [left (typeA.expecting :it: (phase archive left))
                                right (typeA.expecting :it: (phase archive right))
                                _ (typeA.inference .Bit)
                                :it: (typeA.check (check.identity (list) $it))]
                               (`` (if (check.subsumed? .I64 :it:)
                                     (phase.except ..no_arithmetic_for [:it:])

                                     (,, (template.with [<type> <+>]
                                           [(check.subsumed? <type> :it:)
                                            (..composite phase archive (` <+>) right (list left))]

                                           <scenarios>))

                                     ... else
                                     (phase.except ..no_arithmetic_for [:it:])))))))))]

           [= [[.Natural .i64_=#|translation]
               [.Integer .i64_=#|translation]
               [.Revolution .i64_=#|translation]
               [.Decimal .f64_=#|translation]
               [Fraction fraction.=]
               [Complex complex.=]]]
           [< [[.Natural natural.<]
               [.Integer .int_<#|translation]
               [.Revolution revolution.<]
               [.Decimal .f64_<#|translation]
               [Fraction fraction.<]]]
           [> [[.Natural natural.>]
               [.Integer integer.>]
               [.Revolution revolution.>]
               [.Decimal decimal.>]
               [Fraction fraction.>]]]
           [<= [[.Natural natural.<=]
                [.Integer integer.<=]
                [.Revolution revolution.<=]
                [.Decimal decimal.<=]
                [Fraction fraction.<=]]]
           [>= [[.Natural natural.>=]
                [.Integer integer.>=]
                [.Revolution revolution.>=]
                [.Decimal decimal.>=]
                [Fraction fraction.>=]]]
           )
         (template.with [<name> <scenarios>']
           [(expansion.let [<scenarios> (template.spliced <scenarios>')]
              (these (the .public <name>
                       .Analysis
                       (analysis (_ phase archive [left <code>.any
                                                   right <code>.any])
                         (<| typeA.with_var
                             (function (_ [$it :it:]))
                             (do [! phase.monad]
                               [left (typeA.expecting :it: (phase archive left))
                                right (typeA.expecting :it: (phase archive right))
                                _ (typeA.inference :it:)
                                :it: (typeA.check (check.identity (list) $it))]
                               (`` (if (check.subsumed? .I64 :it:)
                                     (phase.except ..no_arithmetic_for [:it:])

                                     (,, (template.with [<type> <+>]
                                           [(check.subsumed? <type> :it:)
                                            (..composite phase archive (` <+>) right (list left))]

                                           <scenarios>))

                                     ... else
                                     (phase.except ..no_arithmetic_for [:it:])))))))))]

           [% [[.Natural natural.%]
               [.Integer .int_%#|translation]
               [.Revolution revolution.%]
               [.Decimal .f64_%#|translation]
               [Fraction fraction.%]
               [Complex complex.%]]]
           )
         ))
