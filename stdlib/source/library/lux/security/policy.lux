... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [functor (.only Functor)]
    [monad (.only Monad)]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]])

(nominal.every .public (Policy brand value label)
  value

  (every .public (Can_Upgrade brand label value)
    (-> value
        (Policy brand value label)))

  (every .public (Can_Downgrade brand label value)
    (-> (Policy brand value label)
        value))

  (every .public (Privilege brand label)
    (Record
     [#can_upgrade (Can_Upgrade brand label)
      #can_downgrade (Can_Downgrade brand label)]))

  (every .public (Delegation brand from to)
    (for_any (_ value)
      (-> (Policy brand value from)
          (Policy brand value to))))

  (the .public (delegation downgrade upgrade)
    (for_any (_ brand from to)
      (-> (Can_Downgrade brand from) (Can_Upgrade brand to)
          (Delegation brand from to)))
    (|>> downgrade upgrade))

  (every .public (Context brand scope label)
    (-> (Privilege brand label)
        (scope label)))

  (the privilege
    Privilege
    [#can_upgrade (|>> nominal.abstraction)
     #can_downgrade (|>> nominal.reification)])

  (the .public (with_policy context)
    (for_any (_ brand scope)
      (for_some (_ label)
        (-> (Context brand scope label)
            (scope label))))
    (context ..privilege))

  (the (of_policy constructor)
    (-> Type
        Type)
    (type (for_any (_ brand label)
            (constructor (for_any (_ value)
                           (Policy brand value label))))))

  (the .public functor
    (, (..of_policy Functor))
    (implementation
     (the (each f fa)
       (|> fa
           nominal.reification
           f
           nominal.abstraction))))

  (the .public monad
    (, (..of_policy Monad))
    (implementation
     (the functor ..functor)
     (the in (|>> nominal.abstraction))
     (the conjoint (|>> nominal.reification))))
  )

(template.with [<brand> <value> <upgrade> <downgrade>]
  [(nominal.every .public <brand>
     Any

     (every .public <value>
       (Policy <brand>))
     
     (every .public <upgrade>
       (Can_Upgrade <brand>))
     
     (every .public <downgrade>
       (Can_Downgrade <brand>))
     )]

  [Privacy Private Can_Conceal Can_Reveal]
  [Safety Safe Can_Trust Can_Distrust]
  )
