... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]]]]
   [meta
    ["[0]" name]
    ["[0]" code]]
   [macro
    ["[0]" expansion]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" analysis]]]]
   [function
    [predicate (.only Predicate)]]
   [logic
    ["[0]" bit]]]]
 ["[0]" // (.only)
  [//
   ["?" proposition]
   ["in" substitution]]])

(the (potentially_identical? it)
  (Predicate ?.Identity)
  (when it
    [{@type.:Simple @ {@type.:Simple_Bit slow}}
     {@type.:Simple @ {@type.:Simple_Bit false}}]
    (bit.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Natural slow}}
     {@type.:Simple @ {@type.:Simple_Natural false}}]
    (natural.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Integer slow}}
     {@type.:Simple @ {@type.:Simple_Integer false}}]
    (integer.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Revolution slow}}
     {@type.:Simple @ {@type.:Simple_Revolution false}}]
    (revolution.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Text slow}}
     {@type.:Simple @ {@type.:Simple_Text false}}]
    (text.= slow false)
    
    else
    true))

(the (contradiction? it)
  (Predicate ?.Proposition)
  (when it
    {?.:Identity it}
    (not (..potentially_identical? it))
    
    else
    false))

(exception.the .public (not_valid [where it])
  (Exception [Name ?.Proposition])
  (exception.report
   (list ["Where" (name.as_text where)]
         ["Proposition" (code.as_text (?.as_code it))])))

(the .public (then else
                   context it)
  (-> //.Proof
      (in.Fact ?.Proposition [?.Proposition ?.Proposition]))
  (monad.let [! try.monad]
    [[slow fast] (?.identity it)]
    (expansion.let [if_reality {@type.:Simple @ {@type.:Simple_Bit reality}}
                    if_then {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_then}}
                    if_else {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_else}}]
      (when slow
        {@type.:When @ reality [[@type.:when if_then
                                 @type.:then body_for_then]
                                (list [@type.:when if_else
                                       @type.:then body_for_else])]}
        (monad.let !
          [else (else context {?.:Identity [?.:slow body_for_else
                                            ?.:fast fast]})]
          (if (contradiction? else)
              (pure [{?.:Identity [?.:slow reality
                                   ?.:fast (analysis.bit @ expectation_for_then)]}
                     {?.:Identity [?.:slow body_for_then
                                   ?.:fast fast]}])
              (exception.except ..not_valid [(name ..then) else])))

        else
        (exception.except ..not_valid [(name ..then) it])))))
