... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except if by)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [meta
    ["[0]" provenance]
    ["[0]" code]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" analysis]]]]]]
 ["!" // (.only)
  [//
   ["?" proposition]]])

(exception.the .public (not_valid [it])
  (Exception [?.Proposition])
  (exception.report
   (list ["Proposition" (code.as_text (?.as_code it))])))

(every .public Case
  (-> ?.Proposition ?.Proposition
      !.Proof))

(the .public (if identity then else
                 context proposition)
  (-> ?.Proposition Case Case
      !.Proof)
  (monad.let [! try.monad]
    [[slow fast] (?.identity identity)]
    (when slow
      {@type.:When @ reality [[@type.:when {@type.:Simple_Pattern {@type.:Simple_Bit if_then}}
                               @type.:then body_for_then]
                              (list [@type.:when {@type.:Simple_Pattern {@type.:Simple_Bit if_else}}
                                     @type.:then body_for_else])]}
      (let [[body_for_then body_for_else] (.if if_then
                                               [body_for_then body_for_else]
                                               [body_for_else body_for_then])]
        (monad.let !
          [then (then {?.:Identity [?.:slow reality ?.:fast (analysis.bit provenance.dummy true)]}
                      {?.:Identity [?.:slow body_for_then ?.:fast fast]}
                      context
                      proposition)]
          (else {?.:Identity [?.:slow reality ?.:fast (analysis.bit provenance.dummy false)]}
                {?.:Identity [?.:slow body_for_else ?.:fast fast]}
                context
                proposition)))

      else
      (exception.except ..not_valid [identity]))))

(the .public (by term
                 environment it)
  (-> analysis.Term
      !.Proof)
  (monad.let try.monad
    [[slow fast] (?.identity it)]
    (pure {?.:Identity [?.:slow (analysis.reified [term (list slow)])
                        ?.:fast (analysis.reified [term (list fast)])]})))
