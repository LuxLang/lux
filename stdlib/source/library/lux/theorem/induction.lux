... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

... https://en.wikipedia.org/wiki/Mathematical_induction
(.using
 [library
  [lux (.except function)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [meta
    ["[0]" provenance]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" analysis]]]]
   [math
    [number
     [/64
      ["[0]" natural]]]]]]
 ["[0]" // (.only)
  ["?" proposition]
  ["in" rule]])

(the (valid? [left right])
  (-> [analysis.Term analysis.Term]
      Bit)
  (with analysis.equivalence
    (= left right)))

(every .public Case
  (-> ?.Identity
      //.Proof))

(the .public (bit if_false if_true
                  [lux next_induction] it)
  (-> Case Case
      //.Proof)
  (monad.let try.monad
    [.let [variable (in.induction_variable provenance.dummy next_induction)
           environment [lux (++ next_induction)]]
     false! (if_false [variable
                       (analysis.bit provenance.dummy false)]
                      environment
                      it)
     true! (if_true [variable
                     (analysis.bit provenance.dummy true)]
                    environment
                    it)]
    (pure (if (valid? false!)
              true!
              false!))))

(the .public (case if_left if_right
                   [lux next_induction] it)
  (-> Case Case
      //.Proof)
  (monad.let try.monad
    [.let [content (?.term provenance.dummy next_induction)
           variable (in.induction_variable provenance.dummy next_induction)
           environment [lux (++ next_induction)]]
     left! (if_left [variable
                     (analysis.variant provenance.dummy [0 .false content])]
                    environment
                    it)
     right! (if_right [variable
                       (analysis.variant provenance.dummy [0 .true content])]
                      environment
                      it)]
    (pure (if (valid? left!)
              right!
              left!))))

(the .public (function by_application
               [lux next_induction] [expectation actuality])
  (Change //.Proof)
  (monad.let try.monad
    [.let [argument (?.term provenance.dummy next_induction)]]
    (by_application [lux (++ next_induction)]
                    [{@type.:Application provenance.dummy argument expectation}
                     {@type.:Application provenance.dummy argument actuality}])))

(the .public (pair if_pair
                   [lux next_induction] it)
  (-> Case
      //.Proof)
  (monad.let try.monad
    [.let [left (?.term provenance.dummy next_induction)
           right (?.term provenance.dummy (natural.opposite (++ next_induction)))
           variable (in.induction_variable provenance.dummy next_induction)]]
    (if_pair [variable
              (analysis.tuple provenance.dummy (list left right))]
             [lux (++ next_induction)]
             it)))
