... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except by and pattern local function)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" function]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" meta (.only)
    ["[0]" name]
    ["[0]" provenance]
    ["[0]" binding]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   [compiler
    ["@[0]" type]
    ["[0]" reference (.only)
     ["[0]" variable]]
    [language
     [lux
      ["[0]" analysis (.only)
       ["[0]" simple]
       ["[0]" pattern]]]]]]]
 [//
  ["?" proposition]])

... https://en.wikipedia.org/wiki/Substitution_(logic)#Algebra
... https://en.wikipedia.org/wiki/Universal_property
(every .public (Substitution it)
  (-> [Lux Natural]
      (-> it
          (Try it))))

... https://en.wikipedia.org/wiki/Rule_of_inference
... https://en.wikipedia.org/wiki/Rule_of_replacement
... https://en.wikipedia.org/wiki/Rewriting#Term_rewriting_systems
(every .public Rule
  (Substitution analysis.Term))

(every Context
  (Dictionary @type.Register analysis.Term))

(the empty
  Context
  (dictionary.empty natural.hash))

(exception.the .public (cannot_extract_context [expected actual])
  (Exception [analysis.Term analysis.Term])
  (exception.report
   (list ["Expected" (analysis.as_text expected)]
         ["Actual" (analysis.as_text actual)])))

(the (with_closure closure)
  (-> (List analysis.Term) analysis.Term
      (Try analysis.Term))
  (.function (of it)
    (when it
      {@type.:Simple @ _}
      {try.:Success it}
      
      {@type.:Complex @ it}
      (when it
        {@type.:Complex_Variant it}
        (try:each (.function (_ value)
                    (|> it
                        (has @type.:value value)
                        {@type.:Complex_Variant}
                        {@type.:Complex @}))
                  (of (its @type.:value it)))
        
        {@type.:Complex_Tuple it}
        (try:each (|>> {@type.:Complex_Tuple}
                       {@type.:Complex @})
                  (list.each' try.monad of it)))
      
      {@type.:Reference @ it'}
      (when it'
        {@type.:Variable_Reference it'}
        (when it'
          {@type.:Local _}
          {try.:Success it}
          
          {@type.:Foreign foreign}
          (list.item foreign closure))
        
        {@type.:Constant_Reference _}
        {try.:Success it})
      
      {@type.:When @ input [head tail]}
      (monad.let [! try.monad]
        [input (of input)
         .let [of_then (is (-> analysis.Branch
                               (Try analysis.Branch))
                           (.function (_ it)
                             (monad.let !
                               [then (of (its @type.:then it))]
                               (pure (has @type.:then then it)))))]
         head (of_then head)
         tail (list.each' try.monad of_then tail)]
        (pure {@type.:When @ input [head tail]}))
      
      {@type.:Abstraction @ environment body}
      (monad.let try.monad
        [environment (list.each' try.monad of environment)
         body (of body)]
        (pure {@type.:Abstraction @ environment body}))
      
      {@type.:Application @ parameter abstraction}
      (monad.let try.monad
        [parameter (of parameter)
         abstraction (of abstraction)]
        (pure {@type.:Application @ parameter abstraction}))
      
      {@type.:Extension @ name parameters}
      (monad.let try.monad
        [parameters (list.each' try.monad of parameters)]
        (pure {@type.:Extension @ name parameters})))))

(the current_module
  (name.module (name .._)))

(`` (template.the .public (induction_variable ,@ ,identity)
      [{@type.:Extension ,@ [(,, (static ..current_module)) "induction_variable"]
                         (list (analysis.natural ,@ ,identity))}]))

(exception.the .public (contradiction [expected actual])
  (Exception [analysis.Term analysis.Term])
  (exception.report
   (list ["Expected" (analysis.as_text expected)]
         ["Actual" (analysis.as_text actual)])))

(the (context expected actual it)
  (-> analysis.Term analysis.Term Context
      (Try Context))
  (when [expected actual]
    [(..induction_variable _ expected') (?.variable _ actual')]
    (if (natural.= expected' actual')
        {try.:Success it}
        (exception.except ..contradiction [expected actual]))
    
    [(?.variable _ @) _]
    (when (dictionary.value @ it)
      {try.:Success expected}
      (if (.with analysis.equivalence
            (= expected actual))
          {try.:Success it}
          (exception.except ..contradiction [expected actual]))

      not_known!
      {try.:Success (dictionary.has @ actual it)})
    
    [{@type.:Simple _ expected'} {@type.:Simple _ actual'}]
    (if (.with simple.equivalence
          (= expected' actual'))
        {try.:Success it}
        (exception.except ..cannot_extract_context [expected actual]))
    
    [{@type.:Complex _ {@type.:Complex_Variant [expected_lefts expected_right? expected_choice]}}
     {@type.:Complex _ {@type.:Complex_Variant [actual_lefts actual_right? actual_choice]}}]
    (if (.and (natural.= expected_lefts actual_lefts)
              (bit.= expected_right? actual_right?))
        (context expected_choice actual_choice it)
        (exception.except ..cannot_extract_context [expected actual]))

    [{@type.:Complex _ {@type.:Complex_Tuple expected'}}
     {@type.:Complex _ {@type.:Complex_Tuple actual'}}]
    (if (natural.= (list.size expected') (list.size actual'))
        (list.mix' try.monad (function.uncurried context) it (list.zipped_2 expected' actual'))
        (exception.except ..cannot_extract_context [expected actual]))
    
    [{@type.:Reference _ expected'} {@type.:Reference _ actual'}]
    (if (.with reference.equivalence
          (= expected' actual'))
        {try.:Success it}
        (exception.except ..cannot_extract_context [expected actual]))
    
    [{@type.:When _ expected_input
                  [[expected_output_head_pattern expected_output_head]
                   expected_output_tail]}
     {@type.:When _ actual_input
                  [[actual_output_head_pattern actual_output_head]
                   actual_output_tail]}]
    (if (.and (natural.= (list.size expected_output_tail)
                         (list.size actual_output_tail))
              (pattern.= expected_output_head_pattern
                         actual_output_head_pattern))
        (monad.let [! try.monad]
          [it (context expected_input actual_input it)
           it (context expected_output_head actual_output_head it)]
          (list.mix' !
                     (.function (_ [[expected_output_tail_pattern expected_output_tail]
                                    [actual_output_tail_pattern actual_output_tail]]
                                   it)
                       (if (pattern.= expected_output_tail_pattern
                                      actual_output_tail_pattern)
                           (context expected_output_tail actual_output_tail it)
                           (exception.except ..cannot_extract_context [expected actual])))
                     it
                     (list.zipped_2 expected_output_tail actual_output_tail)))
        (exception.except ..cannot_extract_context [expected actual]))
    
    [{@type.:Abstraction _ expected_environment expected_body}
     {@type.:Abstraction _ actual_environment actual_body}]
    (monad.let try.monad
      [expected_body (with_closure expected_environment expected_body)
       actual_body (with_closure actual_environment actual_body)]
      (context expected_body actual_body it))
    
    [{@type.:Application _ expected_parameter expected_abstraction}
     {@type.:Application _ actual_parameter actual_abstraction}]
    (monad.let try.monad
      [it (context expected_abstraction actual_abstraction it)]
      (context expected_parameter actual_parameter it))
    
    ... {@type.:Extension _ name parameters}
    ... (` {@type.:Extension _ (, (code_of_name name))
    ...                         (list (,* (list:each code_of_analysis parameters)))})

    else
    (exception.except ..cannot_extract_context [expected actual])))

(exception.the .public (no_substitution [term])
  (Exception [analysis.Term])
  (exception.report
   (list ["Term" (analysis.as_text term)])))

(the (substitution context)
  (-> Context analysis.Term
      (Try analysis.Term))
  (.function (substitution it)
    (when it
      (?.variable _ @)
      (try.or (dictionary.value @ context)
              {try.:Success it})

      (^.or {@type.:Simple @ _}
            {@type.:Reference @ _}
            (?.term _ @))
      {try.:Success it}

      {@type.:Complex @ it}
      (when it
        {@type.:Complex_Variant [lefts right? it]}
        (monad.let try.monad
          [it (substitution it)]
          (pure {@type.:Complex @ {@type.:Complex_Variant [lefts right? it]}}))
        
        {@type.:Complex_Tuple it}
        (monad.let [! try.monad]
          [it (list.each' ! substitution it)]
          (pure {@type.:Complex @ {@type.:Complex_Tuple it}})))
      
      {@type.:Application @ parameter abstraction}
      (monad.let try.monad
        [parameter (substitution parameter)
         abstraction (substitution abstraction)]
        (pure {@type.:Application @ parameter abstraction}))

      {@type.:Abstraction @ environment body}
      (monad.let try.monad
        [body (substitution body)]
        (pure {@type.:Abstraction @ environment body}))

      {@type.:When _ input
                   [[output_head_pattern output_head]
                    output_tail]}
      (monad.let [! try.monad]
        [input (substitution input)
         output_head (substitution output_head)
         output_tail (list.each' ! (.function (_ [pattern body])
                                     (monad.let !
                                       [body (substitution body)]
                                       (pure [pattern body])))
                                 output_tail)]
        (pure {@type.:When _ input
                           [[output_head_pattern output_head]
                            output_tail]}))

      else
      (exception.except ..no_substitution [it]))))

(the .public (by identity
                 environment it)
  (-> ?.Identity
      Rule)
  (monad.let try.monad
    [context (..context (product.left identity) it ..empty)]
    (substitution context (product.right identity))))

(the .public (as_is environment it)
  Rule
  {try.:Success it})

(exception.the .public (not_valid [where term])
  (Exception [Name analysis.Term])
  (exception.report
   (list ["Where" (name.as_text where)]
         ["Term" (analysis.as_text term)])))

(template.with [,right? ,name]
  [(the .public (,name by_choice environment it)
     (Change Rule)
     (when it
       {@type.:Complex @ {@type.:Complex_Variant [0 ,right? it]}}
       (monad.let try.monad
         [it (by_choice environment it)]
         (pure {@type.:Complex @ {@type.:Complex_Variant [0 ,right? it]}}))

       else
       (exception.except ..not_valid [(name ,name) else])))]

  [[0b left_case]
   [1b right_case]])

(every .public Environment
  (Dictionary @type.Variable analysis.Term))

(the (beta_reduction local)
  (-> Environment
      (Change analysis.Term))
  (.function (beta_reduction it)
    (when it
      {@type.:Simple @ _}
      it
      
      {@type.:Complex @ it}
      {@type.:Complex @ (when it
                          {@type.:Complex_Variant it}
                          {@type.:Complex_Variant (revised @type.:value beta_reduction it)}
                          
                          {@type.:Complex_Tuple it}
                          {@type.:Complex_Tuple (list:each beta_reduction it)})}
      
      {@type.:Reference @ it'}
      (when it'
        {@type.:Variable_Reference it'}
        (|> local
            (dictionary.value it')
            (try.else it))
        
        {@type.:Constant_Reference _}
        it)
      
      {@type.:When @ input [head tail]}
      {@type.:When @ (beta_reduction input)
                   [(revised @type.:then beta_reduction head)
                    (list:each (revised @type.:then beta_reduction) tail)]}
      
      {@type.:Abstraction @ environment body}
      {@type.:Abstraction @ (list:each beta_reduction environment)
                          body}
      
      {@type.:Application @ parameter abstraction}
      {@type.:Application @ (beta_reduction parameter)
                          (beta_reduction abstraction)}
      
      {@type.:Extension @ name parameters}
      {@type.:Extension @ name (list:each beta_reduction parameters)})))

(exception.the .public (no_application [term])
  (Exception [analysis.Term])
  (exception.report
   (list ["Term" (analysis.as_text term)])))

(the .public (by_reification [lux next_induction] it)
  Rule
  (when it
    {@type.:Application @ parameter {@type.:Abstraction @ environment body}}
    (.let [local (|> environment
                     list.enumeration
                     (list:each (.function (_ [foreign term])
                                  [{@type.:Foreign foreign}
                                   term]))
                     (dictionary.of_list variable.hash)
                     (dictionary.has {@type.:Local 0} {@type.:Abstraction @ environment body})
                     (dictionary.has {@type.:Local 1} parameter))]
      {try.:Success (beta_reduction local body)})

    else
    (exception.except ..no_application [it])))

(the .public (by_application abstraction parameter
                             environment it)
  (-> Rule Rule
      Rule)
  (when it
    {@type.:Application @ parameter' abstraction'}
    (monad.let try.monad
      [parameter' (parameter environment parameter')
       abstraction' (abstraction environment abstraction')]
      (pure {@type.:Application @ parameter' abstraction'}))

    else
    (exception.except ..no_application [it])))

(the .public (of' by_abstraction every_parameter)
  (-> Rule (List Rule)
      Rule)
  (list.mix (.function (_ by_parameter by_abstraction)
              (by_application by_abstraction by_parameter))
            by_abstraction
            every_parameter))

(the .public (and before after
                  environment it)
  (for_any (_ it)
    (-> (Substitution it)
        (Change (Substitution it))))
  (monad.let try.monad
    [it (before environment it)]
    (after environment it)))

(the .public (of by_abstraction every_parameter)
  (-> Rule (List Rule)
      Rule)
  (list.mix (.function (_ by_parameter by_abstraction)
              (and (by_application by_abstraction by_parameter)
                   by_reification))
            by_abstraction
            every_parameter))

(the (global_definition name lux)
  (-> Name Lux
      (Try analysis.Term))
  (<| (meta.value lux)
      (monad.let meta.monad
        [[type expression value] (binding.export name)]
        (when expression
          {.:Some [original after_optimization]}
          (pure original)

          {.:None}
          (meta.failure "")))))

(the .public (by_definition [lux next_induction] it)
  Rule
  (when it
    {@type.:Reference _ {@type.:Constant_Reference @}}
    (all try.or
         (global_definition @ lux)
         (exception.except ..not_valid [(name ..by_definition) it]))

    else
    (exception.except ..not_valid [(name ..by_definition) it])))

(the (pattern it)
  (-> @type.Pattern
      analysis.Term)
  (when it
    {@type.:Simple_Pattern it}
    (`` (when it
          {@type.:Simple_Unit}
          (analysis.unit provenance.dummy)

          (,, (template.with [,tag ,analysis]
                [{,tag it}
                 (,analysis provenance.dummy it)]

                [[@type.:Simple_Bit analysis.bit]
                 [@type.:Simple_Natural analysis.natural]
                 [@type.:Simple_Integer analysis.integer]
                 [@type.:Simple_Revolution analysis.revolution]
                 [@type.:Simple_Decimal analysis.decimal]
                 [@type.:Simple_Text analysis.text]]))))
    
    {@type.:Complex_Pattern it}
    (when it
      {@type.:Complex_Variant it}
      (analysis.variant provenance.dummy
                        (revised @type.:value pattern it))
      
      {@type.:Complex_Tuple it}
      (analysis.tuple provenance.dummy
                      (list:each pattern it)))
    
    {@type.:List_Pattern it}
    (undefined)
    
    {@type.:Bind_Pattern it}
    (analysis.local provenance.dummy it)))

... https://en.wikipedia.org/wiki/Lemma_(mathematics)
(the (lemma match input)
  (-> @type.Pattern analysis.Term
      ?.Identity)
  [(pattern match)
   input])

(every .public (Case it)
  (-> it
      Rule))

(the .public (in_when by_reality
                      [by_head by_tail]
                      environment it)
  (-> Rule
      [(Case ?.Identity) (List (Case ?.Identity))]
      Rule)
  (when it
    {@type.:When @ reality [[pattern_of_head body_of_head] tail]}
    (if (natural.= (list.size by_tail)
                   (list.size tail))
        (monad.let [! try.monad]
          [reality (by_reality environment reality)
           body_of_head (by_head (lemma pattern_of_head reality) environment body_of_head)
           tail (list.each' ! (.function (_ [of [pattern body]])
                                (monad.let !
                                  [body (of (lemma pattern reality) environment body)]
                                  (pure [pattern body])))
                            (list.zipped_2 by_tail tail))]
          (pure {@type.:When @ reality [[pattern_of_head body_of_head] tail]}))
        (exception.except ..not_valid [(name ..in_when) it]))

    else
    (exception.except ..not_valid [(name ..in_when) it])))

(the .public (by_when by_reality
                      by_case
                      environment it)
  (-> Rule (Case ?.Identity)
      Rule)
  (when it
    {@type.:When @ reality each_branch}
    (monad.let try.monad
      [reality (by_reality environment reality)]
      (template.let [(variant_if ,right? ,choice)
                     [{@type.:Complex @ {@type.:Complex_Variant [0 ,right? ,choice]}}]

                     (local ,it)
                     [{@type.:Bind_Pattern ,it}]

                     (variant_if_pattern ,right? ,choice)
                     [{@type.:Complex_Pattern {@type.:Complex_Variant [0 ,right? (local ,choice)]}}]]
        (expansion.let [bit_if_reality {@type.:Simple @ {@type.:Simple_Bit reality}}
                        bit_if_then {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_then}}
                        bit_if_else {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_else}}

                        variant_if_reality (variant_if right? reality)
                        variant_if_then (variant_if_pattern right?_of_then binding_of_then)
                        variant_if_else (variant_if_pattern right?_of_else binding_of_else)]
          (when [reality each_branch]
            [bit_if_reality
             [[@type.:when bit_if_then
               @type.:then body_for_then]
              (list [@type.:when bit_if_else
                     @type.:then body_for_else])]]
            (if (bit.= expectation_for_then reality)
                ((by_case (lemma bit_if_then
                                 bit_if_reality))
                 environment
                 body_for_then)
                ((by_case (lemma bit_if_else
                                 bit_if_reality))
                 environment
                 body_for_else))

            [variant_if_reality
             [[@type.:when variant_if_then
               @type.:then body_for_then]
              (list [@type.:when variant_if_else
                     @type.:then body_for_else])]]
            (if (bit.= right?_of_then right?)
                ((by_case (lemma (local binding_of_then)
                                 reality))
                 environment
                 body_for_then)
                ((by_case (lemma (local binding_of_else)
                                 reality))
                 environment
                 body_for_else))
            
            [input [head (list)]]
            ((by_case (lemma (its @type.:when head)
                             input))
             environment
             (its @type.:then head))

            else
            (exception.except ..not_valid [(name ..by_when) it])))))

    else
    (exception.except ..not_valid [(name ..by_when) it])))

(the .public (by_pair by_left by_right
                      environment it)
  (-> Rule Rule
      Rule)
  (when it
    {@type.:Complex @ {@type.:Complex_Tuple (list left right)}}
    (monad.let try.monad
      [left (by_left environment left)
       right (by_right environment right)]
      (pure {@type.:Complex @ {@type.:Complex_Tuple (list left right)}}))

    else
    (exception.except ..not_valid [(name ..by_pair) it])))

(every .public (Closure it)
  (-> (List analysis.Term) Natural [Lux Natural]
      (Try [Natural it])))

(the .public (it by_it)
  (-> Rule
      (Closure ?.Identity))
  (.function (_ closure foreign environment)
    (monad.let try.monad
      [term (list.item foreign closure)
       term (by_it environment term)]
      (pure [(++ foreign) [(analysis.foreign provenance.dummy foreign)
                           term]]))))

(the .public (and' this that)
  (for_any (_ this that)
    (-> (Closure this) (Closure that)
        (Closure [this that])))
  (.function (_ closure foreign environment)
    (monad.let try.monad
      [[foreign this] (this closure foreign environment)
       [foreign that] (that closure foreign environment)]
      (pure [foreign [this that]]))))

(the .public (function closure by_body
               environment it)
  (for_any (_ it)
    (-> (Closure it) (-> it Rule)
        Rule))
  (when it
    {@type.:Abstraction @ closure' body}
    (when (closure closure' 0 environment)
      {try.:Success [every_foreign_read closure]}
      (if (natural.= (list.size closure') every_foreign_read)
          (monad.let try.monad
            [body ((by_body closure) environment body)]
            (pure {@type.:Abstraction @ (list) body}))
          (exception.except ..not_valid [(name ..function) it]))

      else
      (exception.except ..not_valid [(name ..function) it]))

    else
    (exception.except ..not_valid [(name ..function) it])))
