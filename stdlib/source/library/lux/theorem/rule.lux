... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and when local)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   ["[0]" function]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   ["[0]" meta (.only)
    ["[0]" binding]
    ["[0]" name]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   [compiler
    ["@[0]" type]
    ["[0]" reference (.only)
     ["[0]" variable]]
    [language
     [lux
      ["[0]" analysis (.only)
       ["[0]" simple]
       ["[0]" pattern]]]]]]]
 [//
  ["?" proposition]
  ["in" substitution (.only Substitution Rule Case)]])

(every .public Environment
  (Dictionary @type.Variable analysis.Term))

(the (beta_reduction local)
  (-> Environment
      (Change analysis.Term))
  (function (beta_reduction it)
    (.when it
      {@type.:Simple @ _}
      it
      
      {@type.:Complex @ it}
      {@type.:Complex @ (.when it
                          {@type.:Complex_Variant it}
                          {@type.:Complex_Variant (revised @type.:value beta_reduction it)}
                          
                          {@type.:Complex_Tuple it}
                          {@type.:Complex_Tuple (list:each beta_reduction it)})}
      
      {@type.:Reference @ it'}
      (.when it'
        {@type.:Variable_Reference it'}
        (|> local
            (dictionary.value it')
            (try.else it))
        
        {@type.:Constant_Reference _}
        it)
      
      {@type.:When @ input [head tail]}
      {@type.:When @ (beta_reduction input)
                   [(revised @type.:then beta_reduction head)
                    (list:each (revised @type.:then beta_reduction) tail)]}
      
      {@type.:Abstraction @ environment body}
      {@type.:Abstraction @ (list:each beta_reduction environment)
                          body}
      
      {@type.:Application @ parameter abstraction}
      {@type.:Application @ (beta_reduction parameter)
                          (beta_reduction abstraction)}
      
      {@type.:Extension @ name parameters}
      {@type.:Extension @ name (list:each beta_reduction parameters)})))

(exception.the .public (no_application [term])
  (Exception [analysis.Term])
  (exception.report
   (list ["Term" (analysis.as_text term)])))

(the .public (reification [lux next_induction] it)
  Rule
  (.when it
    {@type.:Application @ parameter {@type.:Abstraction @ environment body}}
    (.let [local (|> environment
                     list.enumeration
                     (list:each (function (_ [foreign term])
                                  [{@type.:Foreign foreign}
                                   term]))
                     (dictionary.of_list variable.hash)
                     (dictionary.has {@type.:Local 0} {@type.:Abstraction @ environment body})
                     (dictionary.has {@type.:Local 1} parameter))]
      {try.:Success (beta_reduction local body)})

    else
    (exception.except ..no_application [it])))

(the .public (application abstraction parameter
                          environment it)
  (-> Rule Rule
      Rule)
  (.when it
    {@type.:Application @ parameter' abstraction'}
    (monad.let try.monad
      [parameter' (parameter environment parameter')
       abstraction' (abstraction environment abstraction')]
      (pure {@type.:Application @ parameter' abstraction'}))

    else
    (exception.except ..no_application [it])))

(the .public (of' by_abstraction every_parameter)
  (-> Rule (List Rule)
      Rule)
  (list.mix (function (_ by_parameter by_abstraction)
              (..application by_abstraction by_parameter))
            by_abstraction
            every_parameter))

(the .public (and before after
                  environment it)
  (for_any (_ before intermediate after)
    (-> (in.Fact before intermediate) (in.Fact intermediate after)
        (in.Fact before after)))
  (monad.let try.monad
    [it (before environment it)]
    (after environment it)))

(the .public (of by_abstraction every_parameter)
  (-> Rule (List Rule)
      Rule)
  (list.mix (function (_ by_parameter by_abstraction)
              (..and (..application by_abstraction by_parameter)
                     ..reification))
            by_abstraction
            every_parameter))

(the (global_definition name lux)
  (-> Name Lux
      (Try analysis.Term))
  (<| (meta.value lux)
      (monad.let meta.monad
        [[type expression value] (binding.export name)]
        (.when expression
          {.:Some [original after_optimization]}
          (pure original)

          {.:None}
          (meta.failure "")))))

(the .public (definition [lux next_induction] it)
  Rule
  (.when it
    {@type.:Reference _ {@type.:Constant_Reference @}}
    (all try.or
         (global_definition @ lux)
         (exception.except in.not_valid [(name ..definition) it]))

    else
    (exception.except in.not_valid [(name ..definition) it])))

(the .public (when by_reality
               by_case
               environment it)
  (-> Rule (Case ?.Identity)
      Rule)
  (.when it
    {@type.:When @ reality each_branch}
    (monad.let try.monad
      [reality (by_reality environment reality)]
      (template.let [(variant_if ,right? ,choice)
                     [{@type.:Complex @ {@type.:Complex_Variant [0 ,right? ,choice]}}]

                     (local ,it)
                     [{@type.:Bind_Pattern ,it}]

                     (variant_pattern ,right? ,choice)
                     [{@type.:Complex_Pattern {@type.:Complex_Variant [0 ,right? ,choice]}}]

                     (variant_if_pattern ,right? ,choice)
                     [(variant_pattern ,right? (local ,choice))]]
        (expansion.let [bit_if_reality {@type.:Simple @ {@type.:Simple_Bit reality}}
                        bit_if_then {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_then}}
                        bit_if_else {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_else}}

                        variant_if_reality (variant_if right? reality)
                        variant_if_then (variant_if_pattern right?_of_then binding_of_then)
                        variant_if_else (variant_if_pattern right?_of_else binding_of_else)

                        pattern_of_unit {@type.:Simple_Pattern {@type.:Simple_Unit}}
                        variant_maybe_some (variant_if_pattern 1b binding_of_some)
                        variant_maybe_none (variant_pattern 0b pattern_of_unit)]
          (.when [reality each_branch]
            [bit_if_reality
             [[@type.:when bit_if_then
               @type.:then body_for_then]
              (list [@type.:when bit_if_else
                     @type.:then body_for_else])]]
            (if (bit.= expectation_for_then reality)
                ((by_case (in.lemma bit_if_then
                                    bit_if_reality))
                 environment
                 body_for_then)
                ((by_case (in.lemma bit_if_else
                                    bit_if_reality))
                 environment
                 body_for_else))

            [variant_if_reality
             [[@type.:when variant_if_then
               @type.:then body_for_then]
              (list [@type.:when variant_if_else
                     @type.:then body_for_else])]]
            (if (bit.= right?_of_then right?)
                ((by_case (in.lemma (local binding_of_then)
                                    reality))
                 environment
                 body_for_then)
                ((by_case (in.lemma (local binding_of_else)
                                    reality))
                 environment
                 body_for_else))

            (^.or [variant_if_reality
                   [[@type.:when variant_maybe_some
                     @type.:then body_for_some]
                    (list [@type.:when variant_maybe_none
                           @type.:then body_for_none])]]
                  [variant_if_reality
                   [[@type.:when variant_maybe_none
                     @type.:then body_for_none]
                    (list [@type.:when variant_maybe_some
                           @type.:then body_for_some])]])
            (if (bit.= 1b right?)
                ((by_case (in.lemma (local binding_of_some)
                                    reality))
                 environment
                 body_for_some)
                ((by_case (in.lemma pattern_of_unit reality))
                 environment
                 body_for_none))
            
            [input [head (list)]]
            ((by_case (in.lemma (its @type.:when head)
                                input))
             environment
             (its @type.:then head))

            else
            (exception.except in.not_valid [(name ..when) it])))))

    else
    (exception.except in.not_valid [(name ..when) it])))

(the (with_closure closure)
  (-> (List analysis.Term) analysis.Term
      (Try analysis.Term))
  (.function (of it)
    (.when it
      {@type.:Simple @ _}
      {try.:Success it}
      
      {@type.:Complex @ it}
      (.when it
        {@type.:Complex_Variant it}
        (try:each (.function (_ value)
                    (|> it
                        (has @type.:value value)
                        {@type.:Complex_Variant}
                        {@type.:Complex @}))
                  (of (its @type.:value it)))
        
        {@type.:Complex_Tuple it}
        (try:each (|>> {@type.:Complex_Tuple}
                       {@type.:Complex @})
                  (list.each' try.monad of it)))
      
      {@type.:Reference @ it'}
      (.when it'
        {@type.:Variable_Reference it'}
        (.when it'
          {@type.:Local _}
          {try.:Success it}
          
          {@type.:Foreign foreign}
          (list.item foreign closure))
        
        {@type.:Constant_Reference _}
        {try.:Success it})
      
      {@type.:When @ input [head tail]}
      (monad.let [! try.monad]
        [input (of input)
         .let [of_then (is (-> analysis.Branch
                               (Try analysis.Branch))
                           (.function (_ it)
                             (monad.let !
                               [then (of (its @type.:then it))]
                               (pure (has @type.:then then it)))))]
         head (of_then head)
         tail (list.each' try.monad of_then tail)]
        (pure {@type.:When @ input [head tail]}))
      
      {@type.:Abstraction @ environment body}
      (monad.let try.monad
        [environment (list.each' try.monad of environment)
         body (of body)]
        (pure {@type.:Abstraction @ environment body}))
      
      {@type.:Application @ parameter abstraction}
      (monad.let try.monad
        [parameter (of parameter)
         abstraction (of abstraction)]
        (pure {@type.:Application @ parameter abstraction}))
      
      {@type.:Extension @ name parameters}
      (monad.let try.monad
        [parameters (list.each' try.monad of parameters)]
        (pure {@type.:Extension @ name parameters})))))

(every Context
  (Dictionary @type.Register analysis.Term))

(the empty
  Context
  (dictionary.empty natural.hash))

(exception.the .public (cannot_extract_context [expected actual])
  (Exception [analysis.Term analysis.Term])
  (exception.report
   (.list ["Expected" (analysis.as_text expected)]
          ["Actual" (analysis.as_text actual)])))

(exception.the .public (contradiction [expected actual])
  (Exception [analysis.Term analysis.Term])
  (exception.report
   (.list ["Expected" (analysis.as_text expected)]
          ["Actual" (analysis.as_text actual)])))

(the (context original_expected original_actual it)
  (-> analysis.Term analysis.Term Context
      (Try Context))
  (loop (context [expected original_expected
                  actual original_actual
                  it it])
    (.when [expected actual]
      [(?.example _ expected') (?.example _ actual')]
      (if (natural.= expected' actual')
          {try.:Success it}
          (exception.except ..contradiction [original_expected original_actual]))

      [(?.variable _ @) _]
      (.when (dictionary.value @ it)
        {try.:Success expected}
        (if (.with analysis.equivalence
              (= expected actual))
            {try.:Success it}
            (exception.except ..contradiction [original_expected original_actual]))

        not_known!
        {try.:Success (dictionary.has @ actual it)})
      
      [{@type.:Simple _ expected'} {@type.:Simple _ actual'}]
      (if (.with simple.equivalence
            (= expected' actual'))
          {try.:Success it}
          (exception.except ..cannot_extract_context [original_expected original_actual]))
      
      [{@type.:Complex _ {@type.:Complex_Variant [expected_lefts expected_right? expected_choice]}}
       {@type.:Complex _ {@type.:Complex_Variant [actual_lefts actual_right? actual_choice]}}]
      (if (.and (natural.= expected_lefts actual_lefts)
                (bit.= expected_right? actual_right?))
          (context expected_choice actual_choice it)
          (exception.except ..cannot_extract_context [original_expected original_actual]))

      [{@type.:Complex _ {@type.:Complex_Tuple expected'}}
       {@type.:Complex _ {@type.:Complex_Tuple actual'}}]
      (if (natural.= (list.size expected') (list.size actual'))
          (list.mix' try.monad (function.uncurried context) it (list.zipped_2 expected' actual'))
          (exception.except ..cannot_extract_context [original_expected original_actual]))
      
      [{@type.:Reference _ expected'} {@type.:Reference _ actual'}]
      (if (.with reference.equivalence
            (= expected' actual'))
          {try.:Success it}
          (exception.except ..cannot_extract_context [original_expected original_actual]))
      
      [{@type.:When _ expected_input
                    [[expected_output_head_pattern expected_output_head]
                     expected_output_tail]}
       {@type.:When _ actual_input
                    [[actual_output_head_pattern actual_output_head]
                     actual_output_tail]}]
      (if (.and (natural.= (list.size expected_output_tail)
                           (list.size actual_output_tail))
                (pattern.= expected_output_head_pattern
                           actual_output_head_pattern))
          (monad.let [! try.monad]
            [it (context expected_input actual_input it)
             it (context expected_output_head actual_output_head it)]
            (list.mix' !
                       (.function (_ [[expected_output_tail_pattern expected_output_tail]
                                      [actual_output_tail_pattern actual_output_tail]]
                                     it)
                         (if (pattern.= expected_output_tail_pattern
                                        actual_output_tail_pattern)
                             (context expected_output_tail actual_output_tail it)
                             (exception.except ..cannot_extract_context [original_expected original_actual])))
                       it
                       (list.zipped_2 expected_output_tail actual_output_tail)))
          (exception.except ..cannot_extract_context [original_expected original_actual]))
      
      [{@type.:Abstraction _ expected_environment expected_body}
       {@type.:Abstraction _ actual_environment actual_body}]
      (monad.let try.monad
        [expected_body (with_closure expected_environment expected_body)
         actual_body (with_closure actual_environment actual_body)]
        (context expected_body actual_body it))
      
      [{@type.:Application _ expected_parameter expected_abstraction}
       {@type.:Application _ actual_parameter actual_abstraction}]
      (monad.let try.monad
        [it (context expected_abstraction actual_abstraction it)]
        (context expected_parameter actual_parameter it))
      
      [{@type.:Extension _ expected_name expected_parameters}
       {@type.:Extension _ actual_name actual_parameters}]
      (if (.and (name.= expected_name actual_name)
                (natural.= (list.size expected_parameters)
                           (list.size actual_parameters)))
          (list.mix' try.monad
                     (function (_ [expected_parameter actual_parameter])
                       (context expected_parameter actual_parameter))
                     it
                     (list.zipped_2 expected_parameters actual_parameters))
          (exception.except ..cannot_extract_context [original_expected original_actual]))

      else
      (exception.except ..cannot_extract_context [original_expected original_actual]))))

(the (substitution context)
  (-> Context analysis.Term
      (Try analysis.Term))
  (.function (substitution it)
    (.when it
      (?.variable _ @)
      (try.or (dictionary.value @ context)
              {try.:Success it})

      (^.or {@type.:Simple @ _}
            {@type.:Reference @ _}
            (?.term _ @)
            (?.example _ @))
      {try.:Success it}

      {@type.:Complex @ it}
      (.when it
        {@type.:Complex_Variant [lefts right? it]}
        (monad.let try.monad
          [it (substitution it)]
          (pure {@type.:Complex @ {@type.:Complex_Variant [lefts right? it]}}))
        
        {@type.:Complex_Tuple it}
        (monad.let [! try.monad]
          [it (list.each' ! substitution it)]
          (pure {@type.:Complex @ {@type.:Complex_Tuple it}})))
      
      {@type.:Application @ parameter abstraction}
      (monad.let try.monad
        [parameter (substitution parameter)
         abstraction (substitution abstraction)]
        (pure {@type.:Application @ parameter abstraction}))

      {@type.:Abstraction @ environment body}
      (monad.let try.monad
        [body (substitution body)]
        (pure {@type.:Abstraction @ environment body}))

      {@type.:When _ input
                   [[output_head_pattern output_head]
                    output_tail]}
      (monad.let [! try.monad]
        [input (substitution input)
         output_head (substitution output_head)
         output_tail (list.each' ! (.function (_ [pattern body])
                                     (monad.let !
                                       [body (substitution body)]
                                       (pure [pattern body])))
                                 output_tail)]
        (pure {@type.:When _ input
                           [[output_head_pattern output_head]
                            output_tail]}))

      {@type.:Extension _ name every_parameter}
      (monad.let [! try.monad]
        [every_parameter (list.each' ! substitution every_parameter)]
        (pure {@type.:Extension _ name every_parameter})))))

(the .public (= identity
                environment it)
  (-> ?.Identity
      Rule)
  (monad.let try.monad
    [context (..context (product.left identity) it ..empty)]
    (substitution context (product.right identity))))
