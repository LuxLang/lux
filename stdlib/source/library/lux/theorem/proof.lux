... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except let)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text]
    ["[0]" product]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]]]]
   [meta
    ["[0]" name]]
   [macro
    ["[0]" expansion]]
   [compiler
    ["@[0]" type]
    [language
     [lux
      ["[0]" analysis]]]]
   [function
    ["[0]" predicate (.only Predicate)]]
   [logic
    ["[0]" bit]]]]
 [//
  ["?" proposition]
  ["in" substitution]])

... https://en.wikipedia.org/wiki/Mathematical_proof
... https://en.wikipedia.org/wiki/Formal_proof
(every .public Proof
  (in.Substitution ?.Identity))

(.the .public (let [identity proof] body
                context it)
  (for_any (_ it)
    (-> [?.Identity (in.Fact ?.Identity it)]
        (-> it Proof)
        Proof))
  (monad.let try.monad
    [value (proof context identity)]
    (body value context it)))

... https://en.wikipedia.org/wiki/Q.E.D.
(.the .public (qed context identity)
  Proof
  {try.:Success identity})

(.the .public (= left right
                 context it)
  (-> in.Rule in.Rule
      Proof)
  (monad.let try.monad
    [left (left context (product.left it))
     right (right context (product.right it))]
    (pure [left right])))

(.the (potentially_identical? it)
  (Predicate ?.Identity)
  (when it
    [{@type.:Simple @ {@type.:Simple_Bit slow}}
     {@type.:Simple @ {@type.:Simple_Bit false}}]
    (bit.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Natural slow}}
     {@type.:Simple @ {@type.:Simple_Natural false}}]
    (natural.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Integer slow}}
     {@type.:Simple @ {@type.:Simple_Integer false}}]
    (integer.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Revolution slow}}
     {@type.:Simple @ {@type.:Simple_Revolution false}}]
    (revolution.= slow false)
    
    [{@type.:Simple @ {@type.:Simple_Text slow}}
     {@type.:Simple @ {@type.:Simple_Text false}}]
    (text.= slow false)
    
    else
    true))

(.the contradiction?
  (Predicate ?.Identity)
  (predicate.not ..potentially_identical?))

(exception.the .public (not_valid [where [left right]])
  (Exception [Name ?.Identity])
  (exception.report
   (list ["Where" (name.as_text where)]
         ["Left" (analysis.as_text left)]
         ["Right" (analysis.as_text right)])))

(.the .public (then else
                    context it)
  (-> Proof
      (in.Fact ?.Identity [?.Identity ?.Identity]))
  (.let [[slow fast] it]
    (expansion.let [if_reality {@type.:Simple @ {@type.:Simple_Bit reality}}
                    if_then {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_then}}
                    if_else {@type.:Simple_Pattern {@type.:Simple_Bit expectation_for_else}}]
      (when slow
        {@type.:When @ reality [[@type.:when if_then
                                 @type.:then body_for_then]
                                (list [@type.:when if_else
                                       @type.:then body_for_else])]}
        (monad.let try.monad
          [else (else context [?.:slow body_for_else
                               ?.:fast fast])]
          (if (contradiction? else)
              (pure [[?.:slow reality
                      ?.:fast (analysis.bit @ expectation_for_then)]
                     [?.:slow body_for_then
                      ?.:fast fast]])
              (exception.except ..not_valid [(name ..then) else])))

        else
        (exception.except ..not_valid [(name ..then) it])))))

... https://en.wikipedia.org/wiki/Axiom
(.the .public (axiom context it)
  Proof
  (.let [term (its ?.:fast it)]
    {try.:Success [?.:slow term
                   ?.:fast term]}))
