... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and or nat int rev list symbol type)
   [ffi (.only)]
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]]
   [control
    ["//" parser (.use "[1]#[0]" monad)]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["/" binary
     ["[1]" \\unsafe (.only Binary)]]
    [text
     ["%" \\format (.only format)]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence)]
     ["[0]" set (.only Set)]
     [array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" nat]
     ["[0]" frac]]]
   [meta
    [type (.only sharing)]
    [macro
     ["^" pattern]
     ["[0]" template]]]
   [world
    [time
     ["[0]" instant (.only Instant)]
     ["[0]" duration (.only Duration)]]]]])

(.every .public Offset
  Nat)

(.every .public Parser
  (//.Parser [Offset Binary]))

(exception.the .public (binary_was_not_fully_read [binary_length bytes_read])
  (Exception [Nat Nat])
  (exception.report
   (.list ["Binary length" (%.nat binary_length)]
          ["Bytes read" (%.nat bytes_read)])))

(with_template [<name> <extension>]
  [(the <name>
     (template (<name> <parameter> <subject>)
       [(<extension> <parameter> <subject>)]))]

  [n#= .i64_=#]
  [n#+ .i64_+#]
  [n#- .i64_-#]
  )

(the .public (value parser input)
  (All (_ of)
    (-> (Parser of) Binary
        (Try of)))
  (when (parser [0 input])
    {try.#Success [[end _] output]}
    (let [length (/.size input)]
      (if (n#= end length)
        {try.#Success output}
        (exception.except ..binary_was_not_fully_read [length end])))

    failure
    (as_expected failure)))

(the .public end?
  (Parser Bit)
  (function (_ (^.let input [offset data]))
    {try.#Success [input (n#= offset (/.size data))]}))

(the .public offset
  (Parser Offset)
  (function (_ (^.let input [offset data]))
    {try.#Success [input offset]}))

(the .public remaining
  (Parser Nat)
  (function (_ (^.let input [offset data]))
    {try.#Success [input (n#- offset (/.size data))]}))

(.every .public Size
  Nat)

(the .public size_8 Size 1)
(the .public size_16 Size (n.* 2 size_8))
(the .public size_32 Size (n.* 2 size_16))
(the .public size_64 Size (n.* 2 size_32))

(exception.the .public (range_out_of_bounds [length start end])
  (Exception [Nat Nat Nat])
  (exception.report
   (.list ["Length" (%.nat length)]
          ["Range start" (%.nat start)]
          ["Range end" (%.nat end)])))

(with_template [<name> <size> <read>]
  [(the .public <name>
     (Parser I64)
     (function (_ [start binary])
       (let [end (n#+ <size> start)]
         (if (n.< end (/.size binary))
           (exception.except ..range_out_of_bounds [(/.size binary) start end])
           (|> (<read> start binary)
               [[end binary]]
               {try.#Success})))))]

  [bits_8  ..size_8  /.bits_8]
  [bits_16 ..size_16 /.bits_16]
  [bits_32 ..size_32 /.bits_32]
  [bits_64 ..size_64 /.bits_64]
  )

(with_template [<name> <type>]
  [(the .public <name>
     (Parser <type>)
     ..bits_64)]

  [nat Nat]
  [int Int]
  [rev Rev]
  )

(the .public frac
  (Parser Frac)
  (//#each frac.of_bits ..bits_64))

(exception.the .public (invalid_tag [range byte])
  (Exception [Nat Nat])
  (exception.report
   (.list ["Tag range" (%.nat range)]
          ["Tag value" (%.nat byte)])))

(the !variant
  (template (!variant <case>+)
    [(do [! //.monad]
       [flag (is (Parser Nat)
                 ..bits_8)]
       (with_expansions [<case>+' (template.spliced <case>+)]
         (when flag
           (^.with_template [<number> <tag> <parser>]
             [<number> (`` (of ! each (|>> {(,, (template.spliced <tag>))}) <parser>))])
           (<case>+')
           
           _ (//.of_try (exception.except ..invalid_tag [(template.amount [<case>+]) flag])))))]))

(the .public (or left right)
  (All (_ left right)
    (-> (Parser left) (Parser right)
        (Parser (Or left right))))
  (!variant [[0 [.#Left] left]
             [1 [.#Right] right]]))

(the .public (rec body)
  (All (_ of)
    (-> (-> (Parser of) (Parser of))
        (Parser of)))
  (function (_ input)
    (let [parser (body (rec body))]
      (parser input))))

(the .public any
  (Parser Any)
  (//#in []))

(exception.the .public (not_a_bit value)
  (Exception Nat)
  (exception.report
   (.list ["Expected values" "either 0 or 1"]
          ["Actual value" (%.nat value)])))

(the .public bit
  (Parser Bit)
  (do //.monad
    [value (is (Parser Nat)
               ..bits_8)]
    (when value
      0 (in #0)
      1 (in #1)
      _ (//.of_try (exception.except ..not_a_bit [value])))))

(the .public (segment size)
  (-> Nat
      (Parser Binary))
  (when size
    0 (//#in (/.empty 0))
    _ (function (_ [start binary])
        (let [end (n#+ size start)]
          (if (n.< end (/.size binary))
            (exception.except ..range_out_of_bounds [(/.size binary) start end])
            (|> binary
                (/.slice start size)
                [[end binary]]
                {try.#Success}))))))

(with_template [<size> <name> <bits>]
  [(`` (the .public <name>
         (Parser Binary)
         (do //.monad
           [size (//#each (|>> .nat) <bits>)]
           (..segment size))))]

  [08 binary_8  ..bits_8]
  [16 binary_16 ..bits_16]
  [32 binary_32 ..bits_32]
  [64 binary_64 ..bits_64]
  )

(with_template [<size> <name> <binary>]
  [(`` (the .public <name>
         (Parser Text)
         (do //.monad
           [utf8 <binary>]
           (//.of_try (of utf8.codec decoded utf8)))))]

  [08 utf8_8  ..binary_8]
  [16 utf8_16 ..binary_16]
  [32 utf8_32 ..binary_32]
  [64 utf8_64 ..binary_64]
  )

(the .public text ..utf8_64)

(with_template [<size> <name> <bits>]
  [(the .public (<name> valueP)
     (All (_ of)
       (-> (Parser of)
           (Parser (Sequence of))))
     (do //.monad
       [amount (is (Parser Nat)
                   <bits>)]
       (function (_ state)
         (loop (again [state state
                       index 0
                       output (sharing [of]
                                (is (Parser of)
                                    valueP)
                                (is (Sequence of)
                                    sequence.empty))])
           (if (n.< amount index)
             (when (valueP state)
               {try.#Success [state value]}
               (again state
                      (.++ index)
                      (sequence.suffix value output))

               {try.#Failure error}
               {try.#Failure error})
             {try.#Success [state output]})))))]

  [08 sequence_8  ..bits_8]
  [16 sequence_16 ..bits_16]
  [32 sequence_32 ..bits_32]
  [64 sequence_64 ..bits_64]
  )

(the .public maybe
  (All (_ of)
    (-> (Parser of)
        (Parser (Maybe of))))
  (..or ..any))

(the .public (list value)
  (All (_ of)
    (-> (Parser of)
        (Parser (List of))))
  (..rec
   (|>> (//.and value)
        (..or ..any))))

(exception.the .public set_elements_are_not_unique)

(the .public (set hash value)
  (All (_ of)
    (-> (Hash of) (Parser of)
        (Parser (Set of))))
  (do //.monad
    [raw (..list value)
     .let [output (set.of_list hash raw)]
     _ (//.assertion (exception.error ..set_elements_are_not_unique [])
                     (n#= (list.size raw)
                          (set.size output)))]
    (in output)))

(the .public symbol
  (Parser Symbol)
  (//.and ..text ..text))

(the .public type
  (Parser Type)
  (..rec
   (function (_ type)
     (let [pair (//.and type type)
           indexed ..nat
           quantified (//.and (..list type) type)]
       (!variant [[00 [.#Nominal] (//.and ..text (..list type))]
                  [01 [.#Sum] pair]
                  [02 [.#Product] pair]
                  [03 [.#Function] pair]
                  [04 [.#Parameter] indexed]
                  [05 [.#Var] indexed]
                  [06 [.#Ex] indexed]
                  [07 [.#UnivQ] quantified]
                  [08 [.#ExQ] quantified]
                  [09 [.#Apply] pair]
                  [10 [.#Named] (//.and ..symbol type)]])))))

(the .public location
  (Parser Location)
  (all //.and ..text ..nat ..nat))

(the .public code
  (Parser Code)
  (..rec
   (function (_ again)
     (let [sequence (..list again)]
       (//.and ..location
               (!variant [[0 [.#Bit] ..bit]
                          [1 [.#Nat] ..nat]
                          [2 [.#Int] ..int]
                          [3 [.#Rev] ..rev]
                          [4 [.#Frac] ..frac]
                          [5 [.#Text] ..text]
                          [6 [.#Symbol] ..symbol]
                          [7 [.#Form] sequence]
                          [8 [.#Variant] sequence]
                          [9 [.#Tuple] sequence]]))))))

(the .public instant
  (Parser Instant)
  (of //.monad each instant.of_millis ..int))

(the .public duration
  (Parser Duration)
  (of //.monad each duration.of_millis ..int))
