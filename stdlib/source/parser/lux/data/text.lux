... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and not local)
   [abstract
    [monad (.only Monad do)]]
   [control
    ["//" parser]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["/" text (.use "[1]#[0]" monoid)
     [char (.only Char)]]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" nat (.use "[1]#[0]" decimal)]]]
   [meta
    ["[0]" code]
    [macro
     ["^" pattern]
     ["[0]" template]]]]])

(every .public Offset
  Nat)

(the beginning
  Offset
  0)

(exception.the .public cannot_parse)
(exception.the .public cannot_slice)

(every .public Parser
  (//.Parser [Offset Text]))

(every .public Slice
  (Record
   [#basis Offset
    #distance Offset]))

(the .public (slice parser)
  (-> (Parser Slice) (Parser Text))
  (do //.monad
    [[basis distance] parser]
    (function (_ (^.let input [offset tape]))
      (when (/.clip basis distance tape)
        {.#Some output}
        {try.#Success [input output]}

        {.#None}
        (exception.except ..cannot_slice [])))))

(the (left_over offset tape)
  (-> Offset Text Text)
  (|> tape (/.clip_since offset) maybe.trusted))

(exception.the .public (unconsumed_input [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n#encoded offset)]
         ["Input size" (n#encoded (/.size tape))]
         ["Remaining input" (..left_over offset tape)])))

(exception.the .public (expected_to_fail [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n#encoded offset)]
         ["Input" (..left_over offset tape)])))

(the .public (value parser input)
  (All (_ a) (-> (Parser a) Text (Try a)))
  (when (parser [..beginning input])
    {try.#Failure msg}
    {try.#Failure msg}
    
    {try.#Success [[end_offset _] output]}
    (if (n.= end_offset (/.size input))
      {try.#Success output}
      (exception.except ..unconsumed_input [end_offset input]))))

(the .public offset
  (Parser Offset)
  (function (_ (^.let input [offset tape]))
    {try.#Success [input offset]}))

(the (with_slices parser)
  (-> (Parser (List Slice)) (Parser Slice))
  (do //.monad
    [offset ..offset
     slices parser]
    (in (list#mix (function (_ [slice::basis slice::distance]
                               [total::basis total::distance])
                    [total::basis (.i64_+# slice::distance total::distance)])
                  [#basis offset
                   #distance 0]
                  slices))))

(the .public any
  (Parser Text)
  (function (_ [offset tape])
    (when (/.char offset tape)
      {.#Some output}
      {try.#Success [[(.i64_+# 1 offset) tape] (/.of_char output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public any!
  (Parser Slice)
  (function (_ [offset tape])
    (when (/.char offset tape)
      {.#Some _}
      {try.#Success [[(.i64_+# 1 offset) tape]
                     [#basis offset
                      #distance 1]]}

      _
      (exception.except ..cannot_slice []))))

(with_template [<name> <type> <any>]
  [(`` (the .public (<name> parser)
         (All (_ a) (-> (Parser a) (Parser <type>)))
         (function (_ input)
           (when (parser input)
             {try.#Failure msg}
             (<any> input)
             
             _
             (exception.except ..expected_to_fail input)))))]

  [not  Text  ..any]
  [not! Slice ..any!]
  )

(exception.the .public (cannot_match reference)
  (Exception Text)
  (exception.report
   (list ["Reference" (/.format reference)])))

(the .public (this reference)
  (-> Text (Parser Any))
  (function (_ [offset tape])
    (when (/.index_since offset reference tape)
      {.#Some where}
      (if (n.= offset where)
        {try.#Success [[(.i64_+# (/.size reference) offset) tape]
                       []]}
        (exception.except ..cannot_match [reference]))

      _
      (exception.except ..cannot_match [reference]))))

(the .public end
  (Parser Any)
  (function (_ (^.let input [offset tape]))
    (if (n.= offset (/.size tape))
      {try.#Success [input []]}
      (exception.except ..unconsumed_input input))))

(the .public next
  (Parser Text)
  (function (_ (^.let input [offset tape]))
    (when (/.char offset tape)
      {.#Some output}
      {try.#Success [input (/.of_char output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public remaining
  (Parser Text)
  (function (_ (^.let input [offset tape]))
    {try.#Success [input (..left_over offset tape)]}))

(the .public (range bottom top)
  (-> Nat Nat (Parser Text))
  (do //.monad
    [char any
     .let [char' (maybe.trusted (/.char 0 char))]
     _ (//.assertion (all /#composite "Character is not within range: " (/.of_char bottom) "-" (/.of_char top))
                     (.and (n.>= bottom char')
                           (n.<= top char')))]
    (in char)))

(the .public (range! bottom top)
  (-> Nat Nat (Parser Slice))
  (do //.monad
    [it ..any!
     char (..slice (in it))
     .let [char' (maybe.trusted (/.char 0 char))]
     _ (//.assertion (all /#composite "Character is not within range: " (/.of_char bottom) "-" (/.of_char top))
                     (.and (n.>= bottom char')
                           (n.<= top char')))]
    (in it)))

(with_template [<bottom> <top> <text> <slice>]
  [(the .public <text>
     (Parser Text)
     (..range (char <bottom>) (char <top>)))
   
   (the .public <slice>
     (Parser Slice)
     (..range! (char <bottom>) (char <top>)))]

  ["A" "Z" upper upper!]
  ["a" "z" lower lower!]
  ["0" "9" decimal decimal!]
  ["0" "7" octal octal!]
  )

(the .public alpha (Parser Text) (//.either ..lower ..upper))
(the .public alpha! (Parser Slice) (//.either ..lower! ..upper!))

(the .public alpha_num (Parser Text) (//.either ..alpha ..decimal))
(the .public alpha_num! (Parser Slice) (//.either ..alpha! ..decimal!))

(the .public hexadecimal
  (Parser Text)
  (all //.either
       ..decimal
       (..range (char "a") (char "f"))
       (..range (char "A") (char "F"))))

(the .public hexadecimal!
  (Parser Slice)
  (all //.either
       ..decimal!
       (..range! (char "a") (char "f"))
       (..range! (char "A") (char "F"))))

(with_template [<name>]
  [(exception.the .public (<name> [options character])
     (Exception [Text Char])
     (exception.report
      (list ["Options" (/.format options)]
            ["Character" (/.format (/.of_char character))])))]

  [character_should_be]
  [character_should_not_be]
  )

(with_template [<name> <modifier> <exception>]
  [(the .public (<name> options)
     (-> Text (Parser Text))
     (function (_ [offset tape])
       (when (/.char offset tape)
         {.#Some output}
         (let [output' (/.of_char output)]
           (if (<modifier> (/.contains? output' options))
             {try.#Success [[(.i64_+# 1 offset) tape] output']}
             (exception.except <exception> [options output])))

         _
         (exception.except ..cannot_parse []))))]

  [one_of  |>   ..character_should_be]
  [none_of .not ..character_should_not_be]
  )

(with_template [<name> <modifier> <exception>]
  [(the .public (<name> options)
     (-> Text (Parser Slice))
     (function (_ [offset tape])
       (when (/.char offset tape)
         {.#Some output}
         (let [output' (/.of_char output)]
           (if (<modifier> (/.contains? output' options))
             {try.#Success [[(.i64_+# 1 offset) tape]
                            [#basis offset
                             #distance 1]]}
             (exception.except <exception> [options output])))

         _
         (exception.except ..cannot_slice []))))]

  [one_of!  |>   ..character_should_be]
  [none_of! .not ..character_should_not_be]
  )

(exception.the .public (character_does_not_satisfy_predicate character)
  (Exception Char)
  (exception.report
   (list ["Character" (/.format (/.of_char character))])))

(the .public (satisfies parser)
  (-> (-> Char Bit) (Parser Text))
  (function (_ [offset tape])
    (when (/.char offset tape)
      {.#Some output}
      (if (parser output)
        {try.#Success [[(.i64_+# 1 offset) tape] (/.of_char output)]}
        (exception.except ..character_does_not_satisfy_predicate [output]))

      _
      (exception.except ..cannot_parse []))))

(the .public (satisfies! parser)
  (-> (-> Char Bit) (Parser Slice))
  (function (_ [offset tape])
    (when (/.char offset tape)
      {.#Some output}
      (if (parser output)
        {try.#Success [[(.i64_+# 1 offset) tape]
                       [#basis offset #distance 1]]}
        (exception.except ..character_does_not_satisfy_predicate [output]))

      _
      (exception.except ..cannot_parse []))))

(the .public space
  (Parser Text)
  (..satisfies /.space?))

(the .public space!
  (Parser Slice)
  (..satisfies! /.space?))

(the .public (and left right)
  (-> (Parser Text) (Parser Text) (Parser Text))
  (do //.monad
    [=left left
     =right right]
    (in (all /#composite =left =right))))

(the .public (and! left right)
  (-> (Parser Slice) (Parser Slice) (Parser Slice))
  (do //.monad
    [(open "left[0]") left
     (open "right[0]") right]
    (in [left#basis (.i64_+# left#distance right#distance)])))

(with_template [<name> <base> <doc_modifier>]
  [(the .public (<name> parser)
     (-> (Parser Text) (Parser Text))
     (|> parser <base> (of //.monad each /.together)))]

  [some //.some "some"]
  [many //.many "many"]
  )

(with_template [<name> <base> <doc_modifier>]
  [(the .public (<name> parser)
     (-> (Parser Slice) (Parser Slice))
     (with_slices (<base> parser)))]

  [some! //.some "some"]
  [many! //.many "many"]
  )

(with_template [<name> <base> <doc_modifier>]
  [(the .public (<name> amount parser)
     (-> Nat (Parser Text) (Parser Text))
     (|> parser
         (<base> amount)
         (of //.monad each /.together)))]

  [exactly  //.exactly  "exactly"]
  [at_most  //.at_most  "at most"]
  [at_least //.at_least "at least"]
  )

(with_template [<name> <base> <doc_modifier>]
  [(the .public (<name> amount parser)
     (-> Nat (Parser Slice) (Parser Slice))
     (with_slices
       (<base> amount parser)))]

  [exactly!  //.exactly  "exactly"]
  [at_most!  //.at_most  "at most"]
  [at_least! //.at_least "at least"]
  )

(the .public (between minimum additional parser)
  (-> Nat Nat (Parser Text) (Parser Text))
  (|> parser
      (//.between minimum additional)
      (of //.monad each /.together)))

(the .public (between! minimum additional parser)
  (-> Nat Nat (Parser Slice) (Parser Slice))
  (with_slices
    (//.between minimum additional parser)))

(the .public (enclosed [start end] parser)
  (All (_ a) (-> [Text Text] (Parser a) (Parser a)))
  (|> parser
      (//.before (this end))
      (//.after (this start))))

(the .public (local local_input parser)
  (All (_ a) (-> Text (Parser a) (Parser a)))
  (function (_ real_input)
    (when (..value parser local_input)
      {try.#Failure error}
      {try.#Failure error}

      {try.#Success value}
      {try.#Success [real_input value]})))

(the .public (then structured text)
  (All (_ s a)
    (-> (Parser a)
        (//.Parser s Text)
        (//.Parser s a)))
  (do //.monad
    [raw text]
    (//.of_try (..value structured raw))))
