... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except function loop i64 local variant tuple)
   [abstract
    [monad (.only do)]]
   [control
    ["//" parser]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" bit]
    ["[0]" text (.only)
     ["%" \\format (.only format)]]
    [collection
     ["[0]" list]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]
     ["[0]" dec]]]
   [meta
    ["[0]" symbol]
    [compiler
     [arity (.only Arity)]
     [reference
      [register (.only Register)]]
     [language
      [lux
       [analysis (.only Environment)]]]]]]]
 [\\library
  ["[0]" / (.only Abstraction)]])

(with_template [<name>]
  [(exception.the .public (<name> input)
     (Exception (List /.Term))
     (exception.report
      (list ["Input" (exception.listing /.format input)])))]

  [cannot_parse]
  [unconsumed_input]
  [expected_empty_input]
  )

(exception.the .public (wrong_arity [expected actual])
  (Exception [Arity Arity])
  (exception.report
   (list ["Expected" (%.nat expected)]
         ["Actual" (%.nat actual)])))

(exception.the .public empty_input)

(every .public Parser
  (//.Parser (List /.Term)))

(the .public (value parser input)
  (All (_ of)
    (-> (Parser of) (List /.Term)
        (Try of)))
  (when (parser input)
    {try.#Failure error}
    {try.#Failure error}

    {try.#Success [{.#End} value]}
    {try.#Success value}
    
    {try.#Success [unconsumed _]}
    (exception.except ..unconsumed_input unconsumed)))

(the .public any
  (Parser /.Term)
  (.function (_ input)
    (when input
      {.#End}
      (exception.except ..empty_input [])
      
      {.#Item [head tail]}
      {try.#Success [tail head]})))

(the .public end
  (Parser Any)
  (.function (_ tokens)
    (when tokens
      {.#End} {try.#Success [tokens []]}
      _       (exception.except ..expected_empty_input [tokens]))))

(the .public end?
  (Parser Bit)
  (.function (_ tokens)
    {try.#Success [tokens (when tokens
                            {.#End} true
                            _       false)]}))

(with_template [<query> <assertion> <tag> <type> <eq>]
  [(`` (the .public <query>
         (Parser <type>)
         (.function (_ input)
           (when input
             (list.partial (<tag> @ x) input')
             {try.#Success [input' x]}

             _
             (exception.except ..cannot_parse input)))))

   (`` (the .public (<assertion> expected)
         (-> <type>
             (Parser Any))
         (.function (_ input)
           (when input
             (list.partial (<tag> @ actual) input')
             (if (of <eq> = expected actual)
               {try.#Success [input' []]}
               (exception.except ..cannot_parse input))

             _
             (exception.except ..cannot_parse input)))))]

  [bit this_bit /.bit Bit bit.equivalence]
  [i64 this_i64 /.i64 I64 i64.equivalence]
  [f64 this_f64 /.f64 Dec dec.equivalence]
  [text this_text /.text Text text.equivalence]
  [local this_local /.local Nat n.equivalence]
  [foreign this_foreign /.foreign Nat n.equivalence]
  [constant this_constant /.constant Symbol symbol.equivalence]
  )

(the .public (tuple parser)
  (All (_ of)
    (-> (Parser of)
        (Parser of)))
  (.function (_ input)
    (when input
      (list.partial (/.tuple @ head) tail)
      (do try.monad
        [output (..value parser head)]
        {try.#Success [tail output]})

      _
      (exception.except ..cannot_parse input))))

(the .public (function expected parser)
  (All (_ of)
    (-> Arity (Parser of)
        (Parser [(Environment /.Term) of])))
  (.function (_ input)
    (when input
      (list.partial (/.abstraction @ [environment actual body]) tail)
      (if (n.= expected actual)
        (do try.monad
          [output (..value parser (list body))]
          {try.#Success [tail [environment output]]})
        (exception.except ..wrong_arity [expected actual]))

      _
      (exception.except ..cannot_parse input))))

(the .public (loop init_parsers iteration_parser)
  (All (_ init iteration)
    (-> (Parser init) (Parser iteration)
        (Parser [Register init iteration])))
  (.function (_ input)
    (when input
      (list.partial (/.scope @ [start inits iteration]) tail)
      (do try.monad
        [inits (..value init_parsers inits)
         iteration (..value iteration_parser (list iteration))]
        {try.#Success [tail [start inits iteration]]})

      _
      (exception.except ..cannot_parse input))))
