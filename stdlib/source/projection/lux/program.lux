... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["//" projection]]
   [error (.only error)
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]]]]])

(every .public (Projection it)
  (//.Projection (Stack Text)
                 it))

(the .public (value projection inputs)
  (for_any (_ it)
    (-> (Projection it) (Stack Text)
        (Try it)))
  (when (//.value projection inputs)
    {try.#Success [remaining output]}
    (when remaining 
      {.#Empty}
      {try.#Success output}

      _
      {try.#Failure (text "Remaining CLI inputs: " (text.interposed " " (list.of_stack remaining)))})

    {try.#Failure try}
    {try.#Failure try}))

(the .public empty
  (error "Cannot parse empty arguments."))

(the .public any
  (Projection Text)
  (function (_ inputs)
    (when inputs
      {.#Top arg inputs'}
      {try.#Success [inputs' arg]}
      
      _
      {try.#Failure ..empty})))

(the .public (parse projection)
  (for_any (_ it)
    (-> (-> Text (Try it))
        (Projection it)))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)
       output (projection raw)]
      (in [remaining output]))))

(the .public (this reference)
  (-> Text
      (Projection Any))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)]
      (if (text.= reference raw)
        (in [remaining []])
        {try.#Failure (text "Missing token: '" reference "'")}))))

(the .public (somewhere cli)
  (for_any (_ it)
    (-> (Projection it)
        (Projection it)))
  (function (_ inputs)
    (loop (again [immediate inputs])
      (when (//.value cli immediate)
        {try.#Failure try}
        (when immediate
          {.#Empty}
          {try.#Failure try}
          
          {.#Top to_omit immediate'}
          (do try.monad
            [[remaining output] (again immediate')]
            (in [{.#Top to_omit remaining}
                 output])))

        success
        success))))

(the .public end
  (Projection Any)
  (function (_ inputs)
    (when inputs
      {.#Empty}
      {try.#Success [inputs []]}
      
      _
      {try.#Failure (text "Unknown parameters: " (text.interposed " " (list.of_stack inputs)))})))

(the .public (named name value)
  (for_any (_ it)
    (-> Text (Projection it)
        (Projection it)))
  (|> value
      (//.after (..this name))
      ..somewhere))

(the .public (parameter [short long] value)
  (for_any (_ it)
    (-> [Text Text] (Projection it)
        (Projection it)))
  (|> value
      (//.after (//.either (..this short) (..this long)))
      ..somewhere))
