... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except parameter)
   [abstract
    [monad (.only do)]]
   [control
    ["//" projection]
    ["[0]" try (.only Try)]]
   [data
    ["[0]" text (.use "[1]#[0]" equivalence)
     ["%" \\format (.only format)]]]
   [meta
    ["[0]" location]]]])

(every .public (Projection of)
  (//.Projection (List Text)
                 of))

(the .public (value projection inputs)
  (All (_ of)
    (-> (Projection of) (List Text)
        (Try of)))
  (when (//.value projection inputs)
    {try.#Success [remaining output]}
    (when remaining 
      {.#End}
      {try.#Success output}

      _
      {try.#Failure (format "Remaining CLI inputs: " (text.interposed " " remaining))})

    {try.#Failure try}
    {try.#Failure try}))

(the .public empty
  Error
  (location.with (location.here)
    "Cannot parse empty arguments."))

(the .public any
  (Projection Text)
  (function (_ inputs)
    (when inputs
      {.#Item arg inputs'}
      {try.#Success [inputs' arg]}
      
      _
      {try.#Failure ..empty})))

(the .public (parse projection)
  (All (_ of)
    (-> (-> Text (Try of))
        (Projection of)))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)
       output (projection raw)]
      (in [remaining output]))))

(the .public (this reference)
  (-> Text
      (Projection Any))
  (function (_ inputs)
    (do try.monad
      [[remaining raw] (any inputs)]
      (if (text#= reference raw)
        (in [remaining []])
        {try.#Failure (format "Missing token: '" reference "'")}))))

(the .public (somewhere cli)
  (All (_ of)
    (-> (Projection of)
        (Projection of)))
  (function (_ inputs)
    (loop (again [immediate inputs])
      (when (//.value cli immediate)
        {try.#Failure try}
        (when immediate
          {.#End}
          {try.#Failure try}
          
          {.#Item to_omit immediate'}
          (do try.monad
            [[remaining output] (again immediate')]
            (in [{.#Item to_omit remaining}
                 output])))

        success
        success))))

(the .public end
  (Projection Any)
  (function (_ inputs)
    (when inputs
      {.#End} {try.#Success [inputs []]}
      _       {try.#Failure (format "Unknown parameters: " (text.interposed " " inputs))})))

(the .public (named name value)
  (All (_ of)
    (-> Text (Projection of)
        (Projection of)))
  (|> value
      (//.after (..this name))
      ..somewhere))

(the .public (parameter [short long] value)
  (All (_ of)
    (-> [Text Text] (Projection of)
        (Projection of)))
  (|> value
      (//.after (//.either (..this short) (..this long)))
      ..somewhere))
