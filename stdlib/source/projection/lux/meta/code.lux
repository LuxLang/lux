... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution local not name local global variant tuple)
   [abstract
    ["//" projection]
    ["[0]" monad (.only do)]]
   [control
    ["[0]" try (.only Try)]]
   [data
    ["[0]" bit]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" stack (.use "[1]#[0]" functor)]]]
   [math
    [number
     ["[0]" natural]
     ["[0]" integer]
     ["[0]" revolution]
     ["[0]" decimal]]]
   [macro
    ["[0]" expansion]]
   [meta
    ["[0]" provenance]
    ["[0]" name]
    ["[0]" code]]]])

(the with_template' (.in_module# .prelude .with_template))

(the (un_paired pairs)
  (for_any (_ a) (-> (Stack [a a]) (Stack a)))
  (when pairs
    {.#Empty}
    {.#Empty}
    
    {.#Top [[x y] pairs']}
    (stack.partial x y (un_paired pairs'))))

(every .public Projection
  (//.Projection (Stack Code)))

(the remaining_inputs
  (-> (Stack Code) Text)
  (|>> (stack#each code.absolute)
       (text.interposed " ")
       (all text#composite text.new_line "Remaining input: ")))

(the .public empty
  Error
  (provenance.with (provenance.here)
    "There are no tokens to parse!"))

(the .public any
  (Projection Code)
  (function (_ tokens)
    (when tokens
      {.#Empty}
      {try.#Failure ..empty}
      
      {.#Top [t tokens']}
      {try.#Success [tokens' t]})))

(the .public next
  (Projection Code)
  (function (_ tokens)
    (when tokens
      {.#Empty}
      {try.#Failure ..empty}
      
      {.#Top next _}
      {try.#Success [tokens next]})))

(with_template' [<query> <check> <type> <tag> <eq> <desc>]
  [(expansion.let [<failure> (these {try.#Failure (all text#composite "Cannot parse " <desc> (remaining_inputs tokens))})]
     (these (the .public <query>
              (Projection <type>)
              (function (_ tokens)
                (when tokens
                  {.#Top [[_ {<tag> x}] tokens']}
                  {try.#Success [tokens' x]}

                  _
                  <failure>)))

            (the .public (<check> expected)
              (-> <type> (Projection Any))
              (function (_ tokens)
                (when tokens
                  {.#Top [[_ {<tag> actual}] tokens']}
                  (if (by <eq> = expected actual)
                    {try.#Success [tokens' []]}
                    <failure>)

                  _
                  <failure>)))))]

  [bit this_bit Bit .#Bit bit.equivalence "bit"]
  [natural this_natural Natural .#Natural natural.equivalence "natural"]
  [integer this_integer Integer .#Integer integer.equivalence "integer"]
  [revolution this_revolution Revolution .#Revolution revolution.equivalence "revolution"]
  [decimal this_decimal Decimal .#Decimal decimal.equivalence "decimal"]
  [text this_text Text .#Text text.equivalence "text"]
  [name this_name Name .#Name name.equivalence "name"]
  )

(the .public (this code)
  (-> Code (Projection Any))
  (function (_ tokens)
    (when tokens
      {.#Top [token tokens']}
      (if (code.= code token)
        {try.#Success [tokens' []]}
        {try.#Failure (all text#composite "Expected a " (code.absolute code) " but instead got " (code.absolute token)
                           (remaining_inputs tokens))})

      _
      {try.#Failure ..empty})))

(expansion.let [<failure> (these {try.#Failure (all text#composite "Cannot parse local name" (remaining_inputs tokens))})]
  (these (the .public local
           (Projection Text)
           (function (_ tokens)
             (when tokens
               {.#Top [[_ {.#Name ["" x]}] tokens']}
               {try.#Success [tokens' x]}

               _
               <failure>)))

         (the .public (this_local expected)
           (-> Text (Projection Any))
           (function (_ tokens)
             (when tokens
               {.#Top [[_ {.#Name ["" actual]}] tokens']}
               (if (by text.equivalence = expected actual)
                 {try.#Success [tokens' []]}
                 <failure>)

               _
               <failure>)))))

(expansion.let [<failure> (these {try.#Failure (all text#composite "Cannot parse local name" (remaining_inputs tokens))})]
  (these (the .public global
           (Projection Name)
           (function (_ tokens)
             (when tokens
               {.#Top [[_ {.#Name ["" proper]}] tokens']}
               <failure>
               
               {.#Top [[_ {.#Name it}] tokens']}
               {try.#Success [tokens' it]}

               _
               <failure>)))

         (the .public (this_global expected)
           (-> Name (Projection Any))
           (function (_ tokens)
             (when tokens
               {.#Top [[_ {.#Name ["" actual]}] tokens']}
               <failure>
               
               {.#Top [[_ {.#Name it}] tokens']}
               (if (by name.equivalence = expected it)
                 {try.#Success [tokens' []]}
                 <failure>)

               _
               <failure>)))))

(with_template' [<name> <tag> <desc>]
  [(the .public (<name> p)
     (for_any (_ a)
       (-> (Projection a) (Projection a)))
     (function (_ tokens)
       (when tokens
         {.#Top [[_ {<tag> members}] tokens']}
         (when (p members)
           {try.#Success [{.#Empty} x]} {try.#Success [tokens' x]}
           _                          {try.#Failure (all text#composite "Projection was expected to fully consume " <desc> (remaining_inputs tokens))})

         _
         {try.#Failure (all text#composite "Cannot parse " <desc> (remaining_inputs tokens))})))]

  [form .#Form "form"]
  [variant .#Variant "variant"]
  [tuple .#Tuple "tuple"]
  )

(the .public end
  (Projection Any)
  (function (_ tokens)
    (when tokens
      {.#Empty} {try.#Success [tokens []]}
      _       {try.#Failure (all text#composite "Expected list of tokens to be empty!" (remaining_inputs tokens))})))

(the .public end?
  (Projection Bit)
  (function (_ tokens)
    {try.#Success [tokens (when tokens
                            {.#Empty} true
                            _       false)]}))

(the .public (value projection inputs)
  (for_any (_ a) (-> (Projection a) (Stack Code) (Try a)))
  (when (projection inputs)
    {try.#Failure error}
    {try.#Failure error}

    {try.#Success [unconsumed value]}
    (when unconsumed
      {.#Empty}
      {try.#Success value}

      _
      {try.#Failure (|> unconsumed
                        (stack#each code.absolute)
                        (text.interposed ", ")
                        (text#composite "Unconsumed inputs: "))})))

(the .public (locally inputs projection)
  (for_any (_ a) (-> (Stack Code) (Projection a) (Projection a)))
  (function (_ real)
    (do try.monad
      [value (..value projection inputs)]
      (in [real value]))))

(the .public (not projection)
  (for_any (_ a)
    (-> (Projection a)
        (Projection Code)))
  (do //.monad
    [sample ..next
     it (//.or projection
               ..any)]
    (when it
      {.#Left _} (//.failure (text#composite "Did NOT expect to parse code: " (code.absolute sample)))
      {.#Right output} (in output))))
