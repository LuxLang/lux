... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution local not name local global variant tuple)
   [abstract
    ["//" projection]
    ["[0]" monad]]
   ["[0]" error (.only)
    ["[0]" try (.use "[1]#[0]" functor)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list (.only)
      ["?[1]" \\projection]]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [meta
    ["[0]" name]
    ["[0]" code]]
   [compiler
    ["/" type]]]])

(the with_template (.in_module# .prelude with_template))

(every .public Projection
  (?list.Projection /.Code))

(with_template [<query> <assertion> <type> <tag> <eq>]
  [(these (the .public <query>
            (Projection <type>)
            (function (_ tape)
              (when (?list.any tape)
                {try.#Success [tape {<tag> @ it}]}
                {try.#Success [tape it]}

                else
                {try.#Failure error.not_valid})))

          (the .public (<assertion> expected)
            (-> <type>
                (Projection <type>))
            (//.only (by <eq> = expected)
                     <query>)))]

  [[bit this_bit Bit /.#Bit bit.equivalence]
   [natural this_natural Natural /.#Natural natural.equivalence]
   [integer this_integer Integer /.#Integer integer.equivalence]
   [revolution this_revolution Revolution /.#Revolution revolution.equivalence]
   [decimal this_decimal Decimal /.#Decimal decimal.equivalence]
   [text this_text Text /.#Text text.equivalence]
   [name this_name Name /.#Name name.equivalence]])

(the .public (this expected)
  (-> /.Code
      (Projection /.Code))
  (//.only (code.= expected)
           ?list.any))

(these (the .public local
         (Projection Text)
         (function (_ tape)
           (when (?list.any tape)
             {try.#Success [tape {/.#Name @ ["" it]}]}
             {try.#Success [tape it]}

             else
             {try.#Failure error.not_valid})))

       (the .public (this_local expected)
         (-> Text
             (Projection Text))
         (//.only (by text.equivalence = expected)
                  ..local)))

(these (the .public global
         (Projection Name)
         (function (_ tape)
           (when (?list.any tape)
             {try.#Success [tape {/.#Name @ ["" it]}]}
             {try.#Failure error.not_valid}
             
             {try.#Success [tape {/.#Name @ it}]}
             {try.#Success [tape it]}

             else
             {try.#Failure error.not_valid})))

       (the .public (this_global expected)
         (-> Name
             (Projection Name))
         (//.only (by name.equivalence = expected)
                  ..global)))

(with_template [,name ,tag]
  [(the .public (,name projection)
     (for_any (_ it)
       (Change (Projection it)))
     (function (_ global)
       (when (?list.any global)
         {try.#Success [global {,tag _ local}]}
         (when (?list.value local projection)
           {try.#Success it}
           {try.#Success [global it]}

           {try.#Failure error}
           {try.#Failure error})

         else
         {try.#Failure error.not_valid})))]

  [[form /.#Form]
   [variant /.#Variant]
   [tuple /.#Tuple]])

(the .public (locally tape projection)
  (for_any (_ it)
    (-> (List /.Code)
        (Change (Projection it))))
  (function (_ global_tape)
    (|> projection
        (?list.value tape)
        (try#each (|>> [global_tape])))))

(the .public (not projection)
  (for_any (_ it)
    (-> (Projection it)
        (Projection /.Code)))
  (monad.let //.monad
    [it (//.or projection
               ?list.any)]
    (when it
      {.#Right output}
      (pure output)

      {.#Left _}
      (function (_ tape)
        {try.#Failure error.not_valid}))))
