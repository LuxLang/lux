... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text natural integer revolution local variant tuple)
   [abstract
    ["//" projection]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list
      ["[1]" \\projection]]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]]]
 ["/" \\library])

(exception.the .public not_expected)

(every .public Projection
  (list.Projection /.Term))

(template.with [<query> <assertion> <tag> <type> <eq>]
  [(these (the .public <query>
            (Projection <type>)
            (function (_ input)
              (when (list.any input)
                {try.#Success [input (<tag> @ it)]}
                {try.#Success [input it]}

                else
                (exception.except ..not_expected []))))

          (the .public (<assertion> expected)
            (-> <type>
                (Projection <type>))
            (//.only (by <eq> = expected)
                     <query>)))]

  [[bit this_bit /.bit Bit bit.equivalence]
   [natural this_natural /.natural Natural natural.equivalence]
   [integer this_integer /.integer Integer integer.equivalence]
   [revolution this_revolution /.revolution Revolution revolution.equivalence]
   [decimal this_decimal /.decimal Decimal decimal.equivalence]
   [text this_text /.text Text text.equivalence]
   [local this_local /.local Natural natural.equivalence]
   [foreign this_foreign /.foreign Natural natural.equivalence]
   [constant this_constant /.constant Name name.equivalence]])

(the .public (tuple projection)
  (for_any (_ it)
    (Change (Projection it)))
  (function (_ input)
    (when (list.any input)
      {try.#Success [input (/.tuple @ input')]}
      (when (list.value input' projection)
        {try.#Success it}
        {try.#Success [input it]}

        {try.#Failure error}
        {try.#Failure error})

      else
      (exception.except ..not_expected []))))
