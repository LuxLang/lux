... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function loop i64 local text variant tuple)
   [abstract
    ["//" projection]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list
      ["[1]" \\projection]]]]
   [logic
    ["[0]" bit]]
   [math
    [number
     ["[0]" /64 (.only)
      ["[0]" natural]
      ["[0]" decimal]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [compiler
    [arity (.only Arity)]
    [reference
     [register (.only Register)]]
    [language
     [lux
      [analysis (.only Environment)]]]]]]
 [\\library
  ["[0]" /]])

(exception.the .public not_expected)

(every .public Projection
  (list.Projection /.Term))

(template.with [<query> <assertion> <tag> <type> <eq>]
  [(these (the .public <query>
            (Projection <type>)
            (.function (_ input)
              (when (list.any input)
                {try.#Success [input (<tag> @ it)]}
                {try.#Success [input it]}

                else
                (exception.except ..not_expected []))))

          (the .public (<assertion> expected)
            (-> <type>
                (Projection <type>))
            (//.only (by <eq> = expected)
                     <query>)))]

  [[bit this_bit /.bit Bit bit.equivalence]
   [i64 this_i64 /.i64 I64 /64.equivalence]
   [f64 this_f64 /.f64 Decimal decimal.equivalence]
   [text this_text /.text Text text.equivalence]
   [local this_local /.local Natural natural.equivalence]
   [foreign this_foreign /.foreign Natural natural.equivalence]
   [constant this_constant /.constant Name name.equivalence]])

(the .public (tuple projection)
  (for_any (_ it)
    (Change (Projection it)))
  (.function (_ input)
    (when (list.any input)
      {try.#Success [input (/.tuple @ input')]}
      (when (list.value input' projection)
        {try.#Success it}
        {try.#Success [input it]}

        {try.#Failure error}
        {try.#Failure error})

      else
      (exception.except ..not_expected []))))

(the .public (function expected projection)
  (for_any (_ it)
    (-> Arity (Projection it)
        (Projection [(Environment /.Term) it])))
  (.function (_ input)
    (when (list.any input)
      {try.#Success [after (/.abstraction @ [environment actual body])]}
      (if (natural.= expected actual)
          (when (list.value (list body) projection)
            {try.#Success output}
            {try.#Success [after [environment output]]}

            {try.#Failure error}
            {try.#Failure error})
          (exception.except ..not_expected []))

      else
      (exception.except ..not_expected []))))

(the .public (loop init_projections iteration_projection)
  (for_any (_ init iteration)
    (-> (Projection init) (Projection iteration)
        (Projection [Register init iteration])))
  (.function (_ input)
    (when (list.any input)
      {try.#Success [after (/.tail_recursion @ [start inits iteration])]}
      (when [(list.value inits init_projections)
             (list.value (list iteration) iteration_projection)]
        [{try.#Success inits} {try.#Success iteration}]
        {try.#Success [after [start inits iteration]]}

        _
        (exception.except ..not_expected []))

      else
      (exception.except ..not_expected []))))
