... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and not local)
   [abstract
    ["?" projection]
    ["[0]" monad]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]:[0]" mix)]]]
   [math
    [number
     [/64
      ["n" natural (.use "[1]:[0]" base_10)]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [function
    [predicate (.only Predicate)]]]]
 ["/" \\library (.use "[1]:[0]" monoid)
  [character (.only Character)]])

(every .public Offset
  Natural)

(the beginning
  Offset
  0)

(exception.the .public cannot_parse)

(every .public Projection
  (?.Projection [Offset Text]))

(the (left_over offset tape)
  (-> Offset Text
      Text)
  (|> tape
      (/.clip_since offset)
      maybe.trusted))

(exception.the .public (unconsumed_input [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n:as offset)]
         ["Input size" (n:as (/.size tape))]
         ["Remaining input" (..left_over offset tape)])))

(exception.the .public (expected_to_fail [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n:as offset)]
         ["Input" (..left_over offset tape)])))

(the .public (value projection input)
  (for_any (_ it)
    (-> (Projection it) Text
        (Try it)))
  (when (projection [..beginning input])
    {try.:Failure msg}
    {try.:Failure msg}
    
    {try.:Success [[end_offset _] output]}
    (if (n.= end_offset (/.size input))
        {try.:Success output}
        (exception.except ..unconsumed_input [end_offset input]))))

(the .public offset
  (Projection Offset)
  (function (_ (^.let input [offset tape]))
    {try.:Success [input offset]}))

(the .public any
  (Projection Text)
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.:Some output}
      {try.:Success [[(.i64_+# 1 offset) tape] (/.of_character output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public (not projection)
  (for_any (_ it)
    (-> (Projection it)
        (Projection Text)))
  (function (_ input)
    (when (projection input)
      {try.:Failure msg}
      (..any input)
      
      _
      (exception.except ..expected_to_fail [input]))))

(exception.the .public (cannot_match reference)
  (Exception Text)
  (exception.report
   (list ["Reference" (/.as_text reference)])))

(the .public (this reference)
  (-> Text
      (Projection Any))
  (function (_ [offset tape])
    (when (/.index_since offset reference tape)
      {.:Some where}
      (if (n.= offset where)
          {try.:Success [[(.i64_+# (/.size reference) offset) tape]
                         []]}
          (exception.except ..cannot_match [reference]))

      _
      (exception.except ..cannot_match [reference]))))

(the .public end
  (Projection Any)
  (function (_ (^.let input [offset tape]))
    (if (n.= offset (/.size tape))
        {try.:Success [input []]}
        (exception.except ..unconsumed_input input))))

(the .public next
  (Projection Text)
  (function (_ (^.let input [offset tape]))
    (when (/.character offset tape)
      {.:Some output}
      {try.:Success [input (/.of_character output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public remaining
  (Projection Text)
  (function (_ (^.let input [offset tape]))
    {try.:Success [input (..left_over offset tape)]}))

(the .public (range minimum maximum)
  (-> Natural Natural
      (Projection Text))
  (monad.let ?.monad
    [it ..any
     .let [character (maybe.trusted (/.character 0 it))]
     _ (?.assertion (all /:composite "Character is not within range: " (/.of_character minimum) "-" (/.of_character maximum))
                    (.and (n.>= minimum character)
                          (n.<= maximum character)))]
    (pure it)))

(template.with [<minimum> <maximum> <text>]
  [(the .public <text>
     (Projection Text)
     (..range (character <minimum>) (character <maximum>)))]

  [["A" "Z" upper]
   ["a" "z" lower]
   ["0" "1" base_02]])

(the .public base_08
  (Projection Text)
  (all ?.either
       ..base_02
       (..range (character "2") (character "7"))))

(the .public base_10
  (Projection Text)
  (all ?.either
       ..base_08
       (..range (character "8") (character "9"))))

(the .public base_16
  (Projection Text)
  (all ?.either
       ..base_10
       (..range (character "a") (character "f"))
       (..range (character "A") (character "F"))))

(the .public alpha (Projection Text) (?.either ..lower ..upper))
(the .public alpha_numeric (Projection Text) (?.either ..alpha ..base_10))

(template.with [<name>]
  [(exception.the .public (<name> [options character])
     (Exception [Text Character])
     (exception.report
      (list ["Options" (/.as_text options)]
            ["Character" (/.as_text (/.of_character character))])))]

  [[character_should_be]
   [character_should_not_be]])

(template.with [<name> <modifier> <exception>]
  [(the .public (<name> options)
     (-> Text
         (Projection Text))
     (function (_ [offset tape])
       (when (/.character offset tape)
         {.:Some output}
         (let [output' (/.of_character output)]
           (if (<modifier> (/.contains? output' options))
               {try.:Success [[(.i64_+# 1 offset) tape] output']}
               (exception.except <exception> [options output])))

         _
         (exception.except ..cannot_parse []))))]

  [[one_of  |>   ..character_should_be]
   [none_of .not ..character_should_not_be]])

(exception.the .public (character_does_not_satisfy_predicate character)
  (Exception Character)
  (exception.report
   (list ["Character" (/.as_text (/.of_character character))])))

(the .public (satisfies projection)
  (-> (Predicate Character)
      (Projection Text))
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.:Some output}
      (if (projection output)
          {try.:Success [[(.i64_+# 1 offset) tape] (/.of_character output)]}
          (exception.except ..character_does_not_satisfy_predicate [output]))

      _
      (exception.except ..cannot_parse []))))

(the .public space
  (Projection Text)
  (..satisfies /.space?))

(the .public (and left right)
  (-> (Projection Text) (Projection Text)
      (Projection Text))
  (monad.let ?.monad
    [=left left
     =right right]
    (pure (all /:composite =left =right))))

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> projection)
     (-> (Projection Text)
         (Projection Text))
     (|> projection
         <base>
         (by ?.monad each /.together)))]

  [[some ?.some "some"]
   [many ?.many "many"]])

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> amount projection)
     (-> Natural (Projection Text)
         (Projection Text))
     (|> projection
         (<base> amount)
         (by ?.monad each /.together)))]

  [[exactly  ?.exactly  "exactly"]
   [at_most  ?.at_most  "at most"]
   [at_least ?.at_least "at least"]])

(the .public (between minimum additional projection)
  (-> Natural Natural (Projection Text)
      (Projection Text))
  (|> projection
      (?.between minimum additional)
      (by ?.monad each /.together)))

(the .public (enclosed [start end] projection)
  (for_any (_ it)
    (-> [Text Text] (Projection it)
        (Projection it)))
  (|> projection
      (?.before (this end))
      (?.after (this start))))

(the .public (local local_input projection)
  (for_any (_ it)
    (-> Text (Projection it)
        (Projection it)))
  (function (_ real_input)
    (when (..value projection local_input)
      {try.:Failure error}
      {try.:Failure error}

      {try.:Success value}
      {try.:Success [real_input value]})))

(the .public (then structured text)
  (for_any (_ state it)
    (-> (Projection it)
        (?.Projection state Text)
        (?.Projection state it)))
  (monad.let ?.monad
    [raw text]
    (?.of_try (..value structured raw))))
