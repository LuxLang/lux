... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and not local)
   [abstract
    [monad (.only Monad
                  do)]]
   [control
    ["//" projection]
    ["[0]" maybe]
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["/" text (.use "[1]#[0]" monoid)
     [character (.only Character)]]
    ["[0]" product]
    [collection
     ["[0]" list (.use "[1]#[0]" mix)]]]
   [math
    [number
     ["n" natural (.use "[1]#[0]" base_10)]]]
   [meta
    ["[0]" code]
    [macro
     ["^" pattern]
     ["[0]" template]]]]])

(every .public Offset
  Natural)

(the beginning
  Offset
  0)

(exception.the .public cannot_parse)
(exception.the .public cannot_slice)

(every .public Projection
  (//.Projection [Offset Text]))

(every .public Slice
  (Record
   [#basis Offset
    #distance Offset]))

(the .public (slice projection)
  (-> (Projection Slice) (Projection Text))
  (do //.monad
    [[basis distance] projection]
    (function (_ (^.let input [offset tape]))
      (when (/.clip basis distance tape)
        {.#Some output}
        {try.#Success [input output]}

        {.#None}
        (exception.except ..cannot_slice [])))))

(the (left_over offset tape)
  (-> Offset Text Text)
  (|> tape (/.clip_since offset) maybe.trusted))

(exception.the .public (unconsumed_input [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n#injection offset)]
         ["Input size" (n#injection (/.size tape))]
         ["Remaining input" (..left_over offset tape)])))

(exception.the .public (expected_to_fail [offset tape])
  (Exception [Offset Text])
  (exception.report
   (list ["Offset" (n#injection offset)]
         ["Input" (..left_over offset tape)])))

(the .public (value projection input)
  (for_any (_ a) (-> (Projection a) Text (Try a)))
  (when (projection [..beginning input])
    {try.#Failure msg}
    {try.#Failure msg}
    
    {try.#Success [[end_offset _] output]}
    (if (n.= end_offset (/.size input))
      {try.#Success output}
      (exception.except ..unconsumed_input [end_offset input]))))

(the .public offset
  (Projection Offset)
  (function (_ (^.let input [offset tape]))
    {try.#Success [input offset]}))

(the (with_slices projection)
  (-> (Projection (List Slice)) (Projection Slice))
  (do //.monad
    [offset ..offset
     slices projection]
    (in (list#mix (function (_ [slice::basis slice::distance]
                               [total::basis total::distance])
                    [total::basis (.i64_+# slice::distance total::distance)])
                  [#basis offset
                   #distance 0]
                  slices))))

(the .public any
  (Projection Text)
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.#Some output}
      {try.#Success [[(.i64_+# 1 offset) tape] (/.of_character output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public any!
  (Projection Slice)
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.#Some _}
      {try.#Success [[(.i64_+# 1 offset) tape]
                     [#basis offset
                      #distance 1]]}

      _
      (exception.except ..cannot_slice []))))

(template.with [<name> <type> <any>]
  [(`` (the .public (<name> projection)
         (for_any (_ a) (-> (Projection a) (Projection <type>)))
         (function (_ input)
           (when (projection input)
             {try.#Failure msg}
             (<any> input)
             
             _
             (exception.except ..expected_to_fail input)))))]

  [not  Text  ..any]
  [not! Slice ..any!]
  )

(exception.the .public (cannot_match reference)
  (Exception Text)
  (exception.report
   (list ["Reference" (/.injection reference)])))

(the .public (this reference)
  (-> Text (Projection Any))
  (function (_ [offset tape])
    (when (/.index_since offset reference tape)
      {.#Some where}
      (if (n.= offset where)
        {try.#Success [[(.i64_+# (/.size reference) offset) tape]
                       []]}
        (exception.except ..cannot_match [reference]))

      _
      (exception.except ..cannot_match [reference]))))

(the .public end
  (Projection Any)
  (function (_ (^.let input [offset tape]))
    (if (n.= offset (/.size tape))
      {try.#Success [input []]}
      (exception.except ..unconsumed_input input))))

(the .public next
  (Projection Text)
  (function (_ (^.let input [offset tape]))
    (when (/.character offset tape)
      {.#Some output}
      {try.#Success [input (/.of_character output)]}

      _
      (exception.except ..cannot_parse []))))

(the .public remaining
  (Projection Text)
  (function (_ (^.let input [offset tape]))
    {try.#Success [input (..left_over offset tape)]}))

(the .public (range bottom top)
  (-> Natural Natural (Projection Text))
  (do //.monad
    [character any
     .let [character' (maybe.trusted (/.character 0 character))]
     _ (//.assertion (all /#composite "Character is not within range: " (/.of_character bottom) "-" (/.of_character top))
                     (.and (n.>= bottom character')
                           (n.<= top character')))]
    (in character)))

(the .public (range! bottom top)
  (-> Natural Natural (Projection Slice))
  (do //.monad
    [it ..any!
     character (..slice (in it))
     .let [character' (maybe.trusted (/.character 0 character))]
     _ (//.assertion (all /#composite "Character is not within range: " (/.of_character bottom) "-" (/.of_character top))
                     (.and (n.>= bottom character')
                           (n.<= top character')))]
    (in it)))

(template.with [<bottom> <top> <text> <slice>]
  [(the .public <text>
     (Projection Text)
     (..range (character <bottom>) (character <top>)))
   
   (the .public <slice>
     (Projection Slice)
     (..range! (character <bottom>) (character <top>)))]

  ["A" "Z" upper upper!]
  ["a" "z" lower lower!]
  ["0" "9" decimal decimal!]
  ["0" "7" octal octal!]
  )

(the .public alpha (Projection Text) (//.either ..lower ..upper))
(the .public alpha! (Projection Slice) (//.either ..lower! ..upper!))

(the .public alpha_num (Projection Text) (//.either ..alpha ..decimal))
(the .public alpha_num! (Projection Slice) (//.either ..alpha! ..decimal!))

(the .public hexadecimal
  (Projection Text)
  (all //.either
       ..decimal
       (..range (character "a") (character "f"))
       (..range (character "A") (character "F"))))

(the .public hexadecimal!
  (Projection Slice)
  (all //.either
       ..decimal!
       (..range! (character "a") (character "f"))
       (..range! (character "A") (character "F"))))

(template.with [<name>]
  [(exception.the .public (<name> [options character])
     (Exception [Text Character])
     (exception.report
      (list ["Options" (/.injection options)]
            ["Character" (/.injection (/.of_character character))])))]

  [character_should_be]
  [character_should_not_be]
  )

(template.with [<name> <modifier> <exception>]
  [(the .public (<name> options)
     (-> Text (Projection Text))
     (function (_ [offset tape])
       (when (/.character offset tape)
         {.#Some output}
         (let [output' (/.of_character output)]
           (if (<modifier> (/.contains? output' options))
             {try.#Success [[(.i64_+# 1 offset) tape] output']}
             (exception.except <exception> [options output])))

         _
         (exception.except ..cannot_parse []))))]

  [one_of  |>   ..character_should_be]
  [none_of .not ..character_should_not_be]
  )

(template.with [<name> <modifier> <exception>]
  [(the .public (<name> options)
     (-> Text (Projection Slice))
     (function (_ [offset tape])
       (when (/.character offset tape)
         {.#Some output}
         (let [output' (/.of_character output)]
           (if (<modifier> (/.contains? output' options))
             {try.#Success [[(.i64_+# 1 offset) tape]
                            [#basis offset
                             #distance 1]]}
             (exception.except <exception> [options output])))

         _
         (exception.except ..cannot_slice []))))]

  [one_of!  |>   ..character_should_be]
  [none_of! .not ..character_should_not_be]
  )

(exception.the .public (character_does_not_satisfy_predicate character)
  (Exception Character)
  (exception.report
   (list ["Character" (/.injection (/.of_character character))])))

(the .public (satisfies projection)
  (-> (-> Character Bit) (Projection Text))
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.#Some output}
      (if (projection output)
        {try.#Success [[(.i64_+# 1 offset) tape] (/.of_character output)]}
        (exception.except ..character_does_not_satisfy_predicate [output]))

      _
      (exception.except ..cannot_parse []))))

(the .public (satisfies! projection)
  (-> (-> Character Bit) (Projection Slice))
  (function (_ [offset tape])
    (when (/.character offset tape)
      {.#Some output}
      (if (projection output)
        {try.#Success [[(.i64_+# 1 offset) tape]
                       [#basis offset #distance 1]]}
        (exception.except ..character_does_not_satisfy_predicate [output]))

      _
      (exception.except ..cannot_parse []))))

(the .public space
  (Projection Text)
  (..satisfies /.space?))

(the .public space!
  (Projection Slice)
  (..satisfies! /.space?))

(the .public (and left right)
  (-> (Projection Text) (Projection Text) (Projection Text))
  (do //.monad
    [=left left
     =right right]
    (in (all /#composite =left =right))))

(the .public (and! left right)
  (-> (Projection Slice) (Projection Slice) (Projection Slice))
  (do //.monad
    [(open "left[0]") left
     (open "right[0]") right]
    (in [left#basis (.i64_+# left#distance right#distance)])))

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> projection)
     (-> (Projection Text) (Projection Text))
     (|> projection <base> (by //.monad each /.together)))]

  [some //.some "some"]
  [many //.many "many"]
  )

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> projection)
     (-> (Projection Slice) (Projection Slice))
     (with_slices (<base> projection)))]

  [some! //.some "some"]
  [many! //.many "many"]
  )

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> amount projection)
     (-> Natural (Projection Text) (Projection Text))
     (|> projection
         (<base> amount)
         (by //.monad each /.together)))]

  [exactly  //.exactly  "exactly"]
  [at_most  //.at_most  "at most"]
  [at_least //.at_least "at least"]
  )

(template.with [<name> <base> <doc_modifier>]
  [(the .public (<name> amount projection)
     (-> Natural (Projection Slice) (Projection Slice))
     (with_slices
       (<base> amount projection)))]

  [exactly!  //.exactly  "exactly"]
  [at_most!  //.at_most  "at most"]
  [at_least! //.at_least "at least"]
  )

(the .public (between minimum additional projection)
  (-> Natural Natural (Projection Text) (Projection Text))
  (|> projection
      (//.between minimum additional)
      (by //.monad each /.together)))

(the .public (between! minimum additional projection)
  (-> Natural Natural (Projection Slice) (Projection Slice))
  (with_slices
    (//.between minimum additional projection)))

(the .public (enclosed [start end] projection)
  (for_any (_ a) (-> [Text Text] (Projection a) (Projection a)))
  (|> projection
      (//.before (this end))
      (//.after (this start))))

(the .public (local local_input projection)
  (for_any (_ a) (-> Text (Projection a) (Projection a)))
  (function (_ real_input)
    (when (..value projection local_input)
      {try.#Failure error}
      {try.#Failure error}

      {try.#Success value}
      {try.#Success [real_input value]})))

(the .public (then structured text)
  (for_any (_ s a)
    (-> (Projection a)
        (//.Projection s Text)
        (//.Projection s a)))
  (do //.monad
    [raw text]
    (//.of_try (..value structured raw))))
