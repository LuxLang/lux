... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag text)
   [abstract
    ["//" projection]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [data
    [text
     ["%" \\injection]]
    [collection
     ["[0]" list]
     ["[0]" dictionary]]]
   [meta
    ["[0]" name]]
   [aspect
    ["[0]" view]]]]
 [\\library
  ["[0]" / (.only Attribute Attrs Tag XML)]])

(every .public (Projection it)
  (//.Projection [Attrs (Stack XML)] it))

(exception.the .public empty_input)
(exception.the .public unexpected_input)

(exception.the .public (wrong_tag [expected actual])
  (Exception [Tag Tag])
  (exception.report
   (list ["Expected" (%.text (/.tag expected))]
         ["Actual" (%.text (/.tag actual))])))

(exception.the .public (unknown_attribute [expected available])
  (Exception [Attribute (List Attribute)])
  (exception.report
   (list ["Expected" (%.text (/.attribute expected))]
         ["Available" (exception.listing (|>> /.attribute %.text) available)])))

(exception.the .public (unconsumed_inputs inputs)
  (Exception (List XML))
  (exception.report
   (list ["Inputs" (exception.listing (by /.text as) inputs)])))

(the (value' projection attrs documents)
  (for_any (_ it)
    (-> (Projection it) Attrs (List XML)
        (Try it)))
  (when (//.value [attrs (view.as list.stack documents)] projection)
    {try.#Success [[attrs' (stack)] output]}
    {try.#Success output}

    {try.#Success [[attrs' remaining] output]}
    (exception.except ..unconsumed_inputs [(view.of list.stack remaining)])
    
    {try.#Failure error}
    {try.#Failure error}))

(the .public (value documents projection)
  (for_any (_ it)
    (-> (List XML) (Projection it)
        (Try it)))
  (..value' projection /.attributes documents))

(the .public text
  (Projection Text)
  (function (_ [attrs documents])
    (when documents
      {.#Empty}
      (exception.except ..empty_input [])
      
      {.#Top head tail}
      (when head
        {/.#Text value}
        {try.#Success [[attrs tail] value]}
        
        {/.#Node _}
        (exception.except ..unexpected_input [])))))

(the .public tag
  (Projection Tag)
  (function (_ [attrs documents])
    (when documents
      {.#Empty}
      (exception.except ..empty_input [])
      
      {.#Top head _}
      (when head
        {/.#Text _}
        (exception.except ..unexpected_input [])
        
        {/.#Node tag _ _}
        {try.#Success [[attrs documents] tag]}))))

(the .public (attribute name)
  (-> Attribute
      (Projection Text))
  (function (_ [attrs documents])
    (when (dictionary.value name attrs)
      {try.#Success value}
      {try.#Success [[attrs documents] value]}

      failure
      (exception.except ..unknown_attribute [name (dictionary.keys attrs)]))))

(the .public (node expected projection)
  (for_any (_ it)
    (-> Tag (Projection it)
        (Projection it)))
  (function (_ [attrs documents])
    (when documents
      {.#Empty}
      (exception.except ..empty_input [])
      
      {.#Top head tail}
      (when head
        {/.#Text _}
        (exception.except ..unexpected_input [])
        
        {/.#Node actual attrs' children}
        (if (name.= expected actual)
            (|> children
                (..value' projection attrs')
                (try#each (|>> [[attrs tail]])))
            (exception.except ..wrong_tag [expected actual]))))))

(the .public any
  (Projection XML)
  (function (_ [attrs documents])
    (when documents
      {.#Empty}
      (exception.except ..empty_input [])
      
      {.#Top head tail}
      {try.#Success [[attrs tail] head]})))

(exception.the .public nowhere)

(the .public (somewhere projection)
  (for_any (_ it)
    (Change (Projection it)))
  (function (again [attrs input])
    (when (//.value [attrs input] projection)
      {try.#Success [[attrs remaining] output]}
      {try.#Success [[attrs remaining] output]}
      
      {try.#Failure error}
      (when input
        {.#Empty}
        (exception.except ..nowhere [])
        
        {.#Top head tail}
        (monad.let try.monad
          [[[attrs tail'] output] (again [attrs tail])]
          (pure [[attrs {.#Top head tail'}]
                 output]))))))
