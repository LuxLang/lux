... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["//" projection (.use "[1]#[0]" functor)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" bit]
    ["[0]" text (.use "[1]#[0]" monoid)]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]
     ["[0]" stack (.use "[1]#[0]" functor)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     ["[0]" decimal]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" code]]]]
 [\\library
  ["[0]" / (.only JSON)]])

(every .public (Projection it)
  (//.Projection (Stack JSON) it))

(exception.the .public (unconsumed_input input)
  (Exception (Stack JSON))
  (exception.report
   (list ["Input" (exception.listing /.as_text (list.of_stack input))])))

(exception.the .public empty_input)

(the .public (value projection json)
  (for_any (_ it)
    (-> (Projection it) JSON
        (Try it)))
  (when (//.value projection (stack json))
    {try.#Success [remainder output]}
    (when remainder
      {.#Empty}
      {try.#Success output}

      _
      (exception.except ..unconsumed_input remainder))
    
    {try.#Failure error}
    {try.#Failure error}))

(the .public any
  (Projection JSON)
  (<| (function (_ inputs))
      (when inputs
        {.#Empty}
        (exception.except ..empty_input [])
        
        {.#Top head tail}
        {try.#Success [tail head]})))

(exception.the .public (unexpected_value value)
  (Exception JSON)
  (exception.report
   (list ["Value" (/.as_text value)])))

(template.with [<name> <type> <tag>]
  [(the .public <name>
     (Projection <type>)
     (do //.monad
       [head ..any]
       (when head
         {<tag> value}
         (in value)

         _
         (//.failure (exception.error ..unexpected_value [head])))))]

  [null    /.Null    /.#Null]
  [boolean /.Boolean /.#Boolean]
  [number  /.Number  /.#Number]
  [string  /.String  /.#String]
  )

(exception.the .public (value_mismatch [reference sample])
  (Exception [JSON JSON])
  (exception.report
   (list ["Reference" (/.as_text reference)]
         ["Sample" (/.as_text sample)])))

(template.with [<test> <check> <type> <equivalence> <tag>]
  [(the .public (<test> test)
     (-> <type>
         (Projection Bit))
     (do //.monad
       [head ..any]
       (when head
         {<tag> value}
         (in (by <equivalence> = test value))

         _
         (//.failure (exception.error ..unexpected_value [head])))))

   (the .public (<check> test)
     (-> <type>
         (Projection Any))
     (do //.monad
       [head ..any]
       (when head
         {<tag> value}
         (if (by <equivalence> = test value)
           (in [])
           (//.failure (exception.error ..value_mismatch [{<tag> test} {<tag> value}])))

         _
         (//.failure (exception.error ..unexpected_value [head])))))]

  [boolean? this_boolean /.Boolean bit.equivalence /.#Boolean]
  [number?  this_number  /.Number  decimal.equivalence /.#Number]
  [string?  this_string  /.String  text.equivalence /.#String]
  )

(the .public (nullable projection)
  (for_any (_ it)
    (-> (Projection it)
        (Projection (Maybe it))))
  (//.or ..null
         projection))

(the .public (array projection)
  (for_any (_ it)
    (-> (Projection it)
        (Projection it)))
  (do //.monad
    [head ..any]
    (when head
      {/.#Array values}
      (when (//.value projection (list.as_stack values))
        {try.#Success [remainder output]}
        (when remainder
          {.#Empty}
          (in output)

          _
          (//.failure (exception.error ..unconsumed_input remainder)))

        {try.#Failure error}
        (//.failure error))

      _
      (//.failure (exception.error ..unexpected_value [head])))))

(the .public (object projection)
  (for_any (_ it)
    (-> (Projection it)
        (Projection it)))
  (do //.monad
    [head ..any]
    (when head
      {/.#Object kvs}
      (when (|> kvs
                dictionary.entries
                (list#each (function (_ [key value])
                             (list {/.#String key} value)))
                list#conjoint
                list.as_stack
                (//.value projection))
        {try.#Failure error}
        (//.failure error)

        {try.#Success [remainder output]}
        (when remainder
          {.#Empty}
          (in output)

          _
          (//.failure (exception.error ..unconsumed_input remainder))))
      
      _
      (//.failure (exception.error ..unexpected_value [head])))))

(the .public (field field_name projection)
  (for_any (_ it)
    (-> Text (Projection it)
        (Projection it)))
  (function (again inputs)
    (when inputs
      (stack.partial {/.#String key} value inputs')
      (if (text.= key field_name)
        (when (//.value projection (stack value))
          {try.#Success [{.#Empty} output]}
          {try.#Success [inputs' output]}

          {try.#Success [inputs'' _]}
          (exception.except ..unconsumed_input inputs'')

          {try.#Failure error}
          {try.#Failure error})
        (do try.monad
          [[inputs'' output] (again inputs')]
          (in [(stack.partial {/.#String key} value inputs'')
               output])))

      {.#Empty}
      (exception.except ..empty_input [])

      _
      (exception.except ..unconsumed_input inputs))))

(the .public dictionary
  (for_any (_ it)
    (-> (Projection it)
        (Projection (Dictionary Text it))))
  (|>> (//.and ..string)
       //.some
       ..object
       (//#each (|>> list.of_stack (dictionary.of_list text.hash)))))
