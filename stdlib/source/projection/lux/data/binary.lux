... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and or text natural integer revolution stack name type list)
   [ffi (.only)]
   [abstract
    [hash (.only Hash)]
    [monad (.only do)]
    ["//" projection (.use "[1]#[0]" monad)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["/" binary
     ["[1]" \\unsafe (.only Binary)]]
    [text
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" stack]
     ["[0]" sequence (.only Sequence)]
     ["[0]" set (.only Set)]
     [array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" natural]
     ["[0]" decimal]]]
   [macro
    ["^" pattern]
    ["[0]" template]
    ["[0]" expansion]]
   [type (.only sharing)]
   [time
    ["[0]" instant (.only Instant)]
    ["[0]" duration (.only Duration)]]]])

(.every .public Offset
  Natural)

(.every .public Projection
  (//.Projection [Offset Binary]))

(exception.the .public (binary_was_not_fully_read [binary_length bytes_read])
  (Exception [Natural Natural])
  (exception.report
   (.list ["Binary length" (%.natural binary_length)]
          ["Bytes read" (%.natural bytes_read)])))

(template.with [<name> <extension>]
  [(the <name>
     (template.macro (<name> <parameter> <subject>)
       [(<extension> <parameter> <subject>)]))]

  [n#= .i64_=#]
  [n#+ .i64_+#]
  [n#- .i64_-#]
  )

(the .public (value projection input)
  (for_any (_ it)
    (-> (Projection it) Binary
        (Try it)))
  (when (projection [0 input])
    {try.#Success [[end _] output]}
    (let [length (/.size input)]
      (if (n#= end length)
          {try.#Success output}
          (exception.except ..binary_was_not_fully_read [length end])))

    failure
    (as_expected failure)))

(the .public end?
  (Projection Bit)
  (function (_ (^.let input [offset data]))
    {try.#Success [input (n#= offset (/.size data))]}))

(the .public offset
  (Projection Offset)
  (function (_ (^.let input [offset data]))
    {try.#Success [input offset]}))

(the .public remaining
  (Projection Natural)
  (function (_ (^.let input [offset data]))
    {try.#Success [input (n#- offset (/.size data))]}))

(.every .public Size
  Natural)

(the .public size_08 Size 1)
(the .public size_16 Size (n.* 2 size_08))
(the .public size_32 Size (n.* 2 size_16))
(the .public size_64 Size (n.* 2 size_32))

(exception.the .public (range_out_of_bounds [length start end])
  (Exception [Natural Natural Natural])
  (exception.report
   (.list ["Length" (%.natural length)]
          ["Range start" (%.natural start)]
          ["Range end" (%.natural end)])))

(template.with [<name> <size> <read>]
  [(the .public <name>
     (Projection I64)
     (function (_ [start binary])
       (let [end (n#+ <size> start)]
         (if (n.< end (/.size binary))
             (exception.except ..range_out_of_bounds [(/.size binary) start end])
             (|> (<read> start binary)
                 [[end binary]]
                 {try.#Success})))))]

  [bits_08 ..size_08 /.bits_08]
  [bits_16 ..size_16 /.bits_16]
  [bits_32 ..size_32 /.bits_32]
  [bits_64 ..size_64 /.bits_64]
  )

(template.with [<name> <type>]
  [(the .public <name>
     (Projection <type>)
     ..bits_64)]

  [natural Natural]
  [integer Integer]
  [revolution Revolution]
  )

(the .public decimal
  (Projection Decimal)
  (//#each decimal.of_bits ..bits_64))

(exception.the .public (invalid_tag [range byte])
  (Exception [Natural Natural])
  (exception.report
   (.list ["Tag range" (%.natural range)]
          ["Tag value" (%.natural byte)])))

(the !variant
  (template.macro (!variant <case>+)
    [(do [! //.monad]
       [flag (is (Projection Natural)
                 ..bits_08)]
       (expansion.let [<case>+' (template.spliced <case>+)]
         (`` (when flag
               (,, (template.with [<number> <tag> <projection>]
                     [<number> (`` (by ! each (|>> {(,, (template.spliced <tag>))}) <projection>))]

                     <case>+'))
               
               _ (//.of_try (exception.except ..invalid_tag [(template.amount [<case>+]) flag]))))))]))

(the .public (or left right)
  (for_any (_ left right)
    (-> (Projection left) (Projection right)
        (Projection (Or left right))))
  (!variant [[0 [.#Left] left]
             [1 [.#Right] right]]))

(the .public (rec body)
  (for_any (_ it)
    (-> (-> (Projection it) (Projection it))
        (Projection it)))
  (function (_ input)
    (let [projection (body (rec body))]
      (projection input))))

(the .public any
  (Projection Any)
  (//#pure []))

(exception.the .public (not_a_bit value)
  (Exception Natural)
  (exception.report
   (.list ["Expected values" "either 0 or 1"]
          ["Actual value" (%.natural value)])))

(the .public bit
  (Projection Bit)
  (do //.monad
    [value (is (Projection Natural)
               ..bits_08)]
    (when value
      0 (pure 0b)
      1 (pure 1b)
      _ (//.of_try (exception.except ..not_a_bit [value])))))

(the .public (segment size)
  (-> Natural
      (Projection Binary))
  (when size
    0 (//#pure (/.empty 0))
    _ (function (_ [start binary])
        (let [end (n#+ size start)]
          (if (n.< end (/.size binary))
              (exception.except ..range_out_of_bounds [(/.size binary) start end])
              (|> binary
                  (/.slice start size)
                  [[end binary]]
                  {try.#Success}))))))

(template.with [<size> <name> <bits>]
  [(`` (the .public <name>
         (Projection Binary)
         (do //.monad
           [size (//#each (|>> .natural) <bits>)]
           (..segment size))))]

  [08 binary_08 ..bits_08]
  [16 binary_16 ..bits_16]
  [32 binary_32 ..bits_32]
  [64 binary_64 ..bits_64]
  )

(template.with [<size> <name> <binary>]
  [(`` (the .public <name>
         (Projection Text)
         (do //.monad
           [utf8 <binary>]
           (//.of_try (by utf8.binary of utf8)))))]

  [08 utf8_08 ..binary_08]
  [16 utf8_16 ..binary_16]
  [32 utf8_32 ..binary_32]
  [64 utf8_64 ..binary_64]
  )

(the .public text ..utf8_64)

(template.with [<size> <name> <bits>]
  [(the .public (<name> valueP)
     (for_any (_ it)
       (-> (Projection it)
           (Projection (Sequence it))))
     (do //.monad
       [amount (is (Projection Natural)
                   <bits>)]
       (function (_ state)
         (loop (again [state state
                       index 0
                       output (sharing [it]
                                (is (Projection it)
                                    valueP)
                                (is (Sequence it)
                                    sequence.empty))])
           (if (n.< amount index)
               (when (valueP state)
                 {try.#Success [state value]}
                 (again state
                        (.++ index)
                        (sequence.suffix value output))

                 {try.#Failure error}
                 {try.#Failure error})
               {try.#Success [state output]})))))]

  [08 sequence_08 ..bits_08]
  [16 sequence_16 ..bits_16]
  [32 sequence_32 ..bits_32]
  [64 sequence_64 ..bits_64]
  )

(the .public (list it)
  (for_any (_ it)
    (-> (Projection it)
        (Projection (List it))))
  (do //.monad
    [amount (is (Projection Natural)
                ..natural)]
    (//.exactly amount it)))

(the .public maybe
  (for_any (_ it)
    (-> (Projection it)
        (Projection (Maybe it))))
  (..or ..any))

(the .public (stack value)
  (for_any (_ it)
    (-> (Projection it)
        (Projection (Stack it))))
  (..rec
   (|>> (//.and value)
        (..or ..any))))

(exception.the .public set_elements_are_not_unique)

(the .public (set hash value)
  (for_any (_ it)
    (-> (Hash it) (Projection it)
        (Projection (Set it))))
  (do //.monad
    [raw (..stack value)
     .let [output (set.of_list hash (list.of_stack raw))]
     _ (//.assertion (exception.error ..set_elements_are_not_unique [])
                     (n#= (stack.size raw)
                          (set.size output)))]
    (pure output)))

(the .public name
  (Projection Name)
  (//.and ..text ..text))

(the .public type
  (Projection Type)
  (..rec
   (function (_ type)
     (let [indexed ..natural]
       (!variant [[0 [.#Nominal] (//.and ..text (..list (//.and bit type)))]
                  [1 [.#Parameter] (//.and bit indexed)]
                  [2 [.#Variable] indexed]
                  [3 [.#Opaque] indexed]
                  [4 [.#Quantification] (all //.and bit (..stack (//.and type type)) type)]
                  [5 [.#Reification] (//.and type type)]
                  [6 [.#Named] (//.and ..name type)]])))))

(the .public provenance
  (Projection Provenance)
  (all //.and ..text ..natural ..natural))

(the .public code
  (Projection Code)
  (..rec
   (function (_ code)
     (!variant [[0 [.#Bit] (//.and ..provenance ..bit)]
                [1 [.#Natural] (//.and ..provenance ..natural)]
                [2 [.#Integer] (//.and ..provenance ..integer)]
                [3 [.#Revolution] (//.and ..provenance ..revolution)]
                [4 [.#Decimal] (//.and ..provenance ..decimal)]
                [5 [.#Text] (//.and ..provenance ..text)]
                [6 [.#Name] (//.and ..provenance ..name)]
                [7 [.#Form] (//.and ..provenance (..list code))]
                [8 [.#Variant] (//.and ..provenance (..list code))]
                [9 [.#Tuple] (//.and ..provenance (..list code))]]))))

(template.with [,name ,type ,of_millis]
  [(the .public ,name
     (Projection ,type)
     (by //.monad each ,of_millis ..integer))]

  [instant Instant instant.of_millis]
  [duration Duration duration.of_millis]
  )
