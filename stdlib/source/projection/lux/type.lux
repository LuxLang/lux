... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except function local variant tuple argument existential)
   [abstract
    [monad (.only do)]
    ["//" projection]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]
    ["[0]" exception (.only Exception)]]
   ["[0]" function]
   [data
    ["[0]" text (.only \n)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor monoid)]
     ["[0]" dictionary (.only Dictionary)]]]
   [math
    [number
     [/64
      ["n" natural (.use "[1]#[0]" base_10)]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [meta
    ["[0]" code]]]]
 [\\library
  ["[0]" / (.only)
   ["[0]" check]]])

(the .public recursion_parameter
  (template.macro (_)
    [{.#Nominal "" (.list)}]))

(the .public recursive_definition
  (template.macro (_ ,type)
    [{.#Reification (..recursion_parameter)
                    {.#Quantification .universal (stack) ,type}}]))

(the .public recursive_iteration
  (template.macro (_)
    [{.#Reification (..recursion_parameter)
                    {.#Parameter .argument 0}}]))

(template.with [<name>]
  [(exception.the .public (<name> type)
     (Exception Type)
     (exception.report
      (list ["Type" (/.as_text type)])))]

  [not_existential]
  [not_recursive]
  [not_named]
  [not_parameter]
  [unknown_parameter]
  [not_function]
  [not_reification]
  [not_polymorphic]
  [not_variant]
  [not_tuple]
  )

(template.with [<name>]
  [(exception.the .public (<name> [expected actual])
     (Exception [Type Type])
     (exception.report
      (list ["Expected" (/.as_text expected)]
            ["Actual" (/.as_text actual)])))]

  [types_do_not_match]
  [wrong_parameter]
  )

(exception.the .public empty_input)

(exception.the .public (unconsumed_input remaining)
  (Exception (List Type))
  (exception.report
   (list ["Types" (|> remaining
                      (list#each (|>> /.as_text (text \n "* ")))
                      (text.interposed ""))])))

(every .public Env
  (Dictionary Natural [[Type Code]
                       [Type Code]]))

(every .public (Projection it)
  (//.Projection [Env Natural (List Type)]
                 it))

(the .public fresh
  Env
  (dictionary.empty n.hash))

(the (value' env poly types)
  (for_any (_ it)
    (-> Env (Projection it) (List Type)
        (Try it)))
  (when (//.value [env 0 types] poly)
    {try.#Success [[env' items_read types] output]}
    (if (n.= items_read (list.size types))
        {try.#Success output}
        (exception.except ..unconsumed_input [types]))

    {try.#Failure error}
    {try.#Failure error}))

(the .public (value poly type)
  (for_any (_ it)
    (-> (Projection it) Type
        (Try it)))
  (value' ..fresh poly (list type)))

(the .public env
  (Projection Env)
  (.function (_ [env items_read inputs])
    {try.#Success [[env items_read inputs] env]}))

(the .public arity
  (Projection Natural)
  (.function (_ [env items_read inputs])
    {try.#Success [[env items_read inputs] (dictionary.size env)]}))

(the (with_env temp poly)
  (for_any (_ it)
    (-> Env (Projection it)
        (Projection it)))
  (.function (_ [env items_read inputs])
    (when (//.value [temp items_read inputs] poly)
      {try.#Success [[_ items_read remaining] output]}
      {try.#Success [[env items_read remaining] output]}

      {try.#Failure error}
      {try.#Failure error})))

(the .public next
  (Projection Type)
  (.function (_ [env items_read inputs])
    (when (list.item items_read inputs)
      {try.#Success item}
      {try.#Success [[env items_read inputs] item]}

      {try.#Failure _}
      (exception.except ..empty_input []))))

(the .public any
  (Projection Type)
  (.function (_ [env items_read inputs])
    (when (list.item items_read inputs)
      {try.#Success item}
      {try.#Success [[env (++ items_read) inputs] item]}

      {try.#Failure _}
      (exception.except ..empty_input []))))

(the .public (local types poly)
  (for_any (_ it)
    (-> (List Type) (Projection it)
        (Projection it)))
  (.function (_ [env items_read pass_through])
    (try#each (|>> [[env items_read pass_through]])
              (value' env poly types))))

(the (label prefix idx)
  (-> Text Natural
      Code)
  (code.local (text prefix text.tab (n#as idx))))

(the .public (with_extension [abstraction argument] poly)
  (for_any (_ it)
    (-> [Type Type] (Projection it)
        (Projection [[Code Code] it])))
  (.function (_ [env inputs])
    (let [current_id (dictionary.size env)
          'abstraction (label "abstraction" current_id)
          'argument (label "argument" current_id)]
      (when (//.value [(dictionary.has current_id
                                       [[abstraction 'abstraction]
                                        [argument 'argument]]
                                       env)
                       inputs]
                      poly)
        {try.#Success [[_ inputs'] output]}
        {try.#Success [[env inputs'] [['abstraction 'argument] output]]}

        {try.#Failure error}
        {try.#Failure error}))))

(template.with [<name> <flattener> <exception>]
  [(`` (the .public (<name> poly)
         (for_any (_ it)
           (-> (Projection it)
               (Projection it)))
         (do //.monad
           [headT ..any]
           (let [members (<flattener> (/.anonymous headT))]
             (if (n.> 1 (list.size members))
                 (local members poly)
                 (//.failure (exception.error <exception> [headT])))))))]

  [variant /.flat_variant ..not_variant]
  [tuple   /.flat_tuple   ..not_tuple]
  )

(the polymorphic'
  (Projection [Natural Type])
  (do //.monad
    [headT any
     .let [[num_arg bodyT] (/.flat_univ_q (/.anonymous headT))]]
    (if (n.= 0 num_arg)
        (//.failure (exception.error ..not_polymorphic headT))
        (pure [num_arg bodyT]))))

(the .public (polymorphic poly)
  (for_any (_ it)
    (-> (Projection it)
        (Projection [Code (List Code) it])))
  (do [! //.monad]
    [headT any
     funcI (by ! each dictionary.size ..env)
     [num_args non_poly] (local (list headT) ..polymorphic')
     env ..env
     .let [funcL (label "abstraction" funcI)
           [all_varsL env'] (loop (again [current_arg 0
                                          env' env
                                          all_varsL (is (List Code) (list))])
                              (if (n.< num_args current_arg)
                                  (if (n.= 0 current_arg)
                                      (let [varL (label "argument" (++ funcI))]
                                        (again (++ current_arg)
                                               (|> env'
                                                   (dictionary.has funcI [[headT funcL]
                                                                          [{.#Parameter .argument funcI} varL]]))
                                               (list#composite (list varL) all_varsL)))
                                      (let [partial_level (n.+ funcI)
                                            partial_var (|>> partial_level (label "partial"))

                                            partial_argument (partial_level current_arg)
                                            'partial_var (partial_var current_arg)
                                            partialC (` ((, funcL) (,* (|> (list.indices num_args)
                                                                           (list#each partial_var)
                                                                           list.reversed))))]
                                        (again (++ current_arg)
                                               (|> env'
                                                   (dictionary.has partial_argument [[(recursion_parameter)
                                                                                      partialC]
                                                                                     [{.#Parameter .argument partial_argument}
                                                                                      'partial_var]]))
                                               (list#composite (list 'partial_var) all_varsL))))
                                  [all_varsL env']))]]
    (<| (with_env env')
        (local (list non_poly))
        (do !
          [output poly]
          (pure [funcL all_varsL output])))))

(the .public (function in_poly out_poly)
  (for_any (_ input output)
    (-> (Projection input) (Projection output)
        (Projection [input output])))
  (do //.monad
    [headT any
     .let [[inputsT outputT] (/.flat_function (/.anonymous headT))]]
    (if (n.> 0 (list.size inputsT))
        (//.and (local inputsT in_poly)
                (local (list outputT) out_poly))
        (//.failure (exception.error ..not_function headT)))))

(the .public (reified poly)
  (for_any (_ it)
    (-> (Projection it)
        (Projection it)))
  (do //.monad
    [headT any
     .let [[funcT paramsT] (/.flat_reification (/.anonymous headT))]]
    (if (n.= 0 (list.size paramsT))
        (//.failure (exception.error ..not_reification headT))
        (..local (list#composite (list funcT) paramsT) poly))))

(template.with [<name> <test>]
  [(the .public (<name> expected)
     (-> Type
         (Projection Any))
     (do //.monad
       [actual any]
       (if (<test> expected actual)
           (pure [])
           (//.failure (exception.error ..types_do_not_match [expected actual])))))]

  [exactly /.=]
  [sub     check.<]
  [super   check.>]
  )

(the .public (argument env idx)
  (-> Env Natural
      Natural)
  (|> (dictionary.size env)
      --
      (n.- idx)))

(the .public parameter
  (Projection Code)
  (do //.monad
    [env ..env
     headT any]
    (when headT
      {.#Parameter parameter idx}
      (when (dictionary.value (..argument env idx) env)
        {try.#Success [[abstraction_type abstraction_code]
                       [argument_type argument_code]]}
        (pure (when parameter
                .abstraction abstraction_code
                .argument argument_code))

        failure
        (//.failure (exception.error ..unknown_parameter [headT])))

      _
      (//.failure (exception.error ..not_parameter [headT])))))

(the .public (this_parameter id)
  (-> Natural
      (Projection Any))
  (do //.monad
    [env ..env
     headT any]
    (when headT
      {.#Parameter .argument idx}
      (if (n.= id (..argument env idx))
          (pure [])
          (//.failure (exception.error ..wrong_parameter [{.#Parameter .argument id} headT])))

      _
      (//.failure (exception.error ..not_parameter headT)))))

(the .public existential
  (Projection Natural)
  (do //.monad
    [headT any]
    (when headT
      {.#Opaque ex_id}
      (pure ex_id)

      _
      (//.failure (exception.error ..not_existential headT)))))

(the .public named
  (Projection [Name Type])
  (do //.monad
    [inputT any]
    (when inputT
      {.#Named name anonymousT}
      (pure [name anonymousT])

      _
      (//.failure (exception.error ..not_named inputT)))))

(the .public (recursive poly)
  (for_any (_ it)
    (-> (Projection it)
        (Projection [Code it])))
  (do [! //.monad]
    [headT any]
    (when (/.anonymous headT)
      (..recursive_definition headT')
      (do !
        [[[recT _] output] (|> poly
                               (with_extension [headT (recursion_parameter)])
                               (local (list headT')))]
        (pure [recT output]))

      _
      (//.failure (exception.error ..not_recursive headT)))))

(the .public recursive_self
  (Projection Code)
  (do //.monad
    [env ..env
     headT any]
    (when (/.anonymous headT)
      (^.multi (..recursive_iteration)
               [(dictionary.value 0 env) {try.#Success [[self_type self_call]
                                                        [argument_type argument_call]]}])
      (pure self_call)

      _
      (//.failure (exception.error ..not_recursive headT)))))

(the .public recursive_call
  (Projection Code)
  (do [! //.monad]
    [env ..env
     [funcT argsT] (..reified (//.and any (//.many any)))
     _ (local (list funcT) (..this_parameter 0))
     allC (let [allT (list#composite (list funcT) argsT)]
            (|> allT
                (list.each' ! (function.constant ..parameter))
                (local allT)))]
    (pure (` ((,* allC))))))
