(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [math
    ["." random]
    [number
     ["n" nat]]]]
  {1
   ["." / (#+ CoMonad)]}
  [//
   [functor (#+ Injection Comparison)]])

(def: (left-identity injection (^open "_//."))
  (All [f] (-> (Injection f) (CoMonad f) Test))
  (do {! random.monad}
    [sample random.nat
     morphism (\ ! map (function (_ diff)
                         (|>> _//unwrap (n.+ diff)))
                 random.nat)
     #let [start (injection sample)]]
    (_.test "Left identity."
            (n.= (morphism start)
                 (|> start _//split (_//map morphism) _//unwrap)))))

(def: (right-identity injection comparison (^open "_//."))
  (All [f] (-> (Injection f) (Comparison f) (CoMonad f) Test))
  (do random.monad
    [sample random.nat
     #let [start (injection sample)
           == (comparison n.=)]]
    (_.test "Right identity."
            (== start
                (|> start _//split (_//map _//unwrap))))))

(def: (associativity injection comparison (^open "_//."))
  (All [f] (-> (Injection f) (Comparison f) (CoMonad f) Test))
  (do {! random.monad}
    [sample random.nat
     increase (\ ! map (function (_ diff)
                         (|>> _//unwrap (n.+ diff)))
                 random.nat)
     decrease (\ ! map (function (_ diff)
                         (|>> _//unwrap(n.- diff)))
                 random.nat)
     #let [start (injection sample)
           == (comparison n.=)]]
    (_.test "Associativity."
            (== (|> start _//split (_//map (|>> _//split (_//map increase) decrease)))
                (|> start _//split (_//map increase) _//split (_//map decrease))))))

(def: #export (spec injection comparison subject)
  (All [f] (-> (Injection f) (Comparison f) (CoMonad f) Test))
  (<| (_.for [/.CoMonad])
      ($_ _.and
          (..left-identity injection subject)
          (..right-identity injection comparison subject)
          (..associativity injection comparison subject)
          )))
