(.module:
  [lux #*
   [abstract
    [equivalence (#+ Equivalence)]
    [monad (#+ do)]]
   [data
    [number
     ["n" nat]]]
   [control
    ["." function]]
   [math
    ["." random]]
   ["_" test (#+ Test)]]
  {1
   ["." / (#+ Functor)]})

(def: (identity equivalence value (^open "@//."))
  (All [f a] (-> (Equivalence (f a)) (f a) (Functor f) Test))
  (_.test "Law of identity."
          (equivalence
           (@//map function.identity value)
           value)))

(def: #export (spec equivalence value functor)
  (All [f a] (-> (Equivalence (f a)) (f a) (Functor f) Test))
  (do random.monad
    [sample random.nat]
    (<| (_.for [/.Functor])
        ($_ _.and
            (..identity equivalence value functor)
            ))))
