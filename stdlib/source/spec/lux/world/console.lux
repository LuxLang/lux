(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    [io (#+ IO)]
    ["." try]
    [security
     ["!" capability]]
    [concurrency
     ["." promise (#+ Promise)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export (spec console)
  (-> (IO (/.Console Promise)) Test)
  (<| (_.with-cover [/.Console])
      (do {! random.monad}
        [message (random.ascii/alpha 10)]
        (wrap (do promise.monad
                [console (promise.future console)
                 ?read (!.use (\ console read) [])
                 ?read-line (!.use (\ console read-line) [])
                 ?write (!.use (\ console write) [message])
                 ?close/good (!.use (\ console close) [])
                 ?close/bad (!.use (\ console close) [])]
                ($_ _.and'
                    (_.cover' [/.Can-Read]
                              (case [?read ?read-line]
                                [(#try.Success _) (#try.Success _)]
                                true

                                _
                                false))
                    (_.cover' [/.Can-Write]
                              (case ?write
                                (#try.Success _)
                                true
                                
                                _
                                false))
                    (_.cover' [/.Can-Close]
                              (case [?close/good ?close/bad]
                                [(#try.Success _) (#try.Failure _)]
                                true
                                
                                _
                                false))
                    ))))))
