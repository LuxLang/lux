(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try]
    [security
     ["!" capability]]
    [concurrency
     ["." promise (#+ Promise)]]]
   [math
    ["." random]]]
  {1
   ["." /]})

(def: #export (spec console)
  (-> (/.Console Promise) Test)
  (<| (_.with-cover [/.Console])
      (do {! random.monad}
        [message (random.ascii/alpha 10)]
        (wrap (do promise.monad
                [?read (!.use (:: console read) [])
                 ?read-line (!.use (:: console read-line) [])
                 ?write (!.use (:: console write) [message])
                 ?close/good (!.use (:: console close) [])
                 ?close/bad (!.use (:: console close) [])]
                ($_ _.and'
                    (_.claim [/.Can-Read]
                             (case [?read ?read-line]
                               [(#try.Success _) (#try.Success _)]
                               true
                               
                               _
                               false))
                    (_.claim [/.Can-Write]
                             (case ?write
                               (#try.Success _)
                               true
                               
                               _
                               false))
                    (_.claim [/.Can-Close]
                             (case [?close/good ?close/bad]
                               [(#try.Success _) (#try.Failure _)]
                               true
                               
                               _
                               false))))))))
