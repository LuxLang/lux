(.module:
  [lux #*
   ["_" test (#+ Test)]
   [abstract
    [monad (#+ do)]]
   [control
    ["." try (#+ Try)]
    [concurrency
     ["." promise (#+ Promise)]]]
   [data
    ["." binary
     {[0 #test]
      ["_#" /]}]]
   [math
    ["." random]]]
  {#program
   ["." /
    ["#." remote]
    ["/#" // #_
     ["#." artifact (#+ Artifact)
      ["#/." extension]]]]}
  {#test
   ["_." // #_
    ["#." artifact]]})

(def: #export (spec valid_artifact invalid_artifact subject)
  (-> Artifact Artifact (/.Repository Promise) Test)
  (do random.monad
    [expected (_binary.random 100)]
    (wrap ($_ _.and'
              (do promise.monad
                [#let [good_uri (/remote.uri (get@ #//artifact.version valid_artifact) valid_artifact //artifact/extension.lux_library)]
                 good_upload! (\ subject upload good_uri expected)
                 good_download! (\ subject download good_uri)

                 #let [bad_uri (/remote.uri (get@ #//artifact.version invalid_artifact) invalid_artifact //artifact/extension.lux_library)]
                 bad_upload! (\ subject upload bad_uri expected)
                 bad_download! (\ subject download bad_uri)]
                (_.cover' [/.Repository]
                          (let [successfull_flow!
                                (case [good_upload! good_download!]
                                  [(#try.Success _) (#try.Success actual)]
                                  (\ binary.equivalence = expected actual)

                                  _
                                  false)

                                failed_flow!
                                (case [bad_upload! bad_download!]
                                  [(#try.Failure _) (#try.Failure _)]
                                  true

                                  _
                                  false)]
                            (and successfull_flow!
                                 failed_flow!))))
              ))))
