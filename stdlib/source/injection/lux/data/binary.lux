... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except and or nat int rev list symbol type)
   [ffi (.only)]
   [abstract
    [monoid (.only Monoid)]
    [monad (.only Monad do)]
    [equivalence (.only Equivalence)]]
   [control
    ["<>" projection (.use "[1]#[0]" monad)]
    ["[0]" pipe]
    ["[0]" function]]
   [data
    ["[0]" product]
    [text
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" functor)]
     ["[0]" set (.only Set)]
     [array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" nat]
     ["[0]" i64]
     ["[0]" dec]]]
   [meta
    [macro
     ["^" pattern]]]
   [world
    [time
     ["[0]" instant (.only Instant)]
     ["[0]" duration (.only Duration)]]]]]
 ["[0]" \\unsafe (.only Binary)]
 ["</>" \\projection (.only Offset Size)])

(with_template [<name> <extension> <post>]
  [(the <name>
     (template (<name> <parameter> <subject>)
       [(<post> (<extension> (.int <parameter>) (.int <subject>)))]))]

  [n#= .i64_=# .|>]
  [n#+ .i64_+# .nat]
  [n#* .int_*# .nat]
  )

(the mask
  (-> Size
      (I64 Any))
  (|>> (n#* i64.bits_per_byte) i64.mask))

(.every .public Mutation
  (-> [Offset Binary]
      [Offset Binary]))

(.every .public Specification
  [Size Mutation])

(the .public no_op
  Specification
  [0 function.identity])

(the .public (instance [size mutation])
  (-> Specification
      Binary)
  (|> size \\unsafe.empty [0] mutation product.right))

(the .public monoid
  (Monoid Specification)
  (implementation
   (the identity
     ..no_op)
   
   (the (composite [sizeL mutL] [sizeR mutR])
     [(n#+ sizeL sizeR)
      (|>> mutL mutR)])))

(.every .public (Injection of)
  (-> of
      Specification))

(the .public (value format value)
  (for_any (_ of)
    (-> (Injection of) of
        Binary))
  (..instance (format value)))

(with_template [<name> <size> <write>]
  [(the .public <name>
     (Injection (I64 Any))
     (function (_ value)
       [<size>
        (function (_ [offset binary])
          [(n#+ <size> offset)
           (<write> offset value binary)])]))]

  [bits_8  </>.size_8  \\unsafe.has_8!]
  [bits_16 </>.size_16 \\unsafe.has_16!]
  [bits_32 </>.size_32 \\unsafe.has_32!]
  [bits_64 </>.size_64 \\unsafe.has_64!]
  )

(the .public (or left right)
  (for_any (_ left right)
    (-> (Injection left) (Injection right)
        (Injection (Or left right))))
  (function (_ altV)
    (when altV
      (^.with_template [<number> <tag> <format>]
        [{<tag> caseV}
         (let [[caseS caseT] (<format> caseV)]
           [(.++ caseS)
            (function (_ [offset binary])
              (|> binary
                  (\\unsafe.has_8! offset <number>)
                  [(.++ offset)]
                  caseT))])])
      ([0 .#Left left]
       [1 .#Right right])
      )))

(the .public (and pre post)
  (for_any (_ left right)
    (-> (Injection left) (Injection right)
        (Injection (And left right))))
  (function (_ [preV postV])
    (of ..monoid composite (pre preV) (post postV))))

(the .public (rec body)
  (for_any (_ of)
    (-> (-> (Injection of) (Injection of))
        (Injection of)))
  (function (again value)
    (body again value)))

(the .public any
  (Injection Any)
  (function.constant ..no_op))

(the .public bit
  (Injection Bit)
  (|>> (pipe.when #0 0 #1 1) ..bits_8))

(with_template [<name> <type>]
  [(the .public <name>
     (Injection <type>)
     ..bits_64)]

  [nat Nat]
  [int Int]
  [rev Rev]
  )

(the .public dec
  (Injection Dec)
  (|>> dec.bits
       ..bits_64))

(the .public (segment size)
  (-> Nat
      (Injection Binary))
  (function (_ value)
    [size
     (function (_ [offset binary])
       [(n#+ size offset)
        (\\unsafe.copy! (n.min size (\\unsafe.size value))
                        0
                        value
                        offset
                        binary)])]))

(with_template [<name> <bits> <size> <write>]
  [(the .public <name>
     (Injection Binary)
     (let [mask (..mask <size>)]
       (function (_ value)
         (let [size (|> value \\unsafe.size (i64.and mask))
               size' (n#+ <size> size)]
           [size'
            (function (_ [offset binary])
              [(n#+ size' offset)
               (|> binary
                   (<write> offset size)
                   (\\unsafe.copy! size 0 value (n#+ <size> offset)))])]))))]

  [binary_8  ..bits_8  </>.size_8  \\unsafe.has_8!]
  [binary_16 ..bits_16 </>.size_16 \\unsafe.has_16!]
  [binary_32 ..bits_32 </>.size_32 \\unsafe.has_32!]
  [binary_64 ..bits_64 </>.size_64 \\unsafe.has_64!]
  )

(with_template [<name> <binary>]
  [(the .public <name>
     (Injection Text)
     (|>> (of utf8.codec injection) <binary>))]

  [utf8_8  ..binary_8]
  [utf8_16 ..binary_16]
  [utf8_32 ..binary_32]
  [utf8_64 ..binary_64]
  )

(the .public text ..utf8_64)

(with_template [<name> <size> <write>]
  [(the .public (<name> valueW)
     (for_any (_ of)
       (-> (Injection of)
           (Injection (Sequence of))))
     (function (_ value)
       (let [original_count (sequence.size value)
             capped_count (i64.and (..mask <size>)
                                   original_count)
             value (if (n#= original_count capped_count)
                     value
                     (|> value sequence.list (list.first capped_count) sequence.of_list))
             (open "specification#[0]") ..monoid
             specification/* (sequence#each valueW value)
             size (|> specification/*
                      (of sequence.mix mix
                          (function (_ post pre)
                            (n.+ pre (product.left post)))
                          (product.left specification#identity)))]
         [(n#+ <size> size)
          (function (_ [offset binary])
            (of sequence.mix mix
                (function (_ [_ post] pre)
                  (post pre))
                (|> binary
                    (<write> offset capped_count)
                    [(n#+ <size> offset)])
                specification/*))])))]

  [sequence_8  </>.size_8  \\unsafe.has_8!]
  [sequence_16 </>.size_16 \\unsafe.has_16!]
  [sequence_32 </>.size_32 \\unsafe.has_32!]
  [sequence_64 </>.size_64 \\unsafe.has_64!]
  )

(the .public maybe
  (for_any (_ of)
    (-> (Injection of)
        (Injection (Maybe of))))
  (..or ..any))

(the .public (list value)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (List of))))
  (..rec
   (|>> (..and value)
        (..or ..any))))

(the .public (set value)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (Set of))))
  (|>> set.list (..list value)))

(the .public symbol
  (Injection Symbol)
  (all ..and
       ..text
       ..text
       ))

(the .public type
  (Injection Type)
  (..rec
   (function (_ again)
     (let [pair (..and again again)
           indexed ..nat
           quantified (..and (..list again) again)]
       (function (_ altV)
         (when altV
           (^.with_template [<number> <tag> <format>]
             [{<tag> caseV}
              (let [[caseS caseT] (<format> caseV)]
                [(.++ caseS)
                 (function (_ [offset binary])
                   (|> binary
                       (\\unsafe.has_8! offset <number>)
                       [(.++ offset)]
                       caseT))])])
           ([00 .#Nominal (..and ..text (..list again))]
            [01 .#Sum pair]
            [02 .#Product pair]
            [03 .#Function pair]
            [04 .#Parameter indexed]
            [05 .#Var indexed]
            [06 .#Opaque indexed]
            [07 .#Universal quantified]
            [08 .#Existential quantified]
            [09 .#Apply pair]
            [10 .#Named (..and ..symbol again)])
           ))))))

(the .public location
  (Injection Location)
  (all ..and
       ..text
       ..nat
       ..nat
       ))

(the .public code
  (Injection Code)
  (..rec
   (function (_ again)
     (let [sequence (..list again)]
       (..and ..location
              (function (_ altV)
                (when altV
                  (^.with_template [<number> <tag> <format>]
                    [{<tag> caseV}
                     (let [[caseS caseT] (<format> caseV)]
                       [(.++ caseS)
                        (function (_ [offset binary])
                          (|> binary
                              (\\unsafe.has_8! offset <number>)
                              [(.++ offset)]
                              caseT))])])
                  ([0 .#Bit ..bit]
                   [1 .#Nat ..nat]
                   [2 .#Int ..int]
                   [3 .#Rev ..rev]
                   [4 .#Dec ..dec]
                   [5 .#Text ..text]
                   [6 .#Symbol ..symbol]
                   [7 .#Form sequence]
                   [8 .#Variant sequence]
                   [9 .#Tuple sequence])
                  )))))))

(the .public instant
  (Injection Instant)
  (|>> instant.millis
       ..int))

(the .public duration
  (Injection Duration)
  (|>> duration.millis
       ..int))
