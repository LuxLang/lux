... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except and or text natural integer revolution stack name type list)
   [ffi (.only)]
   [abstract
    [monoid (.only Monoid)]]
   [control
    ["|" pipe]]
   ["[0]" function]
   [data
    ["[0]" product]
    [text
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list (.use "[1]#[0]" functor)]
     ["[0]" sequence (.only Sequence) (.use "[1]#[0]" functor)]
     ["[0]" set (.only Set)]
     ... TODO: Remove ASAP
     [array
      [\\unsafe (.only)]]]]
   [math
    [number
     ["n" natural]
     ["[0]" i64]
     ["[0]" decimal]]]
   [macro
    ["[0]" template]]
   [time
    ["[0]" instant (.only Instant)]
    ["[0]" duration (.only Duration)]]]]
 ["[0]" \\unsafe (.only Binary)]
 ["</>" \\projection (.only Offset Size)])

(template.with [<name> <extension> <post>]
  [(the <name>
     (template.macro (<name> <parameter> <subject>)
       [(<post> (<extension> (.integer <parameter>) (.integer <subject>)))]))]

  [n#= .i64_=# .|>]
  [n#+ .i64_+# .natural]
  [n#* .int_*# .natural]
  )

(the mask
  (-> Size
      (I64 Any))
  (|>> (n#* i64.bits_per_byte)
       i64.mask))

(.every .public Mutation
  (-> [Offset Binary]
      [Offset Binary]))

(.every .public Specification
  [Size Mutation])

(the .public no_op
  Specification
  [0 function.identity])

(the .public (instance [size mutation])
  (-> Specification
      Binary)
  (|> size
      \\unsafe.empty
      [0]
      mutation
      product.right))

(the .public monoid
  (Monoid Specification)
  (implementation
   (the identity
     ..no_op)
   
   (the (composite [sizeL mutL] [sizeR mutR])
     [(n#+ sizeL sizeR)
      (|>> mutL mutR)])))

(.every .public (Injection it)
  (-> it
      Specification))

(the .public (value as value)
  (for_any (_ it)
    (-> (Injection it) it
        Binary))
  (..instance (as value)))

(template.with [<name> <size> <write>]
  [(the .public <name>
     (Injection (I64 Any))
     (function (_ value)
       [<size>
        (function (_ [offset binary])
          [(n#+ <size> offset)
           (<write> offset value binary)])]))]

  [bits_08 </>.size_08 \\unsafe.has_08!]
  [bits_16 </>.size_16 \\unsafe.has_16!]
  [bits_32 </>.size_32 \\unsafe.has_32!]
  [bits_64 </>.size_64 \\unsafe.has_64!]
  )

(the .public (or left right)
  (for_any (_ left right)
    (-> (Injection left) (Injection right)
        (Injection (Or left right))))
  (function (_ altV)
    (`` (when altV
          (,, (template.with [<number> <tag> <injection>]
                [{<tag> caseV}
                 (let [[caseS caseT] (<injection> caseV)]
                   [(.++ caseS)
                    (function (_ [offset binary])
                      (|> binary
                          (\\unsafe.has_08! offset <number>)
                          [(.++ offset)]
                          caseT))])]

                [0 .#Left left]
                [1 .#Right right]))
          ))))

(the .public (and pre post)
  (for_any (_ left right)
    (-> (Injection left) (Injection right)
        (Injection (And left right))))
  (function (_ [preV postV])
    (by ..monoid composite (pre preV) (post postV))))

(the .public (rec body)
  (for_any (_ it)
    (-> (-> (Injection it) (Injection it))
        (Injection it)))
  (function (again value)
    (body again value)))

(the .public any
  (Injection Any)
  (function.constant ..no_op))

(the .public bit
  (Injection Bit)
  (|>> (|.when #0 0 #1 1) ..bits_08))

(template.with [<name> <type>]
  [(the .public <name>
     (Injection <type>)
     ..bits_64)]

  [natural Natural]
  [integer Integer]
  [revolution Revolution]
  )

(the .public decimal
  (Injection Decimal)
  (|>> decimal.bits
       ..bits_64))

(the .public (segment size)
  (-> Natural
      (Injection Binary))
  (function (_ value)
    [size
     (function (_ [offset binary])
       [(n#+ size offset)
        (\\unsafe.copy! (n.minor size (\\unsafe.size value))
                        0
                        value
                        offset
                        binary)])]))

(template.with [<name> <bits> <size> <write>]
  [(the .public <name>
     (Injection Binary)
     (let [mask (..mask <size>)]
       (function (_ value)
         (let [size (|> value
                        \\unsafe.size
                        (i64.and mask))
               size' (n#+ <size> size)]
           [size'
            (function (_ [offset binary])
              [(n#+ size' offset)
               (|> binary
                   (<write> offset size)
                   (\\unsafe.copy! size 0 value (n#+ <size> offset)))])]))))]

  [binary_08 ..bits_08 </>.size_08 \\unsafe.has_08!]
  [binary_16 ..bits_16 </>.size_16 \\unsafe.has_16!]
  [binary_32 ..bits_32 </>.size_32 \\unsafe.has_32!]
  [binary_64 ..bits_64 </>.size_64 \\unsafe.has_64!]
  )

(template.with [<name> <binary>]
  [(the .public <name>
     (Injection Text)
     (|>> (by utf8.binary as)
          <binary>))]

  [utf8_08 ..binary_08]
  [utf8_16 ..binary_16]
  [utf8_32 ..binary_32]
  [utf8_64 ..binary_64]
  )

(the .public text ..utf8_64)

(template.with [<name> <size> <write>]
  [(the .public (<name> valueW)
     (for_any (_ it)
       (-> (Injection it)
           (Injection (Sequence it))))
     (function (_ value)
       (let [original_count (sequence.size value)
             capped_count (i64.and (..mask <size>)
                                   original_count)
             value (if (n#= original_count capped_count)
                       value
                       (|> value
                           sequence.as_list
                           (list.first capped_count)
                           sequence.of_list))
             (open "specification#[0]") ..monoid
             specification/* (sequence#each valueW value)
             size (|> specification/*
                      (by sequence.mix mix
                          (function (_ post pre)
                            (n.+ pre (product.left post)))
                          (product.left specification#identity)))]
         [(n#+ <size> size)
          (function (_ [offset binary])
            (by sequence.mix mix
                (function (_ [_ post] pre)
                  (post pre))
                (|> binary
                    (<write> offset capped_count)
                    [(n#+ <size> offset)])
                specification/*))])))]

  [sequence_08 </>.size_08 \\unsafe.has_08!]
  [sequence_16 </>.size_16 \\unsafe.has_16!]
  [sequence_32 </>.size_32 \\unsafe.has_32!]
  [sequence_64 </>.size_64 \\unsafe.has_64!]
  )

(the .public (list it)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (List it))))
  (function (_ value)
    (let [(open "specification#[0]") ..monoid
          specification/* (list#each it value)
          size (|> specification/*
                   (list.mix (function (_ post pre)
                               (n.+ pre (product.left post)))
                             (product.left specification#identity)))]
      [(n#+ </>.size_64 size)
       (function (_ [offset binary])
         (list.mix (function (_ [_ post] pre)
                     (post pre))
                   (|> binary
                       (\\unsafe.has_64! offset (list.size value))
                       [(n#+ </>.size_64 offset)])
                   specification/*))])))

(the .public maybe
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Maybe it))))
  (..or ..any))

(the .public (stack value)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Stack it))))
  (..rec
   (|>> (..and value)
        (..or ..any))))

(the .public (set value)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Set it))))
  (|>> set.as_list
       list.as_stack
       (..stack value)))

(the .public name
  (Injection Name)
  (all ..and
       ..text
       ..text
       ))

(the .public type
  (Injection Type)
  (..rec
   (function (_ again)
     (let [indexed ..natural]
       (function (_ altV)
         (`` (when altV
               (,, (template.with [<number> <tag> <injection>]
                     [{<tag> caseV}
                      (let [[caseS caseT] (<injection> caseV)]
                        [(.++ caseS)
                         (function (_ [offset binary])
                           (|> binary
                               (\\unsafe.has_08! offset <number>)
                               [(.++ offset)]
                               caseT))])]

                     [0 .#Nominal (..and ..text (..list (..and ..bit again)))]
                     [1 .#Parameter (..and ..bit indexed)]
                     [2 .#Variable indexed]
                     [3 .#Opaque indexed]
                     [4 .#Quantification (all ..and ..bit (..stack (..and again again)) again)]
                     [5 .#Reification (..and again again)]
                     [6 .#Named (..and ..name again)]))
               )))))))

(the .public provenance
  (Injection Provenance)
  (all ..and
       ..text
       ..natural
       ..natural
       ))

(the .public code
  (Injection Code)
  (..rec
   (function (_ code)
     (let [composite (..list code)]
       (function (_ altV)
         (`` (when altV
               (,, (template.with [<number> <tag> <injection>]
                     [{<tag> caseV}
                      (let [[caseS caseT] (<injection> caseV)]
                        [(.++ caseS)
                         (function (_ [offset binary])
                           (|> binary
                               (\\unsafe.has_08! offset <number>)
                               [(.++ offset)]
                               caseT))])]

                     [0 .#Bit (..and ..provenance ..bit)]
                     [1 .#Natural (..and ..provenance ..natural)]
                     [2 .#Integer (..and ..provenance ..integer)]
                     [3 .#Revolution (..and ..provenance ..revolution)]
                     [4 .#Decimal (..and ..provenance ..decimal)]
                     [5 .#Text (..and ..provenance ..text)]
                     [6 .#Name (..and ..provenance ..name)]
                     [7 .#Form (..and ..provenance composite)]
                     [8 .#Variant (..and ..provenance composite)]
                     [9 .#Tuple (..and ..provenance composite)]))
               )))))))

(the .public instant
  (Injection Instant)
  (|>> instant.millis
       ..integer))

(the .public duration
  (Injection Duration)
  (|>> duration.millis
       ..integer))
