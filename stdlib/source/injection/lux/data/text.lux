... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list nat int rev symbol type)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe]]
   [data
    ["[0]" text (.only Injection)]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["[0]" nat]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" dec]]
    [arithmetic
     ["[0]" modular]]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]])

... https://en.wikipedia.org/wiki/Message
(the .public message
  (syntax.macro (_ [fragments (<>.many <code>.any)])
    (in (.list (` (.text_composite# (,* fragments)))))))

(template.with [<name> <type> <injection>]
  [(the .public <name>
     (Injection <type>)
     <injection>)]

  [nat      Nat               (of nat.decimal injection)]
  [int      Int               (of int.decimal injection)]
  [rev      Rev               (of rev.decimal injection)]
  [dec      Dec               (of dec.decimal injection)]
  [text     Text              text.injection]
  )

(template.with [<name>]
  [(the .public <name>
     (Injection Dec)
     (let [suffix (|> +0.0
                      (of (template.symbol [dec._] [<name>]) injection)
                      (text.clip_since 4)
                      (maybe.else ""))]
       (|>> ((template.symbol [dec._] [as_ <name>]))
            dec.int
            ..int
            (text.suffix suffix))))]

  [degree]
  [percentage]
  [permille]
  [permyriad]
  )

(template.with [<type> <injection>,<format>]
  [(`` (template.with [<injection> <format>]
         [(the .public <injection>
            (Injection <type>)
            (of <format> injection))]

         (,, (template.spliced <injection>,<format>))))]

  [Nat
   [[nat_2 nat.binary]
    [nat_8 nat.octal]
    [nat_10 nat.decimal]
    [nat_16 nat.hex]]]
  [Int
   [[int_2 int.binary]
    [int_8 int.octal]
    [int_10 int.decimal]
    [int_16 int.hex]]]
  [Rev
   [[rev_2 rev.binary]
    [rev_8 rev.octal]
    [rev_10 rev.decimal]
    [rev_16 rev.hex]]]
  [Dec
   [[dec_2 dec.binary]
    [dec_8 dec.octal]
    [dec_10 dec.decimal]
    [dec_16 dec.hex]]]
  )

(the .public (padded padding injection)
  (-> Nat (Injection Nat)
      (Injection Nat))
  (of (nat.padded padding
                  (implementation
                   (the injection injection)
                   (the (projection _) (undefined))))
      injection))

(the .public (mod modular)
  (for_any (_ %)
    (Injection (modular.Mod %)))
  (let [format (modular.format (modular.modulus modular))]
    (of format injection modular)))

(the .public (list injection)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (List of))))
  (|>> (list#each (|>> injection (..message " ")))
       text.together
       (text.enclosed ["(list" ")"])))

(the .public (maybe injection)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (Maybe of))))
  (function (_ value)
    (when value
      {.#None}
      "{.#None}"

      {.#Some value}
      (..message "{.#Some " (injection value) "}"))))
