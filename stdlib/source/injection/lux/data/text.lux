... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text stack natural integer revolution name type)
   [abstract
    ["<>" projection]]
   [control
    ["[0]" maybe]]
   [data
    ["[0]" product]
    ["[0]" text (.only Injection)]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    ["[0]" unit]
    [number
     [/64
      ["[0]" natural]
      ["[0]" integer]
      ["[0]" revolution]
      ["[0]" decimal]]]
    [arithmetic
     ["[0]" modular]]]
   [macro
    ["[0]" template]]
   [aspect
    ["[0]" view]]]])

(template.with [<name> <type> <injection>]
  [(the .public <name>
     (Injection <type>)
     <injection>)]

  [[natural Natural (by natural.base_10 as)]
   [integer Integer (by integer.base_10 as)]
   [revolution Revolution (by revolution.base_10 as)]
   [decimal Decimal (by decimal.base_10 as)]
   [text Text text.as_text]])

(template.with [,name]
  [(the .public ,name
     (Injection Decimal)
     (let [suffix (its unit.#suffix (template.name [unit._] [,name]))]
       (|>> (by (template.name [decimal._] [,name]) as)
            (text.split_by decimal.delimiter)
            (maybe.else ["" ""])
            product.left
            (text.suffix suffix))))]

  [[degree]
   [per_cent]
   [per_mille]
   [per_myriad]])

(template.with [<type> <injection>,<format>]
  [(`` (template.with [<injection> <format>]
         [(the .public <injection>
            (Injection <type>)
            (by <format> as))]

         <injection>,<format>))]

  [[Natural
    [[natural_02 natural.base_02]
     [natural_08 natural.base_08]
     [natural_10 natural.base_10]
     [natural_16 natural.base_16]]]
   [Integer
    [[integer_02 integer.base_02]
     [integer_08 integer.base_08]
     [integer_10 integer.base_10]
     [integer_16 integer.base_16]]]
   [Revolution
    [[revolution_02 revolution.base_02]
     [revolution_08 revolution.base_08]
     [revolution_10 revolution.base_10]
     [revolution_16 revolution.base_16]]]
   [Decimal
    [[decimal_02 decimal.base_02]
     [decimal_08 decimal.base_08]
     [decimal_10 decimal.base_10]
     [decimal_16 decimal.base_16]]]])

(the .public (padded padding as)
  (-> Natural (Injection Natural)
      (Injection Natural))
  (by (natural.padded padding
                      (implementation
                       (the as as)
                       (the (of _) (undefined))))
      as))

(the .public (mod modular)
  (for_any (_ %)
    (Injection (modular.Mod %)))
  (by (modular.text (modular.modulus modular)) as modular))

(the .public (stack as)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Stack it))))
  (|>> (view.of list.stack)
       (list#each (|>> as (.text " ")))
       text.together
       (text.enclosed ["(stack" ")"])))

(the .public (maybe as)
  (for_any (_ it)
    (-> (Injection it)
        (Injection (Maybe it))))
  (function (_ value)
    (when value
      {.#None}
      "{.#None}"

      {.#Some value}
      (.text "{.#Some " (as value) "}"))))
