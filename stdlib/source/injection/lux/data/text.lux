... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except list natural int rev symbol type)
   [abstract
    [monad (.only do)]]
   [control
    ["<>" projection]
    ["[0]" maybe]]
   [data
    ["[0]" text (.only Injection)]
    [collection
     ["[0]" list (.use "[1]#[0]" monad)]]]
   [math
    [number
     ["[0]" natural]
     ["[0]" int]
     ["[0]" rev]
     ["[0]" decimal]]
    [arithmetic
     ["[0]" modular]]]
   [meta
    ["[0]" code
     ["<[1]>" \\projection]]
    [macro
     ["[0]" syntax]
     ["[0]" template]]]]])

... https://en.wikipedia.org/wiki/Message
(the .public message
  (syntax.macro (_ [fragments (<>.many <code>.any)])
    (in (.list (` (.text_composite# (,* fragments)))))))

(template.with [<name> <type> <injection>]
  [(the .public <name>
     (Injection <type>)
     <injection>)]

  [natural Natural (of natural.base_10 injection)]
  [int Int (of int.base_10 injection)]
  [rev Rev (of rev.base_10 injection)]
  [decimal Decimal (of decimal.base_10 injection)]
  [text Text text.injection]
  )

(template.with [<name>]
  [(the .public <name>
     (Injection Decimal)
     (let [suffix (|> +0.0
                      (of (template.symbol [decimal._] [<name>]) injection)
                      (text.clip_since 4)
                      (maybe.else ""))]
       (|>> ((template.symbol [decimal._] [as_ <name>]))
            decimal.int
            ..int
            (text.suffix suffix))))]

  [degree]
  [percentage]
  [permille]
  [permyriad]
  )

(template.with [<type> <injection>,<format>]
  [(`` (template.with [<injection> <format>]
         [(the .public <injection>
            (Injection <type>)
            (of <format> injection))]

         (,, (template.spliced <injection>,<format>))))]

  [Natural
   [[natural_02 natural.base_02]
    [natural_08 natural.base_08]
    [natural_10 natural.base_10]
    [natural_16 natural.base_16]]]
  [Int
   [[int_02 int.base_02]
    [int_08 int.base_08]
    [int_10 int.base_10]
    [int_16 int.base_16]]]
  [Rev
   [[rev_02 rev.base_02]
    [rev_08 rev.base_08]
    [rev_10 rev.base_10]
    [rev_16 rev.base_16]]]
  [Decimal
   [[decimal_02 decimal.base_02]
    [decimal_08 decimal.base_08]
    [decimal_10 decimal.base_10]
    [decimal_16 decimal.base_16]]]
  )

(the .public (padded padding injection)
  (-> Natural (Injection Natural)
      (Injection Natural))
  (of (natural.padded padding
                      (implementation
                       (the injection injection)
                       (the (projection _) (undefined))))
      injection))

(the .public (mod modular)
  (for_any (_ %)
    (Injection (modular.Mod %)))
  (let [format (modular.format (modular.modulus modular))]
    (of format injection modular)))

(the .public (list injection)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (List of))))
  (|>> (list#each (|>> injection (..message " ")))
       text.together
       (text.enclosed ["(list" ")"])))

(the .public (maybe injection)
  (for_any (_ of)
    (-> (Injection of)
        (Injection (Maybe of))))
  (function (_ value)
    (when value
      {.#None}
      "{.#None}"

      {.#Some value}
      (..message "{.#Some " (injection value) "}"))))
