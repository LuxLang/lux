(.using
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only do)]]
 [//
  [functor (.only Injection Comparison)]])

(def: (left_identity injection comparison (open "_//[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do [! random.monad]
    [sample random.nat
     morphism (at ! each (function (_ diff)
                           (|>> (n.+ diff) _//in))
                  random.nat)]
    (_.property "Left identity."
      ((comparison n.=)
       (|> (injection sample) (_//each morphism) _//conjoint)
       (morphism sample)))))

(def: (right_identity injection comparison (open "_//[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do random.monad
    [sample random.nat]
    (_.property "Right identity."
      ((comparison n.=)
       (|> (injection sample) (_//each _//in) _//conjoint)
       (injection sample)))))

(def: (associativity injection comparison (open "_//[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do [! random.monad]
    [sample random.nat
     increase (at ! each (function (_ diff)
                           (|>> (n.+ diff) _//in))
                  random.nat)
     decrease (at ! each (function (_ diff)
                           (|>> (n.- diff) _//in))
                  random.nat)]
    (_.property "Associativity."
      ((comparison n.=)
       (|> (injection sample) (_//each increase) _//conjoint (_//each decrease) _//conjoint)
       (|> (injection sample) (_//each (|>> increase (_//each decrease) _//conjoint)) _//conjoint)))))

(def: .public (spec injection comparison monad)
  (All (_ f) (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (<| (_.for [/.Monad])
      (all _.and
           (..left_identity injection comparison monad)
           (..right_identity injection comparison monad)
           (..associativity injection comparison monad)
           )))
