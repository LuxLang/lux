(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ do)]]
  [//
   [functor (#+ Injection Comparison)]])

(def: (left_identity injection comparison (^open "_//."))
  (All [f] (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do {! random.monad}
    [sample random.nat
     morphism (\ ! map (function (_ diff)
                         (|>> (n.+ diff) _//in))
                 random.nat)]
    (_.test "Left identity."
            ((comparison n.=)
             (|> (injection sample) (_//map morphism) _//join)
             (morphism sample)))))

(def: (right_identity injection comparison (^open "_//."))
  (All [f] (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do random.monad
    [sample random.nat]
    (_.test "Right identity."
            ((comparison n.=)
             (|> (injection sample) (_//map _//in) _//join)
             (injection sample)))))

(def: (associativity injection comparison (^open "_//."))
  (All [f] (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (do {! random.monad}
    [sample random.nat
     increase (\ ! map (function (_ diff)
                         (|>> (n.+ diff) _//in))
                 random.nat)
     decrease (\ ! map (function (_ diff)
                         (|>> (n.- diff) _//in))
                 random.nat)]
    (_.test "Associativity."
            ((comparison n.=)
             (|> (injection sample) (_//map increase) _//join (_//map decrease) _//join)
             (|> (injection sample) (_//map (|>> increase (_//map decrease) _//join)) _//join)))))

(def: #export (spec injection comparison monad)
  (All [f] (-> (Injection f) (Comparison f) (/.Monad f) Test))
  (<| (_.for [/.Monad])
      ($_ _.and
          (..left_identity injection comparison monad)
          (..right_identity injection comparison monad)
          (..associativity injection comparison monad)
          )))
