(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" / (.only CoMonad)]]
 [//
  ["[0]S" functor (.only Injection Comparison)]])

(def .public (spec injection comparison it)
  (All (_ f) (-> (Injection f) (Comparison f) (CoMonad f) Test))
  (<| (_.for [/.CoMonad])
      (do [! random.monad]
        [.let [(open "/#[0]") it]
         sample random.nat
         increase (at ! each (function (_ diff)
                               (|>> /#out (n.+ diff)))
                      random.nat)
         decrease (at ! each (function (_ diff)
                               (|>> /#out (n.- diff)))
                      random.nat)
         morphism (at ! each (function (_ diff)
                               (|>> /#out (n.+ diff)))
                      random.nat)
         .let [start (injection sample)
               == (comparison n.=)]])
      (all _.and
           (_.for [/.functor]
                  (functorS.spec injection comparison (the /.functor it)))

           (_.coverage [/.disjoint /.out]
             (let [left_identity!
                   (n.= (morphism start)
                        (|> start /#disjoint (/#each morphism) /#out))
                   
                   right_identity!
                   (== start
                       (|> start /#disjoint (/#each /#out)))
                   
                   associativity!
                   (== (|> start /#disjoint (/#each (|>> /#disjoint (/#each increase) decrease)))
                       (|> start /#disjoint (/#each increase) /#disjoint (/#each decrease)))]
               (and left_identity!
                    right_identity!
                    associativity!)))
           )))
