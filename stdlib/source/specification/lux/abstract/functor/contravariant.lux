(.using
 [library
  [lux (.full)
   ["_" test (.only Test)]
   [abstract
    [equivalence (.only Equivalence)]
    [monad (.only do)]]
   [control
    ["[0]" function]]
   [math
    ["[0]" random]
    [number
     ["n" nat]]]]]
 [\\library
  ["[0]" / (.only Functor)]])

(def: (identity equivalence value (open "@//[0]"))
  (All (_ f a) (-> (Equivalence (f a)) (f a) (Functor f) Test))
  (_.property "Law of identity."
    (equivalence
     (@//each function.identity value)
     value)))

(def: .public (spec equivalence value functor)
  (All (_ f a) (-> (Equivalence (f a)) (f a) (Functor f) Test))
  (do random.monad
    [sample random.nat]
    (<| (_.for [/.Functor])
        (all _.and
             (..identity equivalence value functor)
             ))))
