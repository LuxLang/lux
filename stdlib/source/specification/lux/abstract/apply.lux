(.using
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [monad {"+" do}]]
    [control
     ["[0]" function]]
    [math
     ["[0]" random]
     [number
      ["n" nat]]]]]
  [\\library
   ["[0]" / {"+" Apply}]]
  [//
   [functor {"+" Injection Comparison}]])

(def: (identity injection comparison (^open "#[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (Apply f) Test))
  (do [! random.monad]
    [sample (# ! each injection random.nat)]
    (_.test "Identity."
            ((comparison n.=)
             (#on sample (injection function.identity))
             sample))))

(def: (homomorphism injection comparison (^open "#[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (Apply f) Test))
  (do [! random.monad]
    [sample random.nat
     increase (# ! each n.+ random.nat)]
    (_.test "Homomorphism."
            ((comparison n.=)
             (#on (injection sample) (injection increase))
             (injection (increase sample))))))

(def: (interchange injection comparison (^open "#[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (Apply f) Test))
  (do [! random.monad]
    [sample random.nat
     increase (# ! each n.+ random.nat)]
    (_.test "Interchange."
            ((comparison n.=)
             (#on (injection sample) (injection increase))
             (#on (injection increase) (injection (: (-> (-> Nat Nat) Nat)
                                                     (function (_ f) (f sample)))))))))

(def: (composition injection comparison (^open "#[0]"))
  (All (_ f) (-> (Injection f) (Comparison f) (Apply f) Test))
  (do [! random.monad]
    [sample random.nat
     increase (# ! each n.+ random.nat)
     decrease (# ! each n.- random.nat)]
    (_.test "Composition."
            ((comparison n.=)
             (|> (injection function.composite)
                 (#on (injection increase))
                 (#on (injection decrease))
                 (#on (injection sample)))
             (#on (#on (injection sample)
                       (injection increase))
                  (injection decrease))))))

(def: .public (spec injection comparison apply)
  (All (_ f) (-> (Injection f) (Comparison f) (Apply f) Test))
  (_.for [/.Apply]
         ($_ _.and
             (..identity injection comparison apply)
             (..homomorphism injection comparison apply)
             (..interchange injection comparison apply)
             (..composition injection comparison apply)
             )))
