(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [data
    ["[0]" bit (.use "[1]#[0]" equivalence)]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" / (.only Equivalence)]])

(def .public (spec (open "/#[0]") random)
  (All (_ a) (-> (Equivalence a) (Random a) Test))
  (do random.monad
    [left random
     right random]
    (<| (_.for [/.Equivalence])
        (all _.and
             (_.property "Reflexivity"
               (/#= left left))
             (_.property "Symmetry"
               (bit#= (/#= left right) (/#= right left)))))))
