(.require
 [library
  [lux (.except)
   [abstract
    [monad (.only do)]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [math
    ["[0]" random (.only Random)]
    [number
     ["n" nat]]]
   [test
    ["_" property (.only Test)]]]]
 [\\library
  ["[0]" /]])

(def .public (spec (open "/#[0]") random)
  (All (_ a) (-> (/.Hash a) (Random a) Test))
  (do random.monad
    [parameter random
     subject random]
    (all _.and
         (_.for [/.equivalence]
                (equivalenceT.spec /#equivalence random))
         (_.coverage [/.Hash /.hash]
           (if (/#= parameter subject)
             (n.= (/#hash parameter) (/#hash subject))
             true))
         )))
