(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [math
     ["." random (#+ Random)]]]]
  [\\library
   ["." /
    [//
     [equivalence (#+ Equivalence)]]]])

(def: .public (spec (^open "\.") (^open "\.") gen_sample)
  (All [a] (-> (Equivalence a) (/.Monoid a) (Random a) Test))
  (do random.monad
    [sample gen_sample
     left gen_sample
     mid gen_sample
     right gen_sample]
    (<| (_.for [/.Monoid])
        ($_ _.and
            (_.test "Left identity."
                    (\= sample
                        (\composite \identity sample)))
            (_.test "Right identity."
                    (\= sample
                        (\composite sample \identity)))
            (_.test "Associativity."
                    (\= (\composite left (\composite mid right))
                        (\composite (\composite left mid) right)))
            ))))
