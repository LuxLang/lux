(.require
 [library
  [lux (.except)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def .public (spec (open "_#[0]") (open "_#[0]") gen_sample)
  (All (_ a) (-> (Equivalence a) (/.Monoid a) (Random a) Test))
  (do random.monad
    [sample gen_sample
     left gen_sample
     mid gen_sample
     right gen_sample]
    (<| (_.for [/.Monoid])
        (all _.and
             (_.property "Left identity."
               (_#= sample
                    (_#composite _#identity sample)))
             (_.property "Right identity."
               (_#= sample
                    (_#composite sample _#identity)))
             (_.property "Associativity."
               (_#= (_#composite left (_#composite mid right))
                    (_#composite (_#composite left mid) right)))
             ))))
