(.using
 [library
  [lux (.full)
   ["_" test (.only Test)]
   [abstract
    [monad (.only do)]]
   [control
    ["[0]" try]]
   [math
    ["[0]" random (.only Random)]]]]
 [\\library
  ["[0]" / (.only)
   [//
    [equivalence (.only Equivalence)]]]])

(def: .public (spec (open "@//[0]") (open "@//[0]") generator)
  (All (_ m a) (-> (Equivalence a) (/.Codec m a) (Random a) Test))
  (do random.monad
    [expected generator]
    (_.for [/.Codec]
           (_.property "Isomorphism."
             (case (|> expected @//encoded @//decoded)
               {try.#Success actual}
               (@//= expected actual)
               
               {try.#Failure _}
               false)))))
