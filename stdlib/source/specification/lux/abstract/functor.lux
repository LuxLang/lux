(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [equivalence (#+ Equivalence)]
     [monad (#+ do)]]
    [control
     ["." function]]
    [math
     ["." random]
     [number
      ["n" nat]]]]]
  [\\library
   ["." / (#+ Functor)]])

(type: .public (Injection f)
  (All [a] (-> a (f a))))

(type: .public (Comparison f)
  (All [a]
    (-> (Equivalence a)
        (Equivalence (f a)))))

(def: (identity injection comparison (^open "@//."))
  (All [f] (-> (Injection f) (Comparison f) (Functor f) Test))
  (do {! random.monad}
    [sample (\ ! each injection random.nat)]
    (_.test "Identity."
            ((comparison n.=)
             (@//each function.identity sample)
             sample))))

(def: (homomorphism injection comparison (^open "@//."))
  (All [f] (-> (Injection f) (Comparison f) (Functor f) Test))
  (do {! random.monad}
    [sample random.nat
     increase (\ ! each n.+ random.nat)]
    (_.test "Homomorphism."
            ((comparison n.=)
             (@//each increase (injection sample))
             (injection (increase sample))))))

(def: (composition injection comparison (^open "@//."))
  (All [f] (-> (Injection f) (Comparison f) (Functor f) Test))
  (do {! random.monad}
    [sample (\ ! each injection random.nat)
     increase (\ ! each n.+ random.nat)
     decrease (\ ! each n.- random.nat)]
    (_.test "Composition."
            ((comparison n.=)
             (|> sample (@//each increase) (@//each decrease))
             (|> sample (@//each (|>> increase decrease)))))))

(def: .public (spec injection comparison functor)
  (All [f] (-> (Injection f) (Comparison f) (Functor f) Test))
  (<| (_.for [/.Functor])
      ($_ _.and
          (..identity injection comparison functor)
          (..homomorphism injection comparison functor)
          (..composition injection comparison functor)
          )))
