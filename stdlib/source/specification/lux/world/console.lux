(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     [io (#+ IO)]
     ["." try]
     [concurrency
      ["." async (#+ Async)]]]
    [data
     ["." text
      ["%" format (#+ format)]]]
    [math
     ["." random]]]]
  [\\library
   ["." /]])

(def: #export (spec console)
  (-> (IO (/.Console Async)) Test)
  (do random.monad
    [message (random.ascii/alpha 10)]
    (in (do async.monad
          [console (async.future console)
           ?write (\ console write (format message text.new_line))
           ?read (\ console read [])
           ?read_line (\ console read_line [])
           ?close/good (\ console close [])
           ?close/bad (\ console close [])

           #let [can_write!
                 (case ?write
                   (#try.Success _)
                   true
                   
                   _
                   false)

                 can_read!
                 (case [?read ?read_line]
                   [(#try.Success _) (#try.Success _)]
                   true

                   _
                   false)

                 can_close!
                 (case [?close/good ?close/bad]
                   [(#try.Success _) (#try.Failure _)]
                   true
                   
                   _
                   false)]]
          (_.cover' [/.Console]
                    (and can_write!
                         can_read!
                         can_close!))))))
