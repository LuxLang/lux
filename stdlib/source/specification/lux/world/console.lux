(.module:
  [library
   [lux "*"
    ["_" test {"+" Test}]
    [abstract
     [monad {"+" do}]]
    [control
     [io {"+" IO}]
     ["[0]" try]
     [concurrency
      ["[0]" async {"+" Async}]]]
    [data
     ["[0]" text
      ["%" format {"+" format}]]]
    [math
     ["[0]" random]]]]
  [\\library
   ["[0]" /]])

(def: .public (spec console)
  (-> (IO (/.Console Async)) Test)
  (do random.monad
    [message (random.ascii/alpha 10)]
    (in (do async.monad
          [console (async.future console)
           ?write (# console write (format message text.new_line))
           ?read (# console read [])
           ?read_line (# console read_line [])
           ?close/good (# console close [])
           ?close/bad (# console close [])

           .let [can_write!
                 (case ?write
                   {try.#Success _}
                   true
                   
                   _
                   false)

                 can_read!
                 (case [?read ?read_line]
                   [{try.#Success _} {try.#Success _}]
                   true

                   _
                   false)

                 can_close!
                 (case [?close/good ?close/bad]
                   [{try.#Success _} {try.#Failure _}]
                   true
                   
                   _
                   false)]]
          (_.cover' [/.Console]
                    (and can_write!
                         can_read!
                         can_close!))))))
