(.module:
  [library
   [lux #*
    ["_" test (#+ Test)]
    [abstract
     [monad (#+ do)]]
    [control
     ["." try ("#\." functor)]
     [concurrency
      ["." async (#+ Async) ("#\." monad)]]
     [parser
      ["." environment (#+ Environment)]]]
    [data
     ["." product]
     ["." text ("#\." equivalence)
      ["%" format (#+ format)]]]
    [math
     ["." random]
     [number
      ["n" nat]
      ["i" int]]]]]
  [\\library
   ["." /
    [//
     [file (#+ Path)]]]])

(template [<name> <command> <type> <prep>]
  [(def: <name>
     (-> <type> [Environment Path /.Command (List /.Argument)])
     (|>> <prep> list [environment.empty "~" <command>]))]

  [echo! "echo" Text (|>)]
  [sleep! "sleep" Nat %.nat]
  )

(def: (can_wait! process)
  (-> (/.Process Async) _.Assertion)
  (|> (\ process await [])
      (async\map (|>> (try\map (i.= /.normal))
                      (try.else false)
                      (_.cover' [/.Exit /.normal])))
      async\join))

(def: (can_read! expected process)
  (-> Text (/.Process Async) (Async Bit))
  (|> (\ process read [])
      (async\map (|>> (try\map (text\= expected))
                      (try.else false)))))

(def: (can_destroy! process)
  (-> (/.Process Async) (Async Bit))
  (do async.monad
    [?destroy (\ process destroy [])
     ?await (\ process await [])]
    (in (and (case ?destroy
               (#try.Success _)
               true
               
               (#try.Failure error)
               false)
             (case ?await
               (#try.Success _)
               false
               
               (#try.Failure error)
               true)))))

(with_expansions [<shell_coverage> (as_is [/.Command /.Argument])]
  (def: #export (spec shell)
    (-> (/.Shell Async) Test)
    (<| (_.for [/.Shell /.Process])
        (do {! random.monad}
          [message (random.ascii/alpha 10)
           seconds (\ ! map (|>> (n.% 5) (n.+ 5)) random.nat)]
          (in (do {! async.monad}
                [?echo (\ shell execute (..echo! message))
                 ?sleep (\ shell execute (..sleep! seconds))]
                (case [?echo ?sleep]
                  [(#try.Success echo) (#try.Success sleep)]
                  (do !
                    [can_read! (..can_read! message echo)
                     can_destroy! (..can_destroy! sleep)]
                    ($_ _.and'
                        (_.cover' <shell_coverage>
                                  (and can_read!
                                       can_destroy!))
                        (..can_wait! echo)
                        ))
                  
                  _
                  (_.cover' <shell_coverage>
                            false))))))))
