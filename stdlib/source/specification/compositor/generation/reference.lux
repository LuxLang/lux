(.using
 [lux {"-" symbol}
  ["_" test {"+" Test}]
  [abstract
   [monad {"+" do}]]
  [control
   ["[0]" pipe]
   ["[0]" try]]
  [data
   [number
    ["n" nat]
    ["f" frac]]]
  [tool
   [compiler
    ["[0]" reference]
    ["[0]" synthesis]]]
  [math
   ["r" random {"+" Random}]]]
 [///
  [common {"+" Runner Definer}]])

(def: symbol
  (Random Symbol)
  (let [symbol_part (r.ascii/upper_alpha 5)]
    [(r.and symbol_part symbol_part)]))

(def: (definition define)
  (-> Definer Test)
  (do r.monad
    [name ..symbol
     expected r.safe_frac]
    (_.test "Definitions."
            (|> (define name (synthesis.f64 expected))
                (pipe.case
                  {try.#Success actual}
                  (f.= expected (as Frac actual))

                  {try.#Failure _}
                  false)))))

(def: (variable run)
  (-> Runner Test)
  (do [! r.monad]
    [register (|> r.nat (# ! each (n.% 100)))
     expected r.safe_frac]
    (_.test "Local variables."
            (|> (synthesis.branch/let [(synthesis.f64 expected)
                                       register
                                       (synthesis.variable/local register)])
                (run "variable")
                (pipe.case
                  {try.#Success actual}
                  (f.= expected (as Frac actual))

                  {try.#Failure _}
                  false)))))

(def: .public (spec runner definer)
  (-> Runner Definer Test)
  ($_ _.and
      (..definition definer)
      (..variable runner)))
