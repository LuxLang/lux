(.module:
  [lux "*"
   ["_" test {"+" [Test]}]
   [abstract
    [monad {"+" [do]}]]
   [control
    [pipe {"+" [case>]}]
    ["[0]" try]]
   [data
    ["[0]" bit ("[1]\[0]" equivalence)]
    [number
     ["f" frac]]
    ["[0]" text ("[1]\[0]" equivalence)
     ["%" format {"+" [format]}]]]
   [math
    ["r" random]]
   [tool
    [compiler
     ["[0]" synthesis]]]]
  [///
   [common {"+" [Runner]}]])

(def: (f/=' reference subject)
  (-> Frac Frac Bit)
  (or (f.= reference subject)
      (and (f.not_a_number? reference)
           (f.not_a_number? subject))))

(def: .public (spec run)
  (-> Runner Test)
  (`` ($_ _.and
          (~~ (template [<evaluation_name> <synthesis> <gen> <test>]
                [(do r.monad
                   [expected <gen>]
                   (_.test (%.name (name_of <synthesis>))
                           (|> (run <evaluation_name> (<synthesis> expected))
                               (case> {try.#Success actual}
                                      (<test> expected (:expected actual))

                                      {try.#Failure _}
                                      false))))]

                ["bit" synthesis.bit  r.bit  bit\=]
                ["i64" synthesis.i64  r.i64  "lux i64 ="]
                ["f64" synthesis.f64  r.frac  f.=']
                ["text" synthesis.text (r.ascii 5) text\=]
                ))
          )))
