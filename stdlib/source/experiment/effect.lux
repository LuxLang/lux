... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)]])

(every (Catch of)
  (-> Text
      (/.Cont of of)))

(every (Throw of)
  (-> Text
      (/.Cont Nothing of)))

(the (throw catch @)
  (for_any (_ of)
    (-> (Catch of) (/.Context of of)
        (Throw of)))
  (function (_ error)
    (function (_ after_error)
      (|> (catch error)
          (/.continued @)))))

(every (Pure of)
  of)

(every (Try kind of)
  (-> (Throw (kind of))
      (/.Cont of (kind of))))

(the (catch when_error to_try)
  (for_any (_ of)
    (-> (Catch of) (Try Pure of)
        (/.Cont of)))
  (/.context
   (/.exit (|>> (throw when_error)
                to_try))))

(the example
  (/.Cont Natural)
  (|> (function (_ throw)
        (do /.monad
          [left (in 123)
           right (in 456)
           _ (throw "yolo")]
          (in (n.+ left right))))
      (catch (function (_ error)
               (by /.monad in (-- 0))))))

(the (try it)
  (for_any (_ of)
    (-> (-> (Try (Either Text) of))
        (/.Cont (Either Text of))))
  (|> (function (_ throw)
        (do /.monad
          [it (it throw)]
          (in {.#Right it})))
      (catch (function (_ error)
               (by /.monad in {.#Left error})))))

(use "/#[0]" /.monad)

(every (Yield of)
  (for_any (_ final_return)
    (-> of
        (/.Cont Any final_return))))

(every Stop
  (for_any (_ final_return)
    (/.Cont Any final_return)))

(every (Generator of)
  (for_any (_ final_return)
    (-> [(Yield of final_return) (Stop final_return)]
        (/.Cont Any final_return))))

(the (one_of it)
  (for_any (_ of)
    (-> (Generator of)
        (/.Cont (Maybe of))))
  (<| /.context
      (do /.monad
        [_ (it [(function (_ it)
                  (/.exit
                   (function (yield after)
                     (/#in {.#Some it}))))
                (/.exit
                 (function (stop after)
                   (/#in {.#None})))])]
        (in {.#None}))))

(the (all_of it)
  (for_any (_ of)
    (-> (Generator of)
        (/.Cont (List of))))
  (<| /.context
      (do /.monad
        [_ (it [(function (_ it)
                  (/.exit
                   (function (yield after)
                     (/#in (list.partial it (after []))))))
                (/.exit
                 (function (stop after)
                   (/#in (list))))])]
        (in (list)))))

(every Prompt
  (Rec it
    (-> it
        (/.Cont it))))

(the pause_example
  (/.Cont Natural Natural)
  (do /.monad
    [prompt (/.call/cc
             (function (_ after)
               (after after)))]
    (in 123)))

(the continuation
  (for_any (_ final_return)
    (Rec it
      (/.Cont it final_return)))
  (function (it after)
    (after it)))

(the continuation'
  ... (Sequence [])
  (for_any (_ final_return)
    ... (Sequence [] final_return))
    (Rec sequence
      (/.Cont (Maybe [[] sequence]) final_return)))
  (function (it after)
    (after {.#Some [[] it]})))

(every (Sequence of final_return)
  (/.Cont (Maybe [of (Sequence of)])
          ... final_return
          (Maybe [of (Sequence of)])))

(the (paused it)
  (for_any (_ of final_return)
    (-> of
        ... (Sequence of final_return)
        (Rec sequence
          (/.Cont (Maybe [of sequence])
                  (Maybe [of sequence])))))
  (function (resumption after)
    {.#Some [it (function (_ _)
                  (after (resumption after)))]}))

(the (each_of it)
  (for_any (_ of)
    (-> (Generator of)
        (Sequence of)))
  (do [! /.monad]
    [_ (it [(function (yield it)
              (exec
                (.log!# "[!] each_of yield")
                (paused it)))
            (/.exit
             (function (stop after)
               (exec
                 (.log!# "[!] each_of stop")
                 (/#in {.#None}))))])]
    (in {.#None})))

(the (some_of limit it)
  (for_any (_ of)
    (-> Natural (Generator of)
        (/.Cont (List of))))
  (do [! /.monad]
    [.let [_ (.log!# "[!] some_of 0")]
     chunk (/.context (each_of it))
     .let [_ (.log!# "[!] some_of 1")]]
    (loop (next [limit limit
                 chunk chunk
                 output (sharing [of]
                          (is (Generator of)
                              it)
                          (is (List of)
                              (list)))])
      (if (n.> 0 limit)
        (when chunk
          {.#Some [piece each_of']}
          (do !
            [.let [_ (.log!# "[!] some_of 2")]
             chunk (/.context each_of')
             .let [_ (.log!# "[!] some_of 3")]]
            (next (-- limit)
                  chunk
                  (list#composite output (list piece))))
          
          {.#None}
          (exec
            (.log!# "[!] some_of 4")
            (in output)))
        (exec
          (.log!# "[!] some_of 4")
          (in output))))))

(the (less_than limit [yield stop])
  (-> Natural
      (Generator Natural))
  (loop (next [it 0])
    (if (n.< limit it)
      (do /.monad
        [.let [_ (.log!# "[!] less_than 0")]
         _ (yield it)
         .let [_ (.log!# "[!] less_than 1")]]
        (next (++ it)))
      stop)))

(the less_than'
  (when (/.value (is (/.Cont (List Natural))
                     (some_of 5 (less_than 10))))
    it
    (.log!# (%.message "[!] " (%.list %.natural it)))))

(every (Term ! of)
  ... (/.Cont ! (/.Cont of))
  (-> (-> ! (/.Cont of))
      (/.Cont of)))

(the (state.with state it)
  (for_any (_ state of)
    (-> state
        (Term (State state) of)))
  (it [#read ,,,
       #write ,,,]))

(the (trace.with initial it)
  (for_any (_ trace of)
    (-> trace
        (Term (Trace trace) of)))
  (it [#trace ,,,]))

(the (with left right it)
  (for_any (_ left right of)
    (-> (Term left of) (Term right of)
        (Term (And left right) of)))
  (<| left (function (_ left))
      right (function (_ right))
      (it [left right])))

(the (value ! it)
  (for_any (_ ! of)
    (-> (Term ! of) (Term ! of)
        of))
  (/.value (! it)))

(every Stack
  (Record
   [#state (State Natural)
    #trace (Trace Text)
    #try Try]))

(..value (<| (with (state.with 0))
             (with (trace.with ""))
             (try.catch (function (_ error)
                          false)))
         (is (Term Stack Bit)
             (function (_ [state scope try])
               ,,,)))

(comment
  (every (Service input output final_return)
    [input (-> output final_return)])

  (every (State state final_return)
    (Variant
     {#Get (Service [] state final_return)}
     {#Put (Service [state] [] final_return)}))

  (every (Free ! final_return)
    (Variant
     {#Impure (! (Free ! final_return))}
     {#Pure final_return}))

  (use "//#[0]" //.monad)

  (every (Term ! of)
    (for_any (_ final_return)
      (//.Cont of (Free ! final_return))))

  (the (effect it)
    (for_any (_ ! of final_return)
      (-> (-> (-> of (Free ! final_return))
              (! (Free ! final_return)))
          (Term ! of final_return)))
    (/.exit (|>> it {#Impure} //#in)))

  (the get
    (for_any (_ state)
      (Term (State state) state))
    (effect (|>> {#Get []})))

  (the (put state)
    (for_any (_ state)
      (-> state
          (Term (State state) [])))
    (effect (|>> {#Put state})))

  (the (with_state initial it)
    (for_any (_ state of)
      (-> state (Term (State state) of)
          (//.Cont of)))
    (do [! //.monad]
      [it (/.context (//#each (|>> {#Pure}) it))]
      (loop (next [old initial
                   it it])
        (when it
          {#Impure effect}
          (when effect
            {#Get [[] after]}
            (next old (after old))
            
            {#Put [[new] after]}
            (next new (after [])))

          {#Pure it}
          (in it)))))

  (the double
    (Term (State Natural) Natural)
    (do //.monad
      [it ..get
       _ (..put (n.+ it it))]
      (in it)))

  (the _
    Any
    (let [it (<| //.value
                 (with_state 123)
                 (do //.monad
                   [_1 ..double
                    _ (in (.log!# (%.message "[!] " (%.natural _1))))
                    _2 ..double
                    _ (in (.log!# (%.message "[!] " (%.natural _2))))
                    _4 ..double
                    _ (in (.log!# (%.message "[!] " (%.natural _4))))]
                   ..get))
          _ (.log!# (%.message "[!] " (%.natural it)))]
      []))
  )
