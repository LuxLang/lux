... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.require
 [library
  [lux (.except)
   [control
    [monad (.only Monad
                  do)]
    ["[0]" try (.only Try)]
    ["ex" exception (.only Exception)]]
   [data
    ["[0]" text (.only)
     ["%" \\injection]]]
   [type (.only sharing)
    ["[0]" check]]
   [compiler
    ["[0]" phase
     ["[0]" analysis
      ["[0]" module]
      ["[0]" type]]
     ["[0]" translation]
     ["[0]" declaration (.only State Operation)
      ["[0]" total]]]
    ["[0]" default
     ["[0]" syntax]
     ["[0]" platform (.only Platform)]
     ["[0]" init]]
    ["[0]" cli (.only Configuration)]]
   [world
    ["[0]" file (.only File)]
    ["[0]" console (.only Console)]]]]
 ["[0]" /type])

(exception.the .public (error message)
  (Exception Text)
  message)

(the .public module "<INTERPRETER>")

(the fresh_source
  Source
  [[..module 1 0] 0 ""])

(the (add_line line [where offset input])
  (-> Text Source Source)
  [where offset (%.message input text.new_line line)])

(the exit_command
  Text
  "exit")

(the welcome_message
  Text
  (%.message text.new_line
             "Welcome to the interpreter!" text.new_line
             "Type '" ..exit_command "' to leave." text.new_line
             text.new_line))

(the farewell_message
  Text
  "Till next time...")

(the enter_module
  (for_any (_ anchor expression declaration)
    (Operation anchor expression declaration Any))
  (declaration.of_analysis
   (do phase.monad
     [_ (module.create 0 ..module)]
     (analysis.set_current_module ..module))))

(the (initialize Monad<!> Console<!> platform configuration translation_bundle)
  (for_any (_ ! anchor expression declaration)
    (-> (Monad !)
        (Console !) (Platform ! anchor expression declaration)
        Configuration
        (translation.Bundle anchor expression declaration)
        (! (State anchor expression declaration))))
  (do Monad<!>
    [state (platform.initialize platform translation_bundle)
     state (platform.compile platform
                             (has cli.#module syntax.prelude configuration)
                             (has [declaration.#analysis declaration.#state
                                   .#info .#mode]
                                  {.#Interpreter}
                                  state))
     [state _] (of (its platform.#file_system platform)
                   lift (phase.value' state enter_module))
     _ (of Console<!> write ..welcome_message)]
    (in state)))

(expansion.let [<Interpretation> (these (Operation anchor expression declaration [Type Any]))]
  
  (the (interpret_declaration code)
    (for_any (_ anchor expression declaration)
      (-> Code <Interpretation>))
    (do phase.monad
      [_ (total.phase code)
       _ init.refresh]
      (in [Any []])))

  (the (interpret_expression code)
    (for_any (_ anchor expression declaration)
      (-> Code <Interpretation>))
    (do [! phase.monad]
      [state phase.state
       .let [analyse (its [declaration.#analysis declaration.#phase] state)
             synthesize (its [declaration.#synthesis declaration.#phase] state)
             translate (its [declaration.#translation declaration.#phase] state)]
       [_ codeT codeA] (declaration.of_analysis
                        (analysis.with_scope
                          (type.with_fresh_env
                            (do !
                              [[codeT codeA] (type.with_inference
                                               (analyse code))
                               codeT (type.with_env
                                       (check.clean codeT))]
                              (in [codeT codeA])))))
       codeS (declaration.of_synthesis
              (synthesize codeA))]
      (declaration.of_translation
       (translation.with_buffer
         (do !
           [codeH (translate codeS)
            count translation.next
            codeV (translation.evaluate! (%.message "interpretation_" (%.nat count)) codeH)]
           (in [codeT codeV]))))))

  (the (interpret configuration code)
    (for_any (_ anchor expression declaration)
      (-> Configuration Code <Interpretation>))
    (function (_ state)
      (when (<| (phase.value' state)
                (sharing [anchor expression declaration]
                  (is (State anchor expression declaration)
                      state)
                  (is <Interpretation>
                      (interpret_declaration code))))
        {try.#Success [state' output]}
        {try.#Success [state' output]}

        {try.#Failure error}
        (if (ex.is? total.not_a_declaration error)
          (<| (phase.value' state)
              (sharing [anchor expression declaration]
                (is (State anchor expression declaration)
                    state)
                (is <Interpretation>
                    (interpret_expression code))))
          {try.#Failure error}))))
  )

(the (execute configuration code)
  (for_any (_ anchor expression declaration)
    (-> Configuration Code (Operation anchor expression declaration Text)))
  (do phase.monad
    [[codeT codeV] (interpret configuration code)
     state phase.state]
    (in (/type.represent (its [declaration.#analysis declaration.#state] state)
                         codeT
                         codeV))))

(every (Context anchor expression declaration)
  (Record
   [#configuration Configuration
    #state (State anchor expression declaration)
    #source Source]))

(expansion.let [<Context> (these (Context anchor expression declaration))]
  (the (read_eval_print context)
    (for_any (_ anchor expression declaration)
      (-> <Context> (Try [<Context> Text])))
    (do try.monad
      [.let [[_where _offset _code] (its #source context)]
       [source' input] (syntax.parse ..module syntax.no_aliases (text.size _code) (its #source context))
       [state' representation] (let [... TODO: Simplify ASAP
                                     state (sharing [anchor expression declaration]
                                             (is <Context>
                                                 context)
                                             (is (State anchor expression declaration)
                                                 (its #state context)))]
                                 (<| (phase.value' state)
                                     ... TODO: Simplify ASAP
                                     (sharing [anchor expression declaration]
                                       (is <Context>
                                           context)
                                       (is (Operation anchor expression declaration Text)
                                           (execute (its #configuration context) input)))))]
      (in [(|> context
               (has #state state')
               (has #source source'))
           representation]))))

(the .public (value Monad<!> Console<!> platform configuration translation_bundle)
  (for_any (_ ! anchor expression declaration)
    (-> (Monad !)
        (Console !) (Platform ! anchor expression declaration)
        Configuration
        (translation.Bundle anchor expression declaration)
        (! Any)))
  (do [! Monad<!>]
    [state (initialize Monad<!> Console<!> platform configuration)]
    (loop (again [context [#configuration configuration
                           #state state
                           #source ..fresh_source]
                  multi_line? false])
      (do !
        [_ (if multi_line?
             (of Console<!> write "  ")
             (of Console<!> write "> "))
         line (of Console<!> read_line)]
        (if (and (not multi_line?)
                 (text.= ..exit_command line))
          (of Console<!> write ..farewell_message)
          (when (read_eval_print (revised #source (add_line line) context))
            {try.#Success [context' representation]}
            (do !
              [_ (of Console<!> write representation)]
              (again context' false))

            {try.#Failure error}
            (if (ex.is? syntax.end_of_file error)
              (again context true)
              (exec (log! (ex.error ..error error))
                (again (has #source ..fresh_source context) false))))))
      )))
