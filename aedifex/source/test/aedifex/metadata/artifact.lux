... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" maybe]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [concurrency
    ["[0]" future]]
   [data
    ["[0]" text]
    [format
     ["[0]" xml
      ["<[1]>" \\projection]]]
    [collection
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [meta
    ["[0]" code]]
   ["[0]" time (.only)
    ["[0]" date]
    ["[0]" year]
    ["[0]" month]
    ["[0]" instant]
    ["[0]" duration]]
   [world
    ["[0]" file]
    ["[0]" environment
     ["program" /]
     ["[1]" \\projection]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" // (.only)
    ["/[1]" //
     ["[1][0]" artifact]
     ["[1][0]" repository
      ["[1]/[0]" local]]]]]])

(the .public random
  (Random /.Metadata)
  (all random.and
       (random.alphabetic 5)
       (random.alphabetic 5)
       (random.list 5 (random.alphabetic 5))
       (monad.let [! random.monad]
         [year (by ! each (|>> (n.% 9,000) (n.+ 1,000) .integer) random.natural)
          month (by ! each (|>> (n.% 12) (n.+ 1)) random.natural)
          day_of_month (by ! each (|>> (n.% 28) (n.+ 1)) random.natural)
          hour (by ! each (n.% 24) random.natural)
          minute (by ! each (n.% 60) random.natural)
          second (by ! each (n.% 60) random.natural)]
         (pure (try.trusted
                (monad.let try.monad
                  [year (year.year year)
                   month (month.by_number month)
                   date (date.date year month day_of_month)
                   time (time.time
                         [time.:hour hour
                          time.:minute minute
                          time.:second second
                          time.:milli_second 0])]
                  (pure (instant.of_date_time date time))))))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Metadata])
      (monad.let random.monad
        [expected ..random
         .let [artifact [///artifact.:group (its /.:group expected)
                         ///artifact.:name (its /.:name expected)
                         ///artifact.:version (|> expected
                                                  (its /.:versions)
                                                  (list.item 0)
                                                  (try.else ""))]]]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence ..random))
             
             (monad.let random.monad
               [expected ..random]
               (_.coverage [/.as_xml /.of_xml]
                 (|> /.of_xml
                     (<xml>.value (list (/.as_xml expected)))
                     (try:each (by /.equivalence = expected))
                     (try.else false))))
             (_.coverage [/.uri]
               (text.= (//.remote_project_uri artifact)
                       (/.uri artifact)))
             (monad.let random.monad
               [home (random.lower_cased 5)
                working_directory (random.lower_cased 5)
                .let [program (program.future (program.memory environment.empty home working_directory))
                      fs (file.memory (by file.default delimiter))
                      repository (///repository/local.repository program fs)]]
               (pure (monad.let future.monad
                       [wrote? (/.write repository artifact expected)
                        actual (/.read repository artifact)]
                       (unit.coverage [/.write /.read]
                         (and (when wrote?
                                {try.:Success _} true
                                {try.:Failure _} false)
                              (when actual
                                {try.:Success actual}
                                (by /.equivalence = expected actual)
                                
                                {try.:Failure _}
                                false))))))
             ))))
