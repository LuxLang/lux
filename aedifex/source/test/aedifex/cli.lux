... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [control
    ["[0]" pipe]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" stack (.use "[1]:[0]" monoid)]
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]]
   [program
    ["cli" \\projection]]
   [test
    ["_" property (.only Test)]]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1]" profile]]]])

(the compilation
  (Random /.Compilation)
  (random.or (random:pure [])
             (random:pure [])))

(the command
  (Random /.Command)
  (all random.or
       ... :Version
       (random:pure [])
       ... :Clean
       (random:pure [])
       ... :POM
       (random:pure [])
       ... :Dependencies
       (random:pure [])
       ... :purestall
       (random:pure [])
       ... :Deploy
       (all random.and
            (random.alphabetic 1)
            (random.alphabetic 1)
            (random.alphabetic 1))
       ... :Compilation
       ..compilation
       ... :Auto
       ..compilation))

(the (compilation_injection value)
  (-> /.Compilation
      (Stack Text))
  (when value
    {/.:Build} (stack "build")
    {/.:Test} (stack "test")))

(the (injection value)
  (-> /.Command
      (Stack Text))
  (when value
    {/.:Version} (stack "version")
    {/.:Clean} (stack "clean")
    {/.:POM} (stack "pom")
    {/.:Dependencies} (stack "deps")
    {/.:Install} (stack "install")
    {/.:Deploy repository [user password]} (stack "deploy" repository user password)
    {/.:Compilation compilation} (..compilation_injection compilation)
    {/.:Auto compilation} (stack:composite (stack "auto") (..compilation_injection compilation))))

(the without_profile
  Test
  (monad.let random.monad
    [expected ..command]
    (_.test "Without profile."
      (|> /.command
          (cli.value (..injection expected))
          (pipe.when
            {try.:Success [names actual]}
            (and (by (list.equivalence text.equivalence) = (list) names)
                 (by /.equivalence = expected actual))
            
            {try.:Failure error}
            false)))))

(the with_profile
  Test
  (monad.let random.monad
    [expected_profile (random.alphabetic 1)
     expected_command ..command]
    (_.test "With profile."
      (|> /.command
          (cli.value (stack:composite (stack "with" expected_profile)
                                      (..injection expected_command)))
          (pipe.when
            {try.:Success [actual_profile actual_command]}
            (and (by (list.equivalence text.equivalence) = (list expected_profile) actual_profile)
                 (by /.equivalence = expected_command actual_command))
            
            {try.:Failure error}
            false)))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Compilation
              /.:Build /.:Test

              /.Command
              /.:Version /.:Clean /.:POM /.:Dependencies /.:Install /.:Deploy /.:Compilation /.:Auto]
             (all _.and
                  (_.for [/.equivalence]
                         (equivalenceT.spec /.equivalence ..command))

                  (_.for [/.command]
                         (all _.and
                              ..without_profile
                              ..with_profile
                              ))))))
