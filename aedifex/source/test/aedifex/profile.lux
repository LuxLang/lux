... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except name)
   [abstract
    [hash (.only Hash)]
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try]]
   [data
    ["[0]" text]
    [collection
     ["[0]" set (.only Set)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list]]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [compiler
    [meta
     [cli
      ["[0]" compiler (.only)
       ["$[1]" \\test]]]]]
   [program
    ["cli" \\projection]]
   [test
    ["_" property (.only Test)]]]]
 [//
  ["@[0]" artifact]
  ["@[0]" dependency]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1][0]" runtime]
    ["[1][0]" dependency (.only Dependency)]
    [repository
     [remote (.only Address)]]]]])

(the distribution
  (Random /.Distribution)
  (random.or (random:pure [])
             (random:pure [])))

(the license
  (Random /.License)
  (all random.and
       (random.alphabetic 1)
       (random.alphabetic 1)
       ..distribution))

(the scm
  (Random /.SCM)
  (random.alphabetic 1))

(the organization
  (Random /.Organization)
  (all random.and
       (random.alphabetic 1)
       (random.alphabetic 1)))

(the email
  (Random /.Email)
  (random.alphabetic 1))

(the developer
  (Random /.Developer)
  (all random.and
       (random.alphabetic 1)
       (random.alphabetic 1)
       (random.maybe organization)))

(the contributor
  (Random /.Contributor)
  ..developer)

(the (list_of random)
  (for_any (_ a) (-> (Random a) (Random (List a))))
  (monad.let [! random.monad]
    [size (by ! each (n.% 5) random.natural)]
    (random.list size random)))

(the (set_of hash random)
  (for_any (_ a) (-> (Hash a) (Random a) (Random (Set a))))
  (by random.functor each
      (set.of_list hash)
      (..list_of random)))

(the (dictionary_of key_hash key_random value_random)
  (for_any (_ k v)
    (-> (Hash k) (Random k) (Random v)
        (Random (Dictionary k v))))
  (by random.functor each
      (dictionary.of_list key_hash)
      (..list_of (random.and key_random value_random))))

(the info
  (Random /.Info)
  (all random.and
       (random.maybe (random.alphabetic 2))
       (random.maybe ..scm)
       (random.maybe (random.alphabetic 3))
       (..list_of ..license)
       (random.maybe ..organization)
       (..list_of ..developer)
       (..list_of ..contributor)
       ))

(the name
  (Random /.Name)
  (random.alphabetic 1))

(the repository
  (Random Address)
  (random.alphabetic 1))

(the source
  (Random /.Source)
  (random.alphabetic 1))

(the target
  (Random /.Target)
  (random.alphabetic 1))

(the (program module_size proper_size)
  (-> Natural Natural
      (Random Name))
  (random.and (random.alphabetic module_size)
              (random.alphabetic proper_size)))

(the .public random
  (Random /.Profile)
  (all random.and
       (..list_of ..name)
       (random.maybe @artifact.random)
       (random.maybe ..info)
       (..set_of text.hash ..repository)
       (..set_of //dependency.hash @dependency.random)
       @dependency.random
       (..list_of $compiler.random)
       (..set_of text.hash ..source)
       ..target
       (random.maybe (..program 1 2))
       (random.maybe (..program 3 4))
       (..dictionary_of text.hash (random.alphabetic 5) ..repository)
       (..list_of (random.and (random.alphabetic 6)
                              (random.alphabetic 7)))
       (random:pure //runtime.default_java)
       (random:pure //runtime.default_js)
       (random:pure //runtime.default_python)
       (random:pure //runtime.default_lua)
       (random:pure //runtime.default_ruby)
       ))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Distribution /.License /.SCM /.Organization
              /.Email /.Developer /.Contributor /.Info
              /.Source /.Target /.Name /.Profile]
             (`` (all _.and
                      (_.for [/.equivalence]
                             (equivalenceT.spec /.equivalence ..random))
                      (_.for [/.monoid]
                             (monoidT.spec /.equivalence /.monoid ..random))

                      (_.coverage [/.default]
                        (text.= "" /.default))
                      (_.coverage [/.default_lux]
                        (|> (by /.monoid identity)
                            (its /.:lux)
                            (identical? /.default_lux)))
                      (_.coverage [/.default_target]
                        (|> (by /.monoid identity)
                            (its /.:target)
                            (identical? /.default_target)))
                      )))))
