... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try]]
   [function
    ["[0]" predicate]]
   [concurrency
    ["[0]" future]]
   [data
    [text
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" dictionary]
     ["[0]" set]]
    [format
     ["[0]" xml]]]
   [math
    ["[0]" random (.only Random)]]
   [world
    ["[0]" file]
    ["[0]" environment
     ["program" /]
     ["[1]" \\projection]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["@[0]" version]
  ["$/[1]" //
   ["[1][0]" package]
   ["[1][0]" artifact]
   ["[1][0]" dependency
    ["[1]/[0]" resolution]]]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1][0]" clean]
    ["/[1]" //
     ["[1]" profile]
     ["[1][0]" action]
     ["[1][0]" pom]
     ["[1][0]" package]
     ["[1][0]" artifact (.only)
      ["[1]/[0]" type]]
     ["[1][0]" dependency (.only)
      ["[1]/[0]" resolution]
      ["[1]/[0]" deployment]
      ["[1]/[0]" status]]
     ["[1][0]" repository (.only)
      ["[1]/[0]" origin]
      ["[1]/[0]" local]]]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [home (random.alphabetic 5)
         working_directory (random.alphabetic 5)

         dependee_artifact $///artifact.random
         depender_artifact (random.only (predicate.complement
                                         (by ///artifact.equality = dependee_artifact))
                                        $///artifact.random)

         [_ dependee_package] $///package.random
         [_ depender_package] $///package.random

         .let [dependee [///dependency.:artifact dependee_artifact
                         ///dependency.:type ///artifact/type.lux_library]
               depender [///dependency.:artifact depender_artifact
                         ///dependency.:type ///artifact/type.lux_library]

               dependee_pom (|> (by ///.monoid identity)
                                (has ///.:identity {.:Some dependee_artifact})
                                ///pom.write
                                try.trusted)
               depender_pom (|> (by ///.monoid identity)
                                (has ///.:identity {.:Some depender_artifact})
                                (has ///.:dependencies (set.of_list ///dependency.hash (list dependee)))
                                ///pom.write
                                try.trusted)
               
               dependee_package (|> dependee_package
                                    (has ///package.:origin {///repository/origin.:Remote ""})
                                    (has ///package.:pom [dependee_pom
                                                          (|> dependee_pom (by xml.text as) (by utf8.binary as))
                                                          {///dependency/status.:Unverified}]))
               depender_package (|> depender_package
                                    (has ///package.:origin {///repository/origin.:Remote ""})
                                    (has ///package.:pom [depender_pom
                                                          (|> depender_pom (by xml.text as) (by utf8.binary as))
                                                          {///dependency/status.:Unverified}]))

               fs (file.memory (by file.default delimiter))
               program (program.future (program.memory environment.empty home working_directory))]]
        (pure (monad.let future.monad
                [verdict (monad.let ///action.monad
                           [.let [console (@version.echo "")
                                  local (///repository/local.repository program fs)]
                            pre (|> ///dependency/resolution.empty
                                    (dictionary.has dependee dependee_package)
                                    (///dependency/deployment.all local))
                            post (|> (by ///.monoid identity)
                                     (has ///.:dependencies (set.of_list ///dependency.hash (list dependee depender)))
                                     (/.do! console local
                                            (list (///repository.memory ($///dependency/resolution.single depender_artifact depender_package)
                                                                        []))
                                            (function (_ url)
                                              (///repository.memory $///dependency/resolution.nope []))))

                            .let [had_dependee_before!
                                  (set.member? pre dependee_artifact)

                                  lacked_depender_before!
                                  (not (set.member? pre depender_artifact))

                                  had_dependee_after!
                                  (dictionary.in_domain? post dependee)
                                  
                                  had_depender_after!
                                  (dictionary.in_domain? post depender)]]
                           (pure (and had_dependee_before!
                                      lacked_depender_before!
                                      
                                      had_dependee_after!
                                      had_depender_after!)))]
                (unit.coverage [/.do!]
                  (try.else false verdict)))))))
