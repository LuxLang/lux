... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [control
    [io (.only IO)]
    ["[0]" pipe]]
   [error
    ["[0]" try]
    ["[0]" exception]]
   [concurrency
    ["[0]" future (.only Future)]]
   [data
    ["[0]" text]
    [collection
     ["[0]" list]
     ["[0]" dictionary]]]
   [math
    ["[0]" random (.only Random)]]
   [macro
    ["[0]" template]]
   [world
    ["[0]" file]
    ["[0]" shell (.only Shell)]
    ["[0]" environment
     ["program" /]
     ["[1]" \\projection]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 ["[0]" //
  ["@[0]" version]
  ["$/[1]" //
   ["[1][0]" package]]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    ["[1]" profile (.only Profile)]
    ["[1][0]" action]
    ["[1][0]" artifact (.only)
     ["[1]/[0]" type]]
    ["[1][0]" dependency (.only Dependency)
     ["[1]/[0]" resolution (.only Resolution)]]]]])

(the .public good_shell
  (-> Any (Shell IO))
  (shell.memory
   (function (_ [actual_environment actual_working_directory actual_command actual_arguments])
     {try.:Success
      (is (shell.Memory [])
          (implementation
           (the (on_read state)
             (exception.except shell.no_more_output []))
           (the (on_fail state)
             (exception.except shell.no_more_output []))
           (the (on_write input state)
             {try.:Failure "on_write"})
           (the (on_destroy state)
             {try.:Failure "on_destroy"})
           (the (on_await state)
             {try.:Success [state shell.normal]})))})))

(the .public bad_shell
  (-> Any (Shell IO))
  (shell.memory
   (function (_ [actual_environment actual_working_directory actual_command actual_arguments])
     {try.:Success
      (is (shell.Memory [])
          (implementation
           (the (on_read state)
             (exception.except shell.no_more_output []))
           (the (on_fail state)
             (exception.except shell.no_more_output []))
           (the (on_write input state)
             {try.:Failure "on_write"})
           (the (on_destroy state)
             {try.:Failure "on_destroy"})
           (the (on_await state)
             {try.:Success [state shell.error]})))})))

(the .public (reader_shell error?)
  (-> Bit (-> (List Text) (Shell IO)))
  (shell.memory
   (function (_ [actual_environment actual_working_directory actual_command actual_arguments])
     {try.:Success
      (is (shell.Memory (List Text))
          (implementation
           (the (on_read state)
             (if error?
                 (exception.except shell.no_more_output [])
                 (when (list.split 1 state)
                   [(list head) tail]
                   {try.:Success [tail head]}
                   
                   _
                   (exception.except shell.no_more_output []))))
           (the (on_fail state)
             (if error?
                 (when (list.split 1 state)
                   [(list head) tail]
                   {try.:Success [tail head]}
                   
                   _
                   (exception.except shell.no_more_output []))
                 (exception.except shell.no_more_output [])))
           (the (on_write input state)
             {try.:Failure "on_write"})
           (the (on_destroy state)
             {try.:Failure "on_destroy"})
           (the (on_await state)
             {try.:Success [state shell.error]})))})))

(the compiler
  (Random Dependency)
  (monad.let random.monad
    [lux_version (random.alphabetic 5)
     .let [js_compiler [///dependency.:artifact [///artifact.:group /.lux_group
                                                 ///artifact.:name /.js_lux_name
                                                 ///artifact.:version lux_version]
                        ///dependency.:type ///artifact/type.js_library]]]
    (`` (all random.either
             (pure js_compiler)
             (,, (template.with [<compiler>]
                   [(pure [///dependency.:artifact [///artifact.:group /.lux_group
                                                    ///artifact.:name <compiler>
                                                    ///artifact.:version lux_version]
                           ///dependency.:type ///artifact/type.lux_library])]

                   [[/.jvm_lux_name]
                    [/.python_lux_name]
                    [/.lua_lux_name]
                    [/.ruby_lux_name]]))))))

(the .public resolution
  (Random [Dependency Resolution])
  (monad.let random.monad
    [dependency ..compiler
     [_ package] $///package.random]
    (pure [dependency
           (|> ///dependency/resolution.empty
               (dictionary.has dependency package))])))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [last_read (random.alphabetic 5)
         last_error (random.alphabetic 5)
         .let [fs (file.memory (by file.default delimiter))
               shell (shell.future (..good_shell []))]
         program (random.and (random.alphabetic 5)
                             (random.alphabetic 5))
         target (random.alphabetic 5)
         home (random.alphabetic 5)
         working_directory (random.alphabetic 5)
         .let [empty_profile (is Profile
                                 (by ///.monoid identity))
               with_target (is (-> Profile Profile)
                               (has ///.:target target))
               with_program (is (-> Profile Profile)
                                (has ///.:program {.:Some program}))
               
               profile (|> empty_profile
                           with_program
                           with_target)]]
        (all _.and
             (pure (monad.let future.monad
                     [outcome (/.do! (@version.echo "") (program.future (program.memory environment.empty home working_directory)) fs shell ///dependency/resolution.empty
                                     (with_target empty_profile))]
                     (unit.coverage [/.no_specified_program]
                       (when outcome
                         {try.:Success _}
                         false

                         {try.:Failure error}
                         (exception.is? /.no_specified_program error)))))
             (pure (monad.let future.monad
                     [outcome (/.do! (@version.echo "") (program.future (program.memory environment.empty home working_directory)) fs shell ///dependency/resolution.empty profile)]
                     (unit.coverage [/.Lux /.no_available_lux]
                       (when outcome
                         {try.:Success _}
                         false

                         {try.:Failure error}
                         (exception.is? /.no_available_lux error)))))
             (monad.let !
               [.let [console (@version.echo "")]
                [compiler resolution] ..resolution]
               (pure (monad.let future.monad
                       [verdict (monad.let ///action.monad
                                  [_ (/.do! console (program.future (program.memory environment.empty home working_directory))
                                            fs shell resolution
                                            (has ///.:lux compiler profile))
                                   start (by console read_line [])
                                   end (by console read_line [])]
                                  (pure (and (text.= /.start start)
                                             (text.= /.success end))))]
                       (unit.coverage [/.do!
                                       /.lux_group
                                       /.jvm_lux_name
                                       /.js_lux_name
                                       /.python_lux_name
                                       /.lua_lux_name
                                       /.ruby_lux_name
                                       /.start
                                       /.success]
                         (try.else false verdict)))))
             (monad.let !
               [.let [console (@version.echo "")]
                [compiler resolution] ..resolution]
               (pure (monad.let future.monad
                       [verdict (monad.let ///action.monad
                                  [_ (/.do! console (program.future (program.memory environment.empty home working_directory))
                                            fs (shell.future (..bad_shell [])) resolution
                                            (has ///.:lux compiler profile))
                                   start (by console read_line [])
                                   end (by console read_line [])]
                                  (pure (and (text.= /.start start)
                                             (text.= /.failure end))))]
                       (unit.coverage [/.failure]
                         (try.else false verdict)))))
             (monad.let !
               [expected/0 (random.alphabetic 5)
                expected/1 (random.alphabetic 5)
                expected/2 (random.alphabetic 5)]
               (`` (all _.and
                        (,, (template.with [<error?> <log!>]
                              [(let [console (@version.echo "")
                                     shell (|> (list expected/0 expected/1 expected/2)
                                               (..reader_shell <error?>)
                                               shell.future)]
                                 (pure (monad.let [! future.monad]
                                         [verdict (monad.let ///action.monad
                                                    [process (shell [environment.empty working_directory "" (list "")])
                                                     _ (<log!> console process)
                                                     actual/0 (by console read_line [])
                                                     actual/1 (by console read_line [])
                                                     actual/2 (by console read_line [])
                                                     end! (|> (by console read_line [])
                                                              (by ! each (|>> (pipe.when
                                                                                {try.:Failure error}
                                                                                true
                                                                                
                                                                                {try.:Success _}
                                                                                false)
                                                                              {try.:Success})))]
                                                    (pure (and (text.= expected/0 actual/0)
                                                               (text.= expected/1 actual/1)
                                                               (text.= expected/2 actual/2)
                                                               end!)))]
                                         (unit.coverage [<log!>]
                                           (try.else false verdict)))))]

                              [[0b /.log_output!]
                               [1b /.log_error!]]))
                        )))
             ))))
