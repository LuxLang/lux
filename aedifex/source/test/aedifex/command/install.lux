... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [concurrency
    ["[0]" future (.only Future)]]
   [data
    ["[0]" binary]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list]
     ["[0]" set (.only Set)]]]
   [math
    ["[0]" random]]
   [world
    ["[0]" file]
    ["[0]" environment
     ["program" / (.only Environment)]
     ["[1]" \\projection]]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [//
  ["$[0]" version]
  [//
   ["$[0]" profile]
   ["$[0]" artifact]]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    ["[1]" profile]
    ["[1][0]" action (.only Action)]
    ["[1][0]" local]
    ["[1][0]" artifact (.only)
     ["[1]/[0]" extension]]
    ["[1][0]" repository
     ["[1]/[0]" local]]]]])

(the .public (make_sources! fs sources)
  (-> (file.System Future) (Set file.Path)
      (Action (List Any)))
  (let [/ (by fs delimiter)
        ! ///action.monad]
    (|> sources
        set.as_list
        (list.each' ! (function (_ head)
                        (monad.let !
                          [_ (is (Future (Try Any))
                                 (file.make_directories future.monad fs head))]
                          (is (Future (Try Any))
                              (file.make_file future.monad fs (binary.empty 0) (text head / head ".lux")))))))))

(the (execute! program fs sample)
  (-> (Environment Future) (file.System Future) ///.Profile (Future (Try Text)))
  (monad.let ///action.monad
    [.let [console ($version.echo "")]
     _ (..make_sources! fs (its ///.#sources sample))
     _ (/.do! console fs (///repository/local.repository program fs) sample)]
    (by console read_line [])))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [identity $artifact.random
         sample (by ! each (has ///.#identity {.#Some identity})
                    $profile.random)
         home (random.alphabetic 5)
         working_directory (random.alphabetic 5)
         .let [/ (by file.default delimiter)]]
        (all _.and
             (pure (monad.let [! future.monad]
                     [.let [fs (file.memory /)
                            program (program.future (program.memory environment.empty home working_directory))

                            artifact_path (///local.uri (its ///artifact.#version identity) identity)
                            library_path (text artifact_path ///artifact/extension.lux_library)
                            pom_path (text artifact_path ///artifact/extension.pom)]
                      verdict (monad.let [! ///action.monad]
                                [succeeded! (by ! each (text.= /.success)
                                                (..execute! program fs sample))
                                 library_exists! (|> library_path
                                                     (text home /)
                                                     (by fs file?)
                                                     (by future.monad each (|>> {try.#Success})))
                                 pom_exists! (|> pom_path
                                                 (text home /)
                                                 (by fs file?)
                                                 (by future.monad each (|>> {try.#Success})))]
                                (pure (and succeeded!
                                           library_exists!
                                           pom_exists!)))]
                     (unit.coverage [/.do! /.success]
                       (try.else false verdict))))
             (pure (monad.let [! future.monad]
                     [.let [fs (file.memory /)
                            program (program.future (program.memory environment.empty home working_directory))]
                      logging (..execute! program fs (has ///.#identity {.#None} sample))]
                     (unit.coverage [/.failure]
                       (|> logging
                           (try:each (text.= /.failure))
                           (try.else false)))))
             ))))
