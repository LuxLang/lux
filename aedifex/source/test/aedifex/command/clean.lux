... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]]
   [concurrency
    ["[0]" future (.only Future)]]
   [data
    [binary (.only Binary)]
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]
     ["[0]" set]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]]]]
   [world
    ["[0]" file (.only Path)]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [//
  ["@[0]" version]
  [//
   ["@[0]" profile]
   [//
    [lux
     [data
      ["$[0]" binary]]]]]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    ["[1]" profile]
    ["[1][0]" action (.only Action)]]]])

(the node_name
  (Random Text)
  (random.alphabetic 10))

(the (files prefix)
  (-> Path
      (Random (List [Path Binary])))
  (monad.let [! random.monad]
    [count (by ! each (n.% 10) random.natural)
     names (random.set text.hash count ..node_name)
     contents (random.list count ($binary.random 100))]
    (pure (list.zipped_2 (list:each (|>> (text prefix))
                                    (set.as_list names))
                         contents))))

(the (create_file! fs [path content])
  (-> (file.System Future) [Path Binary]
      (Future (Try Any)))
  (by fs write path content))

(the (create_directory! fs path files)
  (-> (file.System Future) Path (List [Path Binary])
      (Future (Try Any)))
  (monad.let [! (try.with future.monad)]
    [_ (is (Future (Try Any))
           (file.make_directories future.monad fs path))
     _ (list.each' ! (..create_file! fs) files)]
    (pure [])))

(the (directory_exists? fs)
  (-> (file.System Future) Path
      (Future (Try Bit)))
  (|>> (by fs directory?) (try.lifted future.monad)))

(the (file_exists? fs)
  (-> (file.System Future) Path
      (Future (Try Bit)))
  (|>> (by fs file?) (try.lifted future.monad)))

(the (assets_exist? fs directory_path files)
  (-> (file.System Future) Path (List [Path Binary])
      (Future (Try Bit)))
  (monad.let [! (try.with future.monad)]
    [directory_exists? (..directory_exists? fs directory_path)
     files_exist? (is (Action (List Bit))
                      (|> files
                          (list:each product.left)
                          (list.each' ///action.monad (..file_exists? fs))))]
    (pure (and directory_exists?
               (list.every? (|>>) files_exist?)))))

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let [! random.monad]
        [context ..node_name
         target ..node_name
         sub ..node_name
         .let [fs (file.memory (by file.default delimiter))
               / (by fs delimiter)
               target_path (text context / target)
               sub_path (text target_path / sub)]
         direct_files (..files (text target_path /))
         sub_files (..files (text sub_path /))

         dummy @profile.random]
        (pure (monad.let future.monad
                [.let [console (@version.echo "")]
                 verdict (monad.let [! (try.with future.monad)]
                           [_ (..create_directory! fs target_path direct_files)
                            _ (..create_directory! fs sub_path sub_files)
                            context_exists!/pre (..directory_exists? fs context)
                            target_exists!/pre (..assets_exist? fs target_path direct_files)
                            sub_exists!/pre (..assets_exist? fs sub_path sub_files)
                            _ (/.do! console fs (has ///.#target target_path dummy))
                            context_exists!/post (..directory_exists? fs context)
                            target_exists!/post (..assets_exist? fs target_path direct_files)
                            sub_exists!/post (..assets_exist? fs sub_path sub_files)
                            logging (by console read_line [])]
                           (pure (and (and context_exists!/pre
                                           context_exists!/post)
                                      (and target_exists!/pre
                                           (not target_exists!/post))
                                      (and sub_exists!/pre
                                           (not sub_exists!/post))
                                      (text.= (/.success target_path) logging))))]
                (unit.coverage [/.do! /.success]
                  (try.else false verdict)))))))
