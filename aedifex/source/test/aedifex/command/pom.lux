... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]]
   [concurrency
    ["[0]" future]]
   [data
    ["[0]" binary]
    ["[0]" text (.only)
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml]]]
   [math
    ["[0]" random]]
   [world
    ["[0]" file]]
   [test
    ["[0]" unit]
    ["_" property (.only Test)]]]]
 [//
  ["@[0]" version]
  [//
   ["@[0]" profile]]]
 [\\program
  ["[0]" / (.only)
   ["//[1]" ///
    ["[1]" profile]
    ["[1][0]" action]
    ["[1][0]" pom]]]])

(the .public test
  Test
  (<| (_.covering /._)
      (monad.let random.monad
        [sample @profile.random
         .let [fs (file.memory (by file.default delimiter))]]
        (pure (monad.let [! future.monad]
                [.let [console (@version.echo "")]
                 outcome (/.do! console fs sample)]
                (when outcome
                  {try.:Success _}
                  (monad.let !
                    [verdict (monad.let ///action.monad
                               [expected (|> (///pom.write sample)
                                             (try:each (|>> (by xml.text as)
                                                            (by utf8.binary as)))
                                             (by ! pure))
                                actual (by fs read ///pom.file)

                                logging! (by ///action.monad each
                                             (text.= /.success)
                                             (by console read_line []))

                                .let [expected_content!
                                      (binary.= expected actual)]]
                               (pure (and logging!
                                          expected_content!)))]
                    (unit.coverage [/.do! /.success]
                      (try.else false verdict)))
                  
                  {try.:Failure error}
                  (unit.coverage [/.do!]
                    (when (its ///.:identity sample)
                      {.:Some _}
                      false

                      {.:None}
                      true))))))))
