... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equality
     ["[1]T" \\test]]
    ["[0]" monoid
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" text]]
   [math
    ["[0]" random (.only Random) (.use "[1]:[0]" monad)]
    [number
     [/64
      ["n" natural]]]]
   [test
    ["_" property (.only Test)]]]]
 [//
  ["@[0]" profile]]
 [\\program
  ["[0]" / (.only)
   ["/[1]" //
    ["[1]" profile]]]])

(the profile
  (Random [//.Name //.Profile])
  (|> @profile.random
      (random:each (has //.:parents (list)))
      (random.and (random.alphabetic 1))))

(the .public random
  (Random /.Project)
  (monad.let random.monad
    [[name profile] ..profile]
    (pure (/.project name profile))))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Project /.project]
             (all _.and
                  (_.for [/.equality]
                         (equalityT.spec /.equality ..random))
                  (_.for [/.monoid]
                         (monoidT.spec /.equality /.monoid ..random))

                  (_.coverage [/.file]
                    (|> /.file
                        (text.= "")
                        not))
                  (monad.let random.monad
                    [[super_name super_profile] ..profile
                     [dummy_name dummy_profile] (random.only (|>> product.left (text.= super_name) not)
                                                             ..profile)
                     [sub_name sub_profile] (random.only (function (_ [name profile])
                                                           (and (not (text.= super_name name))
                                                                (not (text.= dummy_name name))))
                                                         ..profile)
                     fake_name (random.only (function (_ name)
                                              (and (not (text.= super_name name))
                                                   (not (text.= dummy_name name))
                                                   (not (text.= sub_name name))))
                                            (random.alphabetic 1))
                     .let [project (all (by /.monoid composite)
                                        (/.project super_name super_profile)
                                        (/.project dummy_name dummy_profile)
                                        (/.project sub_name (has //.:parents (list super_name) sub_profile)))
                           circular (all (by /.monoid composite)
                                         (/.project super_name (has //.:parents (list sub_name) super_profile))
                                         (/.project dummy_name dummy_profile)
                                         (/.project sub_name (has //.:parents (list super_name) sub_profile)))]]
                    (all _.and
                         (_.coverage [/.profile]
                           (and (|> (/.profile project super_name)
                                    (try:each (by //.equality = super_profile))
                                    (try.else false))
                                (|> (/.profile project dummy_name)
                                    (try:each (by //.equality = dummy_profile))
                                    (try.else false))
                                (|> (/.profile project sub_name)
                                    (try:each (by //.equality = (by //.monoid composite sub_profile super_profile)))
                                    (try.else false))))
                         (_.coverage [/.unknown_profile]
                           (when (/.profile project fake_name)
                             {try.:Success _}
                             false

                             {try.:Failure error}
                             (exception.is? /.unknown_profile error)))
                         (_.coverage [/.circular_dependency]
                           (when (/.profile circular sub_name)
                             {try.:Success _}
                             false

                             {try.:Failure error}
                             (exception.is? /.circular_dependency error)))
                         ))
                  ))))
