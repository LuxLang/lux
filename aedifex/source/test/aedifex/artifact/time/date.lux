... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]
    ["[0]" equivalence
     ["[1]T" \\test]]]
   [error
    ["[0]" try (.use "[1]#[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" text
     ["<[1]>" \\projection]]]
   [math
    ["[0]" random (.only Random)]
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [time
    ["[0]" date]
    ["[0]" year]]
   [test
    ["_" property (.only Test)]]]]
 [\\program
  ["[0]" /]])

(the .public random
  (Random /.Date)
  (random.one (function (_ raw)
                (try.maybe
                 (monad.let try.monad
                   [year (|> raw date.year year.value i.absolute (i.% +9,000) (i.+ +1,000) year.year)
                    raw (date.date year
                                   (date.month raw)
                                   (date.day_of_month raw))]
                   (/.date raw))))
              date.random))

(the .public test
  Test
  (<| (_.covering /._)
      (_.for [/.Date])
      (monad.let random.monad
        [expected ..random
         candidate date.random]
        (all _.and
             (_.for [/.equivalence]
                    (equivalenceT.spec /.equivalence ..random))

             (_.coverage [/.as_text /.of_text]
               (|> expected
                   /.as_text
                   (<text>.value /.of_text)
                   (try#each (by /.equivalence = expected))
                   (try.else false)))
             (_.coverage [/.value /.date]
               (|> expected
                   /.value
                   /.date
                   (try#each (by /.equivalence = expected))
                   (try.else false)))
             (_.coverage [/.year_is_out_of_range]
               (when (/.date candidate)
                 {try.#Success date}
                 (identical? candidate (/.value date))
                 
                 {try.#Failure error}
                 (exception.is? /.year_is_out_of_range error)))
             (_.coverage [/.epoch]
               (date.= date.epoch (/.value /.epoch)))
             ))))
