... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Tag
                all)
   ["[0]" debug]
   ["[0]" ffi]
   [abstract
    [format (.only Format)]
    [equality (.only Equality)]
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]:[0]" monad)]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception (.only Exception)]]
   [function
    ["[0]" predicate (.only Predicate)]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text (.only \n)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml (.only Tag XML)
      ["<[1]>" \\projection]]]
    [collection
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]
     ["[0]" list (.use "[1]:[0]" functor monoid)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [world
    [console (.only Console)]
    [net (.only URL)
     ["[0]" uri]
     ["[0]" http
      ["[1]" client]]]]]]
 ["[0]" // (.only Dependency)
  ["[1][0]" status (.only Status)]
  ["/[1]" //
   ["/" profile]
   ["[1][0]" hash (.only Hash SHA1 MD5)]
   ["[1][0]" pom]
   ["[1][0]" package (.only Package)]
   ["[1][0]" artifact (.only Version Artifact)
    ["[1]/[0]" extension (.only Extension)]
    ["[1]/[0]" versioning]
    ["[0]" snapshot (.only)
     [version
      ["[0]" value]]]]
   ["[1][0]" repository (.only Repository)
    ["[1]/[0]" remote (.only Address)]
    ["[1]/[0]" origin (.only Origin)]]
   ["[1][0]" metadata
    ["[1]/[0]" snapshot]]]])

(template.with [<name>]
  [(exception.the .public (<name> [artifact extension hash])
     (Exception [Artifact Extension Text])
     (exception.report
      (list ["Artifact" (///artifact.as_text artifact)]
            ["Extension" (%.text extension)]
            ["Hash" (%.text hash)])))]

  [[sha1_does_not_match]
   [md5_does_not_match]])

(ffi.the java/lang/String
  "[1]:[0]"
  (trim [] java/lang/String))

(the (verified_hash library repository version_template artifact extension hash format exception)
  (for_any (_ h)
    (-> Binary (Repository Future) Version Artifact Extension
        (-> Binary (Hash h)) (Format Text (Hash h))
        (Exception [Artifact Extension Text])
        (Future (Try (Maybe (Hash h))))))
  (monad.let future.monad
    [?actual (by repository download (///repository/remote.uri version_template artifact extension))]
    (when ?actual
      {try.:Success actual}
      (pure (monad.let [! try.monad]
              [output (by ! each (|>> ffi.as_string (java/lang/String:trim []) ffi.of_string)
                          (by utf8.binary of actual))
               actual (|> output
                          (text.all_split_by " ")
                          (list.item 0)
                          (try.else output)
                          (by format of))
               _ (exception.assertion exception [artifact extension output]
                                      (by ///hash.equality = (hash library) actual))]
              (pure {.:Some actual})))
      
      {try.:Failure error}
      (pure {try.:Success {.:None}}))))

(the (hashed repository version_template artifact extension)
  (-> (Repository Future) Version Artifact Extension
      (Future (Try [Binary Status])))
  (monad.let (try.with future.monad)
    [data (by repository download (///repository/remote.uri version_template artifact extension))
     ?sha1 (..verified_hash data
                            repository version_template artifact (text extension ///artifact/extension.sha1)
                            ///hash.sha1 ///hash.sha1_format ..sha1_does_not_match)
     ?md5 (..verified_hash data
                           repository version_template artifact (text extension ///artifact/extension.md5)
                           ///hash.md5 ///hash.md5_format ..md5_does_not_match)]
    (pure [data (when [?sha1 ?md5]
                  [{.:Some sha1} {.:Some md5}]
                  {//status.:Verified sha1 md5}

                  [{.:Some sha1} {.:None}]
                  {//status.:Partial {.:Left sha1}}

                  [{.:None} {.:Some md5}]
                  {//status.:Partial {.:Right md5}}

                  [{.:None} {.:None}]
                  {//status.:Unverified})])))

(the .public (one repository dependency)
  (-> (Repository Future) Dependency
      (Future (Try Package)))
  (let [[artifact type] dependency
        extension (///artifact/extension.extension type)]
    (monad.let (try.with future.monad)
      [snapshot (///metadata/snapshot.read repository artifact)
       .let [version_template (its [///metadata/snapshot.:artifact ///artifact.:version] snapshot)
             artifact_version (value.as_text [value.:version version_template
                                              value.:snapshot (its [///metadata/snapshot.:versioning ///artifact/versioning.:snapshot] snapshot)])
             artifact (has ///artifact.:version artifact_version artifact)]
       [pom_data pom_status] (..hashed repository version_template artifact ///artifact/extension.pom)
       library_&_status (..hashed repository version_template artifact extension)]
      (by future.monad pure
          (monad.let try.monad
            [pom (by utf8.binary of pom_data)
             pom (by xml.text of pom)
             profile (<xml>.value (list pom) ///pom.of_xml)]
            (pure [///package.:origin {///repository/origin.:Remote ""}
                   ///package.:library library_&_status
                   ///package.:pom [pom pom_data pom_status]]))))))

(every .public Resolution
  (Dictionary Dependency Package))

(the .public empty
  Resolution
  (dictionary.empty //.hash))

(the .public equality
  (Equality Resolution)
  (dictionary.equality ///package.equality))

(alias [=]
       ..equality)

(exception.the .public (cannot_resolve dependency)
  (Exception Dependency)
  (exception.report
   (list ["Artifact" (%.text (///artifact.as_text (its //.:artifact dependency)))]
         ["Type" (%.text (its //.:type dependency))])))

(template.with [<sigil> <name> <doing> <at>]
  [(the (<name> console repository artifact)
     (-> (Console Future) (Repository Future) Artifact
         (Future (Try Any)))
     (by console write (text "[" <sigil> "]"
                             " " <doing>
                             " " (///artifact.as_text artifact)
                             " " <at>
                             " " (%.text (by repository description))
                             \n)))]

  [["?" announce_fetching "Fetching" "from"]
   ["O" announce_success "Found" "at"]
   ["X" announce_failure "Missed" "from"]])

(the .public (any console repositories dependency)
  (-> (Console Future) (List (Repository Future)) Dependency
      (Future (Try Package)))
  (list.mix' future.monad
             (function (_ repository resolution)
               (when resolution
                 {try.:Failure _}
                 (monad.let [! future.monad]
                   [_ (..announce_fetching console repository (its //.:artifact dependency))
                    outcome (..one repository dependency)]
                   (when outcome
                     {try.:Success package}
                     (monad.let !
                       [_ (..announce_success console repository (its //.:artifact dependency))]
                       (pure outcome))

                     {try.:Failure error}
                     (monad.let !
                       [_ (..announce_failure console repository (its //.:artifact dependency))]
                       (pure resolution))))

                 success
                 (future:pure success)))
             (exception.except ..cannot_resolve [dependency])
             repositories))

(the .public (all console repositories new_repository)
  (-> (Console Future) (List (Repository Future)) (-> URL (Repository Future)) (List Dependency) Resolution
      (Future [(List Dependency)
               (List Dependency)
               Resolution]))
  (function (all dependencies resolution)
    (list.mix' future.monad
               (function (_ head [successes failures resolution])
                 (when (its [//.:artifact ///artifact.:version] head)
                   ... Skip if there is no version
                   "" (future:pure [successes failures resolution])
                   _ (monad.let [! future.monad]
                       [?package (is (Future (Try Package))
                                     (when (dictionary.value head resolution)
                                       {try.:Success package}
                                       (pure {try.:Success package})

                                       not_found!
                                       (..any console repositories head)))]
                       (when ?package
                         {try.:Success package}
                         (monad.let !
                           [.let [redundant? (is (Predicate Dependency)
                                                 (predicate.or (by //.equality = head)
                                                               (dictionary.in_domain? resolution)))
                                  sub_dependencies (|> package
                                                       ///package.dependencies
                                                       (try:each (|>> set.as_list
                                                                      (list.only (|>> redundant? not))))
                                                       (try.else (list)))
                                  ... For security reasons, it's not a good idea to allow dependencies to introduce repositories.
                                  ... package_repositories (|> package
                                  ...                          ///package.repositories
                                  ...                          (try:each set.as_list
                                  ...                          (try.else (list))
                                  ...                          (list:each new_repository))
                                  ... sub_repositories (list:composite repositories package_repositories)
                                  ]
                            [sub_successes sub_failures resolution] (all sub_dependencies resolution)]
                           (pure [(.all list:composite (list head) successes sub_successes)
                                  (.all list:composite failures sub_failures)
                                  (dictionary.has head package resolution)]))

                         {try.:Failure error}
                         (future:pure [successes
                                       (list:composite (list head) failures)
                                       resolution])))))
               [(list) (list) resolution]
               dependencies)))
