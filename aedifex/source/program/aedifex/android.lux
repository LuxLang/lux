... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]]
   [control
    ["[0]" io (.only IO)]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]:[0]" monad)]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [function
    [predicate (.only Predicate)]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   [world
    ["[0]" file]]]]
 [//
  ["[0]" artifact
   ["[1]/[0]" type]
   ["[1]/[0]" extension]]])

(ffi.the java/util/zip/ZipEntry
  "[1]:[0]"
  (getSize [] long))

(ffi.the java/lang/AutoCloseable
  "[1]:[0]"
  (close [] "io" "try" void))

(ffi.the java/io/InputStream
  "[1]:[0]"
  (read [[byte] int int] "io" "try" int))

... https://stackoverflow.com/a/40249275
... https://vimalathithen.blogspot.com/2006/06/using-zipentrygetsize.html
(ffi.the java/util/zip/ZipFile
  "[1]:[0]"
  (new [java/lang/String] "io" "try")
  (getEntry [java/lang/String] "io" "try" java/util/zip/ZipEntry)
  (getInputStream [java/util/zip/ZipEntry] "io" "try" java/io/InputStream))

(the .public archive?
  (Predicate file.Path)
  (text.ends_with? artifact/extension.android_archive))

(the name_of_jar_of_classes "classes.jar")

(the (jar_of_classes_in_archive path_of_archive)
  (-> file.Path
      (IO (Try Binary)))
  (monad.let [! (try.with io.monad)]
    [zip_file (java/util/zip/ZipFile:new [(ffi.as_string path_of_archive)])
     zip_entry (java/util/zip/ZipFile:getEntry [(ffi.as_string name_of_jar_of_classes)] zip_file)
     .let [size (.natural (ffi.of_long (java/util/zip/ZipEntry:getSize [] zip_entry)))
           data (binary.empty size)]
     input_stream (java/util/zip/ZipFile:getInputStream [zip_entry] zip_file)
     bytes_read (loop (bytes_read [so_far 0])
                  (if (natural.= size so_far)
                      (pure so_far)
                      (monad.let !
                        [in_addition (java/io/InputStream:read [data
                                                                (ffi.as_int (.integer so_far))
                                                                (ffi.as_int (.integer (natural.- so_far size)))]
                                                               input_stream)]
                        (bytes_read (natural.+ so_far (.natural (ffi.of_int in_addition)))))))
     _ (java/lang/AutoCloseable:close [] input_stream)
     _ (java/lang/AutoCloseable:close [] zip_file)]
    (pure data)))

(ffi.the java/io/File
  "[1]:[0]"
  ("static" createTempFile [java/lang/String java/lang/String] "io" "try" java/io/File)
  (deleteOnExit [] "io" "try" void)
  (getPath [] java/lang/String))

(the .public (temporary_jar_of_classes_in_archive fs path_of_archive)
  (-> (file.System Future) file.Path
      (Future (Try file.Path)))
  (monad.let (try.with future.monad)
    [[path data] (future.soon (monad.let (try.with io.monad)
                                [name (|> path_of_archive
                                          (text.all_split_by (by fs delimiter))
                                          list.in_reverse
                                          (list.item 0)
                                          (by io.monad pure))
                                 data (jar_of_classes_in_archive path_of_archive)
                                 it (java/io/File:createTempFile [(ffi.as_string artifact/type.android_archive)
                                                                  (ffi.as_string name)])
                                 _ (java/io/File:deleteOnExit [] it)]
                                (pure [(ffi.of_string (java/io/File:getPath [] it))
                                       data])))
     _ (by fs write path data)]
    (pure path)))
