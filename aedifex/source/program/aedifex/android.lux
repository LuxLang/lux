... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Scope)
   ["[0]" ffi]
   [abstract
    [equality (.only Equality)]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]]
   [control
    ["[0]" scope (.only Scope)]
    ["[0]" io (.only IO)]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]:[0]" monad)]]
   [data
    ["[0]" product]
    ["[0]" binary (.only Binary)]
    ["[0]" text]
    [collection
     ["[0]" list]]]
   [function
    [predicate (.only Predicate)]]
   [math
    [number
     [/64
      ["[0]" natural]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]
    ["[0]" static]]
   [world
    ["[0]" file]]]]
 [//
  ["[0]" zip]
  ["[0]" artifact
   ["[1]/[0]" type]
   ["[1]/[0]" extension]]])

(the .public archive?
  (Predicate file.Path)
  (text.ends_with? artifact/extension.android_archive))

(the name_of_jar_of_classes "classes.jar")

(ffi.the java/io/File
  "[1]:[0]"
  ("static" createTempFile [java/lang/String java/lang/String] "io" "try" java/io/File)
  (deleteOnExit [] "io" "try" void)
  (getPath [] java/lang/String))

(the .public (temporary_jar_of_classes_in_archive fs path_of_archive)
  (-> (file.System Future) file.Path
      (Future (Try file.Path)))
  (monad.let (try.with future.monad)
    [[path data] (future.soon (monad.let (try.with io.monad)
                                [name (|> path_of_archive
                                          (text.all_split_by (by fs delimiter))
                                          list.in_reverse
                                          (list.item 0)
                                          (by io.monad pure))
                                 data (zip.with path_of_archive
                                        (zip.in ..name_of_jar_of_classes))
                                 it (java/io/File:createTempFile [(ffi.as_string artifact/type.android_archive)
                                                                  (ffi.as_string name)])
                                 _ (java/io/File:deleteOnExit [] it)]
                                (pure [(ffi.of_string (java/io/File:getPath [] it))
                                       data])))
     _ (by fs write path data)]
    (pure path)))

(every .public Profile
  (Record
   [:root file.Path
    :platform file.Path
    :tools file.Path
    :manifest file.Path
    :bundletool file.Path]))

(the (sdk it)
  (-> Profile
      (Scope (file.System Future)
             file.Path))
  (monad.let scope.monad
    [fs scope.context
     .let [/ (by fs delimiter)]]
    (pure (text (its :root it)
                / "Sdk"))))

(the .public (jar it)
  (-> Profile
      (Scope (file.System Future)
             file.Path))
  (monad.let scope.monad
    [sdk (..sdk it)
     fs scope.context
     .let [/ (by fs delimiter)]]
    (pure (text sdk
                / "platforms"
                / "android-" (its :platform it)
                / "android.jar"))))

(the (tools it)
  (-> Profile
      (Scope (file.System Future)
             file.Path))
  (monad.let scope.monad
    [sdk (..sdk it)
     fs scope.context
     .let [/ (by fs delimiter)]]
    (pure (text sdk
                / "build-tools"
                / (its :tools it)))))

(template.with [,tool]
  [(the .public (,tool it)
     (-> Profile
         (Scope (file.System Future)
                file.Path))
     (monad.let scope.monad
       [tools (..tools it)
        fs scope.context
        .let [/ (by fs delimiter)]]
       (pure (text tools
                   / (static.text (name.proper (name ,tool)))))))]

  [[d8]
   [aapt2]])

(the .public equality
  (Equality Profile)
  (all product.equality
       text.equality
       text.equality
       text.equality
       text.equality
       text.equality))
