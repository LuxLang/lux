... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except text)
   [abstract
    [equality (.only Equality)]
    ["<>" projection]]
   [data
    ["[0]" product]
    ["[0]" text (.only)
     ["%" \\injection]
     ["<[1]>" \\projection]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\projection (.only Projection)]]]
    [collection
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    [number
     [/64
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   ["[0]" time (.only Time)
    ["[0]" date (.only Date)]
    ["[0]" year]
    ["[0]" month]]]]
 ["[0]" //
  ["[1][0]" time]
  ["[1][0]" snapshot (.only Snapshot)
   ["[1]/[0]" version (.only Version)]]])

(every .public Versioning
  (Record
   [:snapshot Snapshot
    :last_updated //time.Time
    :versions (List Version)]))

(the .public init
  [:snapshot {//snapshot.:Local}
   :last_updated //time.epoch
   :versions (list)])

(the .public equality
  (Equality Versioning)
  (all product.equality
       //snapshot.equality
       //time.equality
       (list.equality //snapshot/version.equality)
       ))

(alias [=]
       ..equality)

(template.with [<definition> <tag>]
  [(the <definition> xml.Tag ["" <tag>])]

  [[<last_updated> "lastUpdated"]
   [<snapshot_versions> "snapshotVersions"]

   [<versioning> "versioning"]])

(the last_updated_xml
  (-> //time.Time
      XML)
  (|>> //time.as_text
       {xml.:Text}
       list
       {xml.:Node ..<last_updated> xml.attributes}))

(the .public (as_xml (open "_[0]"))
  (-> Versioning
      XML)
  (<| {xml.:Node ..<versioning> xml.attributes}
      (list (//snapshot.as_xml _:snapshot)
            (..last_updated_xml _:last_updated)
            (|> _:versions
                (list:each //snapshot/version.as_xml)
                {xml.:Node ..<snapshot_versions> xml.attributes}))))

(the (text tag)
  (-> xml.Tag
      (Projection Text))
  (<| (<xml>.node tag)
      <xml>.text))

(the last_updated_of
  (Projection //time.Time)
  (<| (<text>.then //time.of_text)
      (..text ..<last_updated>)))

(the .public of_xml
  (Projection Versioning)
  (<| (<xml>.node ..<versioning>)
      (all <>.and
           (<>.else {//snapshot.:Local} (<xml>.somewhere //snapshot.of_xml))
           (<>.else //time.epoch (<xml>.somewhere ..last_updated_of))
           (<| (<>.else (list))
               <xml>.somewhere
               (<xml>.node ..<snapshot_versions>)
               (<>.some //snapshot/version.of_xml))
           )))
