... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name :Build)
   [abstract
    [equality (.only Equality)]
    ["<>" projection]
    ["[0]" monad]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid)]]]
   [program
    ["cli" \\projection (.only Projection)]]]]
 [//
  [repository
   [identity (.only Identity)]]
  ["/" profile (.only Name)]])

(every .public Compilation
  (Variant
   {:Build}
   {:Test}))

(the any_equality
  (Equality Any)
  (implementation
   (the (= expected actual)
     true)))

(the compilation_equality
  (Equality Compilation)
  (all sum.equality
       ..any_equality
       ..any_equality
       ))

(the compilation
  (Projection Compilation)
  (<>.or (cli.this "build")
         (cli.this "test")))

(every .public Command
  (Variant
   {:Version}
   {:Clean}
   {:POM}
   {:Dependencies}
   {:Install}
   {:Deploy Text Identity}
   {:Compilation Compilation}
   {:Auto Compilation}))

(the .public equality
  (Equality Command)
  (all sum.equality
       ... :Version
       ..any_equality
       ... :Clean
       ..any_equality
       ... :POM
       ..any_equality
       ... :Dependencies
       ..any_equality
       ... :Install
       ..any_equality
       ... :Deploy
       (all product.equality
            text.equality
            text.equality
            text.equality)
       ... :Compilation
       ..compilation_equality
       ... :Auto
       ..compilation_equality))

(alias [=]
       ..equality)

(the command'
  (Projection Command)
  (all <>.or
       (cli.this "version")
       (cli.this "clean")
       (cli.this "pom")
       (cli.this "deps")
       (cli.this "install")
       (<>.after (cli.this "deploy")
                 (<>.and cli.any
                         (<>.and cli.any
                                 cli.any)))
       ..compilation
       (<>.after (cli.this "auto")
                 ..compilation)
       ))

(the .public command
  (Projection [(List Name) Command])
  (<>.rec
   (function (_ command)
     (all <>.either
          (<>.after (cli.this "with")
                    (monad.let <>.monad
                      [head cli.any
                       [tail command] command]
                      (pure [(list:composite (list head) tail) command])))
          (by <>.monad each (|>> [(list)])
              ..command')
          ))))
