... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name #Build)
   [abstract
    [equivalence (.only Equivalence)]
    ["<>" projection]
    ["[0]" monad]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" list (.use "[1]:[0]" monoid)]]]
   [program
    ["cli" \\projection (.only Projection)]]]]
 [//
  [repository
   [identity (.only Identity)]]
  ["/" profile (.only Name)]])

(every .public Compilation
  (Variant
   {#Build}
   {#Test}))

(the any_equivalence
  (Equivalence Any)
  (implementation
   (the (= expected actual)
     true)))

(the compilation_equivalence
  (Equivalence Compilation)
  (all sum.equivalence
       ..any_equivalence
       ..any_equivalence
       ))

(the compilation
  (Projection Compilation)
  (<>.or (cli.this "build")
         (cli.this "test")))

(every .public Command
  (Variant
   {#Version}
   {#Clean}
   {#POM}
   {#Dependencies}
   {#Install}
   {#Deploy Text Identity}
   {#Compilation Compilation}
   {#Auto Compilation}))

(the .public equivalence
  (Equivalence Command)
  (all sum.equivalence
       ... #Version
       ..any_equivalence
       ... #Clean
       ..any_equivalence
       ... #POM
       ..any_equivalence
       ... #Dependencies
       ..any_equivalence
       ... #Install
       ..any_equivalence
       ... #Deploy
       (all product.equivalence
            text.equivalence
            text.equivalence
            text.equivalence)
       ... #Compilation
       ..compilation_equivalence
       ... #Auto
       ..compilation_equivalence))

(alias [=]
       ..equivalence)

(the command'
  (Projection Command)
  (all <>.or
       (cli.this "version")
       (cli.this "clean")
       (cli.this "pom")
       (cli.this "deps")
       (cli.this "install")
       (<>.after (cli.this "deploy")
                 (<>.and cli.any
                         (<>.and cli.any
                                 cli.any)))
       ..compilation
       (<>.after (cli.this "auto")
                 ..compilation)
       ))

(the .public command
  (Projection [(List Name) Command])
  (<>.rec
   (function (_ command)
     (all <>.either
          (<>.after (cli.this "with")
                    (monad.let <>.monad
                      [head cli.any
                       [tail command] command]
                      (pure [(list:composite (list head) tail) command])))
          (by <>.monad each (|>> [(list)])
              ..command')
          ))))
