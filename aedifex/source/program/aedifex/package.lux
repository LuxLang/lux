... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except local)
   [abstract
    [equivalence (.only Equivalence)]]
   [error
    ["[0]" try (.only Try) (.use "[1]#[0]" functor)]]
   [data
    ["[0]" sum]
    ["[0]" product]
    ["[0]" binary (.only Binary)]
    [text
     [encoding
      ["[0]" utf8]]]
    [format
     ["[0]" xml (.only XML)
      ["<[1]>" \\projection]]]
    [collection
     [set (.only Set)]]]
   [macro
    ["[0]" template]]]]
 ["[0]" //
  ["/" profile]
  ["[1][0]" hash]
  ["[1][0]" pom]
  [dependency (.only Dependency)
   ["[1][0]" status (.only Status)]]
  [repository
   [remote (.only Address)]
   ["[1][0]" origin (.only Origin)]]])

(every .public Package
  (Record
   [#origin Origin
    #library [Binary Status]
    #pom [XML Binary Status]]))

(template.with [<name> <tag>]
  [(the .public (<name> package)
     (-> Package Bit)
     (when (its #origin package)
       {<tag> _}
       true
       
       _
       false))]

  [[local? //origin.#Local]
   [remote? //origin.#Remote]])

(the .public (local pom library)
  (-> XML Binary Package)
  [#origin {//origin.#Local ""}
   #library [library
             {//status.#Verified (//hash.sha1 library)
                                 (//hash.md5 library)}]
   #pom (let [binary_pom (|> pom
                             (by xml.text as)
                             (by utf8.binary as))]
          [pom
           binary_pom
           {//status.#Verified (//hash.sha1 binary_pom)
                               (//hash.md5 binary_pom)}])])

(the .public (dependencies it)
  (-> Package
      (Try (Set Dependency)))
  (|> //pom.of_xml
      (<xml>.value (list (product.left (its #pom it))))
      (try#each (its /.#dependencies))))

(the .public (repositories it)
  (-> Package
      (Try (Set Address)))
  (|> //pom.of_xml
      (<xml>.value (list (product.left (its #pom it))))
      (try#each (its /.#repositories))))

(the .public equivalence
  (Equivalence Package)
  (all product.equivalence
       //origin.equivalence
       (all product.equivalence
            binary.equivalence
            //status.equivalence)
       (all product.equivalence
            xml.equivalence
            binary.equivalence
            //status.equivalence)
       ))

(alias [=]
       ..equivalence)
