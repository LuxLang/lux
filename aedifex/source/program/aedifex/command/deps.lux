... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" exception]]
   [data
    [collection
     ["[0]" set (.only Set)]
     ["[0]" list (.use "[1]#[0]" mix monoid)]
     ["[0]" dictionary]]
    ["[0]" text (.only)
     ["%" \\injection]]]
   [world
    [net (.only URL)]
    ["[0]" file]
    ["[0]" console (.only Console)]]]]
 ["[0]" //
  ["[1][0]" clean]
  ["/[1]" //
   [command (.only Command)]
   [repository (.only Repository)]
   ["[1]" profile]
   ["[1][0]" action (.only Action)]
   ["[1][0]" artifact (.only Artifact)]
   ["[1][0]" dependency (.only Dependency)
    ["[1]/[0]" resolution (.only Resolution)]
    ["[1]/[0]" deployment]]]])

(the as_text
  (text.Injection Dependency)
  (|>> (its ///dependency.#artifact)
       ///artifact.as_text
       %.text))

(the .public (do! console local remotes new_repository profile)
  (-> (Console Future) (Repository Future) (List (Repository Future)) (-> URL (Repository Future)) (Command Resolution))
  (monad.let future.monad
    [.let [dependencies (|> (its ///.#dependencies profile)
                            set.as_list
                            (list#composite (list (its ///.#lux profile))))]
     [local_successes local_failures cache] (///dependency/resolution.all console
                                                                          (list local)
                                                                          new_repository
                                                                          dependencies
                                                                          ///dependency/resolution.empty)
     [remote_successes remote_failures resolution] (///dependency/resolution.all console
                                                                                 remotes
                                                                                 new_repository
                                                                                 dependencies
                                                                                 cache)]
    (monad.let ///action.monad
      [cached (|> (dictionary.keys cache)
                  (list#mix dictionary.lacks resolution)
                  (///dependency/deployment.all local))
       _ (console.write_line (exception.report
                              (list ["Local successes" (|> local_successes
                                                           (list.sorted (by ///dependency.order <))
                                                           (exception.listing ..as_text))]
                                    ["Local failures" (|> local_failures
                                                          (list.sorted (by ///dependency.order <))
                                                          (exception.listing ..as_text))]
                                    ["Remote successes" (|> remote_successes
                                                            (set.of_list ///dependency.hash)
                                                            (set.difference (set.of_list ///dependency.hash local_successes))
                                                            set.as_list
                                                            (list.sorted (by ///dependency.order <))
                                                            (exception.listing ..as_text))]
                                    ["Remote failures" (|> remote_failures
                                                           (list.sorted (by ///dependency.order <))
                                                           (exception.listing ..as_text))]))
                             console)]
      (pure resolution))))
