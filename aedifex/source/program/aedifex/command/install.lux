... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception]]
   [data
    ["[0]" binary
     [\ (.only Binary)]
     ["[1]" \\injection]]
    [text
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" list]
     ["[0]" set]]
    [format
     ["[0]" tar]
     ["[0]" xml]]]
   [compiler
    [meta
     ["[0]" export]]]
   [world
    ["[0]" file]
    ["[0]" console (.only Console)]]]]
 ["[0]" //
  ["[1][0]" clean]
  ["/[1]" //
   ["/" profile (.only Profile)]
   ["[1][0]" action (.only Action)]
   ["[1][0]" command (.only Command)]
   ["[1][0]" local]
   ["[1][0]" pom]
   ["[1][0]" package]
   [repository (.only Repository)
    ["[1][0]" origin]]
   ["[1][0]" dependency
    ["[1]/[0]" deployment]
    ["[1]/[0]" status]]
   ["[1][0]" artifact (.only Artifact)
    ["[1]/[0]" type]]]])

(the .public success
  "Successfully installed the project locally.")

(the .public failure
  "Failure: No 'identity' defined for the project.")

(the .public (do! console fs local profile)
  (-> (Console Future) (file.System Future) (Repository Future) (Command Any))
  (when (its /.#identity profile)
    {.#Some identity}
    (monad.let ///action.monad
      [package (|> profile
                   (its /.#sources)
                   set.as_list
                   (export.library fs))
       pom (|> profile
               ///pom.write
               (by future.monad pure))
       _ (///dependency/deployment.one local
                                       [identity ///artifact/type.lux_library]
                                       (let [pom_data (|> pom
                                                          (by xml.text as)
                                                          (by utf8.binary as))]
                                         [///package.#origin {///origin.#Local ""}
                                          ///package.#library (let [library (binary.value tar.as_binary package)]
                                                                [library (///dependency/status.verified library)])
                                          ///package.#pom [pom
                                                           pom_data
                                                           (///dependency/status.verified pom_data)]]))]
      (is (Future (Try Any))
          (console.write_line ..success console)))

    _
    (is (Future (Try Any))
        (console.write_line ..failure console))))
