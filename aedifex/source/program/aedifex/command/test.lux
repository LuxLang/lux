... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]#[0]" monad)]]
   [error
    [try (.only Try)]]
   [data
    [collection
     ["[0]" list]
     ["[0]" dictionary]]]
   [math
    [number
     [/64
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [world
    ["[0]" environment (.only Environment)]
    ["[0]" file]
    ["[0]" shell (.only Exit Shell)]
    ["[0]" console (.only Console)]]]]
 ["[0]" //
  ["[1][0]" build]
  ["/[1]" //
   ["[1]" profile]
   ["[1][0]" action]
   ["[1][0]" command (.only Command)]
   ["[1][0]" runtime]
   [dependency
    [resolution (.only Resolution)]]]])

(the .public start "[TEST STARTED]")
(the .public success "[TEST ENDED]")
(the .public failure "[TEST FAILED]")

(the .public (do! console environment fs shell resolution profile)
  (-> (Console Future) (Environment Future) (file.System Future) (Shell Future) Resolution (Command [Exit Any]))
  (monad.let future.monad
    [.let [home (by environment home)
           working_directory (by environment directory)]
     environment_vars (environment.environment future.monad environment)]
    (monad.let [! ///action.monad]
      [[build_exit compiler program] (//build.do! console environment fs shell resolution
                                                  (has ///.#program (its ///.#test profile) profile))]
      (if (i.= shell.normal build_exit)
          (monad.let !
            [_ (is (Future (Try Any))
                   (console.write_line ..start console))
             .let [host_dependencies (//build.host_dependencies fs home resolution)
                   [command_environment test_command test_parameters] (`` (when compiler
                                                                            {//build.#JVM dependency}
                                                                            (|> program
                                                                                (///runtime.for (its ///.#java profile))
                                                                                (//build.with_jvm_class_path host_dependencies))

                                                                            (,, (template.with [<tag> <runtime>]
                                                                                  [{<tag> artifact}
                                                                                   (///runtime.for (its <runtime> profile)
                                                                                                   program)]

                                                                                  [[//build.#JS ///.#js]
                                                                                   [//build.#Python ///.#python]
                                                                                   [//build.#Lua ///.#lua]
                                                                                   [//build.#Ruby ///.#ruby]]))))]
             process (by shell execute [(dictionary.composite environment_vars command_environment)
                                        working_directory
                                        test_command
                                        test_parameters])
             _ (//build.log_output! console process)
             _ (//build.log_error! console process)
             exit (by process await [])
             _ (is (Future (Try Any))
                   (console.write_line (if (i.= shell.normal exit)
                                           ..success
                                           ..failure)
                                       console))]
            (pure [exit []]))
          (pure [build_exit []])))))
