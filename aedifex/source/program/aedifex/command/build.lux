... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name Lux)
   ["[0]" ffi]
   [abstract
    [order (.only Order)]
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future) (.use "[1]:[0]" monad)]]
   [control
    ["[0]" io (.only IO)]]
   [error
    ["[0]" try (.only Try) (.use "[1]:[0]" functor)]
    ["[0]" exception]]
   [data
    ["[0]" product]
    ["[0]" text (.use "[1]:[0]" order)
     ["%" \\injection]]
    [collection
     ["[0]" list (.use "[1]:[0]" monad mix monoid)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" set]]]
   [math
    [number
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" configuration]]
   [compiler
    [meta
     [cli
      ["[0]" compiler]]
     ["[0]" packager (.only)
      ["[0]_[1]" ruby]]]]
   [world
    ["[0]" environment (.only Environment)]
    ["[0]" file (.only Path)]
    ["[0]" shell (.only Exit Process Shell)]
    ["[0]" console (.only Console)]
    [net
     [uri
      ["[0]" path]]]]
   [aspect
    ["[0]" view]]]]
 ["[0]" ///
  ["[1]" profile]
  ["[1][0]" action]
  ["[1][0]" command (.only Command)]
  ["[1][0]" local]
  ["[1][0]" repository]
  ["[1][0]" runtime]
  ["[1][0]" dependency (.only Dependency)
   ["[1]/[0]" resolution (.only Resolution)]]
  ["[1][0]" artifact (.only Group Name Version Artifact)
   ["[1]/[0]" type]]])

(every Finder
  (-> Resolution
      (Maybe Dependency)))

(the (dependency_finder group name)
  (-> Group Name
      Finder)
  (|>> dictionary.entries
       (list.one (function (_ [dependency package])
                   (if (and (text.= group (its [///dependency.:artifact ///artifact.:group] dependency))
                            (text.= name (its [///dependency.:artifact ///artifact.:name] dependency)))
                       {.:Some dependency}
                       {.:None})))))

(the .public lux_group
  Group
  "com.github.luxlang")

(template.with [<dependency> <definition>]
  [(the .public <definition>
     Name
     <dependency>)]

  [["lux-jvm" jvm_lux_name]
   ["lux-js" js_lux_name]
   ["lux-python" python_lux_name]
   ["lux-lua" lua_lux_name]
   ["lux-ruby" ruby_lux_name]])

(exception.the .public no_available_lux)
(exception.the .public no_specified_program)

(every .public Lux
  (Variant
   {:JVM Dependency}
   {:JS Dependency}
   {:Python Dependency}
   {:Lua Dependency}
   {:Ruby Dependency}))

(the (remove_dependency dependency)
  (-> Dependency (-> Resolution Resolution))
  (|>> dictionary.entries
       (list.only (|>> product.left (identical? dependency) not))
       (dictionary.of_list ///dependency.hash)))

(the (lux resolution lux_dependency)
  (-> Resolution Dependency (Try [Resolution Lux]))
  (let [[[lux_group lux_name lux_version] lux_type] lux_dependency]
    (when (..dependency_finder lux_group lux_name resolution)
      {.:Some dependency}
      (`` (when lux_name
            (,, (template.with [<tag> <name>]
                  [<name>
                   {try.:Success [(..remove_dependency dependency resolution)
                                  {<tag> dependency}]}]

                  [[:JVM ..jvm_lux_name]
                   [:JS ..js_lux_name]
                   [:Python ..python_lux_name]
                   [:Lua ..lua_lux_name]
                   [:Ruby ..ruby_lux_name]]))
            
            _
            (exception.except ..no_available_lux [])))
      
      _
      (exception.except ..no_available_lux []))))

(the (path fs home dependency)
  (for_any (_ !) (-> (file.System !) Path Dependency Path))
  (let [/ (by fs delimiter)
        artifact (its ///dependency.:artifact dependency)]
    (|> artifact
        (///local.uri (its ///artifact.:version artifact))
        (text.replaced path.delimiter /)
        (text home /)
        (text.suffix (text "." (its ///dependency.:type dependency))))))

(the (libraries fs home)
  (for_any (_ !)
    (-> (file.System !) Path Resolution
        (List Path)))
  (|>> dictionary.domain
       (list.only (|>> (its ///dependency.:type)
                       (text.= ///artifact/type.lux_library)))
       (list:each (..path fs home))))

... https://en.wikipedia.org/wiki/Delimiter
(the version_delimiter
  ".")

(the version_order
  (Order Version)
  (implementation
   (the equivalence
     text.equivalence)

   (the (< left right)
     (loop (of [left (view.as list.stack (text.all_split_by ..version_delimiter left))
                right (view.as list.stack (text.all_split_by ..version_delimiter right))])
       (when [left right]
         [{.:Top leftH leftT} {.:Top rightH rightT}]
         (if (text.= leftH rightH)
             (of leftT rightT)
             (or (n.< (text.size leftH) (text.size rightH))
                 (text:< leftH rightH)))

         [{.:Top leftH leftT} {.:Empty}]
         false

         [{.:Empty} {.:Top rightH rightT}]
         true

         [{.:Empty} {.:Empty}]
         false)))))

(the .public (host_dependencies fs home)
  (for_any (_ !)
    (-> (file.System !) Path Resolution
        (List Path)))
  (|>> dictionary.domain
       (list.only (|>> (its ///dependency.:type)
                       (text.= ///artifact/type.lux_library)
                       not))
       (list:mix (function (_ dependency uniques)
                   (let [artifact (its ///dependency.:artifact dependency)
                         identity [(its ///artifact.:group artifact)
                                   (its ///artifact.:name artifact)]
                         version (its ///artifact.:version artifact)]
                     (when (dictionary.value identity uniques)
                       {try.:Success [current_version current_path]}
                       (if (by version_order < version current_version)
                           (dictionary.has identity [version dependency] uniques)
                           uniques)
                       
                       not_found!
                       (dictionary.has identity [version dependency] uniques))))
                 (is (Dictionary [Group Name] [Version Dependency])
                     (dictionary.empty (product.hash text.hash text.hash))))
       dictionary.values
       (list:each (|>> product.right (..path fs home)))))

(the (singular name)
  (-> Text Text
      (List Text))
  (|>> (list name)))

(the (plural name)
  (-> Text (List Text)
      (List Text))
  (|>> (list:each (|>> (list name)))
       list:conjoint))

(the .public start "[BUILD STARTED]")
(the .public success "[BUILD ENDED]")
(the .public failure "[BUILD FAILED]")

(template.with [<name> <capability>]
  [(the .public (<name> console process)
     (-> (Console Future) (Process Future) (Future (Try Any)))
     ... This is a very odd way of implementing this function.
     ... But it's written this way because the more straightforward way (i.e. by using (try.with future.monad))
     ... eventually led to the function hanging/freezing.
     ... I'm not sure why it happened, but I got this weirder implementation to work.
     ... TODO: Improve this implementation.
     (let [[read! write!] (is [(Future (Try Any))
                               (future.Resolver (Try Any))]
                              (future.future []))
           _ (|> (by process <capability> [])
                 (future.upon! (function (of ?line)
                                 (when ?line
                                   {try.:Failure error}
                                   (if (exception.is? shell.no_more_output error)
                                       (write! {try.:Success []})
                                       (future.upon! write! (is (Future (Try Any))
                                                                (console.write_line error console))))
                                   
                                   {try.:Success line}
                                   (future.upon! (function (_ outcome)
                                                   (when outcome
                                                     {try.:Failure error}
                                                     (write! {try.:Failure error})

                                                     {try.:Success _}
                                                     (future.upon! of
                                                                   (by process <capability> []))))
                                                 (is (Future (Try Any))
                                                     (console.write_line line console))))))
                 io.value)]
       read!))]

  [[log_output! read]
   [log_error! fail]])

(ffi.the java/lang/System
  "[1]:[0]"
  ("static" getProperty [java/lang/String] "io" "try" java/lang/String))

(the windows?
  Bit
  (|> (java/lang/System:getProperty [(ffi.as_string "os.name")])
      io.value
      (try:each (|>> ffi.of_string))
      (try.else "")
      text.lower_cased
      (text.starts_with? "windows")))

... https://en.wikipedia.org/wiki/Delimiter
(the jvm_class_path_delimiter
  (if windows?
      ";"
      ":"))

(the (jvm_class_path host_dependencies)
  (-> (List Path)
      Text)
  (|> host_dependencies
      (list:composite (list "."))
      (text.interposed ..jvm_class_path_delimiter)))

(the .public (with_jvm_class_path host_dependencies runtime)
  (-> (List Path)
      (Change ///runtime.Runtime))
  (when host_dependencies
    (list)
    runtime

    _
    (revised ///runtime.:parameters
             (|>> (list:composite (list "-cp" (..jvm_class_path host_dependencies)
                                        "-Xss16m"
                                        "--add-opens" "java.base/java.lang=ALL-UNNAMED")))
             runtime)))

(ffi.the java/io/InputStream
  "[1]:[0]")

(ffi.the java/io/FileInputStream
  "[1]:[0]"
  (new [java/lang/String]))

(ffi.the java/util/jar/Attributes$Name
  "[1]:[0]"
  ("static" MAIN_CLASS java/util/jar/Attributes$Name))

(ffi.the java/util/jar/Attributes
  "[1]:[0]"
  (getValue [java/util/jar/Attributes$Name] java/lang/String))

(ffi.the java/util/jar/Manifest
  "[1]:[0]"
  (getMainAttributes [] java/util/jar/Attributes))

(ffi.the java/util/jar/JarInputStream
  "[1]:[0]"
  (new [java/io/InputStream])
  (getManifest [] java/util/jar/Manifest))

(the jvm_main
  (-> Path
      Text)
  (let [main_class (io.value (java/util/jar/Attributes$Name:MAIN_CLASS))]
    (|>> ffi.as_string
         [] java/io/FileInputStream:new
         [] java/util/jar/JarInputStream:new
         (java/util/jar/JarInputStream:getManifest [])
         (java/util/jar/Manifest:getMainAttributes [])
         (java/util/jar/Attributes:getValue [main_class])
         ffi.of_string)))

(the .public (do! console environment fs shell resolution)
  (-> (Console Future) (Environment Future) (file.System Future) (Shell Future) Resolution (Command [Exit Lux Path]))
  (function (_ profile)
    (when (its ///.:program profile)
      {.:None}
      (future:pure (exception.except ..no_specified_program []))

      {.:Some [program_module program_definition]}
      (monad.let future.monad
        [.let [home (by environment home)
               working_directory (by environment directory)]
         environment (environment.environment future.monad environment)]
        (monad.let ///action.monad
          [[resolution lux] (future:pure (..lux resolution (its ///.:lux profile)))
           .let [host_dependencies (..host_dependencies fs home resolution)
                 [[command_environment command lux_params] output]
                 (`` (when lux
                       {:JVM dependency}
                       (let [path (..path fs home dependency)]
                         [(|> (its ///.:java profile)
                              (has ///runtime.:parameters (list (jvm_main path)))
                              (with_jvm_class_path (list:composite (list path) host_dependencies)))
                          "program.jar"])
                       
                       (,, (template.with [<tag> <runtime> <program>]
                             [{<tag> dependency}
                              [(|> dependency
                                   (..path fs home)
                                   (///runtime.for (its <runtime> profile)))
                               <program>]]

                             [[:JS ///.:js "program.js"]
                              [:Python ///.:java "program.py"]
                              [:Lua ///.:java "program.lua"]
                              [:Ruby ///.:java (file.rooted fs "program" ruby_packager.main_file)]]))))
                 / (by fs delimiter)
                 cache_directory (text working_directory / (its ///.:target profile))]
           _ (is (Future (Try Any))
                 (console.write_line ..start console))
           .let [full_parameters (list:conjoint (list lux_params
                                                      (list "build")
                                                      (..plural "--library" (..libraries fs home resolution))
                                                      (..plural "--host_dependency" host_dependencies)
                                                      (..plural "--compiler" (list:each compiler.as_text (its ///.:compilers profile)))
                                                      (..plural "--source" (set.as_list (its ///.:sources profile)))
                                                      (..singular "--target" cache_directory)
                                                      (when program_module
                                                        "" (..singular "--module" program_definition)
                                                        _ (list:composite (..singular "--module" program_module)
                                                                          (..singular "--program" program_definition)))
                                                      (..singular "--configuration" (configuration.as_text (its ///.:configuration profile)))))]
           process (by shell execute [(dictionary.composite environment command_environment)
                                      working_directory
                                      command
                                      full_parameters])
           _ (..log_output! console process)
           _ (..log_error! console process)
           exit (by process await [])
           _ (is (Future (Try Any))
                 (console.write_line (if (i.= shell.normal exit)
                                         ..success
                                         ..failure)
                                     console))]
          (pure [exit
                 lux
                 (text cache_directory / output)]))))))
