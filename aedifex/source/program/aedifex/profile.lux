... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except Name Info Source Module
                :info :target :configuration)
   [abstract
    [monoid (.only Monoid)]
    [equality (.only Equality)]]
   [error
    ["[0]" exception]]
   [data
    ["[0]" maybe (.use "[1]:[0]" monoid)]
    ["[0]" product]
    ["[0]" text]
    [collection
     ["[0]" set (.only Set)]
     ["[0]" dictionary (.only Dictionary)]
     ["[0]" list (.use "[1]:[0]" monoid)
      ["[0]" property (.use "[1]:[0]" monoid)]]]]
   [macro
    ["[0]" template]]
   [meta
    ["[0]" name]]
   [compiler
    [meta
     ["[0]" cli
      ["[0]" compiler (.only Compiler)]]
     [archive
      [module
       [descriptor (.only Module)]]]]]
   [world
    [net (.only URL)]
    [file (.only Path)]]]]
 [//
  ["[0]" runtime (.only Runtime)]
  ["[0]" dependency (.only Dependency)]
  ["[0]" artifact (.only Artifact)
   ["[0]" type]]
  [repository
   [remote (.only Address)]]])

(the .public default_lux
  Dependency
  [dependency.:artifact ["com.github.luxlang" "lux-jvm" "0.8.0"]
   dependency.:type type.jvm_library])

(every .public Distribution
  (Variant
   {:Repo}
   {:Manual}))

(the distribution_equality
  (Equality Distribution)
  (implementation
   (the (= expected actual)
     (`` (when [expected actual]
           (,, (template.with [<tag>]
                 [[{<tag>} {<tag>}]
                  true]

                 [[:Repo]
                  [:Manual]]))

           _
           false)))))

(every .public License
  [Text
   URL
   Distribution])

(the license_equality
  (Equality License)
  (all product.equality
       text.equality
       text.equality
       ..distribution_equality))

(every .public SCM
  URL)

(every .public Organization
  [Text
   URL])

(the organization_equality
  (Equality Organization)
  (all product.equality
       text.equality
       text.equality))

(every .public Email
  Text)

(every .public Developer
  [Text
   Email
   (Maybe Organization)])

(the developer_equality
  (Equality Developer)
  (all product.equality
       text.equality
       text.equality
       (maybe.equality ..organization_equality)))

(every .public Contributor
  Developer)

(every .public Info
  (Record
   [:url (Maybe URL)
    :scm (Maybe SCM)
    :description (Maybe Text)
    :licenses (List License)
    :organization (Maybe Organization)
    :developers (List Developer)
    :contributors (List Contributor)]))

(the info_equality
  (Equality Info)
  (all product.equality
       (maybe.equality text.equality)
       (maybe.equality text.equality)
       (maybe.equality text.equality)
       (list.equality ..license_equality)
       (maybe.equality ..organization_equality)
       (list.equality ..developer_equality)
       (list.equality ..developer_equality)))

(the .public default_info
  Info
  [:url {.:None}
   :scm {.:None}
   :description {.:None}
   :licenses (list)
   :organization {.:None}
   :developers (list)
   :contributors (list)])

(every .public Source
  Path)

(the .public default_source
  Source
  "source")

(every .public Target
  Path)

(the .public default_target
  Target
  "target")

(the .public default_repository
  Address
  "https://repo1.maven.org/maven2/")

(every .public Name
  Text)

(the .public default
  Name
  "")

(every .public Configuration
  (property.List Text))

(every .public Profile
  (Record
   [:parents (List Name)
    :identity (Maybe Artifact)
    :info (Maybe Info)
    :repositories (Set Address)
    :dependencies (Set Dependency)
    :lux Dependency
    :compilers (List Compiler)
    :sources (Set Source)
    :target Target
    :program (Maybe .Name)
    :test (Maybe .Name)
    :deploy_repositories (Dictionary Text Address)
    :configuration Configuration
    :java Runtime
    :js Runtime
    :python Runtime
    :lua Runtime
    :ruby Runtime]))

(the .public equality
  (Equality Profile)
  (all product.equality
       ... :parents
       (list.equality text.equality)
       ... :identity
       (maybe.equality artifact.equality)
       ... :info
       (maybe.equality ..info_equality)
       ... :repositories
       set.equality
       ... :dependencies
       set.equality
       ... :lux
       dependency.equality
       ... :compilers
       (list.equality compiler.equality)
       ... :sources
       set.equality
       ... :target
       text.equality
       ... :program
       (maybe.equality name.equality)
       ... :test
       (maybe.equality name.equality)
       ... :deploy_repositories
       (dictionary.equality text.equality)
       ... :configuration
       (property.equality text.equality)
       ... :java
       runtime.equality
       ... :js
       runtime.equality
       ... :python
       runtime.equality
       ... :lua
       runtime.equality
       ... :ruby
       runtime.equality))

(alias [=]
       ..equality)

(the .public monoid
  (Monoid Profile)
  (implementation
   (the identity
     [:parents (list)
      :identity {.:None}
      :info {.:None}
      :repositories (set.empty text.hash)
      :dependencies (set.empty dependency.hash)
      :lux ..default_lux
      :compilers (list)
      :sources (set.empty text.hash)
      :target ..default_target
      :program {.:None}
      :test {.:None}
      :deploy_repositories (dictionary.empty text.hash)
      :configuration property.empty
      :java runtime.default_java
      :js runtime.default_js
      :python runtime.default_python
      :lua runtime.default_lua
      :ruby runtime.default_ruby])

   (the (composite override baseline)
     (template.let [(!runtime <tag> <runtime>)
                    [(if (runtime.= <runtime> (its <tag> override))
                         (its <tag> baseline)
                         (its <tag> override))]]
       [:parents (list:composite (its :parents baseline) (its :parents override))
        :identity (maybe:composite (its :identity override) (its :identity baseline))
        :info (maybe:composite (its :info override) (its :info baseline))
        :repositories (set.union (its :repositories baseline) (its :repositories override))
        :dependencies (set.union (its :dependencies baseline) (its :dependencies override))
        :lux (if (dependency.= ..default_lux (its :lux override))
                 (its :lux baseline)
                 (its :lux override))
        :compilers (list:composite (its :compilers baseline) (its :compilers override))
        :sources (set.union (its :sources baseline) (its :sources override))
        :target (if (text.= ..default_target (its :target baseline))
                    (its :target override)
                    (its :target baseline))
        :program (maybe:composite (its :program override) (its :program baseline))
        :test (maybe:composite (its :test override) (its :test baseline))
        :deploy_repositories (dictionary.composite (its :deploy_repositories override) (its :deploy_repositories baseline))
        :configuration (property:composite (its :configuration override) (its :configuration baseline))
        :java (!runtime :java runtime.default_java)
        :js (!runtime :js runtime.default_js)
        :python (!runtime :python runtime.default_python)
        :lua (!runtime :lua runtime.default_lua)
        :ruby (!runtime :ruby runtime.default_ruby)]))))

(exception.the .public no_identity)
