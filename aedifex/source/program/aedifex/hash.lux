... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   ["[0]" ffi]
   [abstract
    [format (.only Format)]
    [equivalence (.only Equivalence)]
    ["[0]" monad]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" binary (.only Binary)]
    ["[0]" text (.only Injection)
     ["%" \\injection]
     ["[0]" encoding]]]
   [math
    [number
     ["[0]" /64 (.only)
      ["n" natural]]]]
   [macro
    ["[0]" template]]
   [type
    ["[0]" nominal]]]])

... TODO: Replace with pure-Lux implementations of these algorithms
... https://en.wikipedia.org/wiki/SHA-1#SHA-1_pseudocode
... https://en.wikipedia.org/wiki/MD5#Algorithm
(ffi.the java/lang/String
  "[1]::[0]")

(ffi.the java/security/MessageDigest
  "[1]::[0]"
  ("static" getInstance [java/lang/String] java/security/MessageDigest)
  (digest [[byte]] [byte]))

(nominal.every .public SHA1 Any)
(nominal.every .public MD5 Any)

(nominal.every .public (Hash h)
  Binary

  (the .public data
    (for_any (_ h) (-> (Hash h) Binary))
    (|>> nominal.as))

  (template.with [<name> <kind> <algorithm>]
    [(the .public (<name> value)
       (-> Binary (Hash <kind>))
       (|> (java/security/MessageDigest::getInstance [(ffi.as_string <algorithm>)])
           (java/security/MessageDigest::digest [value])
           nominal.of))]

    [[sha1 ..SHA1 "SHA1"]
     [md5 ..MD5 "MD5"]])

  (the as_text
    (Injection Binary)
    (binary.mix (function (_ byte representation)
                  (let [hex (by n.base_16 as byte)
                        hex (when (text.size hex)
                              1 (text "0" hex)
                              _ hex)]
                    (text representation hex)))
                ""))

  (template.with [<factor> <name>]
    [(the <name>
       Natural
       <factor>)]

    [[20 sha1::size]
     [16 md5::size]])

  (the hex_per_byte
    2)

  (the hex_per_chunk
    (n.x hex_per_byte /64.bytes_per_i64))

  (exception.the .public (not_a_hash [size value])
    (Exception [Natural Text])
    (exception.report
     (list ["Pseudo hash" (%.text value)]
           ["Expected size" (%.natural size)]
           ["Actual size" (%.natural (text.size value))])))
  
  (template.with [<name> <size>]
    [(exception.the .public (<name> data)
       (Exception Binary)
       (exception.report
        (list ["Pseudo hash" (%.text (..as_text data))]
              ["Expected size" (%.natural <size>)]
              ["Actual size" (%.natural (binary.size data))])))]

    [[not_a_sha1 ..sha1::size]
     [not_a_md5 ..md5::size]])

  (template.with [<name> <kind> <size> <exception>]
    [(the .public (<name> data)
       (-> Binary (Try (Hash <kind>)))
       (if (n.= <size> (binary.size data))
           {try.#Success (nominal.of data)}
           (exception.except <exception> [data])))]

    [[as_sha1 SHA1 ..sha1::size ..not_a_sha1]
     [as_md5 MD5 ..md5::size ..not_a_md5]])

  (the hash_size
    (-> Text Natural)
    (|>> text.size (n./ ..hex_per_byte)))

  (the encoding_size
    (-> Natural Natural)
    (n.x ..hex_per_byte))

  (the (of_text size constructor injection)
    (for_any (_ h)
      (-> Natural (-> Binary (Try (Hash h)))
          (-> Text (Try (Hash h)))))
    (let [hash_size (..hash_size injection)]
      (if (n.= size hash_size)
          (loop (again [input injection
                        chunk 0
                        output (binary.empty hash_size)])
            (let [index (n.x chunk /64.bytes_per_i64)]
              (when (text.split_at ..hex_per_chunk input)
                {.#Some [head tail]}
                (monad.let try.monad
                  [head (by n.base_16 of head)
                   output (binary.has_64! index head output)]
                  (again tail (++ chunk) output))
                
                {.#None}
                (`` (when (..hash_size input)
                      0
                      (constructor output)
                      
                      (,, (template.with [<size> <write>]
                            [<size>
                             (monad.let try.monad
                               [head (by n.base_16 of input)
                                output (<write> index head output)]
                               (constructor output))]

                            [[1 binary.has_08!]
                             [2 binary.has_16!]
                             [4 binary.has_32!]]))
                      _ (exception.except ..not_a_hash [(..encoding_size size) injection]))))))
          (exception.except ..not_a_hash [(..encoding_size size) injection]))))

  (template.with [<format> <hash> <natural> <constructor>]
    [(the .public <format>
       (Format Text (Hash <hash>))
       (implementation
        (the as (|>> nominal.as ..as_text))
        (the of (..of_text <natural> <constructor>))))]

    [[sha1_format SHA1 ..sha1::size ..as_sha1]
     [md5_format MD5 ..md5::size ..as_md5]])

  (the .public equivalence
    (for_any (_ h)
      (Equivalence (Hash h)))
    (implementation
     (the (= expected actual)
       (by binary.equivalence =
           (nominal.as expected)
           (nominal.as actual)))))

  (alias [=]
         ..equivalence)
  )
