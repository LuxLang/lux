... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [library
  [lux (.except)
   [program (.only program)]
   ["[0]" debug]
   ["[0]" ffi]
   [abstract
    ["[0]" monad]]
   [concurrency
    ["[0]" future (.only Future)]]
   [control
    ["[0]" maybe]
    ["[0]" io (.only IO io)]]
   [error
    ["[0]" try (.only Try)]
    ["[0]" exception (.only Exception)]]
   [data
    ["[0]" text (.use "[1]:[0]" hash)
     ["%" \\injection]
     [encoding
      ["[0]" utf8]]]
    [collection
     ["[0]" array (.only)
      ["[1]!" \\unsafe]]
     ["[0]" list (.use "[1]:[0]" functor)]]]
   [math
    ["[0]" number (.only)
     [/64
      ["n" natural]
      ["i" integer]]]]
   [macro
    ["^" pattern]
    ["[0]" template]]
   [target
    ["_" ruby]]
   ["[0]" compiler
    [reference
     [register (.only Register)]]
    [language
     [lux
      [program (.only Program)]
      [translation (.only Host)]
      ["[0]" synthesis]
      [analysis
       [macro (.only Expander)]]
      ["[0]" phase (.only Operation Phase) (.use "[1]:[0]" monad)
       ["[0]" extension (.only Extender Handler)
        ["[0]" analysis
         ["[1]" ruby]]
        ["[0]" translation
         ["[1]" ruby]]]
       [translation
        ["[0]" reference]
        ["[0]" ruby (.only)
         ["[0]" runtime]
         ["[1]/[0]" reference]]]]]]
    [default
     ["[0]" platform (.only Platform)]]
    [meta
     [archive (.only Archive)]
     ["[0]" context]
     ["[0]" cli]
     ["[0]" packager
      ["[1]" ruby]]]]
   ["[0]" world
    ["[0]" file]
    ["[1]/[0]" environment]]
   [aspect
    ["[0]" view]]]]
 [program
  ["/" compositor]])

(ffi.the java/lang/String
  "[1]::[0]")

(ffi.the (java/lang/Class a)
  "[1]::[0]"
  (getSuperclass [] (java/lang/Class ?))
  (isInstance [java/lang/Object] boolean))

(ffi.the java/lang/Object
  "[1]::[0]"
  (toString [] java/lang/String)
  (getClass [] (java/lang/Class java/lang/Object)))

(ffi.the java/lang/Integer
  "[1]::[0]"
  (longValue [] long))

(ffi.the java/lang/Long
  "[1]::[0]"
  (intValue [] int))

(ffi.the org/jruby/RubyString
  "[1]::[0]"
  ("static" newInternalFromJavaExternal [org/jruby/Ruby java/lang/String] org/jruby/RubyString)
  (asJavaString [] java/lang/String))

(ffi.the org/jruby/RubySymbol
  "[1]::[0]"
  (asJavaString [] java/lang/String))

(ffi.the org/jruby/runtime/builtin/IRubyObject
  "[1]::[0]")

(ffi.the org/jruby/Ruby
  "[1]::[0]"
  (getCurrentContext [] org/jruby/runtime/ThreadContext)
  (getNil [] org/jruby/runtime/builtin/IRubyObject))

(ffi.the org/jruby/RubyClass
  "[1]::[0]")

(ffi.the (org/jruby/RubyArray it)
  "[1]::[0]"
  (new [org/jruby/Ruby int])
  (getLength [] int)
  (get [int] "?" java/lang/Object)
  (add [java/lang/Object] boolean))

(ffi.the org/jruby/RubyHash
  "[1]::[0]"
  (get [java/lang/Object] "?" java/lang/Object))

(ffi.the org/jruby/runtime/ThreadContext
  "[1]::[0]")

(ffi.the org/jruby/RubyRange
  "[1]::[0]"
  (first [org/jruby/runtime/ThreadContext] org/jruby/runtime/builtin/IRubyObject)
  (size [org/jruby/runtime/ThreadContext] org/jruby/runtime/builtin/IRubyObject))

(ffi.the org/jruby/runtime/JavaSites$CheckedSites
  "[1]::[0]")

(ffi.the org/jruby/runtime/builtin/Variable
  "[1]::[0]")

(ffi.the org/jruby/runtime/builtin/InstanceVariables
  "[1]::[0]")

(ffi.the org/jruby/runtime/builtin/InternalVariables
  "[1]::[0]")

(ffi.the org/jruby/embed/internal/LocalContextProvider
  "[1]::[0]"
  (getRuntime [] org/jruby/Ruby))

(ffi.the org/jruby/embed/ScriptingContainer
  "[1]::[0]"
  (new [])
  (runScriptlet [java/lang/String] "try" "?" java/lang/Object)
  (getProvider [] org/jruby/embed/internal/LocalContextProvider))

... TODO; Figure out a way to not need "interpreter" to be a global variable.
(the interpreter
  (org/jruby/embed/ScriptingContainer::new []))

(the !ruby_runtime
  (template.macro (!ruby_runtime)
    [(|> ..interpreter
         (org/jruby/embed/ScriptingContainer::getProvider [])
         (org/jruby/embed/internal/LocalContextProvider::getRuntime []))]))

(the !ruby_thread_context
  (template.macro (!ruby_thread_context)
    [(|> (!ruby_runtime)
         (org/jruby/Ruby::getCurrentContext []))]))

(the initial_ruby_runtime
  (!ruby_runtime))

(ffi.the org/jruby/java/proxies/JavaProxy
  "[1]::[0]"
  (new [org/jruby/Ruby org/jruby/RubyClass java/lang/Object])
  (getObject [] java/lang/Object))

(ffi.the org/jruby/internal/runtime/methods/DynamicMethod
  "[1]::[0]")

(ffi.the org/jruby/runtime/callsite/CacheEntry
  "[1]::[0]"
  (new [org/jruby/internal/runtime/methods/DynamicMethod int]))

(ffi.the org/jruby/RubyFixnum
  "[1]::[0]"
  (new [org/jruby/Ruby long])
  (getLongValue [] long))

(ffi.the org/jruby/RubyFloat
  "[1]::[0]"
  (new [org/jruby/Ruby double]))

(ffi.the org/jruby/RubyBoolean
  "[1]::[0]"
  ("static" newBoolean [org/jruby/Ruby boolean] org/jruby/RubyBoolean))

(ffi.the org/jruby/RubyNil
  "[1]::[0]"
  (new [org/jruby/Ruby]))

(ffi.the org/jruby/runtime/Block$Type
  "[1]::[0]"
  ("enum" PROC))

(ffi.the org/jruby/runtime/Signature
  "[1]::[0]"
  ("read_only" "static" THREE_ARGUMENTS org/jruby/runtime/Signature))

(ffi.the org/jruby/parser/StaticScope
  "[1]::[0]")

(ffi.the org/jruby/parser/StaticScopeFactory
  "[1]::[0]"
  (new [org/jruby/Ruby])
  (getDummyScope [] org/jruby/parser/StaticScope))

(ffi.the org/jruby/runtime/BlockBody
  "[1]::[0]")

(ffi.the org/jruby/runtime/Block
  "[1]::[0]"
  ("read_only" "static" NULL_BLOCK org/jruby/runtime/Block)
  ("read_only" type org/jruby/runtime/Block$Type)
  (getBody [] org/jruby/runtime/BlockBody))

(ffi.the org/jruby/RubyProc
  "[1]::[0]"
  ("static" newProc [org/jruby/Ruby org/jruby/runtime/Block org/jruby/runtime/Block$Type] org/jruby/RubyProc)
  (call [org/jruby/runtime/ThreadContext [org/jruby/runtime/builtin/IRubyObject]]
        "try" org/jruby/runtime/builtin/IRubyObject))

(every Translator
  (-> java/lang/Object (Try Any)))

(the (read_tuple read host_object)
  (-> Translator (org/jruby/RubyArray org/jruby/runtime/builtin/IRubyObject) (Try Any))
  (let [size (.natural (ffi.of_int (org/jruby/RubyArray::getLength [] host_object)))]
    (loop (again [idx 0
                  output (is (Array Any)
                             (array.empty size))])
      (if (n.< size idx)
          (when (org/jruby/RubyArray::get [(ffi.as_int (.integer idx))] host_object)
            {.:None}
            (again (++ idx) output)
            
            {.:Some value}
            (when (read value)
              {try.:Success lux_value}
              (again (++ idx) (array.has! idx lux_value output))

              failure
              failure))
          {try.:Success output}))))

(exception.the (unknown_kind_of_object object)
  (Exception java/lang/Object)
  (exception.report
   (list ["Class" (ffi.of_string (java/lang/Object::toString [] (java/lang/Object::getClass [] object)))]
         ["Object" (ffi.of_string (java/lang/Object::toString [] object))])))

(the (read_variant read host_object)
  (-> Translator org/jruby/RubyHash (Try Any))
  (when [(org/jruby/RubyHash::get [(ffi.as_string runtime.variant_tag_field)] host_object)
         (org/jruby/RubyHash::get [(ffi.as_string runtime.variant_flag_field)] host_object)
         (org/jruby/RubyHash::get [(ffi.as_string runtime.variant_value_field)] host_object)]
    [{.:Some tag} ?flag {.:Some value}]
    (monad.let try.monad
      [value (read value)]
      (pure [(is Any (|> tag
                         (as (-> Any java/lang/Long))
                         (java/lang/Long::intValue [])
                         (is java/lang/Integer)))
             (is Any
                 (when ?flag
                   {.:Some _}
                   ""

                   {.:None}
                   (is java/lang/Object (ffi.null))))
             (is Any value)]))

    _
    (exception.except ..unknown_kind_of_object [(ffi.is java/lang/Object host_object)])))

(exception.the .public nil_has_no_lux_representation)

(the (read host_object)
  Translator
  (`` (<| (if (ffi.null? host_object)
              (exception.except ..nil_has_no_lux_representation []))
          (,, (template.with [<class> <post_processing>]
                [(when (ffi.as <class> host_object)
                   {.:Some typed_object}
                   (`` (|> typed_object (,, (template.spliced <post_processing>))))

                   _)]

                [[java/lang/Boolean [{try.:Success}]]
                 [java/lang/Long [{try.:Success}]]
                 [java/lang/Double [{try.:Success}]]
                 [java/lang/String [{try.:Success}]]
                 [org/jruby/RubyFixnum [(org/jruby/RubyFixnum::getLongValue []) {try.:Success}]]
                 [org/jruby/RubyString [(org/jruby/RubyString::asJavaString []) {try.:Success}]]
                 [[java/lang/Object] [{try.:Success}]]
                 [org/jruby/RubyArray [(as (-> Any (org/jruby/RubyArray org/jruby/runtime/builtin/IRubyObject)))
                                       (read_tuple read)]]
                 [org/jruby/RubyHash [(read_variant read)]]
                 [org/jruby/RubySymbol [{try.:Success}]]
                 [org/jruby/RubyProc [{try.:Success}]]
                 [org/jruby/java/proxies/JavaProxy [(org/jruby/java/proxies/JavaProxy::getObject []) {try.:Success}]]]
                ))
          ... (exception.except ..unknown_kind_of_object [host_object])
          {try.:Success host_object}
          )))

(the ruby_nil
  org/jruby/runtime/builtin/IRubyObject
  (org/jruby/Ruby::getNil [] ..initial_ruby_runtime))

(the lux_unit
  org/jruby/runtime/builtin/IRubyObject
  (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
      (org/jruby/RubyString::newInternalFromJavaExternal [..initial_ruby_runtime (ffi.as_string "")])))

(the (wrapped_lux_value useful_object_class lux_structure)
  (-> (-> (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
          (-> java/lang/Object org/jruby/RubyClass))
      (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
      (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject))
  (function (again value)
    (`` (<| (,, (template.with [<when> <then>]
                  [(when (ffi.as <when> value)
                     {.:Some value}
                     (|> value
                         <then>
                         (ffi.is org/jruby/runtime/builtin/IRubyObject))

                     {.:None})]

                  [[[java/lang/Object] (<| lux_structure (as (-> Any java/lang/Object)))]
                   [java/lang/Boolean (<| org/jruby/RubyBoolean::newBoolean [..initial_ruby_runtime])]
                   [java/lang/Long (<| org/jruby/RubyFixnum::new [..initial_ruby_runtime])]
                   [java/lang/Double (<| org/jruby/RubyFloat::new [..initial_ruby_runtime])]
                   [java/lang/String (<| org/jruby/RubyString::newInternalFromJavaExternal [..initial_ruby_runtime])]
                   [org/jruby/runtime/builtin/IRubyObject (<|)]]
                  ))
            ... (as (-> Any org/jruby/runtime/builtin/IRubyObject) value)
            (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
                (org/jruby/java/proxies/JavaProxy::new [..initial_ruby_runtime
                                                        (useful_object_class again value)
                                                        (ffi.is java/lang/Object value)]))))))

(exception.the (invalid_variant_access field)
  (Exception Text)
  (exception.report
   (list ["Field" (%.text field)])))

(exception.the (invalid_index index)
  (Exception java/lang/Object)
  (exception.report
   (list ["Class" (|> index
                      (java/lang/Object::getClass [])
                      (java/lang/Object::toString [])
                      ffi.of_string)]
         ["Index" (|> index
                      (java/lang/Object::toString [])
                      ffi.of_string)])))

(ffi.the java/util/Arrays
  "[1]::[0]"
  ("static" [t] copyOfRange [[t] int int] [t]))

(exception.the (invalid_arity arity)
  (Exception Natural)
  (exception.report
   (list ["Arity" (%.natural arity)])))

(the (::call useful_object_class lux_structure value)
  (-> (-> (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
          (-> java/lang/Object org/jruby/RubyClass))
      (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
      (-> java/lang/Object org/jruby/internal/runtime/methods/DynamicMethod))
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "call")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (let [arity (ffi.length args)]
           (try.trusted
            (monad.let [! try.monad]
              [args (|> arity
                        list.domain
                        (list:each (function (_ index)
                                     (ffi.read! index args)))
                        (list.each' ! (|>> (ffi.is java/lang/Object) ..read)))
               output (when args
                        (list arg/0)
                        (pure ((as (-> Any (-> Any java/lang/Object)) value)
                               arg/0))
                        
                        (list arg/0 arg/1)
                        (pure ((as (-> Any (-> Any Any java/lang/Object)) value)
                               arg/0 arg/1))
                        
                        (list arg/0 arg/1 arg/2)
                        (pure ((as (-> Any (-> Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2))
                        
                        (list arg/0 arg/1 arg/2 arg/3)
                        (pure ((as (-> Any (-> Any Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2 arg/3))
                        
                        (list arg/0 arg/1 arg/2 arg/3 arg/4)
                        (pure ((as (-> Any (-> Any Any Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2 arg/3 arg/4))
                        
                        (list arg/0 arg/1 arg/2 arg/3 arg/4 arg/5)
                        (pure ((as (-> Any (-> Any Any Any Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2 arg/3 arg/4 arg/5))
                        
                        (list arg/0 arg/1 arg/2 arg/3 arg/4 arg/5 arg/6)
                        (pure ((as (-> Any (-> Any Any Any Any Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2 arg/3 arg/4 arg/5 arg/6))
                        
                        (list arg/0 arg/1 arg/2 arg/3 arg/4 arg/5 arg/6 arg/7)
                        (pure ((as (-> Any (-> Any Any Any Any Any Any Any Any java/lang/Object)) value)
                               arg/0 arg/1 arg/2 arg/3 arg/4 arg/5 arg/6 arg/7))
                        
                        _
                        (exception.except ..invalid_arity [arity]))]
              (pure (wrapped_lux_value (as_expected useful_object_class) lux_structure output)))))))))

(the (::access useful_object_class lux_structure value)
  (-> (-> (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
          (-> java/lang/Object org/jruby/RubyClass))
      (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
      (-> (Array java/lang/Object) org/jruby/internal/runtime/methods/DynamicMethod))
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "[]")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (let [member (ffi.read! 0 args)]
           (<| (when (ffi.as org/jruby/RubyFixnum member)
                 {.:Some member}
                 (when (array.item (.natural (ffi.of_long (org/jruby/RubyFixnum::getLongValue [] member)))
                                   value)
                   {try.:Success value}
                   (wrapped_lux_value (as_expected useful_object_class) lux_structure value)

                   {try.:Failure _}
                   ..ruby_nil)

                 {.:None})
               (when (ffi.as org/jruby/RubyString member)
                 {.:Some member}
                 (when (ffi.of_string (org/jruby/RubyString::asJavaString [] member))
                   runtime.variant_tag_field
                   (|> value
                       (array.item 0)
                       try.trusted
                       (as (-> Any java/lang/Integer))
                       (java/lang/Integer::longValue [])
                       [..initial_ruby_runtime]
                       org/jruby/RubyFixnum::new
                       (ffi.is org/jruby/runtime/builtin/IRubyObject))

                   runtime.variant_flag_field
                   (when (array.item 1 value)
                     {try.:Failure _}
                     ..ruby_nil
                     
                     {try.:Success flag}
                     ..lux_unit)
                   
                   runtime.variant_value_field
                   (when (array.item 2 value)
                     {try.:Success value}
                     (wrapped_lux_value (as_expected useful_object_class) lux_structure value)

                     {try.:Failure _}
                     (halt! (exception.error ..nil_has_no_lux_representation [])))

                   field
                   (halt! (exception.error ..invalid_variant_access [field])))
                 
                 {.:None})
               (when (ffi.as org/jruby/RubyRange member)
                 {.:Some member}
                 (when [(|> member (org/jruby/RubyRange::first [thread_context]) (ffi.as org/jruby/RubyFixnum))
                        (|> member (org/jruby/RubyRange::size [thread_context]) (ffi.as org/jruby/RubyFixnum))]
                   [{.:Some first} {.:Some size}]
                   (let [first (ffi.of_long (org/jruby/RubyFixnum::getLongValue [] first))
                         size (ffi.of_long (org/jruby/RubyFixnum::getLongValue [] size))]
                     (|> (java/util/Arrays::copyOfRange [value (ffi.as_int first) (ffi.as_int (i.+ first size))])
                         (as (for_any (_ it)
                               (-> (Array it) java/lang/Object)))
                         lux_structure))

                   _
                   (halt! (exception.error ..invalid_index [(ffi.is java/lang/Object member)])))

                 {.:None})
               (halt! (exception.error ..invalid_index [(ffi.is java/lang/Object member)]))))))))

(the (::= value)
  (-> java/lang/Object org/jruby/internal/runtime/methods/DynamicMethod)
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "==")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
             org/jruby/RubyBoolean::newBoolean
             [..initial_ruby_runtime]
             ffi.as_boolean
             (when (|> args
                       (ffi.read! 0)
                       (ffi.is java/lang/Object)
                       ..read)
               {try.:Success reference}
               (identical? (is Any reference) (is Any value))
               
               {try.:Failure error}
               false))))))

(the (::length value)
  (-> (Array java/lang/Object) org/jruby/internal/runtime/methods/DynamicMethod)
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "length")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (|> value
             array.size
             .integer
             ffi.as_long
             [..initial_ruby_runtime]
             org/jruby/RubyFixnum::new
             (ffi.is org/jruby/runtime/builtin/IRubyObject))))))

(the (::to_s value)
  (-> java/lang/Object org/jruby/internal/runtime/methods/DynamicMethod)
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "to_s")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (|> value
             debug.inspection
             ffi.as_string
             [..initial_ruby_runtime]
             org/jruby/RubyString::newInternalFromJavaExternal
             (ffi.is org/jruby/runtime/builtin/IRubyObject))))))

(exception.the (invalid_operation method)
  (Exception Text)
  (exception.report
   (list ["Method" (%.text method)])))

(the (::respond_to? value)
  (-> java/lang/Object org/jruby/internal/runtime/methods/DynamicMethod)
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "respond_to?")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (when (|> args
                   (ffi.read! 0)
                   (ffi.as org/jruby/RubySymbol))
           {.:Some method}
           (|> (when (|> method
                         (org/jruby/RubySymbol::asJavaString [])
                         ffi.of_string)
                 (^.or "==" "equal?"
                       "to_s" "inspect"
                       "[]" "length" "respond_to?"
                       ... "to_hash"
                       )
                 true
                 
                 _
                 false)
               ffi.as_boolean
               [..initial_ruby_runtime]
               org/jruby/RubyBoolean::newBoolean
               (ffi.is org/jruby/runtime/builtin/IRubyObject))

           {.:None}
           (halt! (exception.error ..invalid_operation ["respond_to?"])))))))

(the (::to_a as_ruby value)
  (-> (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
      (-> (Array java/lang/Object) org/jruby/internal/runtime/methods/DynamicMethod))
  (<| (ffi.is org/jruby/internal/runtime/methods/DynamicMethod)
      (ffi.object [] org/jruby/internal/runtime/methods/DynamicMethod []
        [java/lang/String (ffi.as_string "to_a")]

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (dup this [])
         org/jruby/internal/runtime/methods/DynamicMethod
         (undefined))

        (org/jruby/internal/runtime/methods/DynamicMethod
         [] (call this [thread_context org/jruby/runtime/ThreadContext
                        self org/jruby/runtime/builtin/IRubyObject
                        module org/jruby/RubyModule
                        method java/lang/String
                        args [org/jruby/runtime/builtin/IRubyObject]
                        block org/jruby/runtime/Block])
         org/jruby/runtime/builtin/IRubyObject
         (as (-> org/jruby/RubyArray
                 org/jruby/runtime/builtin/IRubyObject)
             (array!.mix (function (_ address item it)
                           (exec
                             (org/jruby/RubyArray::add [(as_ruby item)] it)
                             it))
                         (org/jruby/RubyArray::new [..initial_ruby_runtime (ffi.as_int (.integer (array.size value)))])
                         value))))))

(exception.the (unknown_method method)
  (Exception Text)
  (exception.report
   (list ["Method" (%.text method)])))

(the (useful_object_class lux_structure value)
  (-> (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
      (-> java/lang/Object org/jruby/RubyClass))
  (<| (ffi.is org/jruby/RubyClass)
      (ffi.object [] org/jruby/RubyClass []
        [org/jruby/Ruby ..initial_ruby_runtime]

        (org/jruby/RubyClass
         [] (searchWithCache this [method java/lang/String])
         org/jruby/runtime/callsite/CacheEntry
         (when (ffi.of_string method)
           "call"
           (org/jruby/runtime/callsite/CacheEntry::new [(::call useful_object_class lux_structure value) (ffi.as_int +0)])
           
           "[]"
           (org/jruby/runtime/callsite/CacheEntry::new [(::access useful_object_class lux_structure (as_expected value)) (ffi.as_int +1)])

           (^.or "==" "equal?")
           (org/jruby/runtime/callsite/CacheEntry::new [(::= value) (ffi.as_int +2)])

           (^.or "count" "length" "size")
           (org/jruby/runtime/callsite/CacheEntry::new [(::length (as_expected value)) (ffi.as_int +3)])

           (^.or "to_s" "inspect")
           (org/jruby/runtime/callsite/CacheEntry::new [(::to_s value) (ffi.as_int +4)])

           "respond_to?"
           (org/jruby/runtime/callsite/CacheEntry::new [(::respond_to? value) (ffi.as_int +5)])

           "to_a"
           (org/jruby/runtime/callsite/CacheEntry::new [(::to_a lux_structure (as_expected value)) (ffi.as_int +6)])

           method
           (halt! (exception.error ..unknown_method [method])))))))

(the (lux_structure value)
  (-> java/lang/Object org/jruby/runtime/builtin/IRubyObject)
  (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
      (org/jruby/java/proxies/JavaProxy::new [..initial_ruby_runtime
                                              (useful_object_class lux_structure value)
                                              value])))

(exception.the (cannot_apply_a_non_function object)
  (Exception java/lang/Object)
  (exception.report
   (list ["Non-function" (ffi.of_string (java/lang/Object::toString [] object))])))

(the macro!
  (-> Any (Maybe org/jruby/RubyProc))
  (|>> (as (-> Any java/lang/Object))
       (ffi.as org/jruby/RubyProc)))

(the to_host
  (-> Any org/jruby/runtime/builtin/IRubyObject)
  (|>> (as (-> Any java/lang/Object))
       ..lux_structure))

(the (call_macro inputs lux macro)
  (-> (List Code) Lux org/jruby/RubyProc
      (Try (Try [Lux (List Code)])))
  (as_expected
   (monad.let try.monad
     [expansion (org/jruby/RubyProc::call [(!ruby_thread_context)
                                           (ffi.array org/jruby/runtime/builtin/IRubyObject
                                                      [(..to_host inputs)
                                                       (..to_host lux)])]
                                          macro)]
     (..read (ffi.is java/lang/Object expansion)))))

(the (expander macro inputs lux)
  Expander
  (when (macro! macro)
    {.:Some macro}
    (when (call_macro inputs lux macro)
      {try.:Success output}
      (|> output
          (as (-> Any java/lang/Object))
          ..read
          (as (-> Any (Try (Try [Lux (List Code)])))))

      {try.:Failure error}
      {try.:Failure error})

    {.:None}
    (exception.except ..cannot_apply_a_non_function [(as (-> Any java/lang/Object) macro)])))

(the host
  (IO (Host _.Expression _.Statement))
  (io (let [value (is (-> (_.Code Any) (Try Any))
                      (function (_ code)
                        (monad.let try.monad
                          [output (org/jruby/embed/ScriptingContainer::runScriptlet [(ffi.as_string (_.code code))] ..interpreter)]
                          (..read (maybe.else (as (-> Any java/lang/Object) [])
                                              output)))))]
        (is (Host _.Expression _.Statement)
            (implementation
             (the (evaluate [_ code])
               (value code))

             (the execute value)

             (the (define context custom [_ input])
               (let [global (maybe.else (reference.artifact context)
                                        custom)
                     @global (_.global global)]
                 (monad.let try.monad
                   [.let [definition (_.; (_.set (list @global) input))]
                    value (value definition)]
                   (pure [global value definition]))))

             (the (ingest context content)
               (|> content
                   (by utf8.binary of)
                   try.trusted
                   (as (-> Any _.Statement))))

             (the (re_learn context custom content)
               (value content))
             
             (the (re_load context custom content)
               (monad.let try.monad
                 [_ (value content)]
                 (value (_.global (reference.artifact context))))))))))

(for .jvm (these (exception.the .public (invaid_phase_application [partial_application arity])
                   (Exception [(List Any) (List Any)])
                   (exception.report
                    (list ["Partial Application" (%.natural (list.size partial_application))]
                          ["Arity" (%.natural (list.size arity))])))

                 (the proc_type
                   org/jruby/runtime/Block$Type
                   (|> (org/jruby/runtime/Block::NULL_BLOCK)
                       org/jruby/runtime/Block::type))

                 (the phase_block_signature
                   org/jruby/runtime/Signature
                   (org/jruby/runtime/Signature::THREE_ARGUMENTS))

                 (the dummy_static_scope
                   org/jruby/parser/StaticScope
                   (|> (org/jruby/parser/StaticScopeFactory::new [(!ruby_runtime)])
                       (org/jruby/parser/StaticScopeFactory::getDummyScope [])))

                 (the phase_block_body
                   org/jruby/runtime/BlockBody
                   (<| (ffi.is org/jruby/runtime/BlockBody)
                       (ffi.object [] org/jruby/runtime/BlockBody []
                         [org/jruby/runtime/Signature ..phase_block_signature]
                         ... Methods
                         (org/jruby/runtime/BlockBody
                          [] (getFile this [])
                          java/lang/String
                          (ffi.as_string "YOLO"))
                         
                         (org/jruby/runtime/BlockBody
                          [] (getLine this [])
                          int
                          (ffi.as_int (number.base_16 "+ABC,123")))
                         
                         (org/jruby/runtime/BlockBody
                          [] (getStaticScope this [])
                          org/jruby/parser/StaticScope
                          ..dummy_static_scope)

                         (org/jruby/runtime/BlockBody
                          [] (setStaticScope self [_ org/jruby/parser/StaticScope])
                          void
                          [])

                         (org/jruby/runtime/BlockBody
                          [] (doYield self [_ org/jruby/runtime/ThreadContext
                                            _ org/jruby/runtime/Block
                                            _ org/jruby/runtime/builtin/IRubyObject])
                          org/jruby/runtime/builtin/IRubyObject
                          (undefined))

                         (org/jruby/runtime/BlockBody
                          [] (doYield self [_ org/jruby/runtime/ThreadContext
                                            _ org/jruby/runtime/Block
                                            _ [org/jruby/runtime/builtin/IRubyObject]
                                            _ org/jruby/runtime/builtin/IRubyObject])
                          org/jruby/runtime/builtin/IRubyObject
                          (undefined))
                         )))

                 (the (host_phase partial_application phase)
                   (for_any (_ s i o)
                     (-> (Stack Any) (Phase s i o)
                         org/jruby/RubyProc))
                   (let [block (ffi.object [] org/jruby/runtime/Block []
                                 [org/jruby/runtime/BlockBody ..phase_block_body]
                                 ... Methods
                                 (org/jruby/runtime/Block
                                  [] (call this [_thread_context org/jruby/runtime/ThreadContext
                                                 inputs [org/jruby/runtime/builtin/IRubyObject]
                                                 _block org/jruby/runtime/Block])
                                  org/jruby/runtime/builtin/IRubyObject
                                  (<| try.trusted
                                      (monad.let [! try.monad]
                                        [inputs (|> inputs
                                                    (list.of_array {.:None})
                                                    (list.each' ! (|>> (ffi.is java/lang/Object) ..read)))])
                                      (when inputs
                                        ... It seems that org/jruby/runtime/Block::call can misbehave when getting called with a Lux state value.
                                        (list info source provenance current_module modules scopes type_context expected seed eval)
                                        (when partial_application
                                          (stack partial/0 partial/1)
                                          (pure (..to_host ((as (-> Any (-> Any Any Any Any)) phase)
                                                            partial/0
                                                            partial/1
                                                            [info source provenance current_module modules scopes type_context expected seed eval])))

                                          _
                                          (exception.except ..invaid_phase_application [(view.of list.stack partial_application) inputs]))
                                        
                                        (list)
                                        {try.:Success (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
                                                          (host_phase partial_application phase))}
                                        
                                        (list input/0)
                                        (when partial_application
                                          (stack)
                                          (pure (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
                                                    (host_phase (stack input/0) phase)))
                                          
                                          (stack partial/0)
                                          (pure (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
                                                    (host_phase (stack partial/0 input/0) phase)))
                                          
                                          (stack partial/0 partial/1)
                                          (pure (..to_host ((as (-> Any (-> Any Any Any Any)) phase)
                                                            partial/0
                                                            partial/1
                                                            input/0)))

                                          _
                                          (exception.except ..invaid_phase_application [(view.of list.stack partial_application) inputs]))
                                        
                                        (list input/0 input/1)
                                        (when partial_application
                                          (stack)
                                          (pure (<| (ffi.is org/jruby/runtime/builtin/IRubyObject)
                                                    (host_phase (stack input/0 input/1) phase)))
                                          
                                          (stack partial/0)
                                          (pure (..to_host ((as (-> Any (-> Any Any Any Any)) phase)
                                                            partial/0
                                                            input/0
                                                            input/1)))
                                          
                                          _
                                          (exception.except ..invaid_phase_application [(view.of list.stack partial_application) inputs]))
                                        
                                        (list input/0 input/1 input/2)
                                        (when partial_application
                                          (stack)
                                          (pure (..to_host ((as (-> Any (-> Any Any Any Any)) phase)
                                                            input/0
                                                            input/1
                                                            input/2)))
                                          
                                          _
                                          (exception.except ..invaid_phase_application [(view.of list.stack partial_application) inputs]))
                                        
                                        _
                                        (exception.except ..invaid_phase_application [(view.of list.stack partial_application) inputs])))))]
                     (org/jruby/RubyProc::newProc [(!ruby_runtime) block ..proc_type])))

                 (the phase_wrapper
                   phase.Wrapper
                   (for .jvm (..host_phase (stack))
                        .ruby (|>>)))

                 (the extender
                   Extender
                   ... TODO: Stop relying on coercions ASAP.
                   (<| (function (_ handler
                                    phase
                                    archive parameters
                                    state))
                       (as (-> Any Try))
                       try.trusted
                       (as (-> Any Try))
                       (monad.let try.monad
                         [handler (try.of_maybe "Not an extension handler."
                                                (..macro! handler))
                          output (org/jruby/RubyProc::call [(!ruby_thread_context)
                                                            (ffi.array org/jruby/runtime/builtin/IRubyObject
                                                                       [(as (-> Any org/jruby/runtime/builtin/IRubyObject) (phase_wrapper phase))
                                                                        (..to_host archive)
                                                                        (..to_host parameters)
                                                                        (..to_host state)])]
                                                           handler)]
                         (..read (ffi.is java/lang/Object output))))))

     .ruby
     (the extender
       Extender
       (|>> as_expected)))

(the platform
  (IO (Platform Register _.Expression _.Statement))
  (monad.let io.monad
    [host ..host]
    (pure [platform.:file_system (file.future file.default)
           platform.:host host
           platform.:phase ruby.expression
           platform.:runtime runtime.translate
           platform.:phase_wrapper ..phase_wrapper
           platform.:write (|>> _.code (by utf8.binary as))])))

(the (lux_program context program)
  (Program _.Expression _.Statement)
  (let [normal_runtime? (_.do "const_defined?"
                          (list (_.string (_.code _.command_line_arguments)))
                          {.:None}
                          (is _.CVar (_.manual "Object")))]
    (_.; (_.of_lambda (list (runtime.lux//program_args (_.? normal_runtime?
                                                            _.command_line_arguments
                                                            (_.array (list))))
                            _.nil)
                      program))))

(the (declare_success! _)
  (-> Any (Future Any))
  (future.soon (by world/environment.default exit +0)))

(the (lux_compiler it)
  (-> Any platform.Custom)
  (undefined))

(the _
  (program [service cli.service]
    (exec
      (monad.let future.monad
        [_ (/.compiler ..lux_compiler
                       (context.ruby (cli.target service))
                       ..expander
                       analysis.bundle
                       ..platform
                       translation.bundle
                       extension.empty
                       ..lux_program
                       (reference.constant ruby/reference.system)
                       ..extender
                       service
                       [packager.package
                        "program"])]
        (..declare_success! []))
      (io.io []))))
