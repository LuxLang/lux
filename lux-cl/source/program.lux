... This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
... If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

(.using
 [lux (.except)
  [program (.only program)]
  ["[0]" ffi]
  ["[0]" debug]
  [abstract
   ["[0]" monad]]
  [control
   ["[0]" pipe]
   ["[0]" maybe]
   ["[0]" io (.only IO io)]]
  [error
   ["[0]" try (.only Try)]
   ["[0]" exception (.only Exception)]]
  [concurrency
   ["[0]" future (.only Future)]]
  [data
   ["[0]" text (.only \n)
    ["%" \\injection]
    ["[0]" encoding]]
   [collection
    ["[0]" array]]]
  [macro
   ["[0]" template]]
  [math
   [number
    [/64
     ["n" natural]]]]
  ["[0]" world
   ["[0]" file]
   ["[1]/[0]" program]]
  ["[0]" target (.only)
   ["_" common_lisp]]
  [meta
   [compiler
    [phase (.only Operation Phase)]
    [reference
     [variable (.only Register)]]
    [language
     [lux
      [program (.only Program)]
      [translation (.only Context Host)]
      ["[0]" synthesis]
      [analysis
       [macro (.only Expander)]]
      [phase
       ["[0]" extension (.only Extender Handler)
        ["[1]/[0]" bundle]
        ["[0]" analysis
         ["[1]" common_lisp]]
        ["[0]" translation
         ["[1]" common_lisp]]]
       [translation
        ["[0]" reference]
        ["[0]" common_lisp
         ["[0]" runtime]]]]]]
    [default
     ["[0]" platform (.only Platform)]]
    [meta
     ["[0]" packager
      ["[1]" script]]]]]]
 [program
  ["/" compositor
   ["[1][0]" cli]
   ["[1][0]" static]]])

(ffi.the java/lang/String
  "[1]:[0]")

(ffi.the (java/lang/Class a)
  "[1]:[0]"
  ("static" forName [java/lang/String] "try" (java/lang/Class java/lang/Object)))

(ffi.the java/lang/Object
  "[1]:[0]"
  (toString [] java/lang/String)
  (getClass [] (java/lang/Class java/lang/Object)))

(ffi.the java/lang/Long
  "[1]:[0]"
  (intValue [] java/lang/Integer))

(ffi.the java/lang/Integer
  "[1]:[0]"
  (longValue [] long))

(ffi.the java/lang/Number
  "[1]:[0]"
  (intValue [] java/lang/Integer)
  (longValue [] long)
  (doubleValue [] double))

(ffi.the org/armedbear/lisp/LispObject
  "[1]:[0]"
  (length [] int)
  (NTH [int] org/armedbear/lisp/LispObject)
  (SVREF [int] org/armedbear/lisp/LispObject)
  (elt [int] org/armedbear/lisp/LispObject)
  (execute [org/armedbear/lisp/LispObject org/armedbear/lisp/LispObject] "try" org/armedbear/lisp/LispObject))

... The org/armedbear/lisp/Interpreter must be imported before the
... other ones, because there is an order dependency in their static initialization.
(ffi.the org/armedbear/lisp/Interpreter
  "[1]:[0]"
  ("static" getInstance [] org/armedbear/lisp/Interpreter)
  ("static" createInstance [] "?" org/armedbear/lisp/Interpreter)
  (eval [java/lang/String] "try" org/armedbear/lisp/LispObject))

(ffi.the org/armedbear/lisp/Symbol
  "[1]:[0]"
  ("static" T org/armedbear/lisp/Symbol))

(ffi.the org/armedbear/lisp/DoubleFloat
  "[1]:[0]"
  (new [double])
  (doubleValue [] double))

(ffi.the org/armedbear/lisp/SimpleString
  "[1]:[0]"
  (new [java/lang/String])
  (getStringValue [] java/lang/String))

(ffi.the org/armedbear/lisp/LispInteger
  "[1]:[0]")

(ffi.the org/armedbear/lisp/Bignum
  "[1]:[0]"
  (longValue [] long)
  ("static" getInstance [long] org/armedbear/lisp/LispInteger))

(ffi.the org/armedbear/lisp/Fixnum
  "[1]:[0]"
  (longValue [] long)
  ("static" getInstance [int] org/armedbear/lisp/Fixnum))

(ffi.the org/armedbear/lisp/Nil
  "[1]:[0]"
  ("static" NIL org/armedbear/lisp/Symbol))

(ffi.the org/armedbear/lisp/SimpleVector
  "[1]:[0]")

(ffi.the org/armedbear/lisp/Cons
  "[1]:[0]")

(ffi.the org/armedbear/lisp/Closure
  "[1]:[0]")

(ffi.interface LuxADT
               (getValue [] java/lang/Object))

(ffi.the program/LuxADT
  "[1]:[0]"
  (getValue [] java/lang/Object))

(template.with [<name>]
  [(exception.the (<name> object)
     (Exception java/lang/Object)
     (exception.report
      (list ["Class" (java/lang/Object:toString (java/lang/Object:getClass object))]
            ["Object" (java/lang/Object:toString object)])))]

  [[unknown_kind_of_object]
   [cannot_apply_a_non_function]]
  )

(the host_bit
  (-> Bit
      org/armedbear/lisp/LispObject)
  (|>> (pipe.when
         0b (org/armedbear/lisp/Nil:NIL)
         1b (org/armedbear/lisp/Symbol:T))))

(the (host_value value)
  (-> Any
      org/armedbear/lisp/LispObject)
  (let [to_sub (is (-> Any org/armedbear/lisp/LispObject)
                   (function (_ sub_value)
                     (let [sub_value (as java/lang/Object sub_value)]
                       (`` (<| (,, (template.with [<type> <then>]
                                     [(when (ffi.is <type> sub_value)
                                        {.:Some sub_value}
                                        (`` (|> sub_value (,, (template.splice <then>))))

                                        {.:None})]

                                     [[[java/lang/Object] [host_value]]
                                      [java/lang/Boolean [..host_bit]]
                                      [java/lang/Integer [java/lang/Integer:longValue org/armedbear/lisp/Fixnum:getInstance]]
                                      [java/lang/Long [org/armedbear/lisp/Bignum:getInstance]]
                                      [java/lang/Double [org/armedbear/lisp/DoubleFloat:new]]
                                      [java/lang/String [org/armedbear/lisp/SimpleString:new]]]
                                     ))
                               ... else
                               (as org/armedbear/lisp/LispObject sub_value))))))]
    (`` (ffi.object [] org/armedbear/lisp/LispObject [program/LuxADT]
          []
          ... Methods
          (program/LuxADT
           [] (getValue self []) java/lang/Object
           (as java/lang/Object value))

          (org/armedbear/lisp/LispObject
           [] (length self [])
           int
           (|> value
               (as (Array java/lang/Object))
               array.size
               (as java/lang/Long)
               java/lang/Number:intValue))

          (,, (template.with [<name>]
                [(org/armedbear/lisp/LispObject
                  [] (<name> self [idx int])
                  org/armedbear/lisp/LispObject
                  (when (array.read! (|> idx java/lang/Integer:longValue (as Natural))
                                     (as (Array java/lang/Object) value))
                    {.:Some sub}
                    (to_sub sub)

                    {.:None}
                    (org/armedbear/lisp/Nil:NIL)))]

                [[NTH]
                 [SVREF]
                 [elt]]
                ))
          ))))

(every (Reader it)
  (-> it
      (Try Any)))

(the (read_variant read host_object)
  (-> (Reader org/armedbear/lisp/LispObject)
      (Reader org/armedbear/lisp/Cons))
  (monad.let try.monad
    [tag (read (org/armedbear/lisp/LispObject:NTH +0 host_object))
     value (read (org/armedbear/lisp/LispObject:NTH +2 host_object))]
    (wrap [(java/lang/Long:intValue (as java/lang/Long tag))
           (when (ffi.is org/armedbear/lisp/Nil (org/armedbear/lisp/LispObject:NTH +1 host_object))
             {.:Some _}
             (is Any (ffi.null))

             _
             (is Any synthesis.unit))
           value])))

(the (read_tuple read host_object)
  (-> (Reader org/armedbear/lisp/LispObject)
      (Reader org/armedbear/lisp/SimpleVector))
  (let [size (.natural (org/armedbear/lisp/LispObject:length host_object))]
    (loop (of [idx 0
               output (as (Array Any) (array.new size))])
      (if (n.< size idx)
          ... TODO: Start using "SVREF" instead of "elt" ASAP
          (when (read (org/armedbear/lisp/LispObject:elt (.integer idx) host_object))
            {try.:Failure error}
            {try.:Failure error}

            {try.:Success member}
            (of (++ idx) (array.write! idx (as Any member) output)))
          {try.:Success output}))))

(the (read host_object)
  (Reader org/armedbear/lisp/LispObject)
  (`` (<| (,, (template.with [<class> <post_processing>]
                [(when (ffi.is <class> host_object)
                   {.:Some host_object}
                   (`` (|> host_object (,, (template.splice <post_processing>))))

                   {.:None})]

                [[org/armedbear/lisp/Bignum [org/armedbear/lisp/Bignum:longValue {try.:Success}]]
                 [org/armedbear/lisp/Fixnum [org/armedbear/lisp/Fixnum:longValue {try.:Success}]]
                 [org/armedbear/lisp/DoubleFloat [org/armedbear/lisp/DoubleFloat:doubleValue {try.:Success}]]
                 [org/armedbear/lisp/SimpleString [org/armedbear/lisp/SimpleString:getStringValue {try.:Success}]]
                 [org/armedbear/lisp/Cons [(read_variant read)]]
                 [org/armedbear/lisp/SimpleVector [(read_tuple read)]]
                 [org/armedbear/lisp/Nil [(pipe.new {try.:Success false} [])]]
                 [org/armedbear/lisp/Closure [{try.:Success}]]
                 [program/LuxADT [program/LuxADT:getValue {try.:Success}]]]
                ))
          (when (ffi.is org/armedbear/lisp/Symbol host_object)
            {.:Some host_object}
            (if (identical? (org/armedbear/lisp/Symbol:T) host_object)
                {try.:Success true}
                (exception.throw ..unknown_kind_of_object (as java/lang/Object host_object)))

            {.:None})
          ... else
          (exception.throw ..unknown_kind_of_object (as java/lang/Object host_object))
          )))

(the ensure_macro
  (-> Macro
      (Maybe org/armedbear/lisp/Closure))
  (|>> (as java/lang/Object)
       (ffi.is org/armedbear/lisp/Closure)))

(the (call_macro inputs lux macro)
  (-> (Stack Code) Lux org/armedbear/lisp/Closure
      (Try (Try [Lux (Stack Code)])))
  (monad.let try.monad
    [raw_output (org/armedbear/lisp/LispObject:execute (..host_value inputs) (..host_value lux) macro)]
    (as (Try (Try [Lux (Stack Code)]))
        (..read raw_output))))

(the (expander macro inputs lux)
  Expander
  (when (ensure_macro macro)
    {.:Some macro}
    (call_macro inputs lux macro)

    {.:None}
    (exception.throw ..cannot_apply_a_non_function (as java/lang/Object macro))))

(the host
  (IO (Host (_.Expression Any) (_.Expression Any)))
  (io (let [_ (org/armedbear/lisp/Interpreter:createInstance)
            interpreter (org/armedbear/lisp/Interpreter:getInstance)
            value (is (-> (_.Code Any) (Try Any))
                      (function (_ code)
                        (monad.let try.monad
                          [host_value (org/armedbear/lisp/Interpreter:eval (_.code code) interpreter)]
                          (read host_value))))]
        (is (Host (_.Expression Any) (_.Expression Any))
            (structure
             (the (evaluate! context code)
               (value code))
             
             (the (execute! input)
               (org/armedbear/lisp/Interpreter:eval (_.code input) interpreter))
             
             (the (define! context input)
               (let [global (reference.artifact context)
                     @global (_.var global)]
                 (monad.let try.monad
                   [:let [definition (_.defparameter @global input)]
                    _ (org/armedbear/lisp/Interpreter:eval (_.code definition) interpreter)
                    value (value @global)]
                   (wrap [global value definition]))))

             (the (ingest context content)
               (|> content
                   (by encoding.utf8 of)
                   try.trusted
                   (as (_.Expression Any))))

             (the (re_learn context content)
               (value content))
             
             (the (re_load context content)
               (monad.let try.monad
                 [_ (value content)]
                 (value (_.var (reference.artifact context)))))
             )))))

(the platform
  (IO (Platform [_.Tag Register] (_.Expression Any) (_.Expression Any)))
  (monad.let io.monad
    [host ..host]
    (wrap [platform.:file_system (file.future file.default)
           platform.:host host
           platform.:phase common_lisp.translate
           platform.:runtime runtime.translate
           platform.:write (|>> _.code (by encoding.utf8 as))])))

(the get_ecl_cli_inputs
  (let [@idx (_.var "i")]
    (_.call/* (_.var "loop")
              (stack (_.var "for") @idx
                     (_.var "from") (_.int +0)
                     (_.var "below") (_.call/* (_.var "si:argc") (stack))
                     (_.var "collect") (_.call/* (_.var "si:argv") (stack @idx))))))

(the (program context program)
  (Program (_.Expression Any) (_.Expression Any))
  (let [raw_inputs (_.progn (stack (_.conditional+ (stack "clisp") (_.var "ext:*args*"))
                                   (_.conditional+ (stack "sbcl") (_.var "sb-ext:*posix-argv*"))
                                   (_.conditional+ (stack "clozure") (_.call/* (_.var "ccl:command-line-arguments") (stack)))
                                   (_.conditional+ (stack "gcl") (_.var "si:*command-args*"))
                                   (_.conditional+ (stack "ecl") ..get_ecl_cli_inputs)
                                   (_.conditional+ (stack "cmu") (_.var "extensions:*command-line-strings*"))
                                   (_.conditional+ (stack "allegro") (_.call/* (_.var "sys:command-line-arguments") (stack)))
                                   (_.conditional+ (stack "lispworks") (_.var "sys:*line-arguments-list*"))
                                   (_.list/* (stack))))]
    (_.call/2 [(runtime.lux//program_args raw_inputs) _.nil] program)))

(target.for target.jvm
            (the extender
              Extender
              ... TODO: Stop relying on coercions ASAP.
              (<| (as Extender)
                  (function (@self handler))
                  (as Handler)
                  (function (@self phase))
                  (as Phase)
                  (function (@self archive parameters))
                  (as Operation)
                  (function (@self state))
                  (as Try)
                  try.trusted
                  (as Try)
                  {try.:Failure "TODO: Extender"}))

            .common_lisp
            (the (extender handler)
              Extender
              (as_expected handler)))

(the (declare_success! _)
  (-> Any
      (Future Any))
  (future.soon (by world/program.default exit +0)))

(the (then pre post)
  (-> (_.Expression Any) (_.Expression Any)
      (_.Expression Any))
  (_.manual (text (_.code pre)
                  \n
                  (_.code post))))

(the (scope body)
  (-> (_.Expression Any)
      (_.Expression Any))
  (let [@program (_.var "lux_program")]
    (all ..then
         (_.defun @program (_.args (stack)) body)
         (_.call/* @program (stack))
         )))

(`` (the _
      (program [service /cli.service]
        (let [extension ".cl"]
          (monad.let io.monad
            [platform ..platform]
            (exec (monad.let future.monad
                    [_ (/.compiler [/static.:host .common_lisp
                                    /static.:host_module_extension extension
                                    /static.:target (/cli.target service)
                                    /static.:artifact_extension extension]
                                   ..expander
                                   analysis.bundle
                                   (io.io platform)
                                   translation.bundle
                                   extension/bundle.empty
                                   ..program
                                   [(And _.Tag Register) (type_literal (_.Expression Any)) (type_literal (_.Expression Any))]
                                   ..extender
                                   service
                                   [(packager.package (_.manual "")
                                                      _.code
                                                      ..then
                                                      ..scope)
                                    (text "program" extension)])]
                    (..declare_success! []))
              (io.io [])))))))
